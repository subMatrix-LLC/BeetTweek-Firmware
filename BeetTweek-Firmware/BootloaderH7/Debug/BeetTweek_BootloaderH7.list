
BeetTweek_BootloaderH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d6c4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd4  0801d964  0801d964  0002d964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e538  0801e538  0002e538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000018  0801e540  0801e540  0002e540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0801e558  0801e558  0002e558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  24000000  0801e560  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000044a0  24000070  0801e5d0  00030070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004510  0801e5d0  00034510  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003009e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00047606  00000000  00000000  000300e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00008d9f  00000000  00000000  000776e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ad8  00000000  00000000  00080488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002157  00000000  00000000  00082f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00046bac  00000000  00000000  000850b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004d384  00000000  00000000  000cbc63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001831d6  00000000  00000000  00118fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000ba2c  00000000  00000000  0029c1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000089  00000000  00000000  002a7bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801d94c 	.word	0x0801d94c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	0801d94c 	.word	0x0801d94c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <_ZN10MathExtras5ColorC1Ev>:
/// RGBA color.
class Color
{
public:
    /// Construct with default values (opaque white.)
    Color() noexcept :
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
        r_(1.0f),
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800068a:	601a      	str	r2, [r3, #0]
        g_(1.0f),
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000692:	605a      	str	r2, [r3, #4]
        b_(1.0f),
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800069a:	609a      	str	r2, [r3, #8]
        a_(1.0f)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80006a2:	60da      	str	r2, [r3, #12]
    {
    }
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4618      	mov	r0, r3
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <_ZN15LEDPanelManager20ClockIndexToLEDIndexENS_14RINGIDENTIFIEREi>:



	//clockwise starting at top conversion to led index.
	// indexes wrap around if "out of bounds"
	int ClockIndexToLEDIndex(RINGIDENTIFIER ring, int centerIndex)
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b08c      	sub	sp, #48	; 0x30
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	460b      	mov	r3, r1
 80006bc:	607a      	str	r2, [r7, #4]
 80006be:	72fb      	strb	r3, [r7, #11]
	{
		centerIndex = MathExtras::WrapMax<int>(centerIndex, LED_NUM_LEDS_PER_RING);
 80006c0:	2128      	movs	r1, #40	; 0x28
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 f9d2 	bl	8000a6c <_ZN10MathExtras7WrapMaxIiEET_S1_S1_>
 80006c8:	6078      	str	r0, [r7, #4]

		int midoffset = 3 + panelReversed_*(LED_NUM_LEDS_PER_RING/2);
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80006d0:	4613      	mov	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4413      	add	r3, r2
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	3303      	adds	r3, #3
 80006da:	627b      	str	r3, [r7, #36]	; 0x24

		if(ring == RINGIDENTIFIER_OUTER){
 80006dc:	7afb      	ldrb	r3, [r7, #11]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d117      	bne.n	8000712 <_ZN15LEDPanelManager20ClockIndexToLEDIndexENS_14RINGIDENTIFIEREi+0x60>
			int lowIdx = LED_NUM_LEDS_PANEL;
 80006e2:	2308      	movs	r3, #8
 80006e4:	617b      	str	r3, [r7, #20]

			//int highIdx = lowIdx + LED_NUM_LEDS_PER_RING;

			int finalIdx = lowIdx + midoffset + centerIndex;
 80006e6:	697a      	ldr	r2, [r7, #20]
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	4413      	add	r3, r2
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	4413      	add	r3, r2
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c

			if(finalIdx >= lowIdx + LED_NUM_LEDS_PER_RING)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	3327      	adds	r3, #39	; 0x27
 80006f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006f8:	429a      	cmp	r2, r3
 80006fa:	dd08      	ble.n	800070e <_ZN15LEDPanelManager20ClockIndexToLEDIndexENS_14RINGIDENTIFIEREi+0x5c>
			{
				int diff = finalIdx - (lowIdx + LED_NUM_LEDS_PER_RING);
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	3328      	adds	r3, #40	; 0x28
 8000700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	613b      	str	r3, [r7, #16]

				finalIdx = lowIdx + diff;
 8000706:	697a      	ldr	r2, [r7, #20]
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	4413      	add	r3, r2
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			return finalIdx;
 800070e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000710:	e01d      	b.n	800074e <_ZN15LEDPanelManager20ClockIndexToLEDIndexENS_14RINGIDENTIFIEREi+0x9c>
		}
		else if(ring == RINGIDENTIFIER_INNER){
 8000712:	7afb      	ldrb	r3, [r7, #11]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d119      	bne.n	800074c <_ZN15LEDPanelManager20ClockIndexToLEDIndexENS_14RINGIDENTIFIEREi+0x9a>
			int lowIdx = LED_NUM_LEDS_PANEL + LED_NUM_LEDS_PER_RING;
 8000718:	2330      	movs	r3, #48	; 0x30
 800071a:	623b      	str	r3, [r7, #32]

			int highIdx = lowIdx + LED_NUM_LEDS_PER_RING;
 800071c:	6a3b      	ldr	r3, [r7, #32]
 800071e:	3328      	adds	r3, #40	; 0x28
 8000720:	61fb      	str	r3, [r7, #28]

			int finalIdx = highIdx - midoffset - centerIndex - 1;
 8000722:	69fa      	ldr	r2, [r7, #28]
 8000724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000726:	1ad2      	subs	r2, r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	3b01      	subs	r3, #1
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28

			if(finalIdx < lowIdx)
 8000730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	429a      	cmp	r2, r3
 8000736:	da07      	bge.n	8000748 <_ZN15LEDPanelManager20ClockIndexToLEDIndexENS_14RINGIDENTIFIEREi+0x96>
			{
				int diff = finalIdx - ( lowIdx );
 8000738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800073a:	6a3b      	ldr	r3, [r7, #32]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	61bb      	str	r3, [r7, #24]

				finalIdx = highIdx + diff;
 8000740:	69fa      	ldr	r2, [r7, #28]
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	4413      	add	r3, r2
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			return finalIdx;
 8000748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074a:	e000      	b.n	800074e <_ZN15LEDPanelManager20ClockIndexToLEDIndexENS_14RINGIDENTIFIEREi+0x9c>
		}
		else
		{
			return 0;
 800074c:	2300      	movs	r3, #0
		}

	}
 800074e:	4618      	mov	r0, r3
 8000750:	3730      	adds	r7, #48	; 0x30
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <_ZN15LEDPanelManager25SetLEDRingRangeLinear_IntENS_14RINGIDENTIFIEREiiPN10MathExtras5ColorES3_f>:
	//watch out if setting very large clock-index ranges.  as the algorithm is worst case O(LED_NUM_LEDS_PER_RING*LED_NUM_LEDS_PER_RING)
	//assumes leds are currently set to 0,0,0.
	//circleStartColor is color when clock indexes are close to each other
	//circleEndColor is color when clock indexes are far from each other and overlapping.
	//circleInterpPercentage is percentage of circle the color ramp should take up. ie 1 would be the ramp ramps every cycle, 0.25 would be ramp up 1/4 cycle
	void SetLEDRingRangeLinear_Int(RINGIDENTIFIER ring,
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b093      	sub	sp, #76	; 0x4c
 800075c:	af00      	add	r7, sp, #0
 800075e:	6178      	str	r0, [r7, #20]
 8000760:	60fa      	str	r2, [r7, #12]
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	ed87 0a01 	vstr	s0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	74fb      	strb	r3, [r7, #19]
		//int clockIndexStartLocal = MathExtras::WrapMinMax(clockIndexStart, 0, LED_NUM_LEDS_PER_RING);
		//int clockIndexEndLocal   = MathExtras::WrapMinMax(clockIndexEnd, 0, LED_NUM_LEDS_PER_RING);


		//adjust for backwards
		int dir = 1;
 800076c:	2301      	movs	r3, #1
 800076e:	647b      	str	r3, [r7, #68]	; 0x44
		if(clockIndexStart > clockIndexEnd)
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	429a      	cmp	r2, r3
 8000776:	dd02      	ble.n	800077e <_ZN15LEDPanelManager25SetLEDRingRangeLinear_IntENS_14RINGIDENTIFIEREiiPN10MathExtras5ColorES3_f+0x26>
		{
			dir = -1;
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	647b      	str	r3, [r7, #68]	; 0x44
		}

		//iterate over all leds in ring:
		for(int clockIdxIterator = 0; clockIdxIterator < LED_NUM_LEDS_PER_RING; clockIdxIterator++)
 800077e:	2300      	movs	r3, #0
 8000780:	643b      	str	r3, [r7, #64]	; 0x40
 8000782:	e0b7      	b.n	80008f4 <_ZN15LEDPanelManager25SetLEDRingRangeLinear_IntENS_14RINGIDENTIFIEREiiPN10MathExtras5ColorES3_f+0x19c>
		{
			int ledOff = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
			int ledIdx = ClockIndexToLEDIndex(ring, clockIdxIterator);
 8000788:	7cfb      	ldrb	r3, [r7, #19]
 800078a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800078c:	4619      	mov	r1, r3
 800078e:	6978      	ldr	r0, [r7, #20]
 8000790:	f7ff ff8f 	bl	80006b2 <_ZN15LEDPanelManager20ClockIndexToLEDIndexENS_14RINGIDENTIFIEREi>
 8000794:	6338      	str	r0, [r7, #48]	; 0x30

			//interpolate between circle colors
			MathExtras::Color interpolatedColor;
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff6e 	bl	800067c <_ZN10MathExtras5ColorC1Ev>



			//compute "projected index"
			int projIdx = clockIndexEnd;
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	63bb      	str	r3, [r7, #56]	; 0x38

			//TODO There should be better math to step local projIdx down to clockIdxIterator
			while(MathExtras::WrapMinMax(projIdx, 0, LED_NUM_LEDS_PER_RING) != clockIdxIterator)
 80007a4:	e003      	b.n	80007ae <_ZN15LEDPanelManager25SetLEDRingRangeLinear_IntENS_14RINGIDENTIFIEREiiPN10MathExtras5ColorES3_f+0x56>
			{
				projIdx -= dir;
 80007a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	63bb      	str	r3, [r7, #56]	; 0x38
			while(MathExtras::WrapMinMax(projIdx, 0, LED_NUM_LEDS_PER_RING) != clockIdxIterator)
 80007ae:	2228      	movs	r2, #40	; 0x28
 80007b0:	2100      	movs	r1, #0
 80007b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80007b4:	f000 f978 	bl	8000aa8 <_ZN10MathExtras10WrapMinMaxIiEET_S1_S1_S1_>
 80007b8:	4602      	mov	r2, r0
 80007ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007bc:	4293      	cmp	r3, r2
 80007be:	bf14      	ite	ne
 80007c0:	2301      	movne	r3, #1
 80007c2:	2300      	moveq	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1ed      	bne.n	80007a6 <_ZN15LEDPanelManager25SetLEDRingRangeLinear_IntENS_14RINGIDENTIFIEREiiPN10MathExtras5ColorES3_f+0x4e>
			}



			if(dir == 1)
 80007ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d105      	bne.n	80007dc <_ZN15LEDPanelManager25SetLEDRingRangeLinear_IntENS_14RINGIDENTIFIEREiiPN10MathExtras5ColorES3_f+0x84>
				if(projIdx >= clockIndexStart)
 80007d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	db01      	blt.n	80007dc <_ZN15LEDPanelManager25SetLEDRingRangeLinear_IntENS_14RINGIDENTIFIEREiiPN10MathExtras5ColorES3_f+0x84>
					ledOff = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(dir == -1)
 80007dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e2:	d105      	bne.n	80007f0 <_ZN15LEDPanelManager25SetLEDRingRangeLinear_IntENS_14RINGIDENTIFIEREiiPN10MathExtras5ColorES3_f+0x98>
				if(projIdx <= clockIndexStart)
 80007e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	dc01      	bgt.n	80007f0 <_ZN15LEDPanelManager25SetLEDRingRangeLinear_IntENS_14RINGIDENTIFIEREiiPN10MathExtras5ColorES3_f+0x98>
					ledOff = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c

			if(ledOff == 0)
 80007f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d17b      	bne.n	80008ee <_ZN15LEDPanelManager25SetLEDRingRangeLinear_IntENS_14RINGIDENTIFIEREiiPN10MathExtras5ColorES3_f+0x196>
			{
				int dist = projIdx - clockIndexStart;
 80007f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c

				float t = MathExtras::ClampInclusive(float(dist), -LED_NUM_LEDS_PER_RING*circleInterpPercentage,
 80007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	edd7 7a01 	vldr	s15, [r7, #4]
 800080c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8000908 <_ZN15LEDPanelManager25SetLEDRingRangeLinear_IntENS_14RINGIDENTIFIEREiiPN10MathExtras5ColorES3_f+0x1b0>
 8000810:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000814:	edd7 7a01 	vldr	s15, [r7, #4]
 8000818:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 800090c <_ZN15LEDPanelManager25SetLEDRingRangeLinear_IntENS_14RINGIDENTIFIEREiiPN10MathExtras5ColorES3_f+0x1b4>
 800081c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000820:	eeb0 1a67 	vmov.f32	s2, s15
 8000824:	eef0 0a66 	vmov.f32	s1, s13
 8000828:	eeb0 0a47 	vmov.f32	s0, s14
 800082c:	f000 f8f4 	bl	8000a18 <_ZN10MathExtras14ClampInclusiveIfEET_S1_S1_S1_>
 8000830:	eef0 6a40 	vmov.f32	s13, s0
						LED_NUM_LEDS_PER_RING*circleInterpPercentage)/float(LED_NUM_LEDS_PER_RING*circleInterpPercentage);
 8000834:	edd7 7a01 	vldr	s15, [r7, #4]
 8000838:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800090c <_ZN15LEDPanelManager25SetLEDRingRangeLinear_IntENS_14RINGIDENTIFIEREiiPN10MathExtras5ColorES3_f+0x1b4>
 800083c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000844:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

				if(t < 0.0f)
 8000848:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800084c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000854:	d505      	bpl.n	8000862 <_ZN15LEDPanelManager25SetLEDRingRangeLinear_IntENS_14RINGIDENTIFIEREiiPN10MathExtras5ColorES3_f+0x10a>
					t = -t;
 8000856:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800085a:	eef1 7a67 	vneg.f32	s15, s15
 800085e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34


				interpolatedColor = *circleEndColor;
 8000862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000864:	f107 041c 	add.w	r4, r7, #28
 8000868:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800086a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				interpolatedColor = interpolatedColor.Lerp(*circleStartColor, t);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8000876:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000878:	4618      	mov	r0, r3
 800087a:	f01b fbd8 	bl	801c02e <_ZNK10MathExtras5Color4LerpERKS0_f>
 800087e:	eeb0 6a40 	vmov.f32	s12, s0
 8000882:	eef0 6a60 	vmov.f32	s13, s1
 8000886:	eeb0 7a41 	vmov.f32	s14, s2
 800088a:	eef0 7a61 	vmov.f32	s15, s3
 800088e:	ed87 6a07 	vstr	s12, [r7, #28]
 8000892:	edc7 6a08 	vstr	s13, [r7, #32]
 8000896:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800089a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28



				WS2812_SETLED(ledIdx,
 800089e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008a0:	b2d8      	uxtb	r0, r3
						interpolatedColor.r_*LED_BASE_BRIGHTNESS_255,
 80008a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80008a6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80008aa:	ee67 7a87 	vmul.f32	s15, s15, s14
				WS2812_SETLED(ledIdx,
 80008ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008b2:	edc7 7a00 	vstr	s15, [r7]
 80008b6:	783b      	ldrb	r3, [r7, #0]
 80008b8:	b2d9      	uxtb	r1, r3
						interpolatedColor.g_*LED_BASE_BRIGHTNESS_255,
 80008ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80008be:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80008c2:	ee67 7a87 	vmul.f32	s15, s15, s14
				WS2812_SETLED(ledIdx,
 80008c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008ca:	edc7 7a00 	vstr	s15, [r7]
 80008ce:	783b      	ldrb	r3, [r7, #0]
 80008d0:	b2da      	uxtb	r2, r3
						interpolatedColor.b_*LED_BASE_BRIGHTNESS_255);
 80008d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80008d6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80008da:	ee67 7a87 	vmul.f32	s15, s15, s14
				WS2812_SETLED(ledIdx,
 80008de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008e2:	edc7 7a00 	vstr	s15, [r7]
 80008e6:	783b      	ldrb	r3, [r7, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f01b ff51 	bl	801c790 <_Z13WS2812_SETLEDhhhh>
		for(int clockIdxIterator = 0; clockIdxIterator < LED_NUM_LEDS_PER_RING; clockIdxIterator++)
 80008ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008f0:	3301      	adds	r3, #1
 80008f2:	643b      	str	r3, [r7, #64]	; 0x40
 80008f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008f6:	2b27      	cmp	r3, #39	; 0x27
 80008f8:	f77f af44 	ble.w	8000784 <_ZN15LEDPanelManager25SetLEDRingRangeLinear_IntENS_14RINGIDENTIFIEREiiPN10MathExtras5ColorES3_f+0x2c>
			}



		}
	}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	374c      	adds	r7, #76	; 0x4c
 8000902:	46bd      	mov	sp, r7
 8000904:	bd90      	pop	{r4, r7, pc}
 8000906:	bf00      	nop
 8000908:	c2200000 	.word	0xc2200000
 800090c:	42200000 	.word	0x42200000

08000910 <_ZN15LEDPanelManager27SetLEDRingRangeLinear_FloatENS_14RINGIDENTIFIEREffPN10MathExtras5ColorES3_f>:


	//overload for floating point clock index [0.0 , 1.0]
	void SetLEDRingRangeLinear_Float(RINGIDENTIFIER ring,
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af02      	add	r7, sp, #8
 8000916:	61f8      	str	r0, [r7, #28]
 8000918:	ed87 0a05 	vstr	s0, [r7, #20]
 800091c:	edc7 0a04 	vstr	s1, [r7, #16]
 8000920:	60fa      	str	r2, [r7, #12]
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	ed87 1a01 	vstr	s2, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	76fb      	strb	r3, [r7, #27]
			float clockEnd,
			MathExtras::Color* circleEndColor,
			MathExtras::Color* circleStartColor, float circleInterpPercentage)
	{

		SetLEDRingRangeLinear_Int(ring, int(((clockStart)*LED_NUM_LEDS_PER_RING)+0.5f), int(((clockEnd)*LED_NUM_LEDS_PER_RING)+0.5f), circleEndColor, circleStartColor, circleInterpPercentage);
 800092c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000930:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000980 <_ZN15LEDPanelManager27SetLEDRingRangeLinear_FloatENS_14RINGIDENTIFIEREffPN10MathExtras5ColorES3_f+0x70>
 8000934:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000938:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800093c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000940:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000944:	edd7 7a04 	vldr	s15, [r7, #16]
 8000948:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000980 <_ZN15LEDPanelManager27SetLEDRingRangeLinear_FloatENS_14RINGIDENTIFIEREffPN10MathExtras5ColorES3_f+0x70>
 800094c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000950:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000954:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800095c:	7ef9      	ldrb	r1, [r7, #27]
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	ed97 0a01 	vldr	s0, [r7, #4]
 800096a:	ee17 3a90 	vmov	r3, s15
 800096e:	ee16 2a90 	vmov	r2, s13
 8000972:	69f8      	ldr	r0, [r7, #28]
 8000974:	f7ff fef0 	bl	8000758 <_ZN15LEDPanelManager25SetLEDRingRangeLinear_IntENS_14RINGIDENTIFIEREiiPN10MathExtras5ColorES3_f>
	}
 8000978:	bf00      	nop
 800097a:	3720      	adds	r7, #32
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	42200000 	.word	0x42200000

08000984 <InitProgress>:


extern "C" {

	void InitProgress()
	{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
		WS2812_INIT();
 8000988:	f01b fe76 	bl	801c678 <_Z11WS2812_INITv>



	}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <DeInitProgess>:
	void DeInitProgess()
	{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

		WS2812_DEINIT();
 8000994:	f01b fed6 	bl	801c744 <_Z13WS2812_DEINITv>
	}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <UpdateProgressPercent>:


	void UpdateProgressPercent(int percent, float r, float g, float b)
	{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80009a8:	edc7 0a01 	vstr	s1, [r7, #4]
 80009ac:	ed87 1a00 	vstr	s2, [r7]
		WS2812_SETALLLED(0, 0, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	2000      	movs	r0, #0
 80009b6:	f01b ffb9 	bl	801c92c <_Z16WS2812_SETALLLEDhhh>
		MathExtras::Color color;
 80009ba:	f107 0310 	add.w	r3, r7, #16
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe5c 	bl	800067c <_ZN10MathExtras5ColorC1Ev>
		color.r_ = r;
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	613b      	str	r3, [r7, #16]
		color.g_ = g;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	617b      	str	r3, [r7, #20]
		color.b_ = b;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	61bb      	str	r3, [r7, #24]
		LEDManager.SetLEDRingRangeLinear_Float(LEDPanelManager::RINGIDENTIFIER_OUTER, 0, 0.01f*percent, (MathExtras::Color*)&color, (MathExtras::Color*)&color, 1.0f);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	ee07 3a90 	vmov	s15, r3
 80009d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009da:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000a0c <UpdateProgressPercent+0x70>
 80009de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	f107 0210 	add.w	r2, r7, #16
 80009ea:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80009ee:	eef0 0a67 	vmov.f32	s1, s15
 80009f2:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8000a10 <UpdateProgressPercent+0x74>
 80009f6:	2101      	movs	r1, #1
 80009f8:	4806      	ldr	r0, [pc, #24]	; (8000a14 <UpdateProgressPercent+0x78>)
 80009fa:	f7ff ff89 	bl	8000910 <_ZN15LEDPanelManager27SetLEDRingRangeLinear_FloatENS_14RINGIDENTIFIEREffPN10MathExtras5ColorES3_f>

		WS2812_SWAP_BUFFERS();
 80009fe:	f01b feab 	bl	801c758 <_Z19WS2812_SWAP_BUFFERSv>
	}
 8000a02:	bf00      	nop
 8000a04:	3720      	adds	r7, #32
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	3c23d70a 	.word	0x3c23d70a
 8000a10:	00000000 	.word	0x00000000
 8000a14:	2400008c 	.word	0x2400008c

08000a18 <_ZN10MathExtras14ClampInclusiveIfEET_S1_S1_S1_>:
	{
	    return min + WrapMax(x - min, max - min);
	}

	///clamp x to the given range inclusive (min and max are included in result)
	template<typename T> inline T ClampInclusive(T x, T min, T max)
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000a22:	edc7 0a02 	vstr	s1, [r7, #8]
 8000a26:	ed87 1a01 	vstr	s2, [r7, #4]
	{
		if(x < min)
 8000a2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a3a:	d502      	bpl.n	8000a42 <_ZN10MathExtras14ClampInclusiveIfEET_S1_S1_S1_+0x2a>
			x = min;
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	e00a      	b.n	8000a58 <_ZN10MathExtras14ClampInclusiveIfEET_S1_S1_S1_+0x40>
		else if(x > max)
 8000a42:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a46:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a52:	dd01      	ble.n	8000a58 <_ZN10MathExtras14ClampInclusiveIfEET_S1_S1_S1_+0x40>
			x = max;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	60fb      	str	r3, [r7, #12]


		return x;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	ee07 3a90 	vmov	s15, r3
	}
 8000a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_ZN10MathExtras7WrapMaxIiEET_S1_S1_>:
	template<typename T> inline T WrapMax(T x, T max)
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
		if( x < 0 || x >= max)//shortcut check
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db03      	blt.n	8000a84 <_ZN10MathExtras7WrapMaxIiEET_S1_S1_+0x18>
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	db0c      	blt.n	8000a9e <_ZN10MathExtras7WrapMaxIiEET_S1_S1_+0x32>
			return Mod(max + Mod(x, max), max);
 8000a84:	6839      	ldr	r1, [r7, #0]
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 f824 	bl	8000ad4 <_ZN10MathExtras3ModIiLPv0EEET_S2_S2_>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	4413      	add	r3, r2
 8000a92:	6839      	ldr	r1, [r7, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 f81d 	bl	8000ad4 <_ZN10MathExtras3ModIiLPv0EEET_S2_S2_>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	e000      	b.n	8000aa0 <_ZN10MathExtras7WrapMaxIiEET_S1_S1_+0x34>
			return x;
 8000a9e:	687b      	ldr	r3, [r7, #4]
	}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <_ZN10MathExtras10WrapMinMaxIiEET_S1_S1_S1_>:
	template<typename T> inline T WrapMinMax(T x, T min, T max)
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
	    return min + WrapMax(x - min, max - min);
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	1ad0      	subs	r0, r2, r3
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f7ff ffd3 	bl	8000a6c <_ZN10MathExtras7WrapMaxIiEET_S1_S1_>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4413      	add	r3, r2
	}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <_ZN10MathExtras3ModIiLPv0EEET_S2_S2_>:
	inline T Mod(T x, T y) { return x % y; }
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	fb93 f2f2 	sdiv	r2, r3, r2
 8000ae6:	6839      	ldr	r1, [r7, #0]
 8000ae8:	fb01 f202 	mul.w	r2, r1, r2
 8000aec:	1a9b      	subs	r3, r3, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <_Z41__static_initialization_and_destruction_0ii>:

}
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d107      	bne.n	8000b1c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d102      	bne.n	8000b1c <_Z41__static_initialization_and_destruction_0ii+0x20>
LEDPanelManager LEDManager;
 8000b16:	4809      	ldr	r0, [pc, #36]	; (8000b3c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000b18:	f01b ff26 	bl	801c968 <_ZN15LEDPanelManagerC1Ev>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d107      	bne.n	8000b32 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d102      	bne.n	8000b32 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000b2c:	4803      	ldr	r0, [pc, #12]	; (8000b3c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000b2e:	f01b ff4d 	bl	801c9cc <_ZN15LEDPanelManagerD1Ev>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2400008c 	.word	0x2400008c

08000b40 <_GLOBAL__sub_I_LEDManager>:
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f7ff ffd7 	bl	8000afc <_Z41__static_initialization_and_destruction_0ii>
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <_GLOBAL__sub_D_LEDManager>:
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff ffcf 	bl	8000afc <_Z41__static_initialization_and_destruction_0ii>
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2224      	movs	r2, #36	; 0x24
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f01c fa0f 	bl	801cf90 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_DAC1_Init+0x70>)
 8000b74:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <MX_DAC1_Init+0x74>)
 8000b76:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b78:	4815      	ldr	r0, [pc, #84]	; (8000bd0 <MX_DAC1_Init+0x70>)
 8000b7a:	f002 fea3 	bl	80038c4 <HAL_DAC_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b84:	f000 ff70 	bl	8001a68 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b94:	2301      	movs	r3, #1
 8000b96:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <MX_DAC1_Init+0x70>)
 8000ba4:	f002 febe 	bl	8003924 <HAL_DAC_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bae:	f000 ff5b 	bl	8001a68 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2210      	movs	r2, #16
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_DAC1_Init+0x70>)
 8000bba:	f002 feb3 	bl	8003924 <HAL_DAC_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000bc4:	f000 ff50 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	240001d4 	.word	0x240001d4
 8000bd4:	40007400 	.word	0x40007400

08000bd8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a18      	ldr	r2, [pc, #96]	; (8000c58 <HAL_DAC_MspInit+0x80>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d129      	bne.n	8000c4e <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_DAC_MspInit+0x84>)
 8000bfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c00:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <HAL_DAC_MspInit+0x84>)
 8000c02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_DAC_MspInit+0x84>)
 8000c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_DAC_MspInit+0x84>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <HAL_DAC_MspInit+0x84>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_DAC_MspInit+0x84>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = SWITCH_LEVEL_DAC_Pin|GPIO_PIN_5;
 8000c36:	2330      	movs	r3, #48	; 0x30
 8000c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_DAC_MspInit+0x88>)
 8000c4a:	f007 f89d 	bl	8007d88 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40007400 	.word	0x40007400
 8000c5c:	58024400 	.word	0x58024400
 8000c60:	58020000 	.word	0x58020000

08000c64 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream1
  */
void MX_DMA_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c6a:	4b3e      	ldr	r3, [pc, #248]	; (8000d64 <MX_DMA_Init+0x100>)
 8000c6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c70:	4a3c      	ldr	r2, [pc, #240]	; (8000d64 <MX_DMA_Init+0x100>)
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c7a:	4b3a      	ldr	r3, [pc, #232]	; (8000d64 <MX_DMA_Init+0x100>)
 8000c7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c88:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <MX_DMA_Init+0x100>)
 8000c8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c8e:	4a35      	ldr	r2, [pc, #212]	; (8000d64 <MX_DMA_Init+0x100>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c98:	4b32      	ldr	r3, [pc, #200]	; (8000d64 <MX_DMA_Init+0x100>)
 8000c9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 8000ca6:	4b30      	ldr	r3, [pc, #192]	; (8000d68 <MX_DMA_Init+0x104>)
 8000ca8:	4a30      	ldr	r2, [pc, #192]	; (8000d6c <MX_DMA_Init+0x108>)
 8000caa:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Request = DMA_REQUEST_MEM2MEM;
 8000cac:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <MX_DMA_Init+0x104>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <MX_DMA_Init+0x104>)
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000cb8:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <MX_DMA_Init+0x104>)
 8000cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cbe:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 8000cc0:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <MX_DMA_Init+0x104>)
 8000cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc6:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cc8:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <MX_DMA_Init+0x104>)
 8000cca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cce:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cd0:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <MX_DMA_Init+0x104>)
 8000cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd6:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <MX_DMA_Init+0x104>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_LOW;
 8000cde:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <MX_DMA_Init+0x104>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ce4:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <MX_DMA_Init+0x104>)
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <MX_DMA_Init+0x104>)
 8000cec:	2203      	movs	r2, #3
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_DMA_Init+0x104>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_DMA_Init+0x104>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 8000cfc:	481a      	ldr	r0, [pc, #104]	; (8000d68 <MX_DMA_Init+0x104>)
 8000cfe:	f002 fff7 	bl	8003cf0 <HAL_DMA_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_DMA_Init+0xa8>
  {
    Error_Handler();
 8000d08:	f000 feae 	bl	8001a68 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	200b      	movs	r0, #11
 8000d12:	f002 fd71 	bl	80037f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f002 fd98 	bl	800384c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	200c      	movs	r0, #12
 8000d22:	f002 fd69 	bl	80037f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f002 fd90 	bl	800384c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	200d      	movs	r0, #13
 8000d32:	f002 fd61 	bl	80037f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f002 fd88 	bl	800384c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	200e      	movs	r0, #14
 8000d42:	f002 fd59 	bl	80037f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f002 fd80 	bl	800384c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2038      	movs	r0, #56	; 0x38
 8000d52:	f002 fd51 	bl	80037f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d56:	2038      	movs	r0, #56	; 0x38
 8000d58:	f002 fd78 	bl	800384c <HAL_NVIC_EnableIRQ>

}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	58024400 	.word	0x58024400
 8000d68:	240001e8 	.word	0x240001e8
 8000d6c:	40020428 	.word	0x40020428

08000d70 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d86:	4bc1      	ldr	r3, [pc, #772]	; (800108c <MX_GPIO_Init+0x31c>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4abf      	ldr	r2, [pc, #764]	; (800108c <MX_GPIO_Init+0x31c>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4bbd      	ldr	r3, [pc, #756]	; (800108c <MX_GPIO_Init+0x31c>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	623b      	str	r3, [r7, #32]
 8000da2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da4:	4bb9      	ldr	r3, [pc, #740]	; (800108c <MX_GPIO_Init+0x31c>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4ab8      	ldr	r2, [pc, #736]	; (800108c <MX_GPIO_Init+0x31c>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4bb5      	ldr	r3, [pc, #724]	; (800108c <MX_GPIO_Init+0x31c>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	61fb      	str	r3, [r7, #28]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dc2:	4bb2      	ldr	r3, [pc, #712]	; (800108c <MX_GPIO_Init+0x31c>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	4ab0      	ldr	r2, [pc, #704]	; (800108c <MX_GPIO_Init+0x31c>)
 8000dca:	f043 0320 	orr.w	r3, r3, #32
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd2:	4bae      	ldr	r3, [pc, #696]	; (800108c <MX_GPIO_Init+0x31c>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	f003 0320 	and.w	r3, r3, #32
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de0:	4baa      	ldr	r3, [pc, #680]	; (800108c <MX_GPIO_Init+0x31c>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de6:	4aa9      	ldr	r2, [pc, #676]	; (800108c <MX_GPIO_Init+0x31c>)
 8000de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df0:	4ba6      	ldr	r3, [pc, #664]	; (800108c <MX_GPIO_Init+0x31c>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4ba3      	ldr	r3, [pc, #652]	; (800108c <MX_GPIO_Init+0x31c>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	4aa1      	ldr	r2, [pc, #644]	; (800108c <MX_GPIO_Init+0x31c>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0e:	4b9f      	ldr	r3, [pc, #636]	; (800108c <MX_GPIO_Init+0x31c>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4b9b      	ldr	r3, [pc, #620]	; (800108c <MX_GPIO_Init+0x31c>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	4a9a      	ldr	r2, [pc, #616]	; (800108c <MX_GPIO_Init+0x31c>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2c:	4b97      	ldr	r3, [pc, #604]	; (800108c <MX_GPIO_Init+0x31c>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e3a:	4b94      	ldr	r3, [pc, #592]	; (800108c <MX_GPIO_Init+0x31c>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	4a92      	ldr	r2, [pc, #584]	; (800108c <MX_GPIO_Init+0x31c>)
 8000e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4a:	4b90      	ldr	r3, [pc, #576]	; (800108c <MX_GPIO_Init+0x31c>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e58:	4b8c      	ldr	r3, [pc, #560]	; (800108c <MX_GPIO_Init+0x31c>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	4a8b      	ldr	r2, [pc, #556]	; (800108c <MX_GPIO_Init+0x31c>)
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e68:	4b88      	ldr	r3, [pc, #544]	; (800108c <MX_GPIO_Init+0x31c>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV8313_EN1_Pin|DRV8313_EN2_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2130      	movs	r1, #48	; 0x30
 8000e7a:	4885      	ldr	r0, [pc, #532]	; (8001090 <MX_GPIO_Init+0x320>)
 8000e7c:	f007 fba8 	bl	80085d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|DRV8313_EN3_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2105      	movs	r1, #5
 8000e84:	4883      	ldr	r0, [pc, #524]	; (8001094 <MX_GPIO_Init+0x324>)
 8000e86:	f007 fba3 	bl	80085d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV8313_A_nRESET_GPIO_Port, DRV8313_A_nRESET_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e90:	4881      	ldr	r0, [pc, #516]	; (8001098 <MX_GPIO_Init+0x328>)
 8000e92:	f007 fb9d 	bl	80085d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCM3168_RST_GPIO_Port, PCM3168_RST_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9c:	487f      	ldr	r0, [pc, #508]	; (800109c <MX_GPIO_Init+0x32c>)
 8000e9e:	f007 fb97 	bl	80085d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MULTI_BOARD_BOOT_GPIO_Port, MULTI_BOARD_BOOT_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea8:	487d      	ldr	r0, [pc, #500]	; (80010a0 <MX_GPIO_Init+0x330>)
 8000eaa:	f007 fb91 	bl	80085d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000eae:	f24e 03c3 	movw	r3, #57539	; 0xe0c3
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4873      	ldr	r0, [pc, #460]	; (8001090 <MX_GPIO_Init+0x320>)
 8000ec4:	f006 ff60 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF3 PF4 PF5
                           PF10 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000ec8:	f242 433c 	movw	r3, #9276	; 0x243c
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	486e      	ldr	r0, [pc, #440]	; (8001098 <MX_GPIO_Init+0x328>)
 8000ede:	f006 ff53 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	486b      	ldr	r0, [pc, #428]	; (80010a4 <MX_GPIO_Init+0x334>)
 8000ef6:	f006 ff47 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_15;
 8000efa:	f248 4302 	movw	r3, #33794	; 0x8402
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f00:	2303      	movs	r3, #3
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4866      	ldr	r0, [pc, #408]	; (80010a8 <MX_GPIO_Init+0x338>)
 8000f10:	f006 ff3a 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DRV8313_EN1_Pin|DRV8313_EN2_Pin;
 8000f14:	2330      	movs	r3, #48	; 0x30
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4859      	ldr	r0, [pc, #356]	; (8001090 <MX_GPIO_Init+0x320>)
 8000f2c:	f006 ff2c 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|DRV8313_EN3_Pin;
 8000f30:	2305      	movs	r3, #5
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	4853      	ldr	r0, [pc, #332]	; (8001094 <MX_GPIO_Init+0x324>)
 8000f48:	f006 ff1e 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV8313_A_nRESET_Pin;
 8000f4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DRV8313_A_nRESET_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	4619      	mov	r1, r3
 8000f64:	484c      	ldr	r0, [pc, #304]	; (8001098 <MX_GPIO_Init+0x328>)
 8000f66:	f006 ff0f 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = DRV8313_A_nFAULT_Pin|PUSH_BUTTON_FUNC_Pin|PUSH_BUTTON_FUNC2_Pin;
 8000f6a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4846      	ldr	r0, [pc, #280]	; (8001098 <MX_GPIO_Init+0x328>)
 8000f80:	f006 ff02 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f84:	f248 03ff 	movw	r3, #33023	; 0x80ff
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	4619      	mov	r1, r3
 8000f98:	4841      	ldr	r0, [pc, #260]	; (80010a0 <MX_GPIO_Init+0x330>)
 8000f9a:	f006 fef5 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_IN_1_Pin|PUSH_BUTTON_IN_2_Pin|PUSH_BUTTON_IN_3_Pin|PUSH_BUTTON_IN_4_Pin
 8000f9e:	f24f 7380 	movw	r3, #63360	; 0xf780
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUSH_BUTTON_OUT_1_Pin|PUSH_BUTTON_OUT_2_Pin|PUSH_BUTTON_OUT_3_Pin|PUSH_BUTTON_OUT_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	483e      	ldr	r0, [pc, #248]	; (80010ac <MX_GPIO_Init+0x33c>)
 8000fb4:	f006 fee8 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1;
 8000fb8:	f640 0303 	movw	r3, #2051	; 0x803
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4837      	ldr	r0, [pc, #220]	; (80010ac <MX_GPIO_Init+0x33c>)
 8000fce:	f006 fedb 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB4 PB5
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
 8000fd2:	f24c 2330 	movw	r3, #49712	; 0xc230
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	482b      	ldr	r0, [pc, #172]	; (8001094 <MX_GPIO_Init+0x324>)
 8000fe8:	f006 fece 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PCM3168_RST_Pin;
 8000fec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PCM3168_RST_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001002:	4619      	mov	r1, r3
 8001004:	4825      	ldr	r0, [pc, #148]	; (800109c <MX_GPIO_Init+0x32c>)
 8001006:	f006 febf 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = PCM3168_OVF_Pin|DIP_SW_3_Pin;
 800100a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	481f      	ldr	r0, [pc, #124]	; (800109c <MX_GPIO_Init+0x32c>)
 8001020:	f006 feb2 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD13 PD14 PD15
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001024:	f24e 43e0 	movw	r3, #58592	; 0xe4e0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102a:	2303      	movs	r3, #3
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	4818      	ldr	r0, [pc, #96]	; (800109c <MX_GPIO_Init+0x32c>)
 800103a:	f006 fea5 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DIP_SW_2_Pin|DIP_SW_4_Pin|SD_SENSE_Pin;
 800103e:	2313      	movs	r3, #19
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001046:	2301      	movs	r3, #1
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	4812      	ldr	r0, [pc, #72]	; (800109c <MX_GPIO_Init+0x32c>)
 8001052:	f006 fe99 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = MOTOR_T_NRST_Pin|SELF_T_NRST_Pin;
 8001056:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	4619      	mov	r1, r3
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_GPIO_Init+0x330>)
 800106c:	f006 fe8c 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MULTI_BOARD_BOOT_Pin;
 8001070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MULTI_BOARD_BOOT_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	e012      	b.n	80010b0 <MX_GPIO_Init+0x340>
 800108a:	bf00      	nop
 800108c:	58024400 	.word	0x58024400
 8001090:	58020800 	.word	0x58020800
 8001094:	58020400 	.word	0x58020400
 8001098:	58021400 	.word	0x58021400
 800109c:	58020c00 	.word	0x58020c00
 80010a0:	58021800 	.word	0x58021800
 80010a4:	58021c00 	.word	0x58021c00
 80010a8:	58020000 	.word	0x58020000
 80010ac:	58021000 	.word	0x58021000
 80010b0:	4809      	ldr	r0, [pc, #36]	; (80010d8 <MX_GPIO_Init+0x368>)
 80010b2:	f006 fe69 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CROSS_BOARD_GPIO_Pin;
 80010b6:	2340      	movs	r3, #64	; 0x40
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CROSS_BOARD_GPIO_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_GPIO_Init+0x36c>)
 80010ca:	f006 fe5d 	bl	8007d88 <HAL_GPIO_Init>

}
 80010ce:	bf00      	nop
 80010d0:	3738      	adds	r7, #56	; 0x38
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	58021800 	.word	0x58021800
 80010dc:	58020400 	.word	0x58020400

080010e0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_I2C1_Init+0x74>)
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <MX_I2C1_Init+0x78>)
 80010e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_I2C1_Init+0x74>)
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <MX_I2C1_Init+0x7c>)
 80010ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_I2C1_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_I2C1_Init+0x74>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_I2C1_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_I2C1_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_I2C1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_I2C1_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_I2C1_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800111a:	480e      	ldr	r0, [pc, #56]	; (8001154 <MX_I2C1_Init+0x74>)
 800111c:	f007 fa8c 	bl	8008638 <HAL_I2C_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001126:	f000 fc9f 	bl	8001a68 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800112a:	2100      	movs	r1, #0
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <MX_I2C1_Init+0x74>)
 800112e:	f007 fba5 	bl	800887c <HAL_I2CEx_ConfigAnalogFilter>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001138:	f000 fc96 	bl	8001a68 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800113c:	2100      	movs	r1, #0
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_I2C1_Init+0x74>)
 8001140:	f007 fc12 	bl	8008968 <HAL_I2CEx_ConfigDigitalFilter>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800114a:	f000 fc8d 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	24000260 	.word	0x24000260
 8001158:	40005400 	.word	0x40005400
 800115c:	00b03fdb 	.word	0x00b03fdb

08001160 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <MX_I2C2_Init+0x74>)
 8001166:	4a1c      	ldr	r2, [pc, #112]	; (80011d8 <MX_I2C2_Init+0x78>)
 8001168:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_I2C2_Init+0x74>)
 800116c:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <MX_I2C2_Init+0x7c>)
 800116e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <MX_I2C2_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_I2C2_Init+0x74>)
 8001178:	2201      	movs	r2, #1
 800117a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <MX_I2C2_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_I2C2_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MX_I2C2_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_I2C2_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_I2C2_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <MX_I2C2_Init+0x74>)
 800119c:	f007 fa4c 	bl	8008638 <HAL_I2C_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011a6:	f000 fc5f 	bl	8001a68 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011aa:	2100      	movs	r1, #0
 80011ac:	4809      	ldr	r0, [pc, #36]	; (80011d4 <MX_I2C2_Init+0x74>)
 80011ae:	f007 fb65 	bl	800887c <HAL_I2CEx_ConfigAnalogFilter>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011b8:	f000 fc56 	bl	8001a68 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011bc:	2100      	movs	r1, #0
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_I2C2_Init+0x74>)
 80011c0:	f007 fbd2 	bl	8008968 <HAL_I2CEx_ConfigDigitalFilter>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011ca:	f000 fc4d 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	240002ac 	.word	0x240002ac
 80011d8:	40005800 	.word	0x40005800
 80011dc:	307075b1 	.word	0x307075b1

080011e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b0ba      	sub	sp, #232	; 0xe8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f8:	f107 0318 	add.w	r3, r7, #24
 80011fc:	22bc      	movs	r2, #188	; 0xbc
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f01b fec5 	bl	801cf90 <memset>
  if(i2cHandle->Instance==I2C1)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a49      	ldr	r2, [pc, #292]	; (8001330 <HAL_I2C_MspInit+0x150>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d143      	bne.n	8001298 <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001210:	2308      	movs	r3, #8
 8001212:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121a:	f107 0318 	add.w	r3, r7, #24
 800121e:	4618      	mov	r0, r3
 8001220:	f009 fcfa 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800122a:	f000 fc1d 	bl	8001a68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	4b41      	ldr	r3, [pc, #260]	; (8001334 <HAL_I2C_MspInit+0x154>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	4a3f      	ldr	r2, [pc, #252]	; (8001334 <HAL_I2C_MspInit+0x154>)
 8001236:	f043 0302 	orr.w	r3, r3, #2
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <HAL_I2C_MspInit+0x154>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = LC24C_SDA_Pin|LC24C_SCL_Pin;
 800124c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001250:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001254:	2312      	movs	r3, #18
 8001256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800125a:	2301      	movs	r3, #1
 800125c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001266:	2304      	movs	r3, #4
 8001268:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001270:	4619      	mov	r1, r3
 8001272:	4831      	ldr	r0, [pc, #196]	; (8001338 <HAL_I2C_MspInit+0x158>)
 8001274:	f006 fd88 	bl	8007d88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001278:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <HAL_I2C_MspInit+0x154>)
 800127a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800127e:	4a2d      	ldr	r2, [pc, #180]	; (8001334 <HAL_I2C_MspInit+0x154>)
 8001280:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001284:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001288:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <HAL_I2C_MspInit+0x154>)
 800128a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800128e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001296:	e046      	b.n	8001326 <HAL_I2C_MspInit+0x146>
  else if(i2cHandle->Instance==I2C2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a27      	ldr	r2, [pc, #156]	; (800133c <HAL_I2C_MspInit+0x15c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d141      	bne.n	8001326 <HAL_I2C_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012a2:	2308      	movs	r3, #8
 80012a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ac:	f107 0318 	add.w	r3, r7, #24
 80012b0:	4618      	mov	r0, r3
 80012b2:	f009 fcb1 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 80012bc:	f000 fbd4 	bl	8001a68 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_I2C_MspInit+0x154>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c6:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <HAL_I2C_MspInit+0x154>)
 80012c8:	f043 0320 	orr.w	r3, r3, #32
 80012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_I2C_MspInit+0x154>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012de:	2303      	movs	r3, #3
 80012e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e4:	2312      	movs	r3, #18
 80012e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012f6:	2304      	movs	r3, #4
 80012f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001300:	4619      	mov	r1, r3
 8001302:	480f      	ldr	r0, [pc, #60]	; (8001340 <HAL_I2C_MspInit+0x160>)
 8001304:	f006 fd40 	bl	8007d88 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_I2C_MspInit+0x154>)
 800130a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800130e:	4a09      	ldr	r2, [pc, #36]	; (8001334 <HAL_I2C_MspInit+0x154>)
 8001310:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001314:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_I2C_MspInit+0x154>)
 800131a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800131e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
}
 8001326:	bf00      	nop
 8001328:	37e8      	adds	r7, #232	; 0xe8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40005400 	.word	0x40005400
 8001334:	58024400 	.word	0x58024400
 8001338:	58020400 	.word	0x58020400
 800133c:	40005800 	.word	0x40005800
 8001340:	58021400 	.word	0x58021400

08001344 <goto_application>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void goto_application( void )
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
	FATFS_UnLinkDriver(SDPath);
 800134a:	480b      	ldr	r0, [pc, #44]	; (8001378 <goto_application+0x34>)
 800134c:	f01a fd44 	bl	801bdd8 <FATFS_UnLinkDriver>
	HAL_SD_DeInit(&hsd1);
 8001350:	480a      	ldr	r0, [pc, #40]	; (800137c <goto_application+0x38>)
 8001352:	f00d fcc5 	bl	800ece0 <HAL_SD_DeInit>


	printf("Jumping To Application..\r\n");
 8001356:	480a      	ldr	r0, [pc, #40]	; (8001380 <goto_application+0x3c>)
 8001358:	f01b fd3a 	bl	801cdd0 <puts>



	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (APPLICATION_ADDRESS + 4));
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <goto_application+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	607b      	str	r3, [r7, #4]


	//__set_MSP(*(uint32_t *)APPLICATION_ADDRESS);

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2101      	movs	r1, #1
 8001366:	4808      	ldr	r0, [pc, #32]	; (8001388 <goto_application+0x44>)
 8001368:	f007 f932 	bl	80085d0 <HAL_GPIO_WritePin>

	app_reset_handler();
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4798      	blx	r3

}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	240010cc 	.word	0x240010cc
 800137c:	240007c0 	.word	0x240007c0
 8001380:	0801d964 	.word	0x0801d964
 8001384:	08040004 	.word	0x08040004
 8001388:	58020400 	.word	0x58020400

0800138c <DoFirmwareUpdateFromSDCard>:

int DoFirmwareUpdateFromSDCard()
{
 800138c:	b580      	push	{r7, lr}
 800138e:	f5ad 7d76 	sub.w	sp, sp, #984	; 0x3d8
 8001392:	af00      	add	r7, sp, #0
	printf("Checking SD Card For Firmware Update..\r\n");
 8001394:	48d6      	ldr	r0, [pc, #856]	; (80016f0 <DoFirmwareUpdateFromSDCard+0x364>)
 8001396:	f01b fd1b 	bl	801cdd0 <puts>
	UpdateProgressPercent(0, 1.0f, 1.0f, 0.0f);
 800139a:	ed9f 1ad6 	vldr	s2, [pc, #856]	; 80016f4 <DoFirmwareUpdateFromSDCard+0x368>
 800139e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80013a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff faf8 	bl	800099c <UpdateProgressPercent>

	//Get SD and FatFs running.
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80013ac:	2200      	movs	r2, #0
 80013ae:	49d2      	ldr	r1, [pc, #840]	; (80016f8 <DoFirmwareUpdateFromSDCard+0x36c>)
 80013b0:	48d2      	ldr	r0, [pc, #840]	; (80016fc <DoFirmwareUpdateFromSDCard+0x370>)
 80013b2:	f019 fb65 	bl	801aa80 <f_mount>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <DoFirmwareUpdateFromSDCard+0x34>
	{
		Error_Handler();
 80013bc:	f000 fb54 	bl	8001a68 <Error_Handler>

	FIL FIRMWARE_FILE;
	FRESULT fr;
	FILINFO fno;
	int exists;
	fr = f_stat(FIRMWARE_UPDATE_FILENAME, &fno);
 80013c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013c4:	4619      	mov	r1, r3
 80013c6:	48ce      	ldr	r0, [pc, #824]	; (8001700 <DoFirmwareUpdateFromSDCard+0x374>)
 80013c8:	f01a fb57 	bl	801ba7a <f_stat>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f887 33bf 	strb.w	r3, [r7, #959]	; 0x3bf
	switch (fr) {
 80013d2:	f897 33bf 	ldrb.w	r3, [r7, #959]	; 0x3bf
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d103      	bne.n	80013e2 <DoFirmwareUpdateFromSDCard+0x56>
		case FR_OK: exists = 1; break;
 80013da:	2301      	movs	r3, #1
 80013dc:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 80013e0:	e002      	b.n	80013e8 <DoFirmwareUpdateFromSDCard+0x5c>
		default: exists = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
	}

	if(!exists)
 80013e8:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <DoFirmwareUpdateFromSDCard+0x68>
		return 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e1dc      	b.n	80017ae <DoFirmwareUpdateFromSDCard+0x422>

	FRESULT res = f_open(&FIRMWARE_FILE, FIRMWARE_UPDATE_FILENAME, FA_READ);
 80013f4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80013f8:	2201      	movs	r2, #1
 80013fa:	49c1      	ldr	r1, [pc, #772]	; (8001700 <DoFirmwareUpdateFromSDCard+0x374>)
 80013fc:	4618      	mov	r0, r3
 80013fe:	f019 fb85 	bl	801ab0c <f_open>
 8001402:	4603      	mov	r3, r0
 8001404:	f887 33be 	strb.w	r3, [r7, #958]	; 0x3be
	if(res != FR_OK)
 8001408:	f897 33be 	ldrb.w	r3, [r7, #958]	; 0x3be
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <DoFirmwareUpdateFromSDCard+0x88>
		return 0;
 8001410:	2300      	movs	r3, #0
 8001412:	e1cc      	b.n	80017ae <DoFirmwareUpdateFromSDCard+0x422>




	HAL_FLASH_Unlock();
 8001414:	f006 f9d8 	bl	80077c8 <HAL_FLASH_Unlock>

	int retries = 3;
 8001418:	2303      	movs	r3, #3
 800141a:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
	int dataVerified = 1;
 800141e:	2301      	movs	r3, #1
 8001420:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
	do {
		dataVerified = 1;
 8001424:	2301      	movs	r3, #1
 8001426:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
		printf("	Erasing Application Flash (Bank1)...\r\n");
 800142a:	48b6      	ldr	r0, [pc, #728]	; (8001704 <DoFirmwareUpdateFromSDCard+0x378>)
 800142c:	f01b fcd0 	bl	801cdd0 <puts>
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;

		EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001430:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8001434:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
		EraseInitStruct.Sector        = APPLICATION_SECTOR;
 800143c:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8001440:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001444:	2202      	movs	r2, #2
 8001446:	609a      	str	r2, [r3, #8]
		EraseInitStruct.Banks         = FLASH_BANK_1;
 8001448:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800144c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001450:	2201      	movs	r2, #1
 8001452:	605a      	str	r2, [r3, #4]
		EraseInitStruct.NbSectors     = APPLICATION_NSECTORS - 8;
 8001454:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8001458:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800145c:	2206      	movs	r2, #6
 800145e:	60da      	str	r2, [r3, #12]
		EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001460:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8001464:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001468:	2220      	movs	r2, #32
 800146a:	611a      	str	r2, [r3, #16]

		HAL_StatusTypeDef ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 800146c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001470:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f006 fab4 	bl	80079e4 <HAL_FLASHEx_Erase>
 800147c:	4603      	mov	r3, r0
 800147e:	f887 33bd 	strb.w	r3, [r7, #957]	; 0x3bd
		if((ret != HAL_OK) || (SectorError != 0xFFFFFFFF))
 8001482:	f897 33bd 	ldrb.w	r3, [r7, #957]	; 0x3bd
 8001486:	2b00      	cmp	r3, #0
 8001488:	d107      	bne.n	800149a <DoFirmwareUpdateFromSDCard+0x10e>
 800148a:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800148e:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d001      	beq.n	800149e <DoFirmwareUpdateFromSDCard+0x112>
			Error_Handler();
 800149a:	f000 fae5 	bl	8001a68 <Error_Handler>

		UpdateProgressPercent(10,  1.0f, 1.0f, 0.0f);
 800149e:	ed9f 1a95 	vldr	s2, [pc, #596]	; 80016f4 <DoFirmwareUpdateFromSDCard+0x368>
 80014a2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80014a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80014aa:	200a      	movs	r0, #10
 80014ac:	f7ff fa76 	bl	800099c <UpdateProgressPercent>

		printf("	Erasing Application Flash (Bank2)...\r\n");
 80014b0:	4895      	ldr	r0, [pc, #596]	; (8001708 <DoFirmwareUpdateFromSDCard+0x37c>)
 80014b2:	f01b fc8d 	bl	801cdd0 <puts>
		EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80014b6:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80014ba:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
		EraseInitStruct.Sector        = 0;
 80014c2:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80014c6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
		EraseInitStruct.Banks         = FLASH_BANK_2;
 80014ce:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80014d2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80014d6:	2202      	movs	r2, #2
 80014d8:	605a      	str	r2, [r3, #4]
		EraseInitStruct.NbSectors     = 8;                    //erase all sectors on bank2
 80014da:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80014de:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80014e2:	2208      	movs	r2, #8
 80014e4:	60da      	str	r2, [r3, #12]
		EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80014e6:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80014ea:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80014ee:	2220      	movs	r2, #32
 80014f0:	611a      	str	r2, [r3, #16]

		ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80014f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80014f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f006 fa71 	bl	80079e4 <HAL_FLASHEx_Erase>
 8001502:	4603      	mov	r3, r0
 8001504:	f887 33bd 	strb.w	r3, [r7, #957]	; 0x3bd
		if((ret != HAL_OK) || (SectorError != 0xFFFFFFFF))
 8001508:	f897 33bd 	ldrb.w	r3, [r7, #957]	; 0x3bd
 800150c:	2b00      	cmp	r3, #0
 800150e:	d107      	bne.n	8001520 <DoFirmwareUpdateFromSDCard+0x194>
 8001510:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8001514:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151e:	d001      	beq.n	8001524 <DoFirmwareUpdateFromSDCard+0x198>
			Error_Handler();
 8001520:	f000 faa2 	bl	8001a68 <Error_Handler>

		UpdateProgressPercent(20, 1.0f, 1.0f, 0.0f);
 8001524:	ed9f 1a73 	vldr	s2, [pc, #460]	; 80016f4 <DoFirmwareUpdateFromSDCard+0x368>
 8001528:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800152c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001530:	2014      	movs	r0, #20
 8001532:	f7ff fa33 	bl	800099c <UpdateProgressPercent>

		printf("	Reading and Programming...\r\n");
 8001536:	4875      	ldr	r0, [pc, #468]	; (800170c <DoFirmwareUpdateFromSDCard+0x380>)
 8001538:	f01b fc4a 	bl	801cdd0 <puts>

		fr = f_lseek(&FIRMWARE_FILE, 0);
 800153c:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	4608      	mov	r0, r1
 800154a:	f01a f851 	bl	801b5f0 <f_lseek>
 800154e:	4603      	mov	r3, r0
 8001550:	f887 33bf 	strb.w	r3, [r7, #959]	; 0x3bf
		if(fr != FR_OK)
 8001554:	f897 33bf 	ldrb.w	r3, [r7, #959]	; 0x3bf
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <DoFirmwareUpdateFromSDCard+0x1d4>
			Error_Handler();
 800155c:	f000 fa84 	bl	8001a68 <Error_Handler>

		int flashAddressByteOffset = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
		int progress = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
		while(f_eof(&FIRMWARE_FILE) == 0)
 800156c:	e04c      	b.n	8001608 <DoFirmwareUpdateFromSDCard+0x27c>
		{
			//read 256bits (H7 flashword size)
			uint8_t data[4*8];
			UINT bytesRead;
			fr = f_read(&FIRMWARE_FILE, data, 4*8, &bytesRead);
 800156e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001572:	1d39      	adds	r1, r7, #4
 8001574:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 8001578:	2220      	movs	r2, #32
 800157a:	f019 fd85 	bl	801b088 <f_read>
 800157e:	4603      	mov	r3, r0
 8001580:	f887 33bf 	strb.w	r3, [r7, #959]	; 0x3bf
			if(fr != FR_OK)
 8001584:	f897 33bf 	ldrb.w	r3, [r7, #959]	; 0x3bf
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <DoFirmwareUpdateFromSDCard+0x204>
				Error_Handler();
 800158c:	f000 fa6c 	bl	8001a68 <Error_Handler>

			//write 256bits

			FLASH->CR1 |= FLASH_VOLTAGE_RANGE_3;
 8001590:	4b5f      	ldr	r3, [pc, #380]	; (8001710 <DoFirmwareUpdateFromSDCard+0x384>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4a5e      	ldr	r2, [pc, #376]	; (8001710 <DoFirmwareUpdateFromSDCard+0x384>)
 8001596:	f043 0320 	orr.w	r3, r3, #32
 800159a:	60d3      	str	r3, [r2, #12]
			FLASH->CR2 |= FLASH_VOLTAGE_RANGE_3;
 800159c:	4b5c      	ldr	r3, [pc, #368]	; (8001710 <DoFirmwareUpdateFromSDCard+0x384>)
 800159e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80015a2:	4a5b      	ldr	r2, [pc, #364]	; (8001710 <DoFirmwareUpdateFromSDCard+0x384>)
 80015a4:	f043 0320 	orr.w	r3, r3, #32
 80015a8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, APPLICATION_ADDRESS+flashAddressByteOffset, (uint32_t)(&data[0]));
 80015ac:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80015b0:	4b58      	ldr	r3, [pc, #352]	; (8001714 <DoFirmwareUpdateFromSDCard+0x388>)
 80015b2:	4413      	add	r3, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	461a      	mov	r2, r3
 80015ba:	2001      	movs	r0, #1
 80015bc:	f006 f856 	bl	800766c <HAL_FLASH_Program>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f887 33bd 	strb.w	r3, [r7, #957]	; 0x3bd
			if(ret != HAL_OK)
 80015c6:	f897 33bd 	ldrb.w	r3, [r7, #957]	; 0x3bd
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <DoFirmwareUpdateFromSDCard+0x246>
				Error_Handler();
 80015ce:	f000 fa4b 	bl	8001a68 <Error_Handler>

			flashAddressByteOffset+=32;
 80015d2:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80015d6:	3320      	adds	r3, #32
 80015d8:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
			progress++;
 80015dc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80015e0:	3301      	adds	r3, #1
 80015e2:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
			if(progress >= 60)
 80015e6:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80015ea:	2b3b      	cmp	r3, #59	; 0x3b
 80015ec:	dd02      	ble.n	80015f4 <DoFirmwareUpdateFromSDCard+0x268>
				progress = 60;
 80015ee:	233c      	movs	r3, #60	; 0x3c
 80015f0:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4

			UpdateProgressPercent(progress, 1.0f, 1.0f, 0.0f);
 80015f4:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 80016f4 <DoFirmwareUpdateFromSDCard+0x368>
 80015f8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80015fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001600:	f8d7 03c4 	ldr.w	r0, [r7, #964]	; 0x3c4
 8001604:	f7ff f9ca 	bl	800099c <UpdateProgressPercent>
		while(f_eof(&FIRMWARE_FILE) == 0)
 8001608:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800160c:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8001610:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001614:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8001618:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800161c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001620:	4299      	cmp	r1, r3
 8001622:	bf08      	it	eq
 8001624:	4290      	cmpeq	r0, r2
 8001626:	d1a2      	bne.n	800156e <DoFirmwareUpdateFromSDCard+0x1e2>
		}


		printf("	Verifying...\r\n");
 8001628:	483b      	ldr	r0, [pc, #236]	; (8001718 <DoFirmwareUpdateFromSDCard+0x38c>)
 800162a:	f01b fbd1 	bl	801cdd0 <puts>
		UpdateProgressPercent(80, 1.0f, 1.0f, 0.0f);
 800162e:	ed9f 1a31 	vldr	s2, [pc, #196]	; 80016f4 <DoFirmwareUpdateFromSDCard+0x368>
 8001632:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001636:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800163a:	2050      	movs	r0, #80	; 0x50
 800163c:	f7ff f9ae 	bl	800099c <UpdateProgressPercent>


		fr = f_lseek(&FIRMWARE_FILE, 0);
 8001640:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	4608      	mov	r0, r1
 800164e:	f019 ffcf 	bl	801b5f0 <f_lseek>
 8001652:	4603      	mov	r3, r0
 8001654:	f887 33bf 	strb.w	r3, [r7, #959]	; 0x3bf
		if(fr != FR_OK)
 8001658:	f897 33bf 	ldrb.w	r3, [r7, #959]	; 0x3bf
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <DoFirmwareUpdateFromSDCard+0x2d8>
			Error_Handler();
 8001660:	f000 fa02 	bl	8001a68 <Error_Handler>



		uint32_t flashAddress = APPLICATION_ADDRESS;
 8001664:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <DoFirmwareUpdateFromSDCard+0x388>)
 8001666:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		while(f_eof(&FIRMWARE_FILE) == 0)
 800166a:	e028      	b.n	80016be <DoFirmwareUpdateFromSDCard+0x332>
		{
			//read 1byte from file
			uint8_t data;
			UINT bytesRead;
			fr = f_read(&FIRMWARE_FILE, &data, 1, &bytesRead);
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8001674:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 8001678:	2201      	movs	r2, #1
 800167a:	f019 fd05 	bl	801b088 <f_read>
 800167e:	4603      	mov	r3, r0
 8001680:	f887 33bf 	strb.w	r3, [r7, #959]	; 0x3bf
			if(fr != FR_OK)
 8001684:	f897 33bf 	ldrb.w	r3, [r7, #959]	; 0x3bf
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <DoFirmwareUpdateFromSDCard+0x304>
				Error_Handler();
 800168c:	f000 f9ec 	bl	8001a68 <Error_Handler>

			uint8_t flashVal = *(uint32_t*)flashAddress;
 8001690:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f887 33bc 	strb.w	r3, [r7, #956]	; 0x3bc

			if(data != flashVal)
 800169a:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800169e:	f2a3 33ad 	subw	r3, r3, #941	; 0x3ad
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	f897 23bc 	ldrb.w	r2, [r7, #956]	; 0x3bc
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d003      	beq.n	80016b4 <DoFirmwareUpdateFromSDCard+0x328>
			{
				dataVerified = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80016b2:	e014      	b.n	80016de <DoFirmwareUpdateFromSDCard+0x352>
				break;
			}

			flashAddress++;
 80016b4:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 80016b8:	3301      	adds	r3, #1
 80016ba:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		while(f_eof(&FIRMWARE_FILE) == 0)
 80016be:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80016c2:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80016c6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80016ca:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80016ce:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80016d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016d6:	4299      	cmp	r1, r3
 80016d8:	bf08      	it	eq
 80016da:	4290      	cmpeq	r0, r2
 80016dc:	d1c6      	bne.n	800166c <DoFirmwareUpdateFromSDCard+0x2e0>
		}



		if(dataVerified)
 80016de:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d01c      	beq.n	8001720 <DoFirmwareUpdateFromSDCard+0x394>
		{
			printf("	Flash Verified.\r\n");
 80016e6:	480d      	ldr	r0, [pc, #52]	; (800171c <DoFirmwareUpdateFromSDCard+0x390>)
 80016e8:	f01b fb72 	bl	801cdd0 <puts>
 80016ec:	e01f      	b.n	800172e <DoFirmwareUpdateFromSDCard+0x3a2>
 80016ee:	bf00      	nop
 80016f0:	0801d980 	.word	0x0801d980
 80016f4:	00000000 	.word	0x00000000
 80016f8:	240010cc 	.word	0x240010cc
 80016fc:	240010d0 	.word	0x240010d0
 8001700:	0801d9a8 	.word	0x0801d9a8
 8001704:	0801d9b8 	.word	0x0801d9b8
 8001708:	0801d9e0 	.word	0x0801d9e0
 800170c:	0801da08 	.word	0x0801da08
 8001710:	52002000 	.word	0x52002000
 8001714:	08040000 	.word	0x08040000
 8001718:	0801da28 	.word	0x0801da28
 800171c:	0801da38 	.word	0x0801da38
		}
		else
		{
			printf("	Flash Verification Error, retries left: %d\r\n", retries-1);
 8001720:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8001724:	3b01      	subs	r3, #1
 8001726:	4619      	mov	r1, r3
 8001728:	4823      	ldr	r0, [pc, #140]	; (80017b8 <DoFirmwareUpdateFromSDCard+0x42c>)
 800172a:	f01b faeb 	bl	801cd04 <iprintf>

		}

		retries--;
 800172e:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8001732:	3b01      	subs	r3, #1
 8001734:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
	}while(dataVerified == 0 && retries > 0);
 8001738:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800173c:	2b00      	cmp	r3, #0
 800173e:	d104      	bne.n	800174a <DoFirmwareUpdateFromSDCard+0x3be>
 8001740:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8001744:	2b00      	cmp	r3, #0
 8001746:	f73f ae6d 	bgt.w	8001424 <DoFirmwareUpdateFromSDCard+0x98>


	HAL_FLASH_Lock();
 800174a:	f006 f877 	bl	800783c <HAL_FLASH_Lock>

	if(dataVerified)
 800174e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8001752:	2b00      	cmp	r3, #0
 8001754:	d025      	beq.n	80017a2 <DoFirmwareUpdateFromSDCard+0x416>
	{
		printf("	Flash Programmed.\r\n");
 8001756:	4819      	ldr	r0, [pc, #100]	; (80017bc <DoFirmwareUpdateFromSDCard+0x430>)
 8001758:	f01b fb3a 	bl	801cdd0 <puts>

		fr = f_close(&FIRMWARE_FILE);
 800175c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001760:	4618      	mov	r0, r3
 8001762:	f019 ff1b 	bl	801b59c <f_close>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 33bf 	strb.w	r3, [r7, #959]	; 0x3bf
		if(fr != FR_OK)
 800176c:	f897 33bf 	ldrb.w	r3, [r7, #959]	; 0x3bf
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <DoFirmwareUpdateFromSDCard+0x3ec>
			Error_Handler();
 8001774:	f000 f978 	bl	8001a68 <Error_Handler>

		printf("	Removing Firmware File From SD..\r\n");
 8001778:	4811      	ldr	r0, [pc, #68]	; (80017c0 <DoFirmwareUpdateFromSDCard+0x434>)
 800177a:	f01b fb29 	bl	801cdd0 <puts>

		fr = f_unlink("FIRMWARE.bin");
 800177e:	4811      	ldr	r0, [pc, #68]	; (80017c4 <DoFirmwareUpdateFromSDCard+0x438>)
 8001780:	f01a f9b4 	bl	801baec <f_unlink>
 8001784:	4603      	mov	r3, r0
 8001786:	f887 33bf 	strb.w	r3, [r7, #959]	; 0x3bf
		if(fr != FR_OK)
 800178a:	f897 33bf 	ldrb.w	r3, [r7, #959]	; 0x3bf
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <DoFirmwareUpdateFromSDCard+0x40a>
			Error_Handler();
 8001792:	f000 f969 	bl	8001a68 <Error_Handler>


		//unmount
		f_mount(0, (TCHAR const*)SDPath, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	490b      	ldr	r1, [pc, #44]	; (80017c8 <DoFirmwareUpdateFromSDCard+0x43c>)
 800179a:	2000      	movs	r0, #0
 800179c:	f019 f970 	bl	801aa80 <f_mount>
 80017a0:	e004      	b.n	80017ac <DoFirmwareUpdateFromSDCard+0x420>
	}
	else
	{
		printf("SD Programming Attempts Failed.\r\n");
 80017a2:	480a      	ldr	r0, [pc, #40]	; (80017cc <DoFirmwareUpdateFromSDCard+0x440>)
 80017a4:	f01b fb14 	bl	801cdd0 <puts>
		Error_Handler();
 80017a8:	f000 f95e 	bl	8001a68 <Error_Handler>
	}

	return 1;
 80017ac:	2301      	movs	r3, #1
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	f507 7776 	add.w	r7, r7, #984	; 0x3d8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	0801da4c 	.word	0x0801da4c
 80017bc:	0801da7c 	.word	0x0801da7c
 80017c0:	0801da90 	.word	0x0801da90
 80017c4:	0801d9a8 	.word	0x0801d9a8
 80017c8:	240010cc 	.word	0x240010cc
 80017cc:	0801dab4 	.word	0x0801dab4

080017d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d6:	f001 fe39 	bl	800344c <HAL_Init>
  //goto_application( );

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017da:	f000 f865 	bl	80018a8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80017de:	f000 f8e9 	bl	80019b4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e2:	f7ff fac5 	bl	8000d70 <MX_GPIO_Init>
  MX_DMA_Init();
 80017e6:	f7ff fa3d 	bl	8000c64 <MX_DMA_Init>
  MX_MDMA_Init();
 80017ea:	f000 f94d 	bl	8001a88 <MX_MDMA_Init>
  MX_DAC1_Init();
 80017ee:	f7ff f9b7 	bl	8000b60 <MX_DAC1_Init>
  MX_TIM4_Init();
 80017f2:	f001 fa13 	bl	8002c1c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80017f6:	f001 fc4d 	bl	8003094 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80017fa:	f001 f951 	bl	8002aa0 <MX_TIM2_Init>
  MX_RNG_Init();
 80017fe:	f000 f9a7 	bl	8001b50 <MX_RNG_Init>
  MX_I2C1_Init();
 8001802:	f7ff fc6d 	bl	80010e0 <MX_I2C1_Init>
  MX_TIM5_Init();
 8001806:	f001 fa81 	bl	8002d0c <MX_TIM5_Init>
  MX_SAI1_Init();
 800180a:	f000 f9ef 	bl	8001bec <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 800180e:	f000 fc7d 	bl	800210c <MX_SDMMC1_SD_Init>
  MX_SPI6_Init();
 8001812:	f000 fdf5 	bl	8002400 <MX_SPI6_Init>
  MX_I2C2_Init();
 8001816:	f7ff fca3 	bl	8001160 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800181a:	f001 fbef 	bl	8002ffc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800181e:	f000 fd43 	bl	80022a8 <MX_SPI2_Init>
  MX_SAI2_Init();
 8001822:	f000 fa45 	bl	8001cb0 <MX_SAI2_Init>
  MX_FATFS_Init();
 8001826:	f015 fa51 	bl	8016ccc <MX_FATFS_Init>
  MX_TIM3_Init();
 800182a:	f001 f987 	bl	8002b3c <MX_TIM3_Init>
  MX_SPI5_Init();
 800182e:	f000 fd91 	bl	8002354 <MX_SPI5_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001832:	f001 fd35 	bl	80032a0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  printf("Starting Bootloader..\r\n");
 8001836:	4819      	ldr	r0, [pc, #100]	; (800189c <main+0xcc>)
 8001838:	f01b faca 	bl	801cdd0 <puts>

  InitProgress();
 800183c:	f7ff f8a2 	bl	8000984 <InitProgress>


	int sdResult = DoFirmwareUpdateFromSDCard();
 8001840:	f7ff fda4 	bl	800138c <DoFirmwareUpdateFromSDCard>
 8001844:	6038      	str	r0, [r7, #0]
	if(!sdResult)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d118      	bne.n	800187e <main+0xae>
	{
	  printf("No SD Firmware Update.\r\n");
 800184c:	4814      	ldr	r0, [pc, #80]	; (80018a0 <main+0xd0>)
 800184e:	f01b fabf 	bl	801cdd0 <puts>
	  for(int i = 0; i < 100; i++)
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	e00e      	b.n	8001876 <main+0xa6>
	  {
		  HAL_Delay(2);
 8001858:	2002      	movs	r0, #2
 800185a:	f001 fe89 	bl	8003570 <HAL_Delay>
		  UpdateProgressPercent(i, 0.0f, 0.0f, 1.0f);
 800185e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001862:	eddf 0a10 	vldr	s1, [pc, #64]	; 80018a4 <main+0xd4>
 8001866:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80018a4 <main+0xd4>
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff f896 	bl	800099c <UpdateProgressPercent>
	  for(int i = 0; i < 100; i++)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3301      	adds	r3, #1
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b63      	cmp	r3, #99	; 0x63
 800187a:	dded      	ble.n	8001858 <main+0x88>
 800187c:	e008      	b.n	8001890 <main+0xc0>
	  }
	}
	else
	{
		UpdateProgressPercent(100, 1.0f, 0.5f, 0.25f);
 800187e:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8001882:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001886:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800188a:	2064      	movs	r0, #100	; 0x64
 800188c:	f7ff f886 	bl	800099c <UpdateProgressPercent>
	}



	DeInitProgess();
 8001890:	f7ff f87e 	bl	8000990 <DeInitProgess>

  goto_application();
 8001894:	f7ff fd56 	bl	8001344 <goto_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001898:	e7fe      	b.n	8001898 <main+0xc8>
 800189a:	bf00      	nop
 800189c:	0801dad8 	.word	0x0801dad8
 80018a0:	0801daf0 	.word	0x0801daf0
 80018a4:	00000000 	.word	0x00000000

080018a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b09c      	sub	sp, #112	; 0x70
 80018ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	224c      	movs	r2, #76	; 0x4c
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f01b fb6a 	bl	801cf90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	2220      	movs	r2, #32
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f01b fb64 	bl	801cf90 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80018c8:	2002      	movs	r0, #2
 80018ca:	f007 fe93 	bl	80095f4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80018ce:	2300      	movs	r3, #0
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <SystemClock_Config+0x100>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	4a34      	ldr	r2, [pc, #208]	; (80019a8 <SystemClock_Config+0x100>)
 80018d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018dc:	6193      	str	r3, [r2, #24]
 80018de:	4b32      	ldr	r3, [pc, #200]	; (80019a8 <SystemClock_Config+0x100>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <SystemClock_Config+0x104>)
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	4a2f      	ldr	r2, [pc, #188]	; (80019ac <SystemClock_Config+0x104>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80018f4:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <SystemClock_Config+0x104>)
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001900:	bf00      	nop
 8001902:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <SystemClock_Config+0x100>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800190a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800190e:	d1f8      	bne.n	8001902 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <SystemClock_Config+0x108>)
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	4a26      	ldr	r2, [pc, #152]	; (80019b0 <SystemClock_Config+0x108>)
 8001916:	f023 0303 	bic.w	r3, r3, #3
 800191a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800191c:	2322      	movs	r3, #34	; 0x22
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001920:	2301      	movs	r3, #1
 8001922:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001924:	2340      	movs	r3, #64	; 0x40
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001928:	2301      	movs	r3, #1
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800192c:	2302      	movs	r3, #2
 800192e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001930:	2300      	movs	r3, #0
 8001932:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001934:	2304      	movs	r3, #4
 8001936:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001938:	233c      	movs	r3, #60	; 0x3c
 800193a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800193c:	2302      	movs	r3, #2
 800193e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001940:	2302      	movs	r3, #2
 8001942:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001944:	2302      	movs	r3, #2
 8001946:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001948:	230c      	movs	r3, #12
 800194a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800194c:	2300      	movs	r3, #0
 800194e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001958:	4618      	mov	r0, r3
 800195a:	f007 fea1 	bl	80096a0 <HAL_RCC_OscConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001964:	f000 f880 	bl	8001a68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001968:	233f      	movs	r3, #63	; 0x3f
 800196a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800196c:	2303      	movs	r3, #3
 800196e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001974:	2308      	movs	r3, #8
 8001976:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001978:	2340      	movs	r3, #64	; 0x40
 800197a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800197c:	2340      	movs	r3, #64	; 0x40
 800197e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001984:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001986:	2340      	movs	r3, #64	; 0x40
 8001988:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	2104      	movs	r1, #4
 800198e:	4618      	mov	r0, r3
 8001990:	f008 fbfc 	bl	800a18c <HAL_RCC_ClockConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800199a:	f000 f865 	bl	8001a68 <Error_Handler>
  }
}
 800199e:	bf00      	nop
 80019a0:	3770      	adds	r7, #112	; 0x70
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	58024800 	.word	0x58024800
 80019ac:	58000400 	.word	0x58000400
 80019b0:	58024400 	.word	0x58024400

080019b4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b0b0      	sub	sp, #192	; 0xc0
 80019b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	22bc      	movs	r2, #188	; 0xbc
 80019be:	2100      	movs	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f01b fae5 	bl	801cf90 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <PeriphCommonClock_Config+0x88>)
 80019c8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_SPI2;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80019ca:	2304      	movs	r3, #4
 80019cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 10;
 80019ce:	230a      	movs	r3, #10
 80019d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80019d6:	2302      	movs	r3, #2
 80019d8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 4;
 80019da:	2304      	movs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80019de:	23c0      	movs	r3, #192	; 0xc0
 80019e0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80019e2:	2320      	movs	r3, #32
 80019e4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 32;
 80019ea:	2320      	movs	r3, #32
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 150;
 80019ee:	2396      	movs	r3, #150	; 0x96
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80019f2:	2302      	movs	r3, #2
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80019f6:	2302      	movs	r3, #2
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80019fa:	2302      	movs	r3, #2
 80019fc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80019fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a10:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 8001a12:	2302      	movs	r3, #2
 8001a14:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL3;
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	4618      	mov	r0, r3
 8001a24:	f009 f8f8 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <PeriphCommonClock_Config+0x7e>
  {
    Error_Handler();
 8001a2e:	f000 f81b 	bl	8001a68 <Error_Handler>
  }
}
 8001a32:	bf00      	nop
 8001a34:	37c0      	adds	r7, #192	; 0xc0
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	00011300 	.word	0x00011300

08001a40 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status =  HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001a48:	1d39      	adds	r1, r7, #4
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <__io_putchar+0x24>)
 8001a52:	f011 ff73 	bl	801393c <HAL_UART_Transmit>
 8001a56:	4603      	mov	r3, r0
 8001a58:	73fb      	strb	r3, [r7, #15]
	//CDC_Transmit_FS((uint8_t*)&ch, 1);
	return ch;
 8001a5a:	687b      	ldr	r3, [r7, #4]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	24000c10 	.word	0x24000c10

08001a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <Error_Handler+0x8>

08001a72 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
void MX_MDMA_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001a8e:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <MX_MDMA_Init+0xbc>)
 8001a90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a94:	4a2b      	ldr	r2, [pc, #172]	; (8001b44 <MX_MDMA_Init+0xbc>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <MX_MDMA_Init+0xbc>)
 8001aa0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001aae:	4a27      	ldr	r2, [pc, #156]	; (8001b4c <MX_MDMA_Init+0xc4>)
 8001ab0:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8001ab2:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001ab4:	221d      	movs	r2, #29
 8001ab6:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001ab8:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001ac4:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001aca:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001acc:	2202      	movs	r2, #2
 8001ace:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001ae2:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001ae4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 8001b08:	480f      	ldr	r0, [pc, #60]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001b0a:	f006 ffa1 	bl	8008a50 <HAL_MDMA_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 8001b14:	f7ff ffa8 	bl	8001a68 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	480a      	ldr	r0, [pc, #40]	; (8001b48 <MX_MDMA_Init+0xc0>)
 8001b1e:	f007 f9cf 	bl	8008ec0 <HAL_MDMA_ConfigPostRequestMask>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 8001b28:	f7ff ff9e 	bl	8001a68 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2100      	movs	r1, #0
 8001b30:	207a      	movs	r0, #122	; 0x7a
 8001b32:	f001 fe61 	bl	80037f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001b36:	207a      	movs	r0, #122	; 0x7a
 8001b38:	f001 fe88 	bl	800384c <HAL_NVIC_EnableIRQ>

}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	58024400 	.word	0x58024400
 8001b48:	240002f8 	.word	0x240002f8
 8001b4c:	52000040 	.word	0x52000040

08001b50 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <MX_RNG_Init+0x24>)
 8001b56:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <MX_RNG_Init+0x28>)
 8001b58:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <MX_RNG_Init+0x24>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001b60:	4804      	ldr	r0, [pc, #16]	; (8001b74 <MX_RNG_Init+0x24>)
 8001b62:	f00b fd8f 	bl	800d684 <HAL_RNG_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001b6c:	f7ff ff7c 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	24000364 	.word	0x24000364
 8001b78:	48021800 	.word	0x48021800

08001b7c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b0b2      	sub	sp, #200	; 0xc8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	22bc      	movs	r2, #188	; 0xbc
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f01b f9ff 	bl	801cf90 <memset>
  if(rngHandle->Instance==RNG)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <HAL_RNG_MspInit+0x68>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d11e      	bne.n	8001bda <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	4618      	mov	r0, r3
 8001bae:	f009 f833 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001bb8:	f7ff ff56 	bl	8001a68 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_RNG_MspInit+0x6c>)
 8001bbe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001bc2:	4a09      	ldr	r2, [pc, #36]	; (8001be8 <HAL_RNG_MspInit+0x6c>)
 8001bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bc8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_RNG_MspInit+0x6c>)
 8001bce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001bda:	bf00      	nop
 8001bdc:	37c8      	adds	r7, #200	; 0xc8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	48021800 	.word	0x48021800
 8001be8:	58024400 	.word	0x58024400

08001bec <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <MX_SAI1_Init+0xb4>)
 8001bf2:	4a2c      	ldr	r2, [pc, #176]	; (8001ca4 <MX_SAI1_Init+0xb8>)
 8001bf4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <MX_SAI1_Init+0xb4>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001bfc:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <MX_SAI1_Init+0xb4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001c02:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <MX_SAI1_Init+0xb4>)
 8001c04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c08:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001c0a:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <MX_SAI1_Init+0xb4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c10:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <MX_SAI1_Init+0xb4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <MX_SAI1_Init+0xb4>)
 8001c18:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001c1c:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_OUTBLOCKA_ENABLE;
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <MX_SAI1_Init+0xb4>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c24:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <MX_SAI1_Init+0xb4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <MX_SAI1_Init+0xb4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <MX_SAI1_Init+0xb4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001c36:	2302      	movs	r3, #2
 8001c38:	2202      	movs	r2, #2
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4818      	ldr	r0, [pc, #96]	; (8001ca0 <MX_SAI1_Init+0xb4>)
 8001c3e:	f00b fd9d 	bl	800d77c <HAL_SAI_InitProtocol>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8001c48:	f7ff ff0e 	bl	8001a68 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8001c4c:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <MX_SAI1_Init+0xbc>)
 8001c4e:	4a17      	ldr	r2, [pc, #92]	; (8001cac <MX_SAI1_Init+0xc0>)
 8001c50:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <MX_SAI1_Init+0xbc>)
 8001c54:	2202      	movs	r2, #2
 8001c56:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <MX_SAI1_Init+0xbc>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <MX_SAI1_Init+0xbc>)
 8001c60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c64:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <MX_SAI1_Init+0xbc>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_OUTBLOCKA_ENABLE;
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_SAI1_Init+0xbc>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <MX_SAI1_Init+0xbc>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <MX_SAI1_Init+0xbc>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <MX_SAI1_Init+0xbc>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001c84:	2302      	movs	r3, #2
 8001c86:	2202      	movs	r2, #2
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4807      	ldr	r0, [pc, #28]	; (8001ca8 <MX_SAI1_Init+0xbc>)
 8001c8c:	f00b fd76 	bl	800d77c <HAL_SAI_InitProtocol>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_SAI1_Init+0xae>
  {
    Error_Handler();
 8001c96:	f7ff fee7 	bl	8001a68 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	24000378 	.word	0x24000378
 8001ca4:	40015804 	.word	0x40015804
 8001ca8:	24000410 	.word	0x24000410
 8001cac:	40015824 	.word	0x40015824

08001cb0 <MX_SAI2_Init>:
/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001cb4:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <MX_SAI2_Init+0x94>)
 8001cb6:	4a24      	ldr	r2, [pc, #144]	; (8001d48 <MX_SAI2_Init+0x98>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001cba:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <MX_SAI2_Init+0x94>)
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_SYNCHRONOUS_EXT_SAI1;
 8001cc0:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <MX_SAI2_Init+0x94>)
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001cc6:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <MX_SAI2_Init+0x94>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <MX_SAI2_Init+0x94>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <MX_SAI2_Init+0x94>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <MX_SAI2_Init+0x94>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <MX_SAI2_Init+0x94>)
 8001ce0:	2210      	movs	r2, #16
 8001ce2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4816      	ldr	r0, [pc, #88]	; (8001d44 <MX_SAI2_Init+0x94>)
 8001cec:	f00b fd46 	bl	800d77c <HAL_SAI_InitProtocol>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_SAI2_Init+0x4a>
  {
    Error_Handler();
 8001cf6:	f7ff feb7 	bl	8001a68 <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <MX_SAI2_Init+0x9c>)
 8001cfc:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <MX_SAI2_Init+0xa0>)
 8001cfe:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <MX_SAI2_Init+0x9c>)
 8001d02:	2203      	movs	r2, #3
 8001d04:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS_EXT_SAI1;
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <MX_SAI2_Init+0x9c>)
 8001d08:	2202      	movs	r2, #2
 8001d0a:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <MX_SAI2_Init+0x9c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <MX_SAI2_Init+0x9c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <MX_SAI2_Init+0x9c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <MX_SAI2_Init+0x9c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_RELEASED;
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <MX_SAI2_Init+0x9c>)
 8001d26:	2210      	movs	r2, #16
 8001d28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4806      	ldr	r0, [pc, #24]	; (8001d4c <MX_SAI2_Init+0x9c>)
 8001d32:	f00b fd23 	bl	800d77c <HAL_SAI_InitProtocol>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_SAI2_Init+0x90>
  {
    Error_Handler();
 8001d3c:	f7ff fe94 	bl	8001a68 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	240004a8 	.word	0x240004a8
 8001d48:	40015c04 	.word	0x40015c04
 8001d4c:	24000540 	.word	0x24000540
 8001d50:	40015c24 	.word	0x40015c24

08001d54 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4aa3      	ldr	r2, [pc, #652]	; (8001ff0 <HAL_SAI_MspInit+0x29c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d160      	bne.n	8001e28 <HAL_SAI_MspInit+0xd4>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001d66:	4ba3      	ldr	r3, [pc, #652]	; (8001ff4 <HAL_SAI_MspInit+0x2a0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10e      	bne.n	8001d8c <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001d6e:	4ba2      	ldr	r3, [pc, #648]	; (8001ff8 <HAL_SAI_MspInit+0x2a4>)
 8001d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d74:	4aa0      	ldr	r2, [pc, #640]	; (8001ff8 <HAL_SAI_MspInit+0x2a4>)
 8001d76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d7e:	4b9e      	ldr	r3, [pc, #632]	; (8001ff8 <HAL_SAI_MspInit+0x2a4>)
 8001d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d88:	61bb      	str	r3, [r7, #24]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
    }
    SAI1_client ++;
 8001d8c:	4b99      	ldr	r3, [pc, #612]	; (8001ff4 <HAL_SAI_MspInit+0x2a0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	4a98      	ldr	r2, [pc, #608]	; (8001ff4 <HAL_SAI_MspInit+0x2a0>)
 8001d94:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001d96:	2374      	movs	r3, #116	; 0x74
 8001d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001da6:	2306      	movs	r3, #6
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001daa:	f107 031c 	add.w	r3, r7, #28
 8001dae:	4619      	mov	r1, r3
 8001db0:	4892      	ldr	r0, [pc, #584]	; (8001ffc <HAL_SAI_MspInit+0x2a8>)
 8001db2:	f005 ffe9 	bl	8007d88 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8001db6:	4b92      	ldr	r3, [pc, #584]	; (8002000 <HAL_SAI_MspInit+0x2ac>)
 8001db8:	4a92      	ldr	r2, [pc, #584]	; (8002004 <HAL_SAI_MspInit+0x2b0>)
 8001dba:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001dbc:	4b90      	ldr	r3, [pc, #576]	; (8002000 <HAL_SAI_MspInit+0x2ac>)
 8001dbe:	2257      	movs	r2, #87	; 0x57
 8001dc0:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dc2:	4b8f      	ldr	r3, [pc, #572]	; (8002000 <HAL_SAI_MspInit+0x2ac>)
 8001dc4:	2240      	movs	r2, #64	; 0x40
 8001dc6:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc8:	4b8d      	ldr	r3, [pc, #564]	; (8002000 <HAL_SAI_MspInit+0x2ac>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001dce:	4b8c      	ldr	r3, [pc, #560]	; (8002000 <HAL_SAI_MspInit+0x2ac>)
 8001dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dd4:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dd6:	4b8a      	ldr	r3, [pc, #552]	; (8002000 <HAL_SAI_MspInit+0x2ac>)
 8001dd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ddc:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dde:	4b88      	ldr	r3, [pc, #544]	; (8002000 <HAL_SAI_MspInit+0x2ac>)
 8001de0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001de4:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001de6:	4b86      	ldr	r3, [pc, #536]	; (8002000 <HAL_SAI_MspInit+0x2ac>)
 8001de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dec:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001dee:	4b84      	ldr	r3, [pc, #528]	; (8002000 <HAL_SAI_MspInit+0x2ac>)
 8001df0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001df4:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001df6:	4b82      	ldr	r3, [pc, #520]	; (8002000 <HAL_SAI_MspInit+0x2ac>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001dfc:	4880      	ldr	r0, [pc, #512]	; (8002000 <HAL_SAI_MspInit+0x2ac>)
 8001dfe:	f001 ff77 	bl	8003cf0 <HAL_DMA_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8001e08:	f7ff fe2e 	bl	8001a68 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a7c      	ldr	r2, [pc, #496]	; (8002000 <HAL_SAI_MspInit+0x2ac>)
 8001e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001e14:	4a7a      	ldr	r2, [pc, #488]	; (8002000 <HAL_SAI_MspInit+0x2ac>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a78      	ldr	r2, [pc, #480]	; (8002000 <HAL_SAI_MspInit+0x2ac>)
 8001e1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001e22:	4a77      	ldr	r2, [pc, #476]	; (8002000 <HAL_SAI_MspInit+0x2ac>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a76      	ldr	r2, [pc, #472]	; (8002008 <HAL_SAI_MspInit+0x2b4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d160      	bne.n	8001ef4 <HAL_SAI_MspInit+0x1a0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001e32:	4b70      	ldr	r3, [pc, #448]	; (8001ff4 <HAL_SAI_MspInit+0x2a0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10e      	bne.n	8001e58 <HAL_SAI_MspInit+0x104>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001e3a:	4b6f      	ldr	r3, [pc, #444]	; (8001ff8 <HAL_SAI_MspInit+0x2a4>)
 8001e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e40:	4a6d      	ldr	r2, [pc, #436]	; (8001ff8 <HAL_SAI_MspInit+0x2a4>)
 8001e42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e4a:	4b6b      	ldr	r3, [pc, #428]	; (8001ff8 <HAL_SAI_MspInit+0x2a4>)
 8001e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	697b      	ldr	r3, [r7, #20]
      }
    SAI1_client ++;
 8001e58:	4b66      	ldr	r3, [pc, #408]	; (8001ff4 <HAL_SAI_MspInit+0x2a0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	4a65      	ldr	r2, [pc, #404]	; (8001ff4 <HAL_SAI_MspInit+0x2a0>)
 8001e60:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e62:	2308      	movs	r3, #8
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001e72:	2306      	movs	r3, #6
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	485f      	ldr	r0, [pc, #380]	; (8001ffc <HAL_SAI_MspInit+0x2a8>)
 8001e7e:	f005 ff83 	bl	8007d88 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 8001e82:	4b62      	ldr	r3, [pc, #392]	; (800200c <HAL_SAI_MspInit+0x2b8>)
 8001e84:	4a62      	ldr	r2, [pc, #392]	; (8002010 <HAL_SAI_MspInit+0x2bc>)
 8001e86:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8001e88:	4b60      	ldr	r3, [pc, #384]	; (800200c <HAL_SAI_MspInit+0x2b8>)
 8001e8a:	2258      	movs	r2, #88	; 0x58
 8001e8c:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e8e:	4b5f      	ldr	r3, [pc, #380]	; (800200c <HAL_SAI_MspInit+0x2b8>)
 8001e90:	2240      	movs	r2, #64	; 0x40
 8001e92:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e94:	4b5d      	ldr	r3, [pc, #372]	; (800200c <HAL_SAI_MspInit+0x2b8>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001e9a:	4b5c      	ldr	r3, [pc, #368]	; (800200c <HAL_SAI_MspInit+0x2b8>)
 8001e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea0:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ea2:	4b5a      	ldr	r3, [pc, #360]	; (800200c <HAL_SAI_MspInit+0x2b8>)
 8001ea4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ea8:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001eaa:	4b58      	ldr	r3, [pc, #352]	; (800200c <HAL_SAI_MspInit+0x2b8>)
 8001eac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eb0:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001eb2:	4b56      	ldr	r3, [pc, #344]	; (800200c <HAL_SAI_MspInit+0x2b8>)
 8001eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb8:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001eba:	4b54      	ldr	r3, [pc, #336]	; (800200c <HAL_SAI_MspInit+0x2b8>)
 8001ebc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ec0:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ec2:	4b52      	ldr	r3, [pc, #328]	; (800200c <HAL_SAI_MspInit+0x2b8>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001ec8:	4850      	ldr	r0, [pc, #320]	; (800200c <HAL_SAI_MspInit+0x2b8>)
 8001eca:	f001 ff11 	bl	8003cf0 <HAL_DMA_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_SAI_MspInit+0x184>
    {
      Error_Handler();
 8001ed4:	f7ff fdc8 	bl	8001a68 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a4c      	ldr	r2, [pc, #304]	; (800200c <HAL_SAI_MspInit+0x2b8>)
 8001edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001ee0:	4a4a      	ldr	r2, [pc, #296]	; (800200c <HAL_SAI_MspInit+0x2b8>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a48      	ldr	r2, [pc, #288]	; (800200c <HAL_SAI_MspInit+0x2b8>)
 8001eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001eee:	4a47      	ldr	r2, [pc, #284]	; (800200c <HAL_SAI_MspInit+0x2b8>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a46      	ldr	r2, [pc, #280]	; (8002014 <HAL_SAI_MspInit+0x2c0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d169      	bne.n	8001fd2 <HAL_SAI_MspInit+0x27e>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001efe:	4b46      	ldr	r3, [pc, #280]	; (8002018 <HAL_SAI_MspInit+0x2c4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d116      	bne.n	8001f34 <HAL_SAI_MspInit+0x1e0>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001f06:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <HAL_SAI_MspInit+0x2a4>)
 8001f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f0c:	4a3a      	ldr	r2, [pc, #232]	; (8001ff8 <HAL_SAI_MspInit+0x2a4>)
 8001f0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f16:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <HAL_SAI_MspInit+0x2a4>)
 8001f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2100      	movs	r1, #0
 8001f28:	205b      	movs	r0, #91	; 0x5b
 8001f2a:	f001 fc65 	bl	80037f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8001f2e:	205b      	movs	r0, #91	; 0x5b
 8001f30:	f001 fc8c 	bl	800384c <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8001f34:	4b38      	ldr	r3, [pc, #224]	; (8002018 <HAL_SAI_MspInit+0x2c4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	4a37      	ldr	r2, [pc, #220]	; (8002018 <HAL_SAI_MspInit+0x2c4>)
 8001f3c:	6013      	str	r3, [r2, #0]

    /**SAI2_A_Block_A GPIO Configuration
    PD11     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001f50:	230a      	movs	r3, #10
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4830      	ldr	r0, [pc, #192]	; (800201c <HAL_SAI_MspInit+0x2c8>)
 8001f5c:	f005 ff14 	bl	8007d88 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Stream2;
 8001f60:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <HAL_SAI_MspInit+0x2cc>)
 8001f62:	4a30      	ldr	r2, [pc, #192]	; (8002024 <HAL_SAI_MspInit+0x2d0>)
 8001f64:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_SAI2_A;
 8001f66:	4b2e      	ldr	r3, [pc, #184]	; (8002020 <HAL_SAI_MspInit+0x2cc>)
 8001f68:	2259      	movs	r2, #89	; 0x59
 8001f6a:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <HAL_SAI_MspInit+0x2cc>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f72:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_SAI_MspInit+0x2cc>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <HAL_SAI_MspInit+0x2cc>)
 8001f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f7e:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_SAI_MspInit+0x2cc>)
 8001f82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f86:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_SAI_MspInit+0x2cc>)
 8001f8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f8e:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8001f90:	4b23      	ldr	r3, [pc, #140]	; (8002020 <HAL_SAI_MspInit+0x2cc>)
 8001f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f96:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001f98:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_SAI_MspInit+0x2cc>)
 8001f9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f9e:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <HAL_SAI_MspInit+0x2cc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8001fa6:	481e      	ldr	r0, [pc, #120]	; (8002020 <HAL_SAI_MspInit+0x2cc>)
 8001fa8:	f001 fea2 	bl	8003cf0 <HAL_DMA_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_SAI_MspInit+0x262>
    {
      Error_Handler();
 8001fb2:	f7ff fd59 	bl	8001a68 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a19      	ldr	r2, [pc, #100]	; (8002020 <HAL_SAI_MspInit+0x2cc>)
 8001fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001fbe:	4a18      	ldr	r2, [pc, #96]	; (8002020 <HAL_SAI_MspInit+0x2cc>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a16      	ldr	r2, [pc, #88]	; (8002020 <HAL_SAI_MspInit+0x2cc>)
 8001fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001fcc:	4a14      	ldr	r2, [pc, #80]	; (8002020 <HAL_SAI_MspInit+0x2cc>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a14      	ldr	r2, [pc, #80]	; (8002028 <HAL_SAI_MspInit+0x2d4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	f040 8089 	bne.w	80020f0 <HAL_SAI_MspInit+0x39c>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_SAI_MspInit+0x2c4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d136      	bne.n	8002054 <HAL_SAI_MspInit+0x300>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <HAL_SAI_MspInit+0x2a4>)
 8001fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fec:	e01e      	b.n	800202c <HAL_SAI_MspInit+0x2d8>
 8001fee:	bf00      	nop
 8001ff0:	40015804 	.word	0x40015804
 8001ff4:	240007b8 	.word	0x240007b8
 8001ff8:	58024400 	.word	0x58024400
 8001ffc:	58021000 	.word	0x58021000
 8002000:	240005d8 	.word	0x240005d8
 8002004:	40020010 	.word	0x40020010
 8002008:	40015824 	.word	0x40015824
 800200c:	24000650 	.word	0x24000650
 8002010:	40020028 	.word	0x40020028
 8002014:	40015c04 	.word	0x40015c04
 8002018:	240007bc 	.word	0x240007bc
 800201c:	58020c00 	.word	0x58020c00
 8002020:	240006c8 	.word	0x240006c8
 8002024:	40020040 	.word	0x40020040
 8002028:	40015c24 	.word	0x40015c24
 800202c:	4a32      	ldr	r2, [pc, #200]	; (80020f8 <HAL_SAI_MspInit+0x3a4>)
 800202e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002032:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002036:	4b30      	ldr	r3, [pc, #192]	; (80020f8 <HAL_SAI_MspInit+0x3a4>)
 8002038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800203c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8002044:	2200      	movs	r2, #0
 8002046:	2100      	movs	r1, #0
 8002048:	205b      	movs	r0, #91	; 0x5b
 800204a:	f001 fbd5 	bl	80037f8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 800204e:	205b      	movs	r0, #91	; 0x5b
 8002050:	f001 fbfc 	bl	800384c <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <HAL_SAI_MspInit+0x3a8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	4a28      	ldr	r2, [pc, #160]	; (80020fc <HAL_SAI_MspInit+0x3a8>)
 800205c:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PA0     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800205e:	2301      	movs	r3, #1
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800206e:	230a      	movs	r3, #10
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	4619      	mov	r1, r3
 8002078:	4821      	ldr	r0, [pc, #132]	; (8002100 <HAL_SAI_MspInit+0x3ac>)
 800207a:	f005 fe85 	bl	8007d88 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Stream3;
 800207e:	4b21      	ldr	r3, [pc, #132]	; (8002104 <HAL_SAI_MspInit+0x3b0>)
 8002080:	4a21      	ldr	r2, [pc, #132]	; (8002108 <HAL_SAI_MspInit+0x3b4>)
 8002082:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_SAI2_B;
 8002084:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <HAL_SAI_MspInit+0x3b0>)
 8002086:	225a      	movs	r2, #90	; 0x5a
 8002088:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800208a:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <HAL_SAI_MspInit+0x3b0>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002090:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <HAL_SAI_MspInit+0x3b0>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8002096:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <HAL_SAI_MspInit+0x3b0>)
 8002098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800209c:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800209e:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_SAI_MspInit+0x3b0>)
 80020a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020a4:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <HAL_SAI_MspInit+0x3b0>)
 80020a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ac:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_SAI_MspInit+0x3b0>)
 80020b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b4:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <HAL_SAI_MspInit+0x3b0>)
 80020b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020bc:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_SAI_MspInit+0x3b0>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80020c4:	480f      	ldr	r0, [pc, #60]	; (8002104 <HAL_SAI_MspInit+0x3b0>)
 80020c6:	f001 fe13 	bl	8003cf0 <HAL_DMA_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_SAI_MspInit+0x380>
    {
      Error_Handler();
 80020d0:	f7ff fcca 	bl	8001a68 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <HAL_SAI_MspInit+0x3b0>)
 80020d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80020dc:	4a09      	ldr	r2, [pc, #36]	; (8002104 <HAL_SAI_MspInit+0x3b0>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a07      	ldr	r2, [pc, #28]	; (8002104 <HAL_SAI_MspInit+0x3b0>)
 80020e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80020ea:	4a06      	ldr	r2, [pc, #24]	; (8002104 <HAL_SAI_MspInit+0x3b0>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80020f0:	bf00      	nop
 80020f2:	3730      	adds	r7, #48	; 0x30
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	58024400 	.word	0x58024400
 80020fc:	240007bc 	.word	0x240007bc
 8002100:	58020000 	.word	0x58020000
 8002104:	24000740 	.word	0x24000740
 8002108:	40020058 	.word	0x40020058

0800210c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <MX_SDMMC1_SD_Init+0x38>)
 8002112:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <MX_SDMMC1_SD_Init+0x3c>)
 8002114:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <MX_SDMMC1_SD_Init+0x38>)
 8002118:	2200      	movs	r2, #0
 800211a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <MX_SDMMC1_SD_Init+0x38>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <MX_SDMMC1_SD_Init+0x38>)
 8002124:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002128:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <MX_SDMMC1_SD_Init+0x38>)
 800212c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002130:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <MX_SDMMC1_SD_Init+0x38>)
 8002134:	2201      	movs	r2, #1
 8002136:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	240007c0 	.word	0x240007c0
 8002148:	52007000 	.word	0x52007000

0800214c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a36      	ldr	r2, [pc, #216]	; (8002244 <HAL_SD_MspInit+0xf8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d166      	bne.n	800223c <HAL_SD_MspInit+0xf0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800216e:	4b36      	ldr	r3, [pc, #216]	; (8002248 <HAL_SD_MspInit+0xfc>)
 8002170:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002174:	4a34      	ldr	r2, [pc, #208]	; (8002248 <HAL_SD_MspInit+0xfc>)
 8002176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800217e:	4b32      	ldr	r3, [pc, #200]	; (8002248 <HAL_SD_MspInit+0xfc>)
 8002180:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800218c:	4b2e      	ldr	r3, [pc, #184]	; (8002248 <HAL_SD_MspInit+0xfc>)
 800218e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002192:	4a2d      	ldr	r2, [pc, #180]	; (8002248 <HAL_SD_MspInit+0xfc>)
 8002194:	f043 0304 	orr.w	r3, r3, #4
 8002198:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800219c:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <HAL_SD_MspInit+0xfc>)
 800219e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021aa:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_SD_MspInit+0xfc>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b0:	4a25      	ldr	r2, [pc, #148]	; (8002248 <HAL_SD_MspInit+0xfc>)
 80021b2:	f043 0308 	orr.w	r3, r3, #8
 80021b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ba:	4b23      	ldr	r3, [pc, #140]	; (8002248 <HAL_SD_MspInit+0xfc>)
 80021bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80021c8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d2:	2301      	movs	r3, #1
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80021da:	230c      	movs	r3, #12
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	4819      	ldr	r0, [pc, #100]	; (800224c <HAL_SD_MspInit+0x100>)
 80021e6:	f005 fdcf 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f8:	2303      	movs	r3, #3
 80021fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80021fc:	230c      	movs	r3, #12
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	4619      	mov	r1, r3
 8002206:	4811      	ldr	r0, [pc, #68]	; (800224c <HAL_SD_MspInit+0x100>)
 8002208:	f005 fdbe 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800220c:	2304      	movs	r3, #4
 800220e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002214:	2301      	movs	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800221c:	230c      	movs	r3, #12
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	480a      	ldr	r0, [pc, #40]	; (8002250 <HAL_SD_MspInit+0x104>)
 8002228:	f005 fdae 	bl	8007d88 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	2031      	movs	r0, #49	; 0x31
 8002232:	f001 fae1 	bl	80037f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002236:	2031      	movs	r0, #49	; 0x31
 8002238:	f001 fb08 	bl	800384c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800223c:	bf00      	nop
 800223e:	3728      	adds	r7, #40	; 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	52007000 	.word	0x52007000
 8002248:	58024400 	.word	0x58024400
 800224c:	58020800 	.word	0x58020800
 8002250:	58020c00 	.word	0x58020c00

08002254 <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  if(sdHandle->Instance==SDMMC1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <HAL_SD_MspDeInit+0x44>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d113      	bne.n	800228e <HAL_SD_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <HAL_SD_MspDeInit+0x48>)
 8002268:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800226c:	4a0b      	ldr	r2, [pc, #44]	; (800229c <HAL_SD_MspDeInit+0x48>)
 800226e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002272:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002276:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800227a:	4809      	ldr	r0, [pc, #36]	; (80022a0 <HAL_SD_MspDeInit+0x4c>)
 800227c:	f006 f832 	bl	80082e4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8002280:	2104      	movs	r1, #4
 8002282:	4808      	ldr	r0, [pc, #32]	; (80022a4 <HAL_SD_MspDeInit+0x50>)
 8002284:	f006 f82e 	bl	80082e4 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8002288:	2031      	movs	r0, #49	; 0x31
 800228a:	f001 faf7 	bl	800387c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	52007000 	.word	0x52007000
 800229c:	58024400 	.word	0x58024400
 80022a0:	58020800 	.word	0x58020800
 80022a4:	58020c00 	.word	0x58020c00

080022a8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <MX_SPI2_Init+0xa4>)
 80022ae:	4a28      	ldr	r2, [pc, #160]	; (8002350 <MX_SPI2_Init+0xa8>)
 80022b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <MX_SPI2_Init+0xa4>)
 80022b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80022b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <MX_SPI2_Init+0xa4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80022c0:	4b22      	ldr	r3, [pc, #136]	; (800234c <MX_SPI2_Init+0xa4>)
 80022c2:	220f      	movs	r2, #15
 80022c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022c6:	4b21      	ldr	r3, [pc, #132]	; (800234c <MX_SPI2_Init+0xa4>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022cc:	4b1f      	ldr	r3, [pc, #124]	; (800234c <MX_SPI2_Init+0xa4>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <MX_SPI2_Init+0xa4>)
 80022d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <MX_SPI2_Init+0xa4>)
 80022dc:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80022e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022e2:	4b1a      	ldr	r3, [pc, #104]	; (800234c <MX_SPI2_Init+0xa4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <MX_SPI2_Init+0xa4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <MX_SPI2_Init+0xa4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80022f4:	4b15      	ldr	r3, [pc, #84]	; (800234c <MX_SPI2_Init+0xa4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <MX_SPI2_Init+0xa4>)
 80022fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002300:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <MX_SPI2_Init+0xa4>)
 8002304:	2200      	movs	r2, #0
 8002306:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002308:	4b10      	ldr	r3, [pc, #64]	; (800234c <MX_SPI2_Init+0xa4>)
 800230a:	2200      	movs	r2, #0
 800230c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800230e:	4b0f      	ldr	r3, [pc, #60]	; (800234c <MX_SPI2_Init+0xa4>)
 8002310:	2200      	movs	r2, #0
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <MX_SPI2_Init+0xa4>)
 8002316:	2200      	movs	r2, #0
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_SPI2_Init+0xa4>)
 800231c:	2200      	movs	r2, #0
 800231e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <MX_SPI2_Init+0xa4>)
 8002322:	2200      	movs	r2, #0
 8002324:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_SPI2_Init+0xa4>)
 8002328:	2200      	movs	r2, #0
 800232a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <MX_SPI2_Init+0xa4>)
 800232e:	2200      	movs	r2, #0
 8002330:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_SPI2_Init+0xa4>)
 8002334:	2200      	movs	r2, #0
 8002336:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002338:	4804      	ldr	r0, [pc, #16]	; (800234c <MX_SPI2_Init+0xa4>)
 800233a:	f00e f869 	bl	8010410 <HAL_SPI_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002344:	f7ff fb90 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	2400083c 	.word	0x2400083c
 8002350:	40003800 	.word	0x40003800

08002354 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002358:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <MX_SPI5_Init+0xa4>)
 800235a:	4a28      	ldr	r2, [pc, #160]	; (80023fc <MX_SPI5_Init+0xa8>)
 800235c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <MX_SPI5_Init+0xa4>)
 8002360:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002364:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002366:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <MX_SPI5_Init+0xa4>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 800236c:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <MX_SPI5_Init+0xa4>)
 800236e:	220f      	movs	r2, #15
 8002370:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002372:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <MX_SPI5_Init+0xa4>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <MX_SPI5_Init+0xa4>)
 800237a:	2200      	movs	r2, #0
 800237c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800237e:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <MX_SPI5_Init+0xa4>)
 8002380:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002384:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002386:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <MX_SPI5_Init+0xa4>)
 8002388:	2200      	movs	r2, #0
 800238a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800238c:	4b1a      	ldr	r3, [pc, #104]	; (80023f8 <MX_SPI5_Init+0xa4>)
 800238e:	2200      	movs	r2, #0
 8002390:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002392:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <MX_SPI5_Init+0xa4>)
 8002394:	2200      	movs	r2, #0
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002398:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <MX_SPI5_Init+0xa4>)
 800239a:	2200      	movs	r2, #0
 800239c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800239e:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <MX_SPI5_Init+0xa4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <MX_SPI5_Init+0xa4>)
 80023a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023aa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <MX_SPI5_Init+0xa4>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <MX_SPI5_Init+0xa4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <MX_SPI5_Init+0xa4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <MX_SPI5_Init+0xa4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <MX_SPI5_Init+0xa4>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <MX_SPI5_Init+0xa4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <MX_SPI5_Init+0xa4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <MX_SPI5_Init+0xa4>)
 80023d8:	2200      	movs	r2, #0
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <MX_SPI5_Init+0xa4>)
 80023de:	2200      	movs	r2, #0
 80023e0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <MX_SPI5_Init+0xa4>)
 80023e4:	f00e f814 	bl	8010410 <HAL_SPI_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 80023ee:	f7ff fb3b 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	240008c4 	.word	0x240008c4
 80023fc:	40015000 	.word	0x40015000

08002400 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <MX_SPI6_Init+0xa4>)
 8002406:	4a28      	ldr	r2, [pc, #160]	; (80024a8 <MX_SPI6_Init+0xa8>)
 8002408:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800240a:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <MX_SPI6_Init+0xa4>)
 800240c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002410:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8002412:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <MX_SPI6_Init+0xa4>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
 8002418:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <MX_SPI6_Init+0xa4>)
 800241a:	220f      	movs	r2, #15
 800241c:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <MX_SPI6_Init+0xa4>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <MX_SPI6_Init+0xa4>)
 8002426:	2200      	movs	r2, #0
 8002428:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <MX_SPI6_Init+0xa4>)
 800242c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002430:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002432:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <MX_SPI6_Init+0xa4>)
 8002434:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002438:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800243a:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <MX_SPI6_Init+0xa4>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8002440:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <MX_SPI6_Init+0xa4>)
 8002442:	2200      	movs	r2, #0
 8002444:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002446:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <MX_SPI6_Init+0xa4>)
 8002448:	2200      	movs	r2, #0
 800244a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <MX_SPI6_Init+0xa4>)
 800244e:	2200      	movs	r2, #0
 8002450:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <MX_SPI6_Init+0xa4>)
 8002454:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002458:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <MX_SPI6_Init+0xa4>)
 800245c:	2200      	movs	r2, #0
 800245e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002460:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <MX_SPI6_Init+0xa4>)
 8002462:	2200      	movs	r2, #0
 8002464:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002466:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <MX_SPI6_Init+0xa4>)
 8002468:	2200      	movs	r2, #0
 800246a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800246c:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <MX_SPI6_Init+0xa4>)
 800246e:	2200      	movs	r2, #0
 8002470:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002472:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <MX_SPI6_Init+0xa4>)
 8002474:	2200      	movs	r2, #0
 8002476:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002478:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <MX_SPI6_Init+0xa4>)
 800247a:	2200      	movs	r2, #0
 800247c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <MX_SPI6_Init+0xa4>)
 8002480:	2200      	movs	r2, #0
 8002482:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002484:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <MX_SPI6_Init+0xa4>)
 8002486:	2200      	movs	r2, #0
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <MX_SPI6_Init+0xa4>)
 800248c:	2200      	movs	r2, #0
 800248e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8002490:	4804      	ldr	r0, [pc, #16]	; (80024a4 <MX_SPI6_Init+0xa4>)
 8002492:	f00d ffbd 	bl	8010410 <HAL_SPI_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_SPI6_Init+0xa0>
  {
    Error_Handler();
 800249c:	f7ff fae4 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	2400094c 	.word	0x2400094c
 80024a8:	58001400 	.word	0x58001400

080024ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b0be      	sub	sp, #248	; 0xf8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024c8:	22bc      	movs	r2, #188	; 0xbc
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f01a fd5f 	bl	801cf90 <memset>
  if(spiHandle->Instance==SPI2)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a7d      	ldr	r2, [pc, #500]	; (80026cc <HAL_SPI_MspInit+0x220>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d158      	bne.n	800258e <HAL_SPI_MspInit+0xe2>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024dc:	4b7c      	ldr	r3, [pc, #496]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 80024de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024e2:	4a7b      	ldr	r2, [pc, #492]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024ec:	4b78      	ldr	r3, [pc, #480]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 80024ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fa:	4b75      	ldr	r3, [pc, #468]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 80024fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002500:	4a73      	ldr	r2, [pc, #460]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 8002502:	f043 0304 	orr.w	r3, r3, #4
 8002506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800250a:	4b71      	ldr	r3, [pc, #452]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 800250c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	623b      	str	r3, [r7, #32]
 8002516:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002518:	4b6d      	ldr	r3, [pc, #436]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 800251a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800251e:	4a6c      	ldr	r2, [pc, #432]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002528:	4b69      	ldr	r3, [pc, #420]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 800252a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002536:	230c      	movs	r3, #12
 8002538:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800254e:	2305      	movs	r3, #5
 8002550:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002554:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002558:	4619      	mov	r1, r3
 800255a:	485e      	ldr	r0, [pc, #376]	; (80026d4 <HAL_SPI_MspInit+0x228>)
 800255c:	f005 fc14 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002560:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002564:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002574:	2300      	movs	r3, #0
 8002576:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800257a:	2305      	movs	r3, #5
 800257c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002580:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002584:	4619      	mov	r1, r3
 8002586:	4854      	ldr	r0, [pc, #336]	; (80026d8 <HAL_SPI_MspInit+0x22c>)
 8002588:	f005 fbfe 	bl	8007d88 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 800258c:	e09a      	b.n	80026c4 <HAL_SPI_MspInit+0x218>
  else if(spiHandle->Instance==SPI5)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a52      	ldr	r2, [pc, #328]	; (80026dc <HAL_SPI_MspInit+0x230>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d144      	bne.n	8002622 <HAL_SPI_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8002598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800259e:	2300      	movs	r3, #0
 80025a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025a8:	4618      	mov	r0, r3
 80025aa:	f008 fb35 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_SPI_MspInit+0x10c>
      Error_Handler();
 80025b4:	f7ff fa58 	bl	8001a68 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80025b8:	4b45      	ldr	r3, [pc, #276]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 80025ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025be:	4a44      	ldr	r2, [pc, #272]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 80025c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025c8:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 80025ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d2:	61bb      	str	r3, [r7, #24]
 80025d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025d6:	4b3e      	ldr	r3, [pc, #248]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 80025d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025dc:	4a3c      	ldr	r2, [pc, #240]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 80025de:	f043 0320 	orr.w	r3, r3, #32
 80025e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025e6:	4b3a      	ldr	r3, [pc, #232]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 80025e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80025f4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80025f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800260e:	2305      	movs	r3, #5
 8002610:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002614:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002618:	4619      	mov	r1, r3
 800261a:	4831      	ldr	r0, [pc, #196]	; (80026e0 <HAL_SPI_MspInit+0x234>)
 800261c:	f005 fbb4 	bl	8007d88 <HAL_GPIO_Init>
}
 8002620:	e050      	b.n	80026c4 <HAL_SPI_MspInit+0x218>
  else if(spiHandle->Instance==SPI6)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2f      	ldr	r2, [pc, #188]	; (80026e4 <HAL_SPI_MspInit+0x238>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d14b      	bne.n	80026c4 <HAL_SPI_MspInit+0x218>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 800262c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002638:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800263c:	4618      	mov	r0, r3
 800263e:	f008 faeb 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_SPI_MspInit+0x1a0>
      Error_Handler();
 8002648:	f7ff fa0e 	bl	8001a68 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 800264c:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 800264e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002652:	4a1f      	ldr	r2, [pc, #124]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 8002654:	f043 0320 	orr.w	r3, r3, #32
 8002658:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800265c:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 800265e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 800266c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002670:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 8002672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002676:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <HAL_SPI_MspInit+0x224>)
 800267c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_BOARD_NSS_Pin|MOTOR_BOARD_SPI_MISO_Pin|MOTOR_BOARD_SPI_CLK_Pin|MOTOR_BOARD_SPI_MOSI_Pin;
 8002688:	f44f 43e2 	mov.w	r3, #28928	; 0x7100
 800268c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80026a2:	2305      	movs	r3, #5
 80026a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026ac:	4619      	mov	r1, r3
 80026ae:	480e      	ldr	r0, [pc, #56]	; (80026e8 <HAL_SPI_MspInit+0x23c>)
 80026b0:	f005 fb6a 	bl	8007d88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 0, 0);
 80026b4:	2200      	movs	r2, #0
 80026b6:	2100      	movs	r1, #0
 80026b8:	2056      	movs	r0, #86	; 0x56
 80026ba:	f001 f89d 	bl	80037f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 80026be:	2056      	movs	r0, #86	; 0x56
 80026c0:	f001 f8c4 	bl	800384c <HAL_NVIC_EnableIRQ>
}
 80026c4:	bf00      	nop
 80026c6:	37f8      	adds	r7, #248	; 0xf8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40003800 	.word	0x40003800
 80026d0:	58024400 	.word	0x58024400
 80026d4:	58020800 	.word	0x58020800
 80026d8:	58020400 	.word	0x58020400
 80026dc:	40015000 	.word	0x40015000
 80026e0:	58021400 	.word	0x58021400
 80026e4:	58001400 	.word	0x58001400
 80026e8:	58021800 	.word	0x58021800

080026ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_MspInit+0x34>)
 80026f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026f8:	4a09      	ldr	r2, [pc, #36]	; (8002720 <HAL_MspInit+0x34>)
 80026fa:	f043 0302 	orr.w	r3, r3, #2
 80026fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002702:	4b07      	ldr	r3, [pc, #28]	; (8002720 <HAL_MspInit+0x34>)
 8002704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002710:	2004      	movs	r0, #4
 8002712:	f001 f851 	bl	80037b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	58024400 	.word	0x58024400

08002724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002728:	e7fe      	b.n	8002728 <NMI_Handler+0x4>

0800272a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800272e:	e7fe      	b.n	800272e <HardFault_Handler+0x4>

08002730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <MemManage_Handler+0x4>

08002736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800273a:	e7fe      	b.n	800273a <BusFault_Handler+0x4>

0800273c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <UsageFault_Handler+0x4>

08002742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//Check Boot Pin if not called.
	HAL_IncTick();
 8002770:	f000 fede 	bl	8003530 <HAL_IncTick>

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}

08002778 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <DMA1_Stream0_IRQHandler+0x10>)
 800277e:	f003 fc63 	bl	8006048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	240005d8 	.word	0x240005d8

0800278c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <DMA1_Stream1_IRQHandler+0x10>)
 8002792:	f003 fc59 	bl	8006048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	24000650 	.word	0x24000650

080027a0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <DMA1_Stream2_IRQHandler+0x10>)
 80027a6:	f003 fc4f 	bl	8006048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	240006c8 	.word	0x240006c8

080027b4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <DMA1_Stream3_IRQHandler+0x10>)
 80027ba:	f003 fc45 	bl	8006048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	24000740 	.word	0x24000740

080027c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <USART3_IRQHandler+0x10>)
 80027ce:	f011 f94b 	bl	8013a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	24000c10 	.word	0x24000c10

080027dc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <SDMMC1_IRQHandler+0x10>)
 80027e2:	f00c fc01 	bl	800efe8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	240007c0 	.word	0x240007c0

080027f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <DMA2_Stream0_IRQHandler+0x10>)
 80027f6:	f003 fc27 	bl	8006048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	24000b08 	.word	0x24000b08

08002804 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <SPI6_IRQHandler+0x10>)
 800280a:	f00e f8ad 	bl	8010968 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	2400094c 	.word	0x2400094c

08002818 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 800281c:	4803      	ldr	r0, [pc, #12]	; (800282c <SAI2_IRQHandler+0x14>)
 800281e:	f00b fd81 	bl	800e324 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 8002822:	4803      	ldr	r0, [pc, #12]	; (8002830 <SAI2_IRQHandler+0x18>)
 8002824:	f00b fd7e 	bl	800e324 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	240004a8 	.word	0x240004a8
 8002830:	24000540 	.word	0x24000540

08002834 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <MDMA_IRQHandler+0x10>)
 800283a:	f006 fb93 	bl	8008f64 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	240002f8 	.word	0x240002f8

08002848 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	e00a      	b.n	8002870 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800285a:	f3af 8000 	nop.w
 800285e:	4601      	mov	r1, r0
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	60ba      	str	r2, [r7, #8]
 8002866:	b2ca      	uxtb	r2, r1
 8002868:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	3301      	adds	r3, #1
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	429a      	cmp	r2, r3
 8002876:	dbf0      	blt.n	800285a <_read+0x12>
	}

return len;
 8002878:	687b      	ldr	r3, [r7, #4]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b086      	sub	sp, #24
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	e009      	b.n	80028a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	60ba      	str	r2, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff f8cf 	bl	8001a40 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	3301      	adds	r3, #1
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	dbf1      	blt.n	8002894 <_write+0x12>
	}
	return len;
 80028b0:	687b      	ldr	r3, [r7, #4]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_close>:

int _close(int file)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
	return -1;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028e2:	605a      	str	r2, [r3, #4]
	return 0;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_isatty>:

int _isatty(int file)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
	return 1;
 80028fa:	2301      	movs	r3, #1
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
	return 0;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800292c:	4a14      	ldr	r2, [pc, #80]	; (8002980 <_sbrk+0x5c>)
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <_sbrk+0x60>)
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <_sbrk+0x64>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <_sbrk+0x64>)
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <_sbrk+0x68>)
 8002944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <_sbrk+0x64>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	429a      	cmp	r2, r3
 8002952:	d207      	bcs.n	8002964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002954:	f01a fb7a 	bl	801d04c <__errno>
 8002958:	4603      	mov	r3, r0
 800295a:	220c      	movs	r2, #12
 800295c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295
 8002962:	e009      	b.n	8002978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <_sbrk+0x64>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800296a:	4b07      	ldr	r3, [pc, #28]	; (8002988 <_sbrk+0x64>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	4a05      	ldr	r2, [pc, #20]	; (8002988 <_sbrk+0x64>)
 8002974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002976:	68fb      	ldr	r3, [r7, #12]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	24080000 	.word	0x24080000
 8002984:	00000400 	.word	0x00000400
 8002988:	240009d4 	.word	0x240009d4
 800298c:	24004510 	.word	0x24004510

08002990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002994:	4b37      	ldr	r3, [pc, #220]	; (8002a74 <SystemInit+0xe4>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	4a36      	ldr	r2, [pc, #216]	; (8002a74 <SystemInit+0xe4>)
 800299c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029a4:	4b34      	ldr	r3, [pc, #208]	; (8002a78 <SystemInit+0xe8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	2b06      	cmp	r3, #6
 80029ae:	d807      	bhi.n	80029c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029b0:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <SystemInit+0xe8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 030f 	bic.w	r3, r3, #15
 80029b8:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <SystemInit+0xe8>)
 80029ba:	f043 0307 	orr.w	r3, r3, #7
 80029be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80029c0:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <SystemInit+0xec>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a2d      	ldr	r2, [pc, #180]	; (8002a7c <SystemInit+0xec>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <SystemInit+0xec>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80029d2:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <SystemInit+0xec>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	4929      	ldr	r1, [pc, #164]	; (8002a7c <SystemInit+0xec>)
 80029d8:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <SystemInit+0xf0>)
 80029da:	4013      	ands	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029de:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <SystemInit+0xe8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029ea:	4b23      	ldr	r3, [pc, #140]	; (8002a78 <SystemInit+0xe8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 030f 	bic.w	r3, r3, #15
 80029f2:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <SystemInit+0xe8>)
 80029f4:	f043 0307 	orr.w	r3, r3, #7
 80029f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <SystemInit+0xec>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002a00:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <SystemInit+0xec>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002a06:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <SystemInit+0xec>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <SystemInit+0xec>)
 8002a0e:	4a1d      	ldr	r2, [pc, #116]	; (8002a84 <SystemInit+0xf4>)
 8002a10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002a12:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <SystemInit+0xec>)
 8002a14:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <SystemInit+0xf8>)
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002a18:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <SystemInit+0xec>)
 8002a1a:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <SystemInit+0xfc>)
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <SystemInit+0xec>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a24:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <SystemInit+0xec>)
 8002a26:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <SystemInit+0xfc>)
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a2a:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <SystemInit+0xec>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <SystemInit+0xec>)
 8002a32:	4a16      	ldr	r2, [pc, #88]	; (8002a8c <SystemInit+0xfc>)
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <SystemInit+0xec>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <SystemInit+0xec>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0e      	ldr	r2, [pc, #56]	; (8002a7c <SystemInit+0xec>)
 8002a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <SystemInit+0xec>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <SystemInit+0x100>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <SystemInit+0x104>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a5a:	d202      	bcs.n	8002a62 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <SystemInit+0x108>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <SystemInit+0x10c>)
 8002a64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002a68:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00
 8002a78:	52002000 	.word	0x52002000
 8002a7c:	58024400 	.word	0x58024400
 8002a80:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a84:	02020200 	.word	0x02020200
 8002a88:	01ff0000 	.word	0x01ff0000
 8002a8c:	01010280 	.word	0x01010280
 8002a90:	5c001000 	.word	0x5c001000
 8002a94:	ffff0000 	.word	0xffff0000
 8002a98:	51008108 	.word	0x51008108
 8002a9c:	52004000 	.word	0x52004000

08002aa0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aa6:	f107 0310 	add.w	r3, r7, #16
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002abe:	4b1e      	ldr	r3, [pc, #120]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002ac0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ac4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8002ac6:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002ac8:	2210      	movs	r2, #16
 8002aca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002acc:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10240;
 8002ad2:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002ad4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8002ad8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ada:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae0:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ae6:	4814      	ldr	r0, [pc, #80]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002ae8:	f00e fa1c 	bl	8010f24 <HAL_TIM_Base_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002af2:	f7fe ffb9 	bl	8001a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002afa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002afc:	f107 0310 	add.w	r3, r7, #16
 8002b00:	4619      	mov	r1, r3
 8002b02:	480d      	ldr	r0, [pc, #52]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002b04:	f00f fb22 	bl	801214c <HAL_TIM_ConfigClockSource>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002b0e:	f7fe ffab 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4806      	ldr	r0, [pc, #24]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002b20:	f010 fcd8 	bl	80134d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b2a:	f7fe ff9d 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b2e:	bf00      	nop
 8002b30:	3720      	adds	r7, #32
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	240009d8 	.word	0x240009d8

08002b3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b42:	f107 031c 	add.w	r3, r7, #28
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b4e:	463b      	mov	r3, r7
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
 8002b5c:	615a      	str	r2, [r3, #20]
 8002b5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b60:	4b2c      	ldr	r3, [pc, #176]	; (8002c14 <MX_TIM3_Init+0xd8>)
 8002b62:	4a2d      	ldr	r2, [pc, #180]	; (8002c18 <MX_TIM3_Init+0xdc>)
 8002b64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b66:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <MX_TIM3_Init+0xd8>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6c:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <MX_TIM3_Init+0xd8>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b72:	4b28      	ldr	r3, [pc, #160]	; (8002c14 <MX_TIM3_Init+0xd8>)
 8002b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7a:	4b26      	ldr	r3, [pc, #152]	; (8002c14 <MX_TIM3_Init+0xd8>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b80:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <MX_TIM3_Init+0xd8>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b86:	4823      	ldr	r0, [pc, #140]	; (8002c14 <MX_TIM3_Init+0xd8>)
 8002b88:	f00e fac4 	bl	8011114 <HAL_TIM_PWM_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002b92:	f7fe ff69 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b9e:	f107 031c 	add.w	r3, r7, #28
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	481b      	ldr	r0, [pc, #108]	; (8002c14 <MX_TIM3_Init+0xd8>)
 8002ba6:	f010 fc95 	bl	80134d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002bb0:	f7fe ff5a 	bl	8001a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bb4:	2360      	movs	r3, #96	; 0x60
 8002bb6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bc4:	463b      	mov	r3, r7
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4812      	ldr	r0, [pc, #72]	; (8002c14 <MX_TIM3_Init+0xd8>)
 8002bcc:	f00f f856 	bl	8011c7c <HAL_TIM_PWM_ConfigChannel>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002bd6:	f7fe ff47 	bl	8001a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bda:	463b      	mov	r3, r7
 8002bdc:	2204      	movs	r2, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	480c      	ldr	r0, [pc, #48]	; (8002c14 <MX_TIM3_Init+0xd8>)
 8002be2:	f00f f84b 	bl	8011c7c <HAL_TIM_PWM_ConfigChannel>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002bec:	f7fe ff3c 	bl	8001a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bf0:	463b      	mov	r3, r7
 8002bf2:	220c      	movs	r2, #12
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4807      	ldr	r0, [pc, #28]	; (8002c14 <MX_TIM3_Init+0xd8>)
 8002bf8:	f00f f840 	bl	8011c7c <HAL_TIM_PWM_ConfigChannel>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8002c02:	f7fe ff31 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c06:	4803      	ldr	r0, [pc, #12]	; (8002c14 <MX_TIM3_Init+0xd8>)
 8002c08:	f000 f972 	bl	8002ef0 <HAL_TIM_MspPostInit>

}
 8002c0c:	bf00      	nop
 8002c0e:	3728      	adds	r7, #40	; 0x28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	24000a24 	.word	0x24000a24
 8002c18:	40000400 	.word	0x40000400

08002c1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08e      	sub	sp, #56	; 0x38
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c30:	f107 031c 	add.w	r3, r7, #28
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c3c:	463b      	mov	r3, r7
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	60da      	str	r2, [r3, #12]
 8002c48:	611a      	str	r2, [r3, #16]
 8002c4a:	615a      	str	r2, [r3, #20]
 8002c4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c4e:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <MX_TIM4_Init+0xe8>)
 8002c50:	4a2d      	ldr	r2, [pc, #180]	; (8002d08 <MX_TIM4_Init+0xec>)
 8002c52:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002c54:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <MX_TIM4_Init+0xe8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c5a:	4b2a      	ldr	r3, [pc, #168]	; (8002d04 <MX_TIM4_Init+0xe8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 350;
 8002c60:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <MX_TIM4_Init+0xe8>)
 8002c62:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8002c66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c68:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <MX_TIM4_Init+0xe8>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c6e:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <MX_TIM4_Init+0xe8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c74:	4823      	ldr	r0, [pc, #140]	; (8002d04 <MX_TIM4_Init+0xe8>)
 8002c76:	f00e f955 	bl	8010f24 <HAL_TIM_Base_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002c80:	f7fe fef2 	bl	8001a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c8e:	4619      	mov	r1, r3
 8002c90:	481c      	ldr	r0, [pc, #112]	; (8002d04 <MX_TIM4_Init+0xe8>)
 8002c92:	f00f fa5b 	bl	801214c <HAL_TIM_ConfigClockSource>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002c9c:	f7fe fee4 	bl	8001a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002ca0:	4818      	ldr	r0, [pc, #96]	; (8002d04 <MX_TIM4_Init+0xe8>)
 8002ca2:	f00e fa37 	bl	8011114 <HAL_TIM_PWM_Init>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002cac:	f7fe fedc 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4811      	ldr	r0, [pc, #68]	; (8002d04 <MX_TIM4_Init+0xe8>)
 8002cc0:	f010 fc08 	bl	80134d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002cca:	f7fe fecd 	bl	8001a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cce:	2360      	movs	r3, #96	; 0x60
 8002cd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 60;
 8002cd2:	233c      	movs	r3, #60	; 0x3c
 8002cd4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002cda:	2304      	movs	r3, #4
 8002cdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cde:	463b      	mov	r3, r7
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4807      	ldr	r0, [pc, #28]	; (8002d04 <MX_TIM4_Init+0xe8>)
 8002ce6:	f00e ffc9 	bl	8011c7c <HAL_TIM_PWM_ConfigChannel>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002cf0:	f7fe feba 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002cf4:	4803      	ldr	r0, [pc, #12]	; (8002d04 <MX_TIM4_Init+0xe8>)
 8002cf6:	f000 f8fb 	bl	8002ef0 <HAL_TIM_MspPostInit>

}
 8002cfa:	bf00      	nop
 8002cfc:	3738      	adds	r7, #56	; 0x38
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	24000a70 	.word	0x24000a70
 8002d08:	40000800 	.word	0x40000800

08002d0c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d12:	f107 0310 	add.w	r3, r7, #16
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d20:	1d3b      	adds	r3, r7, #4
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <MX_TIM5_Init+0x94>)
 8002d2c:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <MX_TIM5_Init+0x98>)
 8002d2e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002d30:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <MX_TIM5_Init+0x94>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d36:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <MX_TIM5_Init+0x94>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002d3c:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <MX_TIM5_Init+0x94>)
 8002d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d42:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d44:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <MX_TIM5_Init+0x94>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d4a:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <MX_TIM5_Init+0x94>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d50:	4813      	ldr	r0, [pc, #76]	; (8002da0 <MX_TIM5_Init+0x94>)
 8002d52:	f00e f8e7 	bl	8010f24 <HAL_TIM_Base_Init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002d5c:	f7fe fe84 	bl	8001a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002d66:	f107 0310 	add.w	r3, r7, #16
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	480c      	ldr	r0, [pc, #48]	; (8002da0 <MX_TIM5_Init+0x94>)
 8002d6e:	f00f f9ed 	bl	801214c <HAL_TIM_ConfigClockSource>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002d78:	f7fe fe76 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	4619      	mov	r1, r3
 8002d88:	4805      	ldr	r0, [pc, #20]	; (8002da0 <MX_TIM5_Init+0x94>)
 8002d8a:	f010 fba3 	bl	80134d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002d94:	f7fe fe68 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d98:	bf00      	nop
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	24000abc 	.word	0x24000abc
 8002da4:	40000c00 	.word	0x40000c00

08002da8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db8:	d10f      	bne.n	8002dda <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dba:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <HAL_TIM_Base_MspInit+0xf0>)
 8002dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dc0:	4a35      	ldr	r2, [pc, #212]	; (8002e98 <HAL_TIM_Base_MspInit+0xf0>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dca:	4b33      	ldr	r3, [pc, #204]	; (8002e98 <HAL_TIM_Base_MspInit+0xf0>)
 8002dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002dd8:	e059      	b.n	8002e8e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2f      	ldr	r2, [pc, #188]	; (8002e9c <HAL_TIM_Base_MspInit+0xf4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d140      	bne.n	8002e66 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002de4:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <HAL_TIM_Base_MspInit+0xf0>)
 8002de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dea:	4a2b      	ldr	r2, [pc, #172]	; (8002e98 <HAL_TIM_Base_MspInit+0xf0>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002df4:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <HAL_TIM_Base_MspInit+0xf0>)
 8002df6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA2_Stream0;
 8002e02:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8002e04:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <HAL_TIM_Base_MspInit+0xfc>)
 8002e06:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8002e0a:	221d      	movs	r2, #29
 8002e0c:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8002e10:	2240      	movs	r2, #64	; 0x40
 8002e12:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e14:	4b22      	ldr	r3, [pc, #136]	; (8002ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002e1a:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8002e1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e20:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e22:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8002e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e28:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8002e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e30:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8002e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e38:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002e3a:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8002e3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e40:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e42:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002e48:	4815      	ldr	r0, [pc, #84]	; (8002ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8002e4a:	f000 ff51 	bl	8003cf0 <HAL_DMA_Init>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_TIM_Base_MspInit+0xb0>
      Error_Handler();
 8002e54:	f7fe fe08 	bl	8001a68 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a11      	ldr	r2, [pc, #68]	; (8002ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
 8002e5e:	4a10      	ldr	r2, [pc, #64]	; (8002ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e64:	e013      	b.n	8002e8e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM5)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ea8 <HAL_TIM_Base_MspInit+0x100>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d10e      	bne.n	8002e8e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e70:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <HAL_TIM_Base_MspInit+0xf0>)
 8002e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e76:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <HAL_TIM_Base_MspInit+0xf0>)
 8002e78:	f043 0308 	orr.w	r3, r3, #8
 8002e7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_TIM_Base_MspInit+0xf0>)
 8002e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
}
 8002e8e:	bf00      	nop
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	58024400 	.word	0x58024400
 8002e9c:	40000800 	.word	0x40000800
 8002ea0:	24000b08 	.word	0x24000b08
 8002ea4:	40020410 	.word	0x40020410
 8002ea8:	40000c00 	.word	0x40000c00

08002eac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d10e      	bne.n	8002edc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_TIM_PWM_MspInit+0x40>)
 8002ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ec4:	4a09      	ldr	r2, [pc, #36]	; (8002eec <HAL_TIM_PWM_MspInit+0x40>)
 8002ec6:	f043 0302 	orr.w	r3, r3, #2
 8002eca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ece:	4b07      	ldr	r3, [pc, #28]	; (8002eec <HAL_TIM_PWM_MspInit+0x40>)
 8002ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	58024400 	.word	0x58024400

08002ef0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	; 0x28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 0314 	add.w	r3, r7, #20
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a35      	ldr	r2, [pc, #212]	; (8002fe4 <HAL_TIM_MspPostInit+0xf4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d13e      	bne.n	8002f90 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f12:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <HAL_TIM_MspPostInit+0xf8>)
 8002f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f18:	4a33      	ldr	r2, [pc, #204]	; (8002fe8 <HAL_TIM_MspPostInit+0xf8>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f22:	4b31      	ldr	r3, [pc, #196]	; (8002fe8 <HAL_TIM_MspPostInit+0xf8>)
 8002f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f30:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <HAL_TIM_MspPostInit+0xf8>)
 8002f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f36:	4a2c      	ldr	r2, [pc, #176]	; (8002fe8 <HAL_TIM_MspPostInit+0xf8>)
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f40:	4b29      	ldr	r3, [pc, #164]	; (8002fe8 <HAL_TIM_MspPostInit+0xf8>)
 8002f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f4e:	23c0      	movs	r3, #192	; 0xc0
 8002f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f52:	2302      	movs	r3, #2
 8002f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f62:	f107 0314 	add.w	r3, r7, #20
 8002f66:	4619      	mov	r1, r3
 8002f68:	4820      	ldr	r0, [pc, #128]	; (8002fec <HAL_TIM_MspPostInit+0xfc>)
 8002f6a:	f004 ff0d 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f72:	2302      	movs	r3, #2
 8002f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f82:	f107 0314 	add.w	r3, r7, #20
 8002f86:	4619      	mov	r1, r3
 8002f88:	4819      	ldr	r0, [pc, #100]	; (8002ff0 <HAL_TIM_MspPostInit+0x100>)
 8002f8a:	f004 fefd 	bl	8007d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002f8e:	e024      	b.n	8002fda <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM4)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a17      	ldr	r2, [pc, #92]	; (8002ff4 <HAL_TIM_MspPostInit+0x104>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d11f      	bne.n	8002fda <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f9a:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <HAL_TIM_MspPostInit+0xf8>)
 8002f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa0:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <HAL_TIM_MspPostInit+0xf8>)
 8002fa2:	f043 0308 	orr.w	r3, r3, #8
 8002fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002faa:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <HAL_TIM_MspPostInit+0xf8>)
 8002fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED_DATA_OUT_Pin;
 8002fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_DATA_OUT_GPIO_Port, &GPIO_InitStruct);
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4808      	ldr	r0, [pc, #32]	; (8002ff8 <HAL_TIM_MspPostInit+0x108>)
 8002fd6:	f004 fed7 	bl	8007d88 <HAL_GPIO_Init>
}
 8002fda:	bf00      	nop
 8002fdc:	3728      	adds	r7, #40	; 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	58024400 	.word	0x58024400
 8002fec:	58020000 	.word	0x58020000
 8002ff0:	58020400 	.word	0x58020400
 8002ff4:	40000800 	.word	0x40000800
 8002ff8:	58020c00 	.word	0x58020c00

08002ffc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003000:	4b22      	ldr	r3, [pc, #136]	; (800308c <MX_USART2_UART_Init+0x90>)
 8003002:	4a23      	ldr	r2, [pc, #140]	; (8003090 <MX_USART2_UART_Init+0x94>)
 8003004:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 8003006:	4b21      	ldr	r3, [pc, #132]	; (800308c <MX_USART2_UART_Init+0x90>)
 8003008:	f647 2212 	movw	r2, #31250	; 0x7a12
 800300c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800300e:	4b1f      	ldr	r3, [pc, #124]	; (800308c <MX_USART2_UART_Init+0x90>)
 8003010:	2200      	movs	r2, #0
 8003012:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <MX_USART2_UART_Init+0x90>)
 8003016:	2200      	movs	r2, #0
 8003018:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800301a:	4b1c      	ldr	r3, [pc, #112]	; (800308c <MX_USART2_UART_Init+0x90>)
 800301c:	2200      	movs	r2, #0
 800301e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003020:	4b1a      	ldr	r3, [pc, #104]	; (800308c <MX_USART2_UART_Init+0x90>)
 8003022:	220c      	movs	r2, #12
 8003024:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003026:	4b19      	ldr	r3, [pc, #100]	; (800308c <MX_USART2_UART_Init+0x90>)
 8003028:	2200      	movs	r2, #0
 800302a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800302c:	4b17      	ldr	r3, [pc, #92]	; (800308c <MX_USART2_UART_Init+0x90>)
 800302e:	2200      	movs	r2, #0
 8003030:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <MX_USART2_UART_Init+0x90>)
 8003034:	2200      	movs	r2, #0
 8003036:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003038:	4b14      	ldr	r3, [pc, #80]	; (800308c <MX_USART2_UART_Init+0x90>)
 800303a:	2200      	movs	r2, #0
 800303c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800303e:	4b13      	ldr	r3, [pc, #76]	; (800308c <MX_USART2_UART_Init+0x90>)
 8003040:	2200      	movs	r2, #0
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003044:	4811      	ldr	r0, [pc, #68]	; (800308c <MX_USART2_UART_Init+0x90>)
 8003046:	f010 fbab 	bl	80137a0 <HAL_UART_Init>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003050:	f7fe fd0a 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003054:	2100      	movs	r1, #0
 8003056:	480d      	ldr	r0, [pc, #52]	; (800308c <MX_USART2_UART_Init+0x90>)
 8003058:	f012 facc 	bl	80155f4 <HAL_UARTEx_SetTxFifoThreshold>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003062:	f7fe fd01 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003066:	2100      	movs	r1, #0
 8003068:	4808      	ldr	r0, [pc, #32]	; (800308c <MX_USART2_UART_Init+0x90>)
 800306a:	f012 fb5d 	bl	8015728 <HAL_UARTEx_SetRxFifoThreshold>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003074:	f7fe fcf8 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003078:	4804      	ldr	r0, [pc, #16]	; (800308c <MX_USART2_UART_Init+0x90>)
 800307a:	f012 fa45 	bl	8015508 <HAL_UARTEx_DisableFifoMode>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003084:	f7fe fcf0 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}
 800308c:	24000b80 	.word	0x24000b80
 8003090:	40004400 	.word	0x40004400

08003094 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003098:	4b22      	ldr	r3, [pc, #136]	; (8003124 <MX_USART3_UART_Init+0x90>)
 800309a:	4a23      	ldr	r2, [pc, #140]	; (8003128 <MX_USART3_UART_Init+0x94>)
 800309c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800309e:	4b21      	ldr	r3, [pc, #132]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030a6:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030ac:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030b2:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030b8:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030ba:	220c      	movs	r2, #12
 80030bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c4:	4b17      	ldr	r3, [pc, #92]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030d8:	2200      	movs	r2, #0
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030dc:	4811      	ldr	r0, [pc, #68]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030de:	f010 fb5f 	bl	80137a0 <HAL_UART_Init>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80030e8:	f7fe fcbe 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030ec:	2100      	movs	r1, #0
 80030ee:	480d      	ldr	r0, [pc, #52]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030f0:	f012 fa80 	bl	80155f4 <HAL_UARTEx_SetTxFifoThreshold>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80030fa:	f7fe fcb5 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030fe:	2100      	movs	r1, #0
 8003100:	4808      	ldr	r0, [pc, #32]	; (8003124 <MX_USART3_UART_Init+0x90>)
 8003102:	f012 fb11 	bl	8015728 <HAL_UARTEx_SetRxFifoThreshold>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800310c:	f7fe fcac 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003110:	4804      	ldr	r0, [pc, #16]	; (8003124 <MX_USART3_UART_Init+0x90>)
 8003112:	f012 f9f9 	bl	8015508 <HAL_UARTEx_DisableFifoMode>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800311c:	f7fe fca4 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003120:	bf00      	nop
 8003122:	bd80      	pop	{r7, pc}
 8003124:	24000c10 	.word	0x24000c10
 8003128:	40004800 	.word	0x40004800

0800312c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b0ba      	sub	sp, #232	; 0xe8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003144:	f107 0318 	add.w	r3, r7, #24
 8003148:	22bc      	movs	r2, #188	; 0xbc
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f019 ff1f 	bl	801cf90 <memset>
  if(uartHandle->Instance==USART2)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a4d      	ldr	r2, [pc, #308]	; (800328c <HAL_UART_MspInit+0x160>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d142      	bne.n	80031e2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800315c:	2302      	movs	r3, #2
 800315e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003160:	2300      	movs	r3, #0
 8003162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003166:	f107 0318 	add.w	r3, r7, #24
 800316a:	4618      	mov	r0, r3
 800316c:	f007 fd54 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003176:	f7fe fc77 	bl	8001a68 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800317a:	4b45      	ldr	r3, [pc, #276]	; (8003290 <HAL_UART_MspInit+0x164>)
 800317c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003180:	4a43      	ldr	r2, [pc, #268]	; (8003290 <HAL_UART_MspInit+0x164>)
 8003182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003186:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800318a:	4b41      	ldr	r3, [pc, #260]	; (8003290 <HAL_UART_MspInit+0x164>)
 800318c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003198:	4b3d      	ldr	r3, [pc, #244]	; (8003290 <HAL_UART_MspInit+0x164>)
 800319a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800319e:	4a3c      	ldr	r2, [pc, #240]	; (8003290 <HAL_UART_MspInit+0x164>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a8:	4b39      	ldr	r3, [pc, #228]	; (8003290 <HAL_UART_MspInit+0x164>)
 80031aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031b6:	230c      	movs	r3, #12
 80031b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031bc:	2302      	movs	r3, #2
 80031be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031ce:	2307      	movs	r3, #7
 80031d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031d8:	4619      	mov	r1, r3
 80031da:	482e      	ldr	r0, [pc, #184]	; (8003294 <HAL_UART_MspInit+0x168>)
 80031dc:	f004 fdd4 	bl	8007d88 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031e0:	e04f      	b.n	8003282 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART3)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a2c      	ldr	r2, [pc, #176]	; (8003298 <HAL_UART_MspInit+0x16c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d14a      	bne.n	8003282 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80031ec:	2302      	movs	r3, #2
 80031ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80031f0:	2300      	movs	r3, #0
 80031f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031f6:	f107 0318 	add.w	r3, r7, #24
 80031fa:	4618      	mov	r0, r3
 80031fc:	f007 fd0c 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_UART_MspInit+0xde>
      Error_Handler();
 8003206:	f7fe fc2f 	bl	8001a68 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800320a:	4b21      	ldr	r3, [pc, #132]	; (8003290 <HAL_UART_MspInit+0x164>)
 800320c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003210:	4a1f      	ldr	r2, [pc, #124]	; (8003290 <HAL_UART_MspInit+0x164>)
 8003212:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003216:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800321a:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_UART_MspInit+0x164>)
 800321c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003228:	4b19      	ldr	r3, [pc, #100]	; (8003290 <HAL_UART_MspInit+0x164>)
 800322a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800322e:	4a18      	ldr	r2, [pc, #96]	; (8003290 <HAL_UART_MspInit+0x164>)
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003238:	4b15      	ldr	r3, [pc, #84]	; (8003290 <HAL_UART_MspInit+0x164>)
 800323a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003246:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800324a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324e:	2302      	movs	r3, #2
 8003250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	2300      	movs	r3, #0
 8003256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325a:	2300      	movs	r3, #0
 800325c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003260:	2307      	movs	r3, #7
 8003262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003266:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800326a:	4619      	mov	r1, r3
 800326c:	480b      	ldr	r0, [pc, #44]	; (800329c <HAL_UART_MspInit+0x170>)
 800326e:	f004 fd8b 	bl	8007d88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003272:	2200      	movs	r2, #0
 8003274:	2100      	movs	r1, #0
 8003276:	2027      	movs	r0, #39	; 0x27
 8003278:	f000 fabe 	bl	80037f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800327c:	2027      	movs	r0, #39	; 0x27
 800327e:	f000 fae5 	bl	800384c <HAL_NVIC_EnableIRQ>
}
 8003282:	bf00      	nop
 8003284:	37e8      	adds	r7, #232	; 0xe8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40004400 	.word	0x40004400
 8003290:	58024400 	.word	0x58024400
 8003294:	58020000 	.word	0x58020000
 8003298:	40004800 	.word	0x40004800
 800329c:	58020400 	.word	0x58020400

080032a0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80032a4:	4b15      	ldr	r3, [pc, #84]	; (80032fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80032a6:	4a16      	ldr	r2, [pc, #88]	; (8003300 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80032a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80032aa:	4b14      	ldr	r3, [pc, #80]	; (80032fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80032ac:	2209      	movs	r2, #9
 80032ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80032b0:	4b12      	ldr	r3, [pc, #72]	; (80032fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80032b2:	2202      	movs	r2, #2
 80032b4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80032be:	2202      	movs	r2, #2
 80032c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80032c2:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80032ce:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80032da:	4b08      	ldr	r3, [pc, #32]	; (80032fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80032dc:	2201      	movs	r2, #1
 80032de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80032e0:	4b06      	ldr	r3, [pc, #24]	; (80032fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80032e6:	4805      	ldr	r0, [pc, #20]	; (80032fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80032e8:	f006 f828 	bl	800933c <HAL_PCD_Init>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80032f2:	f7fe fbb9 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	24000ca0 	.word	0x24000ca0
 8003300:	40080000 	.word	0x40080000

08003304 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b0b8      	sub	sp, #224	; 0xe0
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800331c:	f107 0310 	add.w	r3, r7, #16
 8003320:	22bc      	movs	r2, #188	; 0xbc
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f019 fe33 	bl	801cf90 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a2f      	ldr	r2, [pc, #188]	; (80033ec <HAL_PCD_MspInit+0xe8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d156      	bne.n	80033e2 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003334:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003338:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800333a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800333e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003342:	f107 0310 	add.w	r3, r7, #16
 8003346:	4618      	mov	r0, r3
 8003348:	f007 fc66 	bl	800ac18 <HAL_RCCEx_PeriphCLKConfig>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8003352:	f7fe fb89 	bl	8001a68 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003356:	f006 f993 	bl	8009680 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335a:	4b25      	ldr	r3, [pc, #148]	; (80033f0 <HAL_PCD_MspInit+0xec>)
 800335c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003360:	4a23      	ldr	r2, [pc, #140]	; (80033f0 <HAL_PCD_MspInit+0xec>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800336a:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <HAL_PCD_MspInit+0xec>)
 800336c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003378:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800337c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003392:	230a      	movs	r3, #10
 8003394:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003398:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800339c:	4619      	mov	r1, r3
 800339e:	4815      	ldr	r0, [pc, #84]	; (80033f4 <HAL_PCD_MspInit+0xf0>)
 80033a0:	f004 fcf2 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ac:	2300      	movs	r3, #0
 80033ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80033bc:	4619      	mov	r1, r3
 80033be:	480d      	ldr	r0, [pc, #52]	; (80033f4 <HAL_PCD_MspInit+0xf0>)
 80033c0:	f004 fce2 	bl	8007d88 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_PCD_MspInit+0xec>)
 80033c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80033ca:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <HAL_PCD_MspInit+0xec>)
 80033cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <HAL_PCD_MspInit+0xec>)
 80033d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80033da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80033e2:	bf00      	nop
 80033e4:	37e0      	adds	r7, #224	; 0xe0
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40080000 	.word	0x40080000
 80033f0:	58024400 	.word	0x58024400
 80033f4:	58020000 	.word	0x58020000

080033f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80033f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003430 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033fc:	f7ff fac8 	bl	8002990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003400:	480c      	ldr	r0, [pc, #48]	; (8003434 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003402:	490d      	ldr	r1, [pc, #52]	; (8003438 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003404:	4a0d      	ldr	r2, [pc, #52]	; (800343c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003408:	e002      	b.n	8003410 <LoopCopyDataInit>

0800340a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800340a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800340c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800340e:	3304      	adds	r3, #4

08003410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003414:	d3f9      	bcc.n	800340a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003416:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003418:	4c0a      	ldr	r4, [pc, #40]	; (8003444 <LoopFillZerobss+0x22>)
  movs r3, #0
 800341a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800341c:	e001      	b.n	8003422 <LoopFillZerobss>

0800341e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800341e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003420:	3204      	adds	r2, #4

08003422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003424:	d3fb      	bcc.n	800341e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003426:	f019 fe17 	bl	801d058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800342a:	f7fe f9d1 	bl	80017d0 <main>
  bx  lr
 800342e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003430:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003434:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003438:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 800343c:	0801e560 	.word	0x0801e560
  ldr r2, =_sbss
 8003440:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8003444:	24004510 	.word	0x24004510

08003448 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003448:	e7fe      	b.n	8003448 <ADC3_IRQHandler>
	...

0800344c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003452:	2003      	movs	r0, #3
 8003454:	f000 f9b0 	bl	80037b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003458:	f007 fa08 	bl	800a86c <HAL_RCC_GetSysClockFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <HAL_Init+0x68>)
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	0a1b      	lsrs	r3, r3, #8
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	4913      	ldr	r1, [pc, #76]	; (80034b8 <HAL_Init+0x6c>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
 8003474:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003476:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <HAL_Init+0x68>)
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	4a0e      	ldr	r2, [pc, #56]	; (80034b8 <HAL_Init+0x6c>)
 8003480:	5cd3      	ldrb	r3, [r2, r3]
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
 800348c:	4a0b      	ldr	r2, [pc, #44]	; (80034bc <HAL_Init+0x70>)
 800348e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003490:	4a0b      	ldr	r2, [pc, #44]	; (80034c0 <HAL_Init+0x74>)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003496:	2000      	movs	r0, #0
 8003498:	f000 f814 	bl	80034c4 <HAL_InitTick>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e002      	b.n	80034ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80034a6:	f7ff f921 	bl	80026ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	58024400 	.word	0x58024400
 80034b8:	0801e060 	.word	0x0801e060
 80034bc:	24000004 	.word	0x24000004
 80034c0:	24000000 	.word	0x24000000

080034c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80034cc:	4b15      	ldr	r3, [pc, #84]	; (8003524 <HAL_InitTick+0x60>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e021      	b.n	800351c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80034d8:	4b13      	ldr	r3, [pc, #76]	; (8003528 <HAL_InitTick+0x64>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_InitTick+0x60>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	4619      	mov	r1, r3
 80034e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80034ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f9dc 	bl	80038ac <HAL_SYSTICK_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e00e      	b.n	800351c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b0f      	cmp	r3, #15
 8003502:	d80a      	bhi.n	800351a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003504:	2200      	movs	r2, #0
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	f04f 30ff 	mov.w	r0, #4294967295
 800350c:	f000 f974 	bl	80037f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003510:	4a06      	ldr	r2, [pc, #24]	; (800352c <HAL_InitTick+0x68>)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	e000      	b.n	800351c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	2400000c 	.word	0x2400000c
 8003528:	24000000 	.word	0x24000000
 800352c:	24000008 	.word	0x24000008

08003530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_IncTick+0x20>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_IncTick+0x24>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4413      	add	r3, r2
 8003540:	4a04      	ldr	r2, [pc, #16]	; (8003554 <HAL_IncTick+0x24>)
 8003542:	6013      	str	r3, [r2, #0]
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	2400000c 	.word	0x2400000c
 8003554:	240010a8 	.word	0x240010a8

08003558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  return uwTick;
 800355c:	4b03      	ldr	r3, [pc, #12]	; (800356c <HAL_GetTick+0x14>)
 800355e:	681b      	ldr	r3, [r3, #0]
}
 8003560:	4618      	mov	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	240010a8 	.word	0x240010a8

08003570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003578:	f7ff ffee 	bl	8003558 <HAL_GetTick>
 800357c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d005      	beq.n	8003596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800358a:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <HAL_Delay+0x44>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003596:	bf00      	nop
 8003598:	f7ff ffde 	bl	8003558 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d8f7      	bhi.n	8003598 <HAL_Delay+0x28>
  {
  }
}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	2400000c 	.word	0x2400000c

080035b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_GetREVID+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	0c1b      	lsrs	r3, r3, #16
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	5c001000 	.word	0x5c001000

080035d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <__NVIC_SetPriorityGrouping+0x40>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035ec:	4013      	ands	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035fe:	4a04      	ldr	r2, [pc, #16]	; (8003610 <__NVIC_SetPriorityGrouping+0x40>)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	60d3      	str	r3, [r2, #12]
}
 8003604:	bf00      	nop
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	e000ed00 	.word	0xe000ed00
 8003614:	05fa0000 	.word	0x05fa0000

08003618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800361c:	4b04      	ldr	r3, [pc, #16]	; (8003630 <__NVIC_GetPriorityGrouping+0x18>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	f003 0307 	and.w	r3, r3, #7
}
 8003626:	4618      	mov	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800363e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003642:	2b00      	cmp	r3, #0
 8003644:	db0b      	blt.n	800365e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	f003 021f 	and.w	r2, r3, #31
 800364c:	4907      	ldr	r1, [pc, #28]	; (800366c <__NVIC_EnableIRQ+0x38>)
 800364e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2001      	movs	r0, #1
 8003656:	fa00 f202 	lsl.w	r2, r0, r2
 800365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000e100 	.word	0xe000e100

08003670 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800367a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800367e:	2b00      	cmp	r3, #0
 8003680:	db12      	blt.n	80036a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	f003 021f 	and.w	r2, r3, #31
 8003688:	490a      	ldr	r1, [pc, #40]	; (80036b4 <__NVIC_DisableIRQ+0x44>)
 800368a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2001      	movs	r0, #1
 8003692:	fa00 f202 	lsl.w	r2, r0, r2
 8003696:	3320      	adds	r3, #32
 8003698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800369c:	f3bf 8f4f 	dsb	sy
}
 80036a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036a2:	f3bf 8f6f 	isb	sy
}
 80036a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	e000e100 	.word	0xe000e100

080036b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	6039      	str	r1, [r7, #0]
 80036c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	db0a      	blt.n	80036e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	490c      	ldr	r1, [pc, #48]	; (8003704 <__NVIC_SetPriority+0x4c>)
 80036d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036d6:	0112      	lsls	r2, r2, #4
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	440b      	add	r3, r1
 80036dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036e0:	e00a      	b.n	80036f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4908      	ldr	r1, [pc, #32]	; (8003708 <__NVIC_SetPriority+0x50>)
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	3b04      	subs	r3, #4
 80036f0:	0112      	lsls	r2, r2, #4
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	440b      	add	r3, r1
 80036f6:	761a      	strb	r2, [r3, #24]
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000e100 	.word	0xe000e100
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f1c3 0307 	rsb	r3, r3, #7
 8003726:	2b04      	cmp	r3, #4
 8003728:	bf28      	it	cs
 800372a:	2304      	movcs	r3, #4
 800372c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3304      	adds	r3, #4
 8003732:	2b06      	cmp	r3, #6
 8003734:	d902      	bls.n	800373c <NVIC_EncodePriority+0x30>
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3b03      	subs	r3, #3
 800373a:	e000      	b.n	800373e <NVIC_EncodePriority+0x32>
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003740:	f04f 32ff 	mov.w	r2, #4294967295
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	401a      	ands	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003754:	f04f 31ff 	mov.w	r1, #4294967295
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	fa01 f303 	lsl.w	r3, r1, r3
 800375e:	43d9      	mvns	r1, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003764:	4313      	orrs	r3, r2
         );
}
 8003766:	4618      	mov	r0, r3
 8003768:	3724      	adds	r7, #36	; 0x24
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3b01      	subs	r3, #1
 8003780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003784:	d301      	bcc.n	800378a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003786:	2301      	movs	r3, #1
 8003788:	e00f      	b.n	80037aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800378a:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <SysTick_Config+0x40>)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3b01      	subs	r3, #1
 8003790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003792:	210f      	movs	r1, #15
 8003794:	f04f 30ff 	mov.w	r0, #4294967295
 8003798:	f7ff ff8e 	bl	80036b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <SysTick_Config+0x40>)
 800379e:	2200      	movs	r2, #0
 80037a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037a2:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <SysTick_Config+0x40>)
 80037a4:	2207      	movs	r2, #7
 80037a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	e000e010 	.word	0xe000e010

080037b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b07      	cmp	r3, #7
 80037c4:	d00f      	beq.n	80037e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b06      	cmp	r3, #6
 80037ca:	d00c      	beq.n	80037e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d009      	beq.n	80037e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d006      	beq.n	80037e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d003      	beq.n	80037e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037de:	2191      	movs	r1, #145	; 0x91
 80037e0:	4804      	ldr	r0, [pc, #16]	; (80037f4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80037e2:	f7fe f946 	bl	8001a72 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff fef2 	bl	80035d0 <__NVIC_SetPriorityGrouping>
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	0801db08 	.word	0x0801db08

080037f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b0f      	cmp	r3, #15
 800380a:	d903      	bls.n	8003814 <HAL_NVIC_SetPriority+0x1c>
 800380c:	21a9      	movs	r1, #169	; 0xa9
 800380e:	480e      	ldr	r0, [pc, #56]	; (8003848 <HAL_NVIC_SetPriority+0x50>)
 8003810:	f7fe f92f 	bl	8001a72 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b0f      	cmp	r3, #15
 8003818:	d903      	bls.n	8003822 <HAL_NVIC_SetPriority+0x2a>
 800381a:	21aa      	movs	r1, #170	; 0xaa
 800381c:	480a      	ldr	r0, [pc, #40]	; (8003848 <HAL_NVIC_SetPriority+0x50>)
 800381e:	f7fe f928 	bl	8001a72 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8003822:	f7ff fef9 	bl	8003618 <__NVIC_GetPriorityGrouping>
 8003826:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	6978      	ldr	r0, [r7, #20]
 800382e:	f7ff ff6d 	bl	800370c <NVIC_EncodePriority>
 8003832:	4602      	mov	r2, r0
 8003834:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff ff3c 	bl	80036b8 <__NVIC_SetPriority>
}
 8003840:	bf00      	nop
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	0801db08 	.word	0x0801db08

0800384c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800385a:	2b00      	cmp	r3, #0
 800385c:	da03      	bge.n	8003866 <HAL_NVIC_EnableIRQ+0x1a>
 800385e:	21bd      	movs	r1, #189	; 0xbd
 8003860:	4805      	ldr	r0, [pc, #20]	; (8003878 <HAL_NVIC_EnableIRQ+0x2c>)
 8003862:	f7fe f906 	bl	8001a72 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff fee2 	bl	8003634 <__NVIC_EnableIRQ>
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	0801db08 	.word	0x0801db08

0800387c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800388a:	2b00      	cmp	r3, #0
 800388c:	da03      	bge.n	8003896 <HAL_NVIC_DisableIRQ+0x1a>
 800388e:	21cd      	movs	r1, #205	; 0xcd
 8003890:	4805      	ldr	r0, [pc, #20]	; (80038a8 <HAL_NVIC_DisableIRQ+0x2c>)
 8003892:	f7fe f8ee 	bl	8001a72 <assert_failed>

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fee8 	bl	8003670 <__NVIC_DisableIRQ>
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	0801db08 	.word	0x0801db08

080038ac <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff ff5d 	bl	8003774 <SysTick_Config>
 80038ba:	4603      	mov	r3, r0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e01e      	b.n	8003914 <HAL_DAC_Init+0x50>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a10      	ldr	r2, [pc, #64]	; (800391c <HAL_DAC_Init+0x58>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d004      	beq.n	80038ea <HAL_DAC_Init+0x26>
 80038e0:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80038e4:	480e      	ldr	r0, [pc, #56]	; (8003920 <HAL_DAC_Init+0x5c>)
 80038e6:	f7fe f8c4 	bl	8001a72 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	791b      	ldrb	r3, [r3, #4]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d105      	bne.n	8003900 <HAL_DAC_Init+0x3c>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fd f96c 	bl	8000bd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40007400 	.word	0x40007400
 8003920:	0801db44 	.word	0x0801db44

08003924 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d03c      	beq.n	80039b2 <HAL_DAC_ConfigChannel+0x8e>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b06      	cmp	r3, #6
 800393e:	d038      	beq.n	80039b2 <HAL_DAC_ConfigChannel+0x8e>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b0a      	cmp	r3, #10
 8003946:	d034      	beq.n	80039b2 <HAL_DAC_ConfigChannel+0x8e>
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b0e      	cmp	r3, #14
 800394e:	d030      	beq.n	80039b2 <HAL_DAC_ConfigChannel+0x8e>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b12      	cmp	r3, #18
 8003956:	d02c      	beq.n	80039b2 <HAL_DAC_ConfigChannel+0x8e>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b16      	cmp	r3, #22
 800395e:	d028      	beq.n	80039b2 <HAL_DAC_ConfigChannel+0x8e>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b1a      	cmp	r3, #26
 8003966:	d024      	beq.n	80039b2 <HAL_DAC_ConfigChannel+0x8e>
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b1e      	cmp	r3, #30
 800396e:	d020      	beq.n	80039b2 <HAL_DAC_ConfigChannel+0x8e>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b22      	cmp	r3, #34	; 0x22
 8003976:	d01c      	beq.n	80039b2 <HAL_DAC_ConfigChannel+0x8e>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b26      	cmp	r3, #38	; 0x26
 800397e:	d018      	beq.n	80039b2 <HAL_DAC_ConfigChannel+0x8e>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b2a      	cmp	r3, #42	; 0x2a
 8003986:	d014      	beq.n	80039b2 <HAL_DAC_ConfigChannel+0x8e>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b2e      	cmp	r3, #46	; 0x2e
 800398e:	d010      	beq.n	80039b2 <HAL_DAC_ConfigChannel+0x8e>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b32      	cmp	r3, #50	; 0x32
 8003996:	d00c      	beq.n	80039b2 <HAL_DAC_ConfigChannel+0x8e>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b36      	cmp	r3, #54	; 0x36
 800399e:	d008      	beq.n	80039b2 <HAL_DAC_ConfigChannel+0x8e>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d004      	beq.n	80039b2 <HAL_DAC_ConfigChannel+0x8e>
 80039a8:	f240 31f7 	movw	r1, #1015	; 0x3f7
 80039ac:	489b      	ldr	r0, [pc, #620]	; (8003c1c <HAL_DAC_ConfigChannel+0x2f8>)
 80039ae:	f7fe f860 	bl	8001a72 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_DAC_ConfigChannel+0xa8>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d004      	beq.n	80039cc <HAL_DAC_ConfigChannel+0xa8>
 80039c2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80039c6:	4895      	ldr	r0, [pc, #596]	; (8003c1c <HAL_DAC_ConfigChannel+0x2f8>)
 80039c8:	f7fe f853 	bl	8001a72 <assert_failed>
  assert_param(IS_DAC_CHIP_CONNECTION(sConfig->DAC_ConnectOnChipPeripheral));
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d00c      	beq.n	80039ee <HAL_DAC_ConfigChannel+0xca>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d008      	beq.n	80039ee <HAL_DAC_ConfigChannel+0xca>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d004      	beq.n	80039ee <HAL_DAC_ConfigChannel+0xca>
 80039e4:	f240 31f9 	movw	r1, #1017	; 0x3f9
 80039e8:	488c      	ldr	r0, [pc, #560]	; (8003c1c <HAL_DAC_ConfigChannel+0x2f8>)
 80039ea:	f7fe f842 	bl	8001a72 <assert_failed>
  assert_param(IS_DAC_TRIMMING(sConfig->DAC_UserTrimming));
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <HAL_DAC_ConfigChannel+0xe4>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d004      	beq.n	8003a08 <HAL_DAC_ConfigChannel+0xe4>
 80039fe:	f240 31fa 	movw	r1, #1018	; 0x3fa
 8003a02:	4886      	ldr	r0, [pc, #536]	; (8003c1c <HAL_DAC_ConfigChannel+0x2f8>)
 8003a04:	f7fe f835 	bl	8001a72 <assert_failed>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d108      	bne.n	8003a22 <HAL_DAC_ConfigChannel+0xfe>
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	2b1f      	cmp	r3, #31
 8003a16:	d904      	bls.n	8003a22 <HAL_DAC_ConfigChannel+0xfe>
 8003a18:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8003a1c:	487f      	ldr	r0, [pc, #508]	; (8003c1c <HAL_DAC_ConfigChannel+0x2f8>)
 8003a1e:	f7fe f828 	bl	8001a72 <assert_failed>
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d008      	beq.n	8003a3c <HAL_DAC_ConfigChannel+0x118>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d004      	beq.n	8003a3c <HAL_DAC_ConfigChannel+0x118>
 8003a32:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003a36:	4879      	ldr	r0, [pc, #484]	; (8003c1c <HAL_DAC_ConfigChannel+0x2f8>)
 8003a38:	f7fe f81b 	bl	8001a72 <assert_failed>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d11c      	bne.n	8003a7e <HAL_DAC_ConfigChannel+0x15a>
  {
    assert_param(IS_DAC_SAMPLETIME(sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime));
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4c:	d304      	bcc.n	8003a58 <HAL_DAC_ConfigChannel+0x134>
 8003a4e:	f240 4102 	movw	r1, #1026	; 0x402
 8003a52:	4872      	ldr	r0, [pc, #456]	; (8003c1c <HAL_DAC_ConfigChannel+0x2f8>)
 8003a54:	f7fe f80d 	bl	8001a72 <assert_failed>
    assert_param(IS_DAC_HOLDTIME(sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime));
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a60:	d304      	bcc.n	8003a6c <HAL_DAC_ConfigChannel+0x148>
 8003a62:	f240 4103 	movw	r1, #1027	; 0x403
 8003a66:	486d      	ldr	r0, [pc, #436]	; (8003c1c <HAL_DAC_ConfigChannel+0x2f8>)
 8003a68:	f7fe f803 	bl	8001a72 <assert_failed>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	2bff      	cmp	r3, #255	; 0xff
 8003a72:	d904      	bls.n	8003a7e <HAL_DAC_ConfigChannel+0x15a>
 8003a74:	f240 4104 	movw	r1, #1028	; 0x404
 8003a78:	4868      	ldr	r0, [pc, #416]	; (8003c1c <HAL_DAC_ConfigChannel+0x2f8>)
 8003a7a:	f7fd fffa 	bl	8001a72 <assert_failed>
  }
  assert_param(IS_DAC_CHANNEL(Channel));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <HAL_DAC_ConfigChannel+0x170>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b10      	cmp	r3, #16
 8003a88:	d004      	beq.n	8003a94 <HAL_DAC_ConfigChannel+0x170>
 8003a8a:	f240 4106 	movw	r1, #1030	; 0x406
 8003a8e:	4863      	ldr	r0, [pc, #396]	; (8003c1c <HAL_DAC_ConfigChannel+0x2f8>)
 8003a90:	f7fd ffef 	bl	8001a72 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	795b      	ldrb	r3, [r3, #5]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_DAC_ConfigChannel+0x17c>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e122      	b.n	8003ce6 <HAL_DAC_ConfigChannel+0x3c2>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d174      	bne.n	8003b9e <HAL_DAC_ConfigChannel+0x27a>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003ab4:	f7ff fd50 	bl	8003558 <HAL_GetTick>
 8003ab8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d134      	bne.n	8003b2a <HAL_DAC_ConfigChannel+0x206>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ac0:	e011      	b.n	8003ae6 <HAL_DAC_ConfigChannel+0x1c2>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ac2:	f7ff fd49 	bl	8003558 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d90a      	bls.n	8003ae6 <HAL_DAC_ConfigChannel+0x1c2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f043 0208 	orr.w	r2, r3, #8
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2203      	movs	r2, #3
 8003ae0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e0ff      	b.n	8003ce6 <HAL_DAC_ConfigChannel+0x3c2>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aec:	4b4c      	ldr	r3, [pc, #304]	; (8003c20 <HAL_DAC_ConfigChannel+0x2fc>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e6      	bne.n	8003ac2 <HAL_DAC_ConfigChannel+0x19e>
        }
      }
      HAL_Delay(1);
 8003af4:	2001      	movs	r0, #1
 8003af6:	f7ff fd3b 	bl	8003570 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	6992      	ldr	r2, [r2, #24]
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40
 8003b04:	e01e      	b.n	8003b44 <HAL_DAC_ConfigChannel+0x220>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b06:	f7ff fd27 	bl	8003558 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d90a      	bls.n	8003b2a <HAL_DAC_ConfigChannel+0x206>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f043 0208 	orr.w	r2, r3, #8
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2203      	movs	r2, #3
 8003b24:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e0dd      	b.n	8003ce6 <HAL_DAC_ConfigChannel+0x3c2>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	dbe8      	blt.n	8003b06 <HAL_DAC_ConfigChannel+0x1e2>
        }
      }
      HAL_Delay(1U);
 8003b34:	2001      	movs	r0, #1
 8003b36:	f7ff fd1b 	bl	8003570 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	6992      	ldr	r2, [r2, #24]
 8003b42:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003b54:	fa01 f303 	lsl.w	r3, r1, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	ea02 0103 	and.w	r1, r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	409a      	lsls	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	21ff      	movs	r1, #255	; 0xff
 8003b80:	fa01 f303 	lsl.w	r3, r1, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	ea02 0103 	and.w	r1, r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6a1a      	ldr	r2, [r3, #32]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	409a      	lsls	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d11d      	bne.n	8003be2 <HAL_DAC_ConfigChannel+0x2be>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	221f      	movs	r2, #31
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2207      	movs	r2, #7
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d102      	bne.n	8003c0c <HAL_DAC_ConfigChannel+0x2e8>
  {
    connectOnChip = 0x00000000UL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	e014      	b.n	8003c36 <HAL_DAC_ConfigChannel+0x312>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d107      	bne.n	8003c24 <HAL_DAC_ConfigChannel+0x300>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003c14:	2301      	movs	r3, #1
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	e00d      	b.n	8003c36 <HAL_DAC_ConfigChannel+0x312>
 8003c1a:	bf00      	nop
 8003c1c:	0801db44 	.word	0x0801db44
 8003c20:	20008000 	.word	0x20008000
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <HAL_DAC_ConfigChannel+0x30e>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	e001      	b.n	8003c36 <HAL_DAC_ConfigChannel+0x312>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6819      	ldr	r1, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43da      	mvns	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	400a      	ands	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6819      	ldr	r1, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	22c0      	movs	r2, #192	; 0xc0
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	400a      	ands	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop

08003cf0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003cf8:	f7ff fc2e 	bl	8003558 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d102      	bne.n	8003d0a <HAL_DMA_Init+0x1a>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f000 bcb2 	b.w	800466e <HAL_DMA_Init+0x97e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a87      	ldr	r2, [pc, #540]	; (8003f2c <HAL_DMA_Init+0x23c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d076      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a85      	ldr	r2, [pc, #532]	; (8003f30 <HAL_DMA_Init+0x240>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d071      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a84      	ldr	r2, [pc, #528]	; (8003f34 <HAL_DMA_Init+0x244>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d06c      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a82      	ldr	r2, [pc, #520]	; (8003f38 <HAL_DMA_Init+0x248>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d067      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a81      	ldr	r2, [pc, #516]	; (8003f3c <HAL_DMA_Init+0x24c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d062      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a7f      	ldr	r2, [pc, #508]	; (8003f40 <HAL_DMA_Init+0x250>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d05d      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a7e      	ldr	r2, [pc, #504]	; (8003f44 <HAL_DMA_Init+0x254>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d058      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a7c      	ldr	r2, [pc, #496]	; (8003f48 <HAL_DMA_Init+0x258>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d053      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a7b      	ldr	r2, [pc, #492]	; (8003f4c <HAL_DMA_Init+0x25c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d04e      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a79      	ldr	r2, [pc, #484]	; (8003f50 <HAL_DMA_Init+0x260>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d049      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a78      	ldr	r2, [pc, #480]	; (8003f54 <HAL_DMA_Init+0x264>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d044      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a76      	ldr	r2, [pc, #472]	; (8003f58 <HAL_DMA_Init+0x268>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d03f      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a75      	ldr	r2, [pc, #468]	; (8003f5c <HAL_DMA_Init+0x26c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d03a      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a73      	ldr	r2, [pc, #460]	; (8003f60 <HAL_DMA_Init+0x270>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d035      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a72      	ldr	r2, [pc, #456]	; (8003f64 <HAL_DMA_Init+0x274>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d030      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a70      	ldr	r2, [pc, #448]	; (8003f68 <HAL_DMA_Init+0x278>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d02b      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a6f      	ldr	r2, [pc, #444]	; (8003f6c <HAL_DMA_Init+0x27c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d026      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a6d      	ldr	r2, [pc, #436]	; (8003f70 <HAL_DMA_Init+0x280>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d021      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a6c      	ldr	r2, [pc, #432]	; (8003f74 <HAL_DMA_Init+0x284>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d01c      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a6a      	ldr	r2, [pc, #424]	; (8003f78 <HAL_DMA_Init+0x288>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d017      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a69      	ldr	r2, [pc, #420]	; (8003f7c <HAL_DMA_Init+0x28c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d012      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a67      	ldr	r2, [pc, #412]	; (8003f80 <HAL_DMA_Init+0x290>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00d      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a66      	ldr	r2, [pc, #408]	; (8003f84 <HAL_DMA_Init+0x294>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d008      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a64      	ldr	r2, [pc, #400]	; (8003f88 <HAL_DMA_Init+0x298>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d003      	beq.n	8003e02 <HAL_DMA_Init+0x112>
 8003dfa:	21e0      	movs	r1, #224	; 0xe0
 8003dfc:	4863      	ldr	r0, [pc, #396]	; (8003f8c <HAL_DMA_Init+0x29c>)
 8003dfe:	f7fd fe38 	bl	8001a72 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_DMA_Init+0x132>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d007      	beq.n	8003e22 <HAL_DMA_Init+0x132>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b80      	cmp	r3, #128	; 0x80
 8003e18:	d003      	beq.n	8003e22 <HAL_DMA_Init+0x132>
 8003e1a:	21e1      	movs	r1, #225	; 0xe1
 8003e1c:	485b      	ldr	r0, [pc, #364]	; (8003f8c <HAL_DMA_Init+0x29c>)
 8003e1e:	f7fd fe28 	bl	8001a72 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2a:	d007      	beq.n	8003e3c <HAL_DMA_Init+0x14c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_DMA_Init+0x14c>
 8003e34:	21e2      	movs	r1, #226	; 0xe2
 8003e36:	4855      	ldr	r0, [pc, #340]	; (8003f8c <HAL_DMA_Init+0x29c>)
 8003e38:	f7fd fe1b 	bl	8001a72 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e44:	d007      	beq.n	8003e56 <HAL_DMA_Init+0x166>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_DMA_Init+0x166>
 8003e4e:	21e3      	movs	r1, #227	; 0xe3
 8003e50:	484e      	ldr	r0, [pc, #312]	; (8003f8c <HAL_DMA_Init+0x29c>)
 8003e52:	f7fd fe0e 	bl	8001a72 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <HAL_DMA_Init+0x18a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e66:	d008      	beq.n	8003e7a <HAL_DMA_Init+0x18a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e70:	d003      	beq.n	8003e7a <HAL_DMA_Init+0x18a>
 8003e72:	21e4      	movs	r1, #228	; 0xe4
 8003e74:	4845      	ldr	r0, [pc, #276]	; (8003f8c <HAL_DMA_Init+0x29c>)
 8003e76:	f7fd fdfc 	bl	8001a72 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00d      	beq.n	8003e9e <HAL_DMA_Init+0x1ae>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8a:	d008      	beq.n	8003e9e <HAL_DMA_Init+0x1ae>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e94:	d003      	beq.n	8003e9e <HAL_DMA_Init+0x1ae>
 8003e96:	21e5      	movs	r1, #229	; 0xe5
 8003e98:	483c      	ldr	r0, [pc, #240]	; (8003f8c <HAL_DMA_Init+0x29c>)
 8003e9a:	f7fd fdea 	bl	8001a72 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_DMA_Init+0x1e4>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eae:	d011      	beq.n	8003ed4 <HAL_DMA_Init+0x1e4>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d00d      	beq.n	8003ed4 <HAL_DMA_Init+0x1e4>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ec0:	d008      	beq.n	8003ed4 <HAL_DMA_Init+0x1e4>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003eca:	d003      	beq.n	8003ed4 <HAL_DMA_Init+0x1e4>
 8003ecc:	21e6      	movs	r1, #230	; 0xe6
 8003ece:	482f      	ldr	r0, [pc, #188]	; (8003f8c <HAL_DMA_Init+0x29c>)
 8003ed0:	f7fd fdcf 	bl	8001a72 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d012      	beq.n	8003f02 <HAL_DMA_Init+0x212>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee4:	d00d      	beq.n	8003f02 <HAL_DMA_Init+0x212>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eee:	d008      	beq.n	8003f02 <HAL_DMA_Init+0x212>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ef8:	d003      	beq.n	8003f02 <HAL_DMA_Init+0x212>
 8003efa:	21e7      	movs	r1, #231	; 0xe7
 8003efc:	4823      	ldr	r0, [pc, #140]	; (8003f8c <HAL_DMA_Init+0x29c>)
 8003efe:	f7fd fdb8 	bl	8001a72 <assert_failed>

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a09      	ldr	r2, [pc, #36]	; (8003f2c <HAL_DMA_Init+0x23c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d07d      	beq.n	8004008 <HAL_DMA_Init+0x318>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a07      	ldr	r2, [pc, #28]	; (8003f30 <HAL_DMA_Init+0x240>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d078      	beq.n	8004008 <HAL_DMA_Init+0x318>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a06      	ldr	r2, [pc, #24]	; (8003f34 <HAL_DMA_Init+0x244>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d073      	beq.n	8004008 <HAL_DMA_Init+0x318>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a04      	ldr	r2, [pc, #16]	; (8003f38 <HAL_DMA_Init+0x248>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d06e      	beq.n	8004008 <HAL_DMA_Init+0x318>
 8003f2a:	e031      	b.n	8003f90 <HAL_DMA_Init+0x2a0>
 8003f2c:	40020010 	.word	0x40020010
 8003f30:	40020028 	.word	0x40020028
 8003f34:	40020040 	.word	0x40020040
 8003f38:	40020058 	.word	0x40020058
 8003f3c:	40020070 	.word	0x40020070
 8003f40:	40020088 	.word	0x40020088
 8003f44:	400200a0 	.word	0x400200a0
 8003f48:	400200b8 	.word	0x400200b8
 8003f4c:	40020410 	.word	0x40020410
 8003f50:	40020428 	.word	0x40020428
 8003f54:	40020440 	.word	0x40020440
 8003f58:	40020458 	.word	0x40020458
 8003f5c:	40020470 	.word	0x40020470
 8003f60:	40020488 	.word	0x40020488
 8003f64:	400204a0 	.word	0x400204a0
 8003f68:	400204b8 	.word	0x400204b8
 8003f6c:	58025408 	.word	0x58025408
 8003f70:	5802541c 	.word	0x5802541c
 8003f74:	58025430 	.word	0x58025430
 8003f78:	58025444 	.word	0x58025444
 8003f7c:	58025458 	.word	0x58025458
 8003f80:	5802546c 	.word	0x5802546c
 8003f84:	58025480 	.word	0x58025480
 8003f88:	58025494 	.word	0x58025494
 8003f8c:	0801db7c 	.word	0x0801db7c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a89      	ldr	r2, [pc, #548]	; (80041bc <HAL_DMA_Init+0x4cc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d036      	beq.n	8004008 <HAL_DMA_Init+0x318>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a88      	ldr	r2, [pc, #544]	; (80041c0 <HAL_DMA_Init+0x4d0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d031      	beq.n	8004008 <HAL_DMA_Init+0x318>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a86      	ldr	r2, [pc, #536]	; (80041c4 <HAL_DMA_Init+0x4d4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d02c      	beq.n	8004008 <HAL_DMA_Init+0x318>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a85      	ldr	r2, [pc, #532]	; (80041c8 <HAL_DMA_Init+0x4d8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d027      	beq.n	8004008 <HAL_DMA_Init+0x318>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a83      	ldr	r2, [pc, #524]	; (80041cc <HAL_DMA_Init+0x4dc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d022      	beq.n	8004008 <HAL_DMA_Init+0x318>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a82      	ldr	r2, [pc, #520]	; (80041d0 <HAL_DMA_Init+0x4e0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d01d      	beq.n	8004008 <HAL_DMA_Init+0x318>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a80      	ldr	r2, [pc, #512]	; (80041d4 <HAL_DMA_Init+0x4e4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d018      	beq.n	8004008 <HAL_DMA_Init+0x318>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a7f      	ldr	r2, [pc, #508]	; (80041d8 <HAL_DMA_Init+0x4e8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d013      	beq.n	8004008 <HAL_DMA_Init+0x318>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a7d      	ldr	r2, [pc, #500]	; (80041dc <HAL_DMA_Init+0x4ec>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00e      	beq.n	8004008 <HAL_DMA_Init+0x318>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a7c      	ldr	r2, [pc, #496]	; (80041e0 <HAL_DMA_Init+0x4f0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d009      	beq.n	8004008 <HAL_DMA_Init+0x318>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a7a      	ldr	r2, [pc, #488]	; (80041e4 <HAL_DMA_Init+0x4f4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <HAL_DMA_Init+0x318>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a79      	ldr	r2, [pc, #484]	; (80041e8 <HAL_DMA_Init+0x4f8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d101      	bne.n	800400c <HAL_DMA_Init+0x31c>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <HAL_DMA_Init+0x31e>
 800400c:	2300      	movs	r3, #0
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 8197 	beq.w	8004342 <HAL_DMA_Init+0x652>
  {
    assert_param(IS_DMA_REQUEST(hdma->Init.Request));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b73      	cmp	r3, #115	; 0x73
 800401a:	d903      	bls.n	8004024 <HAL_DMA_Init+0x334>
 800401c:	21eb      	movs	r1, #235	; 0xeb
 800401e:	4873      	ldr	r0, [pc, #460]	; (80041ec <HAL_DMA_Init+0x4fc>)
 8004020:	f7fd fd27 	bl	8001a72 <assert_failed>
    assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	2b00      	cmp	r3, #0
 800402a:	d007      	beq.n	800403c <HAL_DMA_Init+0x34c>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2b04      	cmp	r3, #4
 8004032:	d003      	beq.n	800403c <HAL_DMA_Init+0x34c>
 8004034:	21ec      	movs	r1, #236	; 0xec
 8004036:	486d      	ldr	r0, [pc, #436]	; (80041ec <HAL_DMA_Init+0x4fc>)
 8004038:	f7fd fd1b 	bl	8001a72 <assert_failed>
    /* Check the memory burst, peripheral burst and FIFO threshold parameters only
       when FIFO mode is enabled */
    if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	2b00      	cmp	r3, #0
 8004042:	d041      	beq.n	80040c8 <HAL_DMA_Init+0x3d8>
    {
      assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00f      	beq.n	800406c <HAL_DMA_Init+0x37c>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	2b01      	cmp	r3, #1
 8004052:	d00b      	beq.n	800406c <HAL_DMA_Init+0x37c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	2b02      	cmp	r3, #2
 800405a:	d007      	beq.n	800406c <HAL_DMA_Init+0x37c>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	2b03      	cmp	r3, #3
 8004062:	d003      	beq.n	800406c <HAL_DMA_Init+0x37c>
 8004064:	21f1      	movs	r1, #241	; 0xf1
 8004066:	4861      	ldr	r0, [pc, #388]	; (80041ec <HAL_DMA_Init+0x4fc>)
 8004068:	f7fd fd03 	bl	8001a72 <assert_failed>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d012      	beq.n	800409a <HAL_DMA_Init+0x3aa>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800407c:	d00d      	beq.n	800409a <HAL_DMA_Init+0x3aa>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004086:	d008      	beq.n	800409a <HAL_DMA_Init+0x3aa>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004090:	d003      	beq.n	800409a <HAL_DMA_Init+0x3aa>
 8004092:	21f2      	movs	r1, #242	; 0xf2
 8004094:	4855      	ldr	r0, [pc, #340]	; (80041ec <HAL_DMA_Init+0x4fc>)
 8004096:	f7fd fcec 	bl	8001a72 <assert_failed>
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d012      	beq.n	80040c8 <HAL_DMA_Init+0x3d8>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040aa:	d00d      	beq.n	80040c8 <HAL_DMA_Init+0x3d8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b4:	d008      	beq.n	80040c8 <HAL_DMA_Init+0x3d8>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040be:	d003      	beq.n	80040c8 <HAL_DMA_Init+0x3d8>
 80040c0:	21f3      	movs	r1, #243	; 0xf3
 80040c2:	484a      	ldr	r0, [pc, #296]	; (80041ec <HAL_DMA_Init+0x4fc>)
 80040c4:	f7fd fcd5 	bl	8001a72 <assert_failed>
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a44      	ldr	r2, [pc, #272]	; (80041f0 <HAL_DMA_Init+0x500>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d04a      	beq.n	8004178 <HAL_DMA_Init+0x488>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a43      	ldr	r2, [pc, #268]	; (80041f4 <HAL_DMA_Init+0x504>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d045      	beq.n	8004178 <HAL_DMA_Init+0x488>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a41      	ldr	r2, [pc, #260]	; (80041f8 <HAL_DMA_Init+0x508>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d040      	beq.n	8004178 <HAL_DMA_Init+0x488>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a40      	ldr	r2, [pc, #256]	; (80041fc <HAL_DMA_Init+0x50c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d03b      	beq.n	8004178 <HAL_DMA_Init+0x488>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a2d      	ldr	r2, [pc, #180]	; (80041bc <HAL_DMA_Init+0x4cc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d036      	beq.n	8004178 <HAL_DMA_Init+0x488>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a2c      	ldr	r2, [pc, #176]	; (80041c0 <HAL_DMA_Init+0x4d0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d031      	beq.n	8004178 <HAL_DMA_Init+0x488>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a2a      	ldr	r2, [pc, #168]	; (80041c4 <HAL_DMA_Init+0x4d4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d02c      	beq.n	8004178 <HAL_DMA_Init+0x488>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a29      	ldr	r2, [pc, #164]	; (80041c8 <HAL_DMA_Init+0x4d8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d027      	beq.n	8004178 <HAL_DMA_Init+0x488>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a27      	ldr	r2, [pc, #156]	; (80041cc <HAL_DMA_Init+0x4dc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d022      	beq.n	8004178 <HAL_DMA_Init+0x488>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a26      	ldr	r2, [pc, #152]	; (80041d0 <HAL_DMA_Init+0x4e0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d01d      	beq.n	8004178 <HAL_DMA_Init+0x488>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a24      	ldr	r2, [pc, #144]	; (80041d4 <HAL_DMA_Init+0x4e4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d018      	beq.n	8004178 <HAL_DMA_Init+0x488>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a23      	ldr	r2, [pc, #140]	; (80041d8 <HAL_DMA_Init+0x4e8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d013      	beq.n	8004178 <HAL_DMA_Init+0x488>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a21      	ldr	r2, [pc, #132]	; (80041dc <HAL_DMA_Init+0x4ec>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00e      	beq.n	8004178 <HAL_DMA_Init+0x488>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a20      	ldr	r2, [pc, #128]	; (80041e0 <HAL_DMA_Init+0x4f0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d009      	beq.n	8004178 <HAL_DMA_Init+0x488>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1e      	ldr	r2, [pc, #120]	; (80041e4 <HAL_DMA_Init+0x4f4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_DMA_Init+0x488>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a1d      	ldr	r2, [pc, #116]	; (80041e8 <HAL_DMA_Init+0x4f8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d108      	bne.n	800418a <HAL_DMA_Init+0x49a>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0201 	bic.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	e007      	b.n	800419a <HAL_DMA_Init+0x4aa>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0201 	bic.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800419a:	e031      	b.n	8004200 <HAL_DMA_Init+0x510>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800419c:	f7ff f9dc 	bl	8003558 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b05      	cmp	r3, #5
 80041a8:	d92a      	bls.n	8004200 <HAL_DMA_Init+0x510>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2220      	movs	r2, #32
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2203      	movs	r2, #3
 80041b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e258      	b.n	800466e <HAL_DMA_Init+0x97e>
 80041bc:	40020070 	.word	0x40020070
 80041c0:	40020088 	.word	0x40020088
 80041c4:	400200a0 	.word	0x400200a0
 80041c8:	400200b8 	.word	0x400200b8
 80041cc:	40020410 	.word	0x40020410
 80041d0:	40020428 	.word	0x40020428
 80041d4:	40020440 	.word	0x40020440
 80041d8:	40020458 	.word	0x40020458
 80041dc:	40020470 	.word	0x40020470
 80041e0:	40020488 	.word	0x40020488
 80041e4:	400204a0 	.word	0x400204a0
 80041e8:	400204b8 	.word	0x400204b8
 80041ec:	0801db7c 	.word	0x0801db7c
 80041f0:	40020010 	.word	0x40020010
 80041f4:	40020028 	.word	0x40020028
 80041f8:	40020040 	.word	0x40020040
 80041fc:	40020058 	.word	0x40020058
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1c6      	bne.n	800419c <HAL_DMA_Init+0x4ac>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4b8a      	ldr	r3, [pc, #552]	; (8004444 <HAL_DMA_Init+0x754>)
 800421a:	4013      	ands	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004226:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004232:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800423e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	2b04      	cmp	r3, #4
 8004252:	d107      	bne.n	8004264 <HAL_DMA_Init+0x574>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	4313      	orrs	r3, r2
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004264:	4b78      	ldr	r3, [pc, #480]	; (8004448 <HAL_DMA_Init+0x758>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4b78      	ldr	r3, [pc, #480]	; (800444c <HAL_DMA_Init+0x75c>)
 800426a:	4013      	ands	r3, r2
 800426c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004270:	d328      	bcc.n	80042c4 <HAL_DMA_Init+0x5d4>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b28      	cmp	r3, #40	; 0x28
 8004278:	d903      	bls.n	8004282 <HAL_DMA_Init+0x592>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b2e      	cmp	r3, #46	; 0x2e
 8004280:	d917      	bls.n	80042b2 <HAL_DMA_Init+0x5c2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b3e      	cmp	r3, #62	; 0x3e
 8004288:	d903      	bls.n	8004292 <HAL_DMA_Init+0x5a2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b42      	cmp	r3, #66	; 0x42
 8004290:	d90f      	bls.n	80042b2 <HAL_DMA_Init+0x5c2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b46      	cmp	r3, #70	; 0x46
 8004298:	d903      	bls.n	80042a2 <HAL_DMA_Init+0x5b2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b48      	cmp	r3, #72	; 0x48
 80042a0:	d907      	bls.n	80042b2 <HAL_DMA_Init+0x5c2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b4e      	cmp	r3, #78	; 0x4e
 80042a8:	d905      	bls.n	80042b6 <HAL_DMA_Init+0x5c6>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b52      	cmp	r3, #82	; 0x52
 80042b0:	d801      	bhi.n	80042b6 <HAL_DMA_Init+0x5c6>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <HAL_DMA_Init+0x5c8>
 80042b6:	2300      	movs	r3, #0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_DMA_Init+0x5d4>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042c2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f023 0307 	bic.w	r3, r3, #7
 80042da:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d117      	bne.n	800431e <HAL_DMA_Init+0x62e>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00e      	beq.n	800431e <HAL_DMA_Init+0x62e>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f003 f829 	bl	8007358 <DMA_CheckFifoParam>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_DMA_Init+0x62e>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2240      	movs	r2, #64	; 0x40
 8004310:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e1a7      	b.n	800466e <HAL_DMA_Init+0x97e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f002 ff64 	bl	80071f4 <DMA_CalcBaseAndBitshift>
 800432c:	4603      	mov	r3, r0
 800432e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	223f      	movs	r2, #63	; 0x3f
 800433a:	409a      	lsls	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	609a      	str	r2, [r3, #8]
 8004340:	e0dd      	b.n	80044fe <HAL_DMA_Init+0x80e>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a42      	ldr	r2, [pc, #264]	; (8004450 <HAL_DMA_Init+0x760>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d022      	beq.n	8004392 <HAL_DMA_Init+0x6a2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a40      	ldr	r2, [pc, #256]	; (8004454 <HAL_DMA_Init+0x764>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01d      	beq.n	8004392 <HAL_DMA_Init+0x6a2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a3f      	ldr	r2, [pc, #252]	; (8004458 <HAL_DMA_Init+0x768>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d018      	beq.n	8004392 <HAL_DMA_Init+0x6a2>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a3d      	ldr	r2, [pc, #244]	; (800445c <HAL_DMA_Init+0x76c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <HAL_DMA_Init+0x6a2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a3c      	ldr	r2, [pc, #240]	; (8004460 <HAL_DMA_Init+0x770>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00e      	beq.n	8004392 <HAL_DMA_Init+0x6a2>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a3a      	ldr	r2, [pc, #232]	; (8004464 <HAL_DMA_Init+0x774>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d009      	beq.n	8004392 <HAL_DMA_Init+0x6a2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a39      	ldr	r2, [pc, #228]	; (8004468 <HAL_DMA_Init+0x778>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <HAL_DMA_Init+0x6a2>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a37      	ldr	r2, [pc, #220]	; (800446c <HAL_DMA_Init+0x77c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <HAL_DMA_Init+0x6a6>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <HAL_DMA_Init+0x6a8>
 8004396:	2300      	movs	r3, #0
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80a7 	beq.w	80044ec <HAL_DMA_Init+0x7fc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a2b      	ldr	r2, [pc, #172]	; (8004450 <HAL_DMA_Init+0x760>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d022      	beq.n	80043ee <HAL_DMA_Init+0x6fe>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a29      	ldr	r2, [pc, #164]	; (8004454 <HAL_DMA_Init+0x764>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01d      	beq.n	80043ee <HAL_DMA_Init+0x6fe>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a28      	ldr	r2, [pc, #160]	; (8004458 <HAL_DMA_Init+0x768>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d018      	beq.n	80043ee <HAL_DMA_Init+0x6fe>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a26      	ldr	r2, [pc, #152]	; (800445c <HAL_DMA_Init+0x76c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <HAL_DMA_Init+0x6fe>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a25      	ldr	r2, [pc, #148]	; (8004460 <HAL_DMA_Init+0x770>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00e      	beq.n	80043ee <HAL_DMA_Init+0x6fe>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a23      	ldr	r2, [pc, #140]	; (8004464 <HAL_DMA_Init+0x774>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d009      	beq.n	80043ee <HAL_DMA_Init+0x6fe>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a22      	ldr	r2, [pc, #136]	; (8004468 <HAL_DMA_Init+0x778>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d004      	beq.n	80043ee <HAL_DMA_Init+0x6fe>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a20      	ldr	r2, [pc, #128]	; (800446c <HAL_DMA_Init+0x77c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d101      	bne.n	80043f2 <HAL_DMA_Init+0x702>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <HAL_DMA_Init+0x704>
 80043f2:	2300      	movs	r3, #0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_DMA_Init+0x71a>
    {
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b11      	cmp	r3, #17
 80043fe:	d904      	bls.n	800440a <HAL_DMA_Init+0x71a>
 8004400:	f240 1165 	movw	r1, #357	; 0x165
 8004404:	481a      	ldr	r0, [pc, #104]	; (8004470 <HAL_DMA_Init+0x780>)
 8004406:	f7fd fb34 	bl	8001a72 <assert_failed>
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2202      	movs	r2, #2
 800440e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4b13      	ldr	r3, [pc, #76]	; (8004474 <HAL_DMA_Init+0x784>)
 8004426:	4013      	ands	r3, r2
 8004428:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	2b40      	cmp	r3, #64	; 0x40
 8004430:	d022      	beq.n	8004478 <HAL_DMA_Init+0x788>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b80      	cmp	r3, #128	; 0x80
 8004438:	d102      	bne.n	8004440 <HAL_DMA_Init+0x750>
 800443a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800443e:	e01c      	b.n	800447a <HAL_DMA_Init+0x78a>
 8004440:	2300      	movs	r3, #0
 8004442:	e01a      	b.n	800447a <HAL_DMA_Init+0x78a>
 8004444:	fe10803f 	.word	0xfe10803f
 8004448:	5c001000 	.word	0x5c001000
 800444c:	ffff0000 	.word	0xffff0000
 8004450:	58025408 	.word	0x58025408
 8004454:	5802541c 	.word	0x5802541c
 8004458:	58025430 	.word	0x58025430
 800445c:	58025444 	.word	0x58025444
 8004460:	58025458 	.word	0x58025458
 8004464:	5802546c 	.word	0x5802546c
 8004468:	58025480 	.word	0x58025480
 800446c:	58025494 	.word	0x58025494
 8004470:	0801db7c 	.word	0x0801db7c
 8004474:	fffe000f 	.word	0xfffe000f
 8004478:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68d2      	ldr	r2, [r2, #12]
 800447e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004480:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004488:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004490:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004498:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80044a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80044a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	4b6e      	ldr	r3, [pc, #440]	; (8004678 <HAL_DMA_Init+0x988>)
 80044c0:	4413      	add	r3, r2
 80044c2:	4a6e      	ldr	r2, [pc, #440]	; (800467c <HAL_DMA_Init+0x98c>)
 80044c4:	fba2 2303 	umull	r2, r3, r2, r3
 80044c8:	091b      	lsrs	r3, r3, #4
 80044ca:	009a      	lsls	r2, r3, #2
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f002 fe8f 	bl	80071f4 <DMA_CalcBaseAndBitshift>
 80044d6:	4603      	mov	r3, r0
 80044d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	2201      	movs	r2, #1
 80044e4:	409a      	lsls	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	605a      	str	r2, [r3, #4]
 80044ea:	e008      	b.n	80044fe <HAL_DMA_Init+0x80e>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2240      	movs	r2, #64	; 0x40
 80044f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2203      	movs	r2, #3
 80044f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e0b7      	b.n	800466e <HAL_DMA_Init+0x97e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a5f      	ldr	r2, [pc, #380]	; (8004680 <HAL_DMA_Init+0x990>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d072      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a5d      	ldr	r2, [pc, #372]	; (8004684 <HAL_DMA_Init+0x994>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d06d      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a5c      	ldr	r2, [pc, #368]	; (8004688 <HAL_DMA_Init+0x998>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d068      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a5a      	ldr	r2, [pc, #360]	; (800468c <HAL_DMA_Init+0x99c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d063      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a59      	ldr	r2, [pc, #356]	; (8004690 <HAL_DMA_Init+0x9a0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d05e      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a57      	ldr	r2, [pc, #348]	; (8004694 <HAL_DMA_Init+0x9a4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d059      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a56      	ldr	r2, [pc, #344]	; (8004698 <HAL_DMA_Init+0x9a8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d054      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a54      	ldr	r2, [pc, #336]	; (800469c <HAL_DMA_Init+0x9ac>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d04f      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a53      	ldr	r2, [pc, #332]	; (80046a0 <HAL_DMA_Init+0x9b0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d04a      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a51      	ldr	r2, [pc, #324]	; (80046a4 <HAL_DMA_Init+0x9b4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d045      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a50      	ldr	r2, [pc, #320]	; (80046a8 <HAL_DMA_Init+0x9b8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d040      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a4e      	ldr	r2, [pc, #312]	; (80046ac <HAL_DMA_Init+0x9bc>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d03b      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a4d      	ldr	r2, [pc, #308]	; (80046b0 <HAL_DMA_Init+0x9c0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d036      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a4b      	ldr	r2, [pc, #300]	; (80046b4 <HAL_DMA_Init+0x9c4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d031      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a4a      	ldr	r2, [pc, #296]	; (80046b8 <HAL_DMA_Init+0x9c8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d02c      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a48      	ldr	r2, [pc, #288]	; (80046bc <HAL_DMA_Init+0x9cc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d027      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a47      	ldr	r2, [pc, #284]	; (80046c0 <HAL_DMA_Init+0x9d0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d022      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a45      	ldr	r2, [pc, #276]	; (80046c4 <HAL_DMA_Init+0x9d4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d01d      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a44      	ldr	r2, [pc, #272]	; (80046c8 <HAL_DMA_Init+0x9d8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d018      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a42      	ldr	r2, [pc, #264]	; (80046cc <HAL_DMA_Init+0x9dc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a41      	ldr	r2, [pc, #260]	; (80046d0 <HAL_DMA_Init+0x9e0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d00e      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a3f      	ldr	r2, [pc, #252]	; (80046d4 <HAL_DMA_Init+0x9e4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d009      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a3e      	ldr	r2, [pc, #248]	; (80046d8 <HAL_DMA_Init+0x9e8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d004      	beq.n	80045ee <HAL_DMA_Init+0x8fe>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a3c      	ldr	r2, [pc, #240]	; (80046dc <HAL_DMA_Init+0x9ec>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d101      	bne.n	80045f2 <HAL_DMA_Init+0x902>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <HAL_DMA_Init+0x904>
 80045f2:	2300      	movs	r3, #0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d032      	beq.n	800465e <HAL_DMA_Init+0x96e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f002 ff29 	bl	8007450 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2b80      	cmp	r3, #128	; 0x80
 8004604:	d102      	bne.n	800460c <HAL_DMA_Init+0x91c>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004620:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d010      	beq.n	800464c <HAL_DMA_Init+0x95c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b08      	cmp	r3, #8
 8004630:	d80c      	bhi.n	800464c <HAL_DMA_Init+0x95c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f002 ffa6 	bl	8007584 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004648:	605a      	str	r2, [r3, #4]
 800464a:	e008      	b.n	800465e <HAL_DMA_Init+0x96e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	a7fdabf8 	.word	0xa7fdabf8
 800467c:	cccccccd 	.word	0xcccccccd
 8004680:	40020010 	.word	0x40020010
 8004684:	40020028 	.word	0x40020028
 8004688:	40020040 	.word	0x40020040
 800468c:	40020058 	.word	0x40020058
 8004690:	40020070 	.word	0x40020070
 8004694:	40020088 	.word	0x40020088
 8004698:	400200a0 	.word	0x400200a0
 800469c:	400200b8 	.word	0x400200b8
 80046a0:	40020410 	.word	0x40020410
 80046a4:	40020428 	.word	0x40020428
 80046a8:	40020440 	.word	0x40020440
 80046ac:	40020458 	.word	0x40020458
 80046b0:	40020470 	.word	0x40020470
 80046b4:	40020488 	.word	0x40020488
 80046b8:	400204a0 	.word	0x400204a0
 80046bc:	400204b8 	.word	0x400204b8
 80046c0:	58025408 	.word	0x58025408
 80046c4:	5802541c 	.word	0x5802541c
 80046c8:	58025430 	.word	0x58025430
 80046cc:	58025444 	.word	0x58025444
 80046d0:	58025458 	.word	0x58025458
 80046d4:	5802546c 	.word	0x5802546c
 80046d8:	58025480 	.word	0x58025480
 80046dc:	58025494 	.word	0x58025494

080046e0 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_DMA_Start+0x20>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fe:	d304      	bcc.n	800470a <HAL_DMA_Start+0x2a>
 8004700:	f44f 711c 	mov.w	r1, #624	; 0x270
 8004704:	487c      	ldr	r0, [pc, #496]	; (80048f8 <HAL_DMA_Start+0x218>)
 8004706:	f7fd f9b4 	bl	8001a72 <assert_failed>

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_DMA_Start+0x34>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0ec      	b.n	80048ee <HAL_DMA_Start+0x20e>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_DMA_Start+0x42>
 800471e:	2302      	movs	r3, #2
 8004720:	e0e5      	b.n	80048ee <HAL_DMA_Start+0x20e>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b01      	cmp	r3, #1
 8004734:	f040 80d0 	bne.w	80048d8 <HAL_DMA_Start+0x1f8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a6c      	ldr	r2, [pc, #432]	; (80048fc <HAL_DMA_Start+0x21c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d04a      	beq.n	80047e6 <HAL_DMA_Start+0x106>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a6a      	ldr	r2, [pc, #424]	; (8004900 <HAL_DMA_Start+0x220>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d045      	beq.n	80047e6 <HAL_DMA_Start+0x106>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a69      	ldr	r2, [pc, #420]	; (8004904 <HAL_DMA_Start+0x224>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d040      	beq.n	80047e6 <HAL_DMA_Start+0x106>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a67      	ldr	r2, [pc, #412]	; (8004908 <HAL_DMA_Start+0x228>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d03b      	beq.n	80047e6 <HAL_DMA_Start+0x106>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a66      	ldr	r2, [pc, #408]	; (800490c <HAL_DMA_Start+0x22c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d036      	beq.n	80047e6 <HAL_DMA_Start+0x106>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a64      	ldr	r2, [pc, #400]	; (8004910 <HAL_DMA_Start+0x230>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d031      	beq.n	80047e6 <HAL_DMA_Start+0x106>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a63      	ldr	r2, [pc, #396]	; (8004914 <HAL_DMA_Start+0x234>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d02c      	beq.n	80047e6 <HAL_DMA_Start+0x106>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a61      	ldr	r2, [pc, #388]	; (8004918 <HAL_DMA_Start+0x238>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d027      	beq.n	80047e6 <HAL_DMA_Start+0x106>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a60      	ldr	r2, [pc, #384]	; (800491c <HAL_DMA_Start+0x23c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d022      	beq.n	80047e6 <HAL_DMA_Start+0x106>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a5e      	ldr	r2, [pc, #376]	; (8004920 <HAL_DMA_Start+0x240>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d01d      	beq.n	80047e6 <HAL_DMA_Start+0x106>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a5d      	ldr	r2, [pc, #372]	; (8004924 <HAL_DMA_Start+0x244>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d018      	beq.n	80047e6 <HAL_DMA_Start+0x106>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a5b      	ldr	r2, [pc, #364]	; (8004928 <HAL_DMA_Start+0x248>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_DMA_Start+0x106>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a5a      	ldr	r2, [pc, #360]	; (800492c <HAL_DMA_Start+0x24c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00e      	beq.n	80047e6 <HAL_DMA_Start+0x106>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a58      	ldr	r2, [pc, #352]	; (8004930 <HAL_DMA_Start+0x250>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_DMA_Start+0x106>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a57      	ldr	r2, [pc, #348]	; (8004934 <HAL_DMA_Start+0x254>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_DMA_Start+0x106>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a55      	ldr	r2, [pc, #340]	; (8004938 <HAL_DMA_Start+0x258>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d108      	bne.n	80047f8 <HAL_DMA_Start+0x118>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	e007      	b.n	8004808 <HAL_DMA_Start+0x128>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f002 fb44 	bl	8006e9c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a38      	ldr	r2, [pc, #224]	; (80048fc <HAL_DMA_Start+0x21c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d04a      	beq.n	80048b4 <HAL_DMA_Start+0x1d4>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a37      	ldr	r2, [pc, #220]	; (8004900 <HAL_DMA_Start+0x220>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d045      	beq.n	80048b4 <HAL_DMA_Start+0x1d4>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a35      	ldr	r2, [pc, #212]	; (8004904 <HAL_DMA_Start+0x224>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d040      	beq.n	80048b4 <HAL_DMA_Start+0x1d4>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a34      	ldr	r2, [pc, #208]	; (8004908 <HAL_DMA_Start+0x228>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d03b      	beq.n	80048b4 <HAL_DMA_Start+0x1d4>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a32      	ldr	r2, [pc, #200]	; (800490c <HAL_DMA_Start+0x22c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d036      	beq.n	80048b4 <HAL_DMA_Start+0x1d4>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a31      	ldr	r2, [pc, #196]	; (8004910 <HAL_DMA_Start+0x230>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d031      	beq.n	80048b4 <HAL_DMA_Start+0x1d4>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a2f      	ldr	r2, [pc, #188]	; (8004914 <HAL_DMA_Start+0x234>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d02c      	beq.n	80048b4 <HAL_DMA_Start+0x1d4>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2e      	ldr	r2, [pc, #184]	; (8004918 <HAL_DMA_Start+0x238>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d027      	beq.n	80048b4 <HAL_DMA_Start+0x1d4>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2c      	ldr	r2, [pc, #176]	; (800491c <HAL_DMA_Start+0x23c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d022      	beq.n	80048b4 <HAL_DMA_Start+0x1d4>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2b      	ldr	r2, [pc, #172]	; (8004920 <HAL_DMA_Start+0x240>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d01d      	beq.n	80048b4 <HAL_DMA_Start+0x1d4>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a29      	ldr	r2, [pc, #164]	; (8004924 <HAL_DMA_Start+0x244>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d018      	beq.n	80048b4 <HAL_DMA_Start+0x1d4>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a28      	ldr	r2, [pc, #160]	; (8004928 <HAL_DMA_Start+0x248>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d013      	beq.n	80048b4 <HAL_DMA_Start+0x1d4>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a26      	ldr	r2, [pc, #152]	; (800492c <HAL_DMA_Start+0x24c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00e      	beq.n	80048b4 <HAL_DMA_Start+0x1d4>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a25      	ldr	r2, [pc, #148]	; (8004930 <HAL_DMA_Start+0x250>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d009      	beq.n	80048b4 <HAL_DMA_Start+0x1d4>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a23      	ldr	r2, [pc, #140]	; (8004934 <HAL_DMA_Start+0x254>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d004      	beq.n	80048b4 <HAL_DMA_Start+0x1d4>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a22      	ldr	r2, [pc, #136]	; (8004938 <HAL_DMA_Start+0x258>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d108      	bne.n	80048c6 <HAL_DMA_Start+0x1e6>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e012      	b.n	80048ec <HAL_DMA_Start+0x20c>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0201 	orr.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e009      	b.n	80048ec <HAL_DMA_Start+0x20c>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	0801db7c 	.word	0x0801db7c
 80048fc:	40020010 	.word	0x40020010
 8004900:	40020028 	.word	0x40020028
 8004904:	40020040 	.word	0x40020040
 8004908:	40020058 	.word	0x40020058
 800490c:	40020070 	.word	0x40020070
 8004910:	40020088 	.word	0x40020088
 8004914:	400200a0 	.word	0x400200a0
 8004918:	400200b8 	.word	0x400200b8
 800491c:	40020410 	.word	0x40020410
 8004920:	40020428 	.word	0x40020428
 8004924:	40020440 	.word	0x40020440
 8004928:	40020458 	.word	0x40020458
 800492c:	40020470 	.word	0x40020470
 8004930:	40020488 	.word	0x40020488
 8004934:	400204a0 	.word	0x400204a0
 8004938:	400204b8 	.word	0x400204b8

0800493c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <HAL_DMA_Start_IT+0x20>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495a:	d304      	bcc.n	8004966 <HAL_DMA_Start_IT+0x2a>
 800495c:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8004960:	4879      	ldr	r0, [pc, #484]	; (8004b48 <HAL_DMA_Start_IT+0x20c>)
 8004962:	f7fd f886 	bl	8001a72 <assert_failed>

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_DMA_Start_IT+0x34>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e228      	b.n	8004dc2 <HAL_DMA_Start_IT+0x486>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_DMA_Start_IT+0x42>
 800497a:	2302      	movs	r3, #2
 800497c:	e221      	b.n	8004dc2 <HAL_DMA_Start_IT+0x486>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b01      	cmp	r3, #1
 8004990:	f040 820c 	bne.w	8004dac <HAL_DMA_Start_IT+0x470>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a69      	ldr	r2, [pc, #420]	; (8004b4c <HAL_DMA_Start_IT+0x210>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d04a      	beq.n	8004a42 <HAL_DMA_Start_IT+0x106>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a67      	ldr	r2, [pc, #412]	; (8004b50 <HAL_DMA_Start_IT+0x214>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d045      	beq.n	8004a42 <HAL_DMA_Start_IT+0x106>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a66      	ldr	r2, [pc, #408]	; (8004b54 <HAL_DMA_Start_IT+0x218>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d040      	beq.n	8004a42 <HAL_DMA_Start_IT+0x106>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a64      	ldr	r2, [pc, #400]	; (8004b58 <HAL_DMA_Start_IT+0x21c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d03b      	beq.n	8004a42 <HAL_DMA_Start_IT+0x106>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a63      	ldr	r2, [pc, #396]	; (8004b5c <HAL_DMA_Start_IT+0x220>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d036      	beq.n	8004a42 <HAL_DMA_Start_IT+0x106>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a61      	ldr	r2, [pc, #388]	; (8004b60 <HAL_DMA_Start_IT+0x224>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d031      	beq.n	8004a42 <HAL_DMA_Start_IT+0x106>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a60      	ldr	r2, [pc, #384]	; (8004b64 <HAL_DMA_Start_IT+0x228>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d02c      	beq.n	8004a42 <HAL_DMA_Start_IT+0x106>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a5e      	ldr	r2, [pc, #376]	; (8004b68 <HAL_DMA_Start_IT+0x22c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d027      	beq.n	8004a42 <HAL_DMA_Start_IT+0x106>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a5d      	ldr	r2, [pc, #372]	; (8004b6c <HAL_DMA_Start_IT+0x230>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d022      	beq.n	8004a42 <HAL_DMA_Start_IT+0x106>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a5b      	ldr	r2, [pc, #364]	; (8004b70 <HAL_DMA_Start_IT+0x234>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d01d      	beq.n	8004a42 <HAL_DMA_Start_IT+0x106>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a5a      	ldr	r2, [pc, #360]	; (8004b74 <HAL_DMA_Start_IT+0x238>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d018      	beq.n	8004a42 <HAL_DMA_Start_IT+0x106>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a58      	ldr	r2, [pc, #352]	; (8004b78 <HAL_DMA_Start_IT+0x23c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <HAL_DMA_Start_IT+0x106>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a57      	ldr	r2, [pc, #348]	; (8004b7c <HAL_DMA_Start_IT+0x240>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_DMA_Start_IT+0x106>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a55      	ldr	r2, [pc, #340]	; (8004b80 <HAL_DMA_Start_IT+0x244>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d009      	beq.n	8004a42 <HAL_DMA_Start_IT+0x106>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a54      	ldr	r2, [pc, #336]	; (8004b84 <HAL_DMA_Start_IT+0x248>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_DMA_Start_IT+0x106>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a52      	ldr	r2, [pc, #328]	; (8004b88 <HAL_DMA_Start_IT+0x24c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d108      	bne.n	8004a54 <HAL_DMA_Start_IT+0x118>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0201 	bic.w	r2, r2, #1
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e007      	b.n	8004a64 <HAL_DMA_Start_IT+0x128>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f002 fa16 	bl	8006e9c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a35      	ldr	r2, [pc, #212]	; (8004b4c <HAL_DMA_Start_IT+0x210>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d04a      	beq.n	8004b10 <HAL_DMA_Start_IT+0x1d4>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a34      	ldr	r2, [pc, #208]	; (8004b50 <HAL_DMA_Start_IT+0x214>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d045      	beq.n	8004b10 <HAL_DMA_Start_IT+0x1d4>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a32      	ldr	r2, [pc, #200]	; (8004b54 <HAL_DMA_Start_IT+0x218>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d040      	beq.n	8004b10 <HAL_DMA_Start_IT+0x1d4>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a31      	ldr	r2, [pc, #196]	; (8004b58 <HAL_DMA_Start_IT+0x21c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d03b      	beq.n	8004b10 <HAL_DMA_Start_IT+0x1d4>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a2f      	ldr	r2, [pc, #188]	; (8004b5c <HAL_DMA_Start_IT+0x220>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d036      	beq.n	8004b10 <HAL_DMA_Start_IT+0x1d4>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a2e      	ldr	r2, [pc, #184]	; (8004b60 <HAL_DMA_Start_IT+0x224>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d031      	beq.n	8004b10 <HAL_DMA_Start_IT+0x1d4>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a2c      	ldr	r2, [pc, #176]	; (8004b64 <HAL_DMA_Start_IT+0x228>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d02c      	beq.n	8004b10 <HAL_DMA_Start_IT+0x1d4>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2b      	ldr	r2, [pc, #172]	; (8004b68 <HAL_DMA_Start_IT+0x22c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d027      	beq.n	8004b10 <HAL_DMA_Start_IT+0x1d4>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a29      	ldr	r2, [pc, #164]	; (8004b6c <HAL_DMA_Start_IT+0x230>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d022      	beq.n	8004b10 <HAL_DMA_Start_IT+0x1d4>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a28      	ldr	r2, [pc, #160]	; (8004b70 <HAL_DMA_Start_IT+0x234>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d01d      	beq.n	8004b10 <HAL_DMA_Start_IT+0x1d4>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a26      	ldr	r2, [pc, #152]	; (8004b74 <HAL_DMA_Start_IT+0x238>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d018      	beq.n	8004b10 <HAL_DMA_Start_IT+0x1d4>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a25      	ldr	r2, [pc, #148]	; (8004b78 <HAL_DMA_Start_IT+0x23c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d013      	beq.n	8004b10 <HAL_DMA_Start_IT+0x1d4>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a23      	ldr	r2, [pc, #140]	; (8004b7c <HAL_DMA_Start_IT+0x240>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00e      	beq.n	8004b10 <HAL_DMA_Start_IT+0x1d4>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a22      	ldr	r2, [pc, #136]	; (8004b80 <HAL_DMA_Start_IT+0x244>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d009      	beq.n	8004b10 <HAL_DMA_Start_IT+0x1d4>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a20      	ldr	r2, [pc, #128]	; (8004b84 <HAL_DMA_Start_IT+0x248>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d004      	beq.n	8004b10 <HAL_DMA_Start_IT+0x1d4>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a1f      	ldr	r2, [pc, #124]	; (8004b88 <HAL_DMA_Start_IT+0x24c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d101      	bne.n	8004b14 <HAL_DMA_Start_IT+0x1d8>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <HAL_DMA_Start_IT+0x1da>
 8004b14:	2300      	movs	r3, #0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d038      	beq.n	8004b8c <HAL_DMA_Start_IT+0x250>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f023 021e 	bic.w	r2, r3, #30
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0216 	orr.w	r2, r2, #22
 8004b2c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d040      	beq.n	8004bb8 <HAL_DMA_Start_IT+0x27c>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0208 	orr.w	r2, r2, #8
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	e037      	b.n	8004bb8 <HAL_DMA_Start_IT+0x27c>
 8004b48:	0801db7c 	.word	0x0801db7c
 8004b4c:	40020010 	.word	0x40020010
 8004b50:	40020028 	.word	0x40020028
 8004b54:	40020040 	.word	0x40020040
 8004b58:	40020058 	.word	0x40020058
 8004b5c:	40020070 	.word	0x40020070
 8004b60:	40020088 	.word	0x40020088
 8004b64:	400200a0 	.word	0x400200a0
 8004b68:	400200b8 	.word	0x400200b8
 8004b6c:	40020410 	.word	0x40020410
 8004b70:	40020428 	.word	0x40020428
 8004b74:	40020440 	.word	0x40020440
 8004b78:	40020458 	.word	0x40020458
 8004b7c:	40020470 	.word	0x40020470
 8004b80:	40020488 	.word	0x40020488
 8004b84:	400204a0 	.word	0x400204a0
 8004b88:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f023 020e 	bic.w	r2, r3, #14
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 020a 	orr.w	r2, r2, #10
 8004b9e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <HAL_DMA_Start_IT+0x27c>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0204 	orr.w	r2, r2, #4
 8004bb6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a83      	ldr	r2, [pc, #524]	; (8004dcc <HAL_DMA_Start_IT+0x490>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d072      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a82      	ldr	r2, [pc, #520]	; (8004dd0 <HAL_DMA_Start_IT+0x494>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d06d      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a80      	ldr	r2, [pc, #512]	; (8004dd4 <HAL_DMA_Start_IT+0x498>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d068      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a7f      	ldr	r2, [pc, #508]	; (8004dd8 <HAL_DMA_Start_IT+0x49c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d063      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a7d      	ldr	r2, [pc, #500]	; (8004ddc <HAL_DMA_Start_IT+0x4a0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d05e      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a7c      	ldr	r2, [pc, #496]	; (8004de0 <HAL_DMA_Start_IT+0x4a4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d059      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a7a      	ldr	r2, [pc, #488]	; (8004de4 <HAL_DMA_Start_IT+0x4a8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d054      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a79      	ldr	r2, [pc, #484]	; (8004de8 <HAL_DMA_Start_IT+0x4ac>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d04f      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a77      	ldr	r2, [pc, #476]	; (8004dec <HAL_DMA_Start_IT+0x4b0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d04a      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a76      	ldr	r2, [pc, #472]	; (8004df0 <HAL_DMA_Start_IT+0x4b4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d045      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a74      	ldr	r2, [pc, #464]	; (8004df4 <HAL_DMA_Start_IT+0x4b8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d040      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a73      	ldr	r2, [pc, #460]	; (8004df8 <HAL_DMA_Start_IT+0x4bc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d03b      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a71      	ldr	r2, [pc, #452]	; (8004dfc <HAL_DMA_Start_IT+0x4c0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d036      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a70      	ldr	r2, [pc, #448]	; (8004e00 <HAL_DMA_Start_IT+0x4c4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d031      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a6e      	ldr	r2, [pc, #440]	; (8004e04 <HAL_DMA_Start_IT+0x4c8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d02c      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a6d      	ldr	r2, [pc, #436]	; (8004e08 <HAL_DMA_Start_IT+0x4cc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d027      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a6b      	ldr	r2, [pc, #428]	; (8004e0c <HAL_DMA_Start_IT+0x4d0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d022      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a6a      	ldr	r2, [pc, #424]	; (8004e10 <HAL_DMA_Start_IT+0x4d4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d01d      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a68      	ldr	r2, [pc, #416]	; (8004e14 <HAL_DMA_Start_IT+0x4d8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d018      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a67      	ldr	r2, [pc, #412]	; (8004e18 <HAL_DMA_Start_IT+0x4dc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a65      	ldr	r2, [pc, #404]	; (8004e1c <HAL_DMA_Start_IT+0x4e0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a64      	ldr	r2, [pc, #400]	; (8004e20 <HAL_DMA_Start_IT+0x4e4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d009      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a62      	ldr	r2, [pc, #392]	; (8004e24 <HAL_DMA_Start_IT+0x4e8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x36c>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a61      	ldr	r2, [pc, #388]	; (8004e28 <HAL_DMA_Start_IT+0x4ec>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d101      	bne.n	8004cac <HAL_DMA_Start_IT+0x370>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e000      	b.n	8004cae <HAL_DMA_Start_IT+0x372>
 8004cac:	2300      	movs	r3, #0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01a      	beq.n	8004ce8 <HAL_DMA_Start_IT+0x3ac>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <HAL_DMA_Start_IT+0x394>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d007      	beq.n	8004ce8 <HAL_DMA_Start_IT+0x3ac>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ce6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a37      	ldr	r2, [pc, #220]	; (8004dcc <HAL_DMA_Start_IT+0x490>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d04a      	beq.n	8004d88 <HAL_DMA_Start_IT+0x44c>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a36      	ldr	r2, [pc, #216]	; (8004dd0 <HAL_DMA_Start_IT+0x494>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d045      	beq.n	8004d88 <HAL_DMA_Start_IT+0x44c>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a34      	ldr	r2, [pc, #208]	; (8004dd4 <HAL_DMA_Start_IT+0x498>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d040      	beq.n	8004d88 <HAL_DMA_Start_IT+0x44c>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a33      	ldr	r2, [pc, #204]	; (8004dd8 <HAL_DMA_Start_IT+0x49c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d03b      	beq.n	8004d88 <HAL_DMA_Start_IT+0x44c>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a31      	ldr	r2, [pc, #196]	; (8004ddc <HAL_DMA_Start_IT+0x4a0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d036      	beq.n	8004d88 <HAL_DMA_Start_IT+0x44c>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a30      	ldr	r2, [pc, #192]	; (8004de0 <HAL_DMA_Start_IT+0x4a4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d031      	beq.n	8004d88 <HAL_DMA_Start_IT+0x44c>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a2e      	ldr	r2, [pc, #184]	; (8004de4 <HAL_DMA_Start_IT+0x4a8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d02c      	beq.n	8004d88 <HAL_DMA_Start_IT+0x44c>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a2d      	ldr	r2, [pc, #180]	; (8004de8 <HAL_DMA_Start_IT+0x4ac>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d027      	beq.n	8004d88 <HAL_DMA_Start_IT+0x44c>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a2b      	ldr	r2, [pc, #172]	; (8004dec <HAL_DMA_Start_IT+0x4b0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d022      	beq.n	8004d88 <HAL_DMA_Start_IT+0x44c>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a2a      	ldr	r2, [pc, #168]	; (8004df0 <HAL_DMA_Start_IT+0x4b4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d01d      	beq.n	8004d88 <HAL_DMA_Start_IT+0x44c>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a28      	ldr	r2, [pc, #160]	; (8004df4 <HAL_DMA_Start_IT+0x4b8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d018      	beq.n	8004d88 <HAL_DMA_Start_IT+0x44c>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a27      	ldr	r2, [pc, #156]	; (8004df8 <HAL_DMA_Start_IT+0x4bc>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d013      	beq.n	8004d88 <HAL_DMA_Start_IT+0x44c>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a25      	ldr	r2, [pc, #148]	; (8004dfc <HAL_DMA_Start_IT+0x4c0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00e      	beq.n	8004d88 <HAL_DMA_Start_IT+0x44c>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a24      	ldr	r2, [pc, #144]	; (8004e00 <HAL_DMA_Start_IT+0x4c4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d009      	beq.n	8004d88 <HAL_DMA_Start_IT+0x44c>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a22      	ldr	r2, [pc, #136]	; (8004e04 <HAL_DMA_Start_IT+0x4c8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d004      	beq.n	8004d88 <HAL_DMA_Start_IT+0x44c>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a21      	ldr	r2, [pc, #132]	; (8004e08 <HAL_DMA_Start_IT+0x4cc>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d108      	bne.n	8004d9a <HAL_DMA_Start_IT+0x45e>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	e012      	b.n	8004dc0 <HAL_DMA_Start_IT+0x484>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	e009      	b.n	8004dc0 <HAL_DMA_Start_IT+0x484>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004db2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40020010 	.word	0x40020010
 8004dd0:	40020028 	.word	0x40020028
 8004dd4:	40020040 	.word	0x40020040
 8004dd8:	40020058 	.word	0x40020058
 8004ddc:	40020070 	.word	0x40020070
 8004de0:	40020088 	.word	0x40020088
 8004de4:	400200a0 	.word	0x400200a0
 8004de8:	400200b8 	.word	0x400200b8
 8004dec:	40020410 	.word	0x40020410
 8004df0:	40020428 	.word	0x40020428
 8004df4:	40020440 	.word	0x40020440
 8004df8:	40020458 	.word	0x40020458
 8004dfc:	40020470 	.word	0x40020470
 8004e00:	40020488 	.word	0x40020488
 8004e04:	400204a0 	.word	0x400204a0
 8004e08:	400204b8 	.word	0x400204b8
 8004e0c:	58025408 	.word	0x58025408
 8004e10:	5802541c 	.word	0x5802541c
 8004e14:	58025430 	.word	0x58025430
 8004e18:	58025444 	.word	0x58025444
 8004e1c:	58025458 	.word	0x58025458
 8004e20:	5802546c 	.word	0x5802546c
 8004e24:	58025480 	.word	0x58025480
 8004e28:	58025494 	.word	0x58025494

08004e2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004e34:	f7fe fb90 	bl	8003558 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e2dc      	b.n	80053fe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d008      	beq.n	8004e62 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2280      	movs	r2, #128	; 0x80
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e2cd      	b.n	80053fe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a76      	ldr	r2, [pc, #472]	; (8005040 <HAL_DMA_Abort+0x214>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d04a      	beq.n	8004f02 <HAL_DMA_Abort+0xd6>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a74      	ldr	r2, [pc, #464]	; (8005044 <HAL_DMA_Abort+0x218>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d045      	beq.n	8004f02 <HAL_DMA_Abort+0xd6>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a73      	ldr	r2, [pc, #460]	; (8005048 <HAL_DMA_Abort+0x21c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d040      	beq.n	8004f02 <HAL_DMA_Abort+0xd6>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a71      	ldr	r2, [pc, #452]	; (800504c <HAL_DMA_Abort+0x220>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d03b      	beq.n	8004f02 <HAL_DMA_Abort+0xd6>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a70      	ldr	r2, [pc, #448]	; (8005050 <HAL_DMA_Abort+0x224>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d036      	beq.n	8004f02 <HAL_DMA_Abort+0xd6>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a6e      	ldr	r2, [pc, #440]	; (8005054 <HAL_DMA_Abort+0x228>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d031      	beq.n	8004f02 <HAL_DMA_Abort+0xd6>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a6d      	ldr	r2, [pc, #436]	; (8005058 <HAL_DMA_Abort+0x22c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d02c      	beq.n	8004f02 <HAL_DMA_Abort+0xd6>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a6b      	ldr	r2, [pc, #428]	; (800505c <HAL_DMA_Abort+0x230>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d027      	beq.n	8004f02 <HAL_DMA_Abort+0xd6>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a6a      	ldr	r2, [pc, #424]	; (8005060 <HAL_DMA_Abort+0x234>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d022      	beq.n	8004f02 <HAL_DMA_Abort+0xd6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a68      	ldr	r2, [pc, #416]	; (8005064 <HAL_DMA_Abort+0x238>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d01d      	beq.n	8004f02 <HAL_DMA_Abort+0xd6>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a67      	ldr	r2, [pc, #412]	; (8005068 <HAL_DMA_Abort+0x23c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d018      	beq.n	8004f02 <HAL_DMA_Abort+0xd6>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a65      	ldr	r2, [pc, #404]	; (800506c <HAL_DMA_Abort+0x240>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <HAL_DMA_Abort+0xd6>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a64      	ldr	r2, [pc, #400]	; (8005070 <HAL_DMA_Abort+0x244>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00e      	beq.n	8004f02 <HAL_DMA_Abort+0xd6>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a62      	ldr	r2, [pc, #392]	; (8005074 <HAL_DMA_Abort+0x248>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d009      	beq.n	8004f02 <HAL_DMA_Abort+0xd6>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a61      	ldr	r2, [pc, #388]	; (8005078 <HAL_DMA_Abort+0x24c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d004      	beq.n	8004f02 <HAL_DMA_Abort+0xd6>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a5f      	ldr	r2, [pc, #380]	; (800507c <HAL_DMA_Abort+0x250>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d101      	bne.n	8004f06 <HAL_DMA_Abort+0xda>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <HAL_DMA_Abort+0xdc>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d013      	beq.n	8004f34 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 021e 	bic.w	r2, r2, #30
 8004f1a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695a      	ldr	r2, [r3, #20]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f2a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	e00a      	b.n	8004f4a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 020e 	bic.w	r2, r2, #14
 8004f42:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a3c      	ldr	r2, [pc, #240]	; (8005040 <HAL_DMA_Abort+0x214>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d072      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a3a      	ldr	r2, [pc, #232]	; (8005044 <HAL_DMA_Abort+0x218>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d06d      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a39      	ldr	r2, [pc, #228]	; (8005048 <HAL_DMA_Abort+0x21c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d068      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a37      	ldr	r2, [pc, #220]	; (800504c <HAL_DMA_Abort+0x220>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d063      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a36      	ldr	r2, [pc, #216]	; (8005050 <HAL_DMA_Abort+0x224>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d05e      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a34      	ldr	r2, [pc, #208]	; (8005054 <HAL_DMA_Abort+0x228>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d059      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a33      	ldr	r2, [pc, #204]	; (8005058 <HAL_DMA_Abort+0x22c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d054      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a31      	ldr	r2, [pc, #196]	; (800505c <HAL_DMA_Abort+0x230>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d04f      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a30      	ldr	r2, [pc, #192]	; (8005060 <HAL_DMA_Abort+0x234>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d04a      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a2e      	ldr	r2, [pc, #184]	; (8005064 <HAL_DMA_Abort+0x238>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d045      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a2d      	ldr	r2, [pc, #180]	; (8005068 <HAL_DMA_Abort+0x23c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d040      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a2b      	ldr	r2, [pc, #172]	; (800506c <HAL_DMA_Abort+0x240>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d03b      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <HAL_DMA_Abort+0x244>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d036      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a28      	ldr	r2, [pc, #160]	; (8005074 <HAL_DMA_Abort+0x248>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d031      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a27      	ldr	r2, [pc, #156]	; (8005078 <HAL_DMA_Abort+0x24c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d02c      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a25      	ldr	r2, [pc, #148]	; (800507c <HAL_DMA_Abort+0x250>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d027      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a24      	ldr	r2, [pc, #144]	; (8005080 <HAL_DMA_Abort+0x254>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d022      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a22      	ldr	r2, [pc, #136]	; (8005084 <HAL_DMA_Abort+0x258>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d01d      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a21      	ldr	r2, [pc, #132]	; (8005088 <HAL_DMA_Abort+0x25c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d018      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1f      	ldr	r2, [pc, #124]	; (800508c <HAL_DMA_Abort+0x260>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d013      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1e      	ldr	r2, [pc, #120]	; (8005090 <HAL_DMA_Abort+0x264>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00e      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1c      	ldr	r2, [pc, #112]	; (8005094 <HAL_DMA_Abort+0x268>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d009      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1b      	ldr	r2, [pc, #108]	; (8005098 <HAL_DMA_Abort+0x26c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d004      	beq.n	800503a <HAL_DMA_Abort+0x20e>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a19      	ldr	r2, [pc, #100]	; (800509c <HAL_DMA_Abort+0x270>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d132      	bne.n	80050a0 <HAL_DMA_Abort+0x274>
 800503a:	2301      	movs	r3, #1
 800503c:	e031      	b.n	80050a2 <HAL_DMA_Abort+0x276>
 800503e:	bf00      	nop
 8005040:	40020010 	.word	0x40020010
 8005044:	40020028 	.word	0x40020028
 8005048:	40020040 	.word	0x40020040
 800504c:	40020058 	.word	0x40020058
 8005050:	40020070 	.word	0x40020070
 8005054:	40020088 	.word	0x40020088
 8005058:	400200a0 	.word	0x400200a0
 800505c:	400200b8 	.word	0x400200b8
 8005060:	40020410 	.word	0x40020410
 8005064:	40020428 	.word	0x40020428
 8005068:	40020440 	.word	0x40020440
 800506c:	40020458 	.word	0x40020458
 8005070:	40020470 	.word	0x40020470
 8005074:	40020488 	.word	0x40020488
 8005078:	400204a0 	.word	0x400204a0
 800507c:	400204b8 	.word	0x400204b8
 8005080:	58025408 	.word	0x58025408
 8005084:	5802541c 	.word	0x5802541c
 8005088:	58025430 	.word	0x58025430
 800508c:	58025444 	.word	0x58025444
 8005090:	58025458 	.word	0x58025458
 8005094:	5802546c 	.word	0x5802546c
 8005098:	58025480 	.word	0x58025480
 800509c:	58025494 	.word	0x58025494
 80050a0:	2300      	movs	r3, #0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d007      	beq.n	80050b6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a6d      	ldr	r2, [pc, #436]	; (8005270 <HAL_DMA_Abort+0x444>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d04a      	beq.n	8005156 <HAL_DMA_Abort+0x32a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a6b      	ldr	r2, [pc, #428]	; (8005274 <HAL_DMA_Abort+0x448>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d045      	beq.n	8005156 <HAL_DMA_Abort+0x32a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a6a      	ldr	r2, [pc, #424]	; (8005278 <HAL_DMA_Abort+0x44c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d040      	beq.n	8005156 <HAL_DMA_Abort+0x32a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a68      	ldr	r2, [pc, #416]	; (800527c <HAL_DMA_Abort+0x450>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d03b      	beq.n	8005156 <HAL_DMA_Abort+0x32a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a67      	ldr	r2, [pc, #412]	; (8005280 <HAL_DMA_Abort+0x454>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d036      	beq.n	8005156 <HAL_DMA_Abort+0x32a>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a65      	ldr	r2, [pc, #404]	; (8005284 <HAL_DMA_Abort+0x458>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d031      	beq.n	8005156 <HAL_DMA_Abort+0x32a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a64      	ldr	r2, [pc, #400]	; (8005288 <HAL_DMA_Abort+0x45c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d02c      	beq.n	8005156 <HAL_DMA_Abort+0x32a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a62      	ldr	r2, [pc, #392]	; (800528c <HAL_DMA_Abort+0x460>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d027      	beq.n	8005156 <HAL_DMA_Abort+0x32a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a61      	ldr	r2, [pc, #388]	; (8005290 <HAL_DMA_Abort+0x464>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d022      	beq.n	8005156 <HAL_DMA_Abort+0x32a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a5f      	ldr	r2, [pc, #380]	; (8005294 <HAL_DMA_Abort+0x468>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d01d      	beq.n	8005156 <HAL_DMA_Abort+0x32a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a5e      	ldr	r2, [pc, #376]	; (8005298 <HAL_DMA_Abort+0x46c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d018      	beq.n	8005156 <HAL_DMA_Abort+0x32a>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a5c      	ldr	r2, [pc, #368]	; (800529c <HAL_DMA_Abort+0x470>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <HAL_DMA_Abort+0x32a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a5b      	ldr	r2, [pc, #364]	; (80052a0 <HAL_DMA_Abort+0x474>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00e      	beq.n	8005156 <HAL_DMA_Abort+0x32a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a59      	ldr	r2, [pc, #356]	; (80052a4 <HAL_DMA_Abort+0x478>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d009      	beq.n	8005156 <HAL_DMA_Abort+0x32a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a58      	ldr	r2, [pc, #352]	; (80052a8 <HAL_DMA_Abort+0x47c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d004      	beq.n	8005156 <HAL_DMA_Abort+0x32a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a56      	ldr	r2, [pc, #344]	; (80052ac <HAL_DMA_Abort+0x480>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d108      	bne.n	8005168 <HAL_DMA_Abort+0x33c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0201 	bic.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	e007      	b.n	8005178 <HAL_DMA_Abort+0x34c>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005178:	e013      	b.n	80051a2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800517a:	f7fe f9ed 	bl	8003558 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b05      	cmp	r3, #5
 8005186:	d90c      	bls.n	80051a2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2203      	movs	r2, #3
 8005192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e12d      	b.n	80053fe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e5      	bne.n	800517a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a2f      	ldr	r2, [pc, #188]	; (8005270 <HAL_DMA_Abort+0x444>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d04a      	beq.n	800524e <HAL_DMA_Abort+0x422>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a2d      	ldr	r2, [pc, #180]	; (8005274 <HAL_DMA_Abort+0x448>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d045      	beq.n	800524e <HAL_DMA_Abort+0x422>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a2c      	ldr	r2, [pc, #176]	; (8005278 <HAL_DMA_Abort+0x44c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d040      	beq.n	800524e <HAL_DMA_Abort+0x422>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a2a      	ldr	r2, [pc, #168]	; (800527c <HAL_DMA_Abort+0x450>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d03b      	beq.n	800524e <HAL_DMA_Abort+0x422>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a29      	ldr	r2, [pc, #164]	; (8005280 <HAL_DMA_Abort+0x454>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d036      	beq.n	800524e <HAL_DMA_Abort+0x422>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a27      	ldr	r2, [pc, #156]	; (8005284 <HAL_DMA_Abort+0x458>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d031      	beq.n	800524e <HAL_DMA_Abort+0x422>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a26      	ldr	r2, [pc, #152]	; (8005288 <HAL_DMA_Abort+0x45c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d02c      	beq.n	800524e <HAL_DMA_Abort+0x422>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a24      	ldr	r2, [pc, #144]	; (800528c <HAL_DMA_Abort+0x460>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d027      	beq.n	800524e <HAL_DMA_Abort+0x422>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a23      	ldr	r2, [pc, #140]	; (8005290 <HAL_DMA_Abort+0x464>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d022      	beq.n	800524e <HAL_DMA_Abort+0x422>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a21      	ldr	r2, [pc, #132]	; (8005294 <HAL_DMA_Abort+0x468>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d01d      	beq.n	800524e <HAL_DMA_Abort+0x422>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a20      	ldr	r2, [pc, #128]	; (8005298 <HAL_DMA_Abort+0x46c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d018      	beq.n	800524e <HAL_DMA_Abort+0x422>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1e      	ldr	r2, [pc, #120]	; (800529c <HAL_DMA_Abort+0x470>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d013      	beq.n	800524e <HAL_DMA_Abort+0x422>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a1d      	ldr	r2, [pc, #116]	; (80052a0 <HAL_DMA_Abort+0x474>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00e      	beq.n	800524e <HAL_DMA_Abort+0x422>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1b      	ldr	r2, [pc, #108]	; (80052a4 <HAL_DMA_Abort+0x478>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d009      	beq.n	800524e <HAL_DMA_Abort+0x422>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <HAL_DMA_Abort+0x47c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d004      	beq.n	800524e <HAL_DMA_Abort+0x422>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a18      	ldr	r2, [pc, #96]	; (80052ac <HAL_DMA_Abort+0x480>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d101      	bne.n	8005252 <HAL_DMA_Abort+0x426>
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <HAL_DMA_Abort+0x428>
 8005252:	2300      	movs	r3, #0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d02b      	beq.n	80052b0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	223f      	movs	r2, #63	; 0x3f
 8005268:	409a      	lsls	r2, r3
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	609a      	str	r2, [r3, #8]
 800526e:	e02a      	b.n	80052c6 <HAL_DMA_Abort+0x49a>
 8005270:	40020010 	.word	0x40020010
 8005274:	40020028 	.word	0x40020028
 8005278:	40020040 	.word	0x40020040
 800527c:	40020058 	.word	0x40020058
 8005280:	40020070 	.word	0x40020070
 8005284:	40020088 	.word	0x40020088
 8005288:	400200a0 	.word	0x400200a0
 800528c:	400200b8 	.word	0x400200b8
 8005290:	40020410 	.word	0x40020410
 8005294:	40020428 	.word	0x40020428
 8005298:	40020440 	.word	0x40020440
 800529c:	40020458 	.word	0x40020458
 80052a0:	40020470 	.word	0x40020470
 80052a4:	40020488 	.word	0x40020488
 80052a8:	400204a0 	.word	0x400204a0
 80052ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ba:	f003 031f 	and.w	r3, r3, #31
 80052be:	2201      	movs	r2, #1
 80052c0:	409a      	lsls	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a4f      	ldr	r2, [pc, #316]	; (8005408 <HAL_DMA_Abort+0x5dc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d072      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a4d      	ldr	r2, [pc, #308]	; (800540c <HAL_DMA_Abort+0x5e0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d06d      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a4c      	ldr	r2, [pc, #304]	; (8005410 <HAL_DMA_Abort+0x5e4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d068      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a4a      	ldr	r2, [pc, #296]	; (8005414 <HAL_DMA_Abort+0x5e8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d063      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a49      	ldr	r2, [pc, #292]	; (8005418 <HAL_DMA_Abort+0x5ec>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d05e      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a47      	ldr	r2, [pc, #284]	; (800541c <HAL_DMA_Abort+0x5f0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d059      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a46      	ldr	r2, [pc, #280]	; (8005420 <HAL_DMA_Abort+0x5f4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d054      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a44      	ldr	r2, [pc, #272]	; (8005424 <HAL_DMA_Abort+0x5f8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d04f      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a43      	ldr	r2, [pc, #268]	; (8005428 <HAL_DMA_Abort+0x5fc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d04a      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a41      	ldr	r2, [pc, #260]	; (800542c <HAL_DMA_Abort+0x600>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d045      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a40      	ldr	r2, [pc, #256]	; (8005430 <HAL_DMA_Abort+0x604>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d040      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a3e      	ldr	r2, [pc, #248]	; (8005434 <HAL_DMA_Abort+0x608>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d03b      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a3d      	ldr	r2, [pc, #244]	; (8005438 <HAL_DMA_Abort+0x60c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d036      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a3b      	ldr	r2, [pc, #236]	; (800543c <HAL_DMA_Abort+0x610>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d031      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a3a      	ldr	r2, [pc, #232]	; (8005440 <HAL_DMA_Abort+0x614>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d02c      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a38      	ldr	r2, [pc, #224]	; (8005444 <HAL_DMA_Abort+0x618>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d027      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a37      	ldr	r2, [pc, #220]	; (8005448 <HAL_DMA_Abort+0x61c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d022      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a35      	ldr	r2, [pc, #212]	; (800544c <HAL_DMA_Abort+0x620>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d01d      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a34      	ldr	r2, [pc, #208]	; (8005450 <HAL_DMA_Abort+0x624>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d018      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a32      	ldr	r2, [pc, #200]	; (8005454 <HAL_DMA_Abort+0x628>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d013      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a31      	ldr	r2, [pc, #196]	; (8005458 <HAL_DMA_Abort+0x62c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00e      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a2f      	ldr	r2, [pc, #188]	; (800545c <HAL_DMA_Abort+0x630>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d009      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a2e      	ldr	r2, [pc, #184]	; (8005460 <HAL_DMA_Abort+0x634>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d004      	beq.n	80053b6 <HAL_DMA_Abort+0x58a>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a2c      	ldr	r2, [pc, #176]	; (8005464 <HAL_DMA_Abort+0x638>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d101      	bne.n	80053ba <HAL_DMA_Abort+0x58e>
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <HAL_DMA_Abort+0x590>
 80053ba:	2300      	movs	r3, #0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d015      	beq.n	80053ec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80053c8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00c      	beq.n	80053ec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053e0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80053ea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40020010 	.word	0x40020010
 800540c:	40020028 	.word	0x40020028
 8005410:	40020040 	.word	0x40020040
 8005414:	40020058 	.word	0x40020058
 8005418:	40020070 	.word	0x40020070
 800541c:	40020088 	.word	0x40020088
 8005420:	400200a0 	.word	0x400200a0
 8005424:	400200b8 	.word	0x400200b8
 8005428:	40020410 	.word	0x40020410
 800542c:	40020428 	.word	0x40020428
 8005430:	40020440 	.word	0x40020440
 8005434:	40020458 	.word	0x40020458
 8005438:	40020470 	.word	0x40020470
 800543c:	40020488 	.word	0x40020488
 8005440:	400204a0 	.word	0x400204a0
 8005444:	400204b8 	.word	0x400204b8
 8005448:	58025408 	.word	0x58025408
 800544c:	5802541c 	.word	0x5802541c
 8005450:	58025430 	.word	0x58025430
 8005454:	58025444 	.word	0x58025444
 8005458:	58025458 	.word	0x58025458
 800545c:	5802546c 	.word	0x5802546c
 8005460:	58025480 	.word	0x58025480
 8005464:	58025494 	.word	0x58025494

08005468 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e237      	b.n	80058ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d004      	beq.n	8005490 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2280      	movs	r2, #128	; 0x80
 800548a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e22c      	b.n	80058ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a5c      	ldr	r2, [pc, #368]	; (8005608 <HAL_DMA_Abort_IT+0x1a0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d04a      	beq.n	8005530 <HAL_DMA_Abort_IT+0xc8>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a5b      	ldr	r2, [pc, #364]	; (800560c <HAL_DMA_Abort_IT+0x1a4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d045      	beq.n	8005530 <HAL_DMA_Abort_IT+0xc8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a59      	ldr	r2, [pc, #356]	; (8005610 <HAL_DMA_Abort_IT+0x1a8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d040      	beq.n	8005530 <HAL_DMA_Abort_IT+0xc8>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a58      	ldr	r2, [pc, #352]	; (8005614 <HAL_DMA_Abort_IT+0x1ac>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d03b      	beq.n	8005530 <HAL_DMA_Abort_IT+0xc8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a56      	ldr	r2, [pc, #344]	; (8005618 <HAL_DMA_Abort_IT+0x1b0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d036      	beq.n	8005530 <HAL_DMA_Abort_IT+0xc8>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a55      	ldr	r2, [pc, #340]	; (800561c <HAL_DMA_Abort_IT+0x1b4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d031      	beq.n	8005530 <HAL_DMA_Abort_IT+0xc8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a53      	ldr	r2, [pc, #332]	; (8005620 <HAL_DMA_Abort_IT+0x1b8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d02c      	beq.n	8005530 <HAL_DMA_Abort_IT+0xc8>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a52      	ldr	r2, [pc, #328]	; (8005624 <HAL_DMA_Abort_IT+0x1bc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d027      	beq.n	8005530 <HAL_DMA_Abort_IT+0xc8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a50      	ldr	r2, [pc, #320]	; (8005628 <HAL_DMA_Abort_IT+0x1c0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d022      	beq.n	8005530 <HAL_DMA_Abort_IT+0xc8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a4f      	ldr	r2, [pc, #316]	; (800562c <HAL_DMA_Abort_IT+0x1c4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d01d      	beq.n	8005530 <HAL_DMA_Abort_IT+0xc8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a4d      	ldr	r2, [pc, #308]	; (8005630 <HAL_DMA_Abort_IT+0x1c8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d018      	beq.n	8005530 <HAL_DMA_Abort_IT+0xc8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a4c      	ldr	r2, [pc, #304]	; (8005634 <HAL_DMA_Abort_IT+0x1cc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d013      	beq.n	8005530 <HAL_DMA_Abort_IT+0xc8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a4a      	ldr	r2, [pc, #296]	; (8005638 <HAL_DMA_Abort_IT+0x1d0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00e      	beq.n	8005530 <HAL_DMA_Abort_IT+0xc8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a49      	ldr	r2, [pc, #292]	; (800563c <HAL_DMA_Abort_IT+0x1d4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d009      	beq.n	8005530 <HAL_DMA_Abort_IT+0xc8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a47      	ldr	r2, [pc, #284]	; (8005640 <HAL_DMA_Abort_IT+0x1d8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d004      	beq.n	8005530 <HAL_DMA_Abort_IT+0xc8>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a46      	ldr	r2, [pc, #280]	; (8005644 <HAL_DMA_Abort_IT+0x1dc>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d101      	bne.n	8005534 <HAL_DMA_Abort_IT+0xcc>
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <HAL_DMA_Abort_IT+0xce>
 8005534:	2300      	movs	r3, #0
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 8086 	beq.w	8005648 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2204      	movs	r2, #4
 8005540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a2f      	ldr	r2, [pc, #188]	; (8005608 <HAL_DMA_Abort_IT+0x1a0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d04a      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x17c>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a2e      	ldr	r2, [pc, #184]	; (800560c <HAL_DMA_Abort_IT+0x1a4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d045      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x17c>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a2c      	ldr	r2, [pc, #176]	; (8005610 <HAL_DMA_Abort_IT+0x1a8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d040      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x17c>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a2b      	ldr	r2, [pc, #172]	; (8005614 <HAL_DMA_Abort_IT+0x1ac>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d03b      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x17c>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a29      	ldr	r2, [pc, #164]	; (8005618 <HAL_DMA_Abort_IT+0x1b0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d036      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x17c>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a28      	ldr	r2, [pc, #160]	; (800561c <HAL_DMA_Abort_IT+0x1b4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d031      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x17c>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a26      	ldr	r2, [pc, #152]	; (8005620 <HAL_DMA_Abort_IT+0x1b8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d02c      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x17c>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a25      	ldr	r2, [pc, #148]	; (8005624 <HAL_DMA_Abort_IT+0x1bc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d027      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x17c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a23      	ldr	r2, [pc, #140]	; (8005628 <HAL_DMA_Abort_IT+0x1c0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d022      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x17c>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a22      	ldr	r2, [pc, #136]	; (800562c <HAL_DMA_Abort_IT+0x1c4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d01d      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x17c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a20      	ldr	r2, [pc, #128]	; (8005630 <HAL_DMA_Abort_IT+0x1c8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d018      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x17c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a1f      	ldr	r2, [pc, #124]	; (8005634 <HAL_DMA_Abort_IT+0x1cc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d013      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x17c>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a1d      	ldr	r2, [pc, #116]	; (8005638 <HAL_DMA_Abort_IT+0x1d0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00e      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x17c>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a1c      	ldr	r2, [pc, #112]	; (800563c <HAL_DMA_Abort_IT+0x1d4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d009      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x17c>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a1a      	ldr	r2, [pc, #104]	; (8005640 <HAL_DMA_Abort_IT+0x1d8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d004      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x17c>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a19      	ldr	r2, [pc, #100]	; (8005644 <HAL_DMA_Abort_IT+0x1dc>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d108      	bne.n	80055f6 <HAL_DMA_Abort_IT+0x18e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0201 	bic.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	e178      	b.n	80058e8 <HAL_DMA_Abort_IT+0x480>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0201 	bic.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	e16f      	b.n	80058e8 <HAL_DMA_Abort_IT+0x480>
 8005608:	40020010 	.word	0x40020010
 800560c:	40020028 	.word	0x40020028
 8005610:	40020040 	.word	0x40020040
 8005614:	40020058 	.word	0x40020058
 8005618:	40020070 	.word	0x40020070
 800561c:	40020088 	.word	0x40020088
 8005620:	400200a0 	.word	0x400200a0
 8005624:	400200b8 	.word	0x400200b8
 8005628:	40020410 	.word	0x40020410
 800562c:	40020428 	.word	0x40020428
 8005630:	40020440 	.word	0x40020440
 8005634:	40020458 	.word	0x40020458
 8005638:	40020470 	.word	0x40020470
 800563c:	40020488 	.word	0x40020488
 8005640:	400204a0 	.word	0x400204a0
 8005644:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 020e 	bic.w	r2, r2, #14
 8005656:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a6c      	ldr	r2, [pc, #432]	; (8005810 <HAL_DMA_Abort_IT+0x3a8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d04a      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x290>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a6b      	ldr	r2, [pc, #428]	; (8005814 <HAL_DMA_Abort_IT+0x3ac>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d045      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x290>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a69      	ldr	r2, [pc, #420]	; (8005818 <HAL_DMA_Abort_IT+0x3b0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d040      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x290>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a68      	ldr	r2, [pc, #416]	; (800581c <HAL_DMA_Abort_IT+0x3b4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d03b      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x290>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a66      	ldr	r2, [pc, #408]	; (8005820 <HAL_DMA_Abort_IT+0x3b8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d036      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x290>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a65      	ldr	r2, [pc, #404]	; (8005824 <HAL_DMA_Abort_IT+0x3bc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d031      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x290>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a63      	ldr	r2, [pc, #396]	; (8005828 <HAL_DMA_Abort_IT+0x3c0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d02c      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x290>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a62      	ldr	r2, [pc, #392]	; (800582c <HAL_DMA_Abort_IT+0x3c4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d027      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x290>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a60      	ldr	r2, [pc, #384]	; (8005830 <HAL_DMA_Abort_IT+0x3c8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d022      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x290>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a5f      	ldr	r2, [pc, #380]	; (8005834 <HAL_DMA_Abort_IT+0x3cc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d01d      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x290>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a5d      	ldr	r2, [pc, #372]	; (8005838 <HAL_DMA_Abort_IT+0x3d0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d018      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x290>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a5c      	ldr	r2, [pc, #368]	; (800583c <HAL_DMA_Abort_IT+0x3d4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d013      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x290>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a5a      	ldr	r2, [pc, #360]	; (8005840 <HAL_DMA_Abort_IT+0x3d8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00e      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x290>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a59      	ldr	r2, [pc, #356]	; (8005844 <HAL_DMA_Abort_IT+0x3dc>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d009      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x290>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a57      	ldr	r2, [pc, #348]	; (8005848 <HAL_DMA_Abort_IT+0x3e0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d004      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x290>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a56      	ldr	r2, [pc, #344]	; (800584c <HAL_DMA_Abort_IT+0x3e4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d108      	bne.n	800570a <HAL_DMA_Abort_IT+0x2a2>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0201 	bic.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	e007      	b.n	800571a <HAL_DMA_Abort_IT+0x2b2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0201 	bic.w	r2, r2, #1
 8005718:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a3c      	ldr	r2, [pc, #240]	; (8005810 <HAL_DMA_Abort_IT+0x3a8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d072      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a3a      	ldr	r2, [pc, #232]	; (8005814 <HAL_DMA_Abort_IT+0x3ac>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d06d      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a39      	ldr	r2, [pc, #228]	; (8005818 <HAL_DMA_Abort_IT+0x3b0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d068      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a37      	ldr	r2, [pc, #220]	; (800581c <HAL_DMA_Abort_IT+0x3b4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d063      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a36      	ldr	r2, [pc, #216]	; (8005820 <HAL_DMA_Abort_IT+0x3b8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d05e      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a34      	ldr	r2, [pc, #208]	; (8005824 <HAL_DMA_Abort_IT+0x3bc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d059      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a33      	ldr	r2, [pc, #204]	; (8005828 <HAL_DMA_Abort_IT+0x3c0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d054      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a31      	ldr	r2, [pc, #196]	; (800582c <HAL_DMA_Abort_IT+0x3c4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d04f      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a30      	ldr	r2, [pc, #192]	; (8005830 <HAL_DMA_Abort_IT+0x3c8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d04a      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a2e      	ldr	r2, [pc, #184]	; (8005834 <HAL_DMA_Abort_IT+0x3cc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d045      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2d      	ldr	r2, [pc, #180]	; (8005838 <HAL_DMA_Abort_IT+0x3d0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d040      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a2b      	ldr	r2, [pc, #172]	; (800583c <HAL_DMA_Abort_IT+0x3d4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d03b      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a2a      	ldr	r2, [pc, #168]	; (8005840 <HAL_DMA_Abort_IT+0x3d8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d036      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a28      	ldr	r2, [pc, #160]	; (8005844 <HAL_DMA_Abort_IT+0x3dc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d031      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a27      	ldr	r2, [pc, #156]	; (8005848 <HAL_DMA_Abort_IT+0x3e0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d02c      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a25      	ldr	r2, [pc, #148]	; (800584c <HAL_DMA_Abort_IT+0x3e4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d027      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a24      	ldr	r2, [pc, #144]	; (8005850 <HAL_DMA_Abort_IT+0x3e8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d022      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a22      	ldr	r2, [pc, #136]	; (8005854 <HAL_DMA_Abort_IT+0x3ec>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d01d      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a21      	ldr	r2, [pc, #132]	; (8005858 <HAL_DMA_Abort_IT+0x3f0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d018      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1f      	ldr	r2, [pc, #124]	; (800585c <HAL_DMA_Abort_IT+0x3f4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d013      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a1e      	ldr	r2, [pc, #120]	; (8005860 <HAL_DMA_Abort_IT+0x3f8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00e      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1c      	ldr	r2, [pc, #112]	; (8005864 <HAL_DMA_Abort_IT+0x3fc>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d009      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1b      	ldr	r2, [pc, #108]	; (8005868 <HAL_DMA_Abort_IT+0x400>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_DMA_Abort_IT+0x3a2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a19      	ldr	r2, [pc, #100]	; (800586c <HAL_DMA_Abort_IT+0x404>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d132      	bne.n	8005870 <HAL_DMA_Abort_IT+0x408>
 800580a:	2301      	movs	r3, #1
 800580c:	e031      	b.n	8005872 <HAL_DMA_Abort_IT+0x40a>
 800580e:	bf00      	nop
 8005810:	40020010 	.word	0x40020010
 8005814:	40020028 	.word	0x40020028
 8005818:	40020040 	.word	0x40020040
 800581c:	40020058 	.word	0x40020058
 8005820:	40020070 	.word	0x40020070
 8005824:	40020088 	.word	0x40020088
 8005828:	400200a0 	.word	0x400200a0
 800582c:	400200b8 	.word	0x400200b8
 8005830:	40020410 	.word	0x40020410
 8005834:	40020428 	.word	0x40020428
 8005838:	40020440 	.word	0x40020440
 800583c:	40020458 	.word	0x40020458
 8005840:	40020470 	.word	0x40020470
 8005844:	40020488 	.word	0x40020488
 8005848:	400204a0 	.word	0x400204a0
 800584c:	400204b8 	.word	0x400204b8
 8005850:	58025408 	.word	0x58025408
 8005854:	5802541c 	.word	0x5802541c
 8005858:	58025430 	.word	0x58025430
 800585c:	58025444 	.word	0x58025444
 8005860:	58025458 	.word	0x58025458
 8005864:	5802546c 	.word	0x5802546c
 8005868:	58025480 	.word	0x58025480
 800586c:	58025494 	.word	0x58025494
 8005870:	2300      	movs	r3, #0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d028      	beq.n	80058c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005884:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800588a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	2201      	movs	r2, #1
 8005896:	409a      	lsls	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00c      	beq.n	80058c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop

080058f4 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08a      	sub	sp, #40	; 0x28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	460b      	mov	r3, r1
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
 8005906:	f7fd fe27 	bl	8003558 <HAL_GetTick>
 800590a:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e374      	b.n	8006000 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d008      	beq.n	8005934 <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2280      	movs	r2, #128	; 0x80
 8005926:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e365      	b.n	8006000 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a7b      	ldr	r2, [pc, #492]	; (8005b28 <HAL_DMA_PollForTransfer+0x234>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d04a      	beq.n	80059d4 <HAL_DMA_PollForTransfer+0xe0>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a7a      	ldr	r2, [pc, #488]	; (8005b2c <HAL_DMA_PollForTransfer+0x238>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d045      	beq.n	80059d4 <HAL_DMA_PollForTransfer+0xe0>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a78      	ldr	r2, [pc, #480]	; (8005b30 <HAL_DMA_PollForTransfer+0x23c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d040      	beq.n	80059d4 <HAL_DMA_PollForTransfer+0xe0>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a77      	ldr	r2, [pc, #476]	; (8005b34 <HAL_DMA_PollForTransfer+0x240>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d03b      	beq.n	80059d4 <HAL_DMA_PollForTransfer+0xe0>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a75      	ldr	r2, [pc, #468]	; (8005b38 <HAL_DMA_PollForTransfer+0x244>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d036      	beq.n	80059d4 <HAL_DMA_PollForTransfer+0xe0>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a74      	ldr	r2, [pc, #464]	; (8005b3c <HAL_DMA_PollForTransfer+0x248>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d031      	beq.n	80059d4 <HAL_DMA_PollForTransfer+0xe0>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a72      	ldr	r2, [pc, #456]	; (8005b40 <HAL_DMA_PollForTransfer+0x24c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d02c      	beq.n	80059d4 <HAL_DMA_PollForTransfer+0xe0>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a71      	ldr	r2, [pc, #452]	; (8005b44 <HAL_DMA_PollForTransfer+0x250>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d027      	beq.n	80059d4 <HAL_DMA_PollForTransfer+0xe0>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a6f      	ldr	r2, [pc, #444]	; (8005b48 <HAL_DMA_PollForTransfer+0x254>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d022      	beq.n	80059d4 <HAL_DMA_PollForTransfer+0xe0>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a6e      	ldr	r2, [pc, #440]	; (8005b4c <HAL_DMA_PollForTransfer+0x258>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d01d      	beq.n	80059d4 <HAL_DMA_PollForTransfer+0xe0>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a6c      	ldr	r2, [pc, #432]	; (8005b50 <HAL_DMA_PollForTransfer+0x25c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d018      	beq.n	80059d4 <HAL_DMA_PollForTransfer+0xe0>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a6b      	ldr	r2, [pc, #428]	; (8005b54 <HAL_DMA_PollForTransfer+0x260>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d013      	beq.n	80059d4 <HAL_DMA_PollForTransfer+0xe0>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a69      	ldr	r2, [pc, #420]	; (8005b58 <HAL_DMA_PollForTransfer+0x264>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00e      	beq.n	80059d4 <HAL_DMA_PollForTransfer+0xe0>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a68      	ldr	r2, [pc, #416]	; (8005b5c <HAL_DMA_PollForTransfer+0x268>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d009      	beq.n	80059d4 <HAL_DMA_PollForTransfer+0xe0>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a66      	ldr	r2, [pc, #408]	; (8005b60 <HAL_DMA_PollForTransfer+0x26c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d004      	beq.n	80059d4 <HAL_DMA_PollForTransfer+0xe0>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a65      	ldr	r2, [pc, #404]	; (8005b64 <HAL_DMA_PollForTransfer+0x270>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d101      	bne.n	80059d8 <HAL_DMA_PollForTransfer+0xe4>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <HAL_DMA_PollForTransfer+0xe6>
 80059d8:	2300      	movs	r3, #0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d028      	beq.n	8005a30 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e303      	b.n	8006000 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80059f8:	7afb      	ldrb	r3, [r7, #11]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d108      	bne.n	8005a10 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	2220      	movs	r2, #32
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a0e:	e007      	b.n	8005a20 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a14:	f003 031f 	and.w	r3, r3, #31
 8005a18:	2210      	movs	r2, #16
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a24:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	61fb      	str	r3, [r7, #28]
 8005a2e:	e1d5      	b.n	8005ddc <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d005      	beq.n	8005a4a <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e2da      	b.n	8006000 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8005a4a:	7afb      	ldrb	r3, [r7, #11]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d108      	bne.n	8005a62 <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	2202      	movs	r2, #2
 8005a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a60:	e007      	b.n	8005a72 <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a66:	f003 031f 	and.w	r3, r3, #31
 8005a6a:	2204      	movs	r2, #4
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a76:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
 8005a80:	e1ac      	b.n	8005ddc <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a28      	ldr	r2, [pc, #160]	; (8005b28 <HAL_DMA_PollForTransfer+0x234>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d04a      	beq.n	8005b22 <HAL_DMA_PollForTransfer+0x22e>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a26      	ldr	r2, [pc, #152]	; (8005b2c <HAL_DMA_PollForTransfer+0x238>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d045      	beq.n	8005b22 <HAL_DMA_PollForTransfer+0x22e>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a25      	ldr	r2, [pc, #148]	; (8005b30 <HAL_DMA_PollForTransfer+0x23c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d040      	beq.n	8005b22 <HAL_DMA_PollForTransfer+0x22e>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a23      	ldr	r2, [pc, #140]	; (8005b34 <HAL_DMA_PollForTransfer+0x240>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d03b      	beq.n	8005b22 <HAL_DMA_PollForTransfer+0x22e>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a22      	ldr	r2, [pc, #136]	; (8005b38 <HAL_DMA_PollForTransfer+0x244>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d036      	beq.n	8005b22 <HAL_DMA_PollForTransfer+0x22e>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a20      	ldr	r2, [pc, #128]	; (8005b3c <HAL_DMA_PollForTransfer+0x248>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d031      	beq.n	8005b22 <HAL_DMA_PollForTransfer+0x22e>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a1f      	ldr	r2, [pc, #124]	; (8005b40 <HAL_DMA_PollForTransfer+0x24c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d02c      	beq.n	8005b22 <HAL_DMA_PollForTransfer+0x22e>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1d      	ldr	r2, [pc, #116]	; (8005b44 <HAL_DMA_PollForTransfer+0x250>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d027      	beq.n	8005b22 <HAL_DMA_PollForTransfer+0x22e>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <HAL_DMA_PollForTransfer+0x254>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d022      	beq.n	8005b22 <HAL_DMA_PollForTransfer+0x22e>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a1a      	ldr	r2, [pc, #104]	; (8005b4c <HAL_DMA_PollForTransfer+0x258>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d01d      	beq.n	8005b22 <HAL_DMA_PollForTransfer+0x22e>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a19      	ldr	r2, [pc, #100]	; (8005b50 <HAL_DMA_PollForTransfer+0x25c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d018      	beq.n	8005b22 <HAL_DMA_PollForTransfer+0x22e>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a17      	ldr	r2, [pc, #92]	; (8005b54 <HAL_DMA_PollForTransfer+0x260>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <HAL_DMA_PollForTransfer+0x22e>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a16      	ldr	r2, [pc, #88]	; (8005b58 <HAL_DMA_PollForTransfer+0x264>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00e      	beq.n	8005b22 <HAL_DMA_PollForTransfer+0x22e>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a14      	ldr	r2, [pc, #80]	; (8005b5c <HAL_DMA_PollForTransfer+0x268>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d009      	beq.n	8005b22 <HAL_DMA_PollForTransfer+0x22e>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a13      	ldr	r2, [pc, #76]	; (8005b60 <HAL_DMA_PollForTransfer+0x26c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d004      	beq.n	8005b22 <HAL_DMA_PollForTransfer+0x22e>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a11      	ldr	r2, [pc, #68]	; (8005b64 <HAL_DMA_PollForTransfer+0x270>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d122      	bne.n	8005b68 <HAL_DMA_PollForTransfer+0x274>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e021      	b.n	8005b6a <HAL_DMA_PollForTransfer+0x276>
 8005b26:	bf00      	nop
 8005b28:	40020010 	.word	0x40020010
 8005b2c:	40020028 	.word	0x40020028
 8005b30:	40020040 	.word	0x40020040
 8005b34:	40020058 	.word	0x40020058
 8005b38:	40020070 	.word	0x40020070
 8005b3c:	40020088 	.word	0x40020088
 8005b40:	400200a0 	.word	0x400200a0
 8005b44:	400200b8 	.word	0x400200b8
 8005b48:	40020410 	.word	0x40020410
 8005b4c:	40020428 	.word	0x40020428
 8005b50:	40020440 	.word	0x40020440
 8005b54:	40020458 	.word	0x40020458
 8005b58:	40020470 	.word	0x40020470
 8005b5c:	40020488 	.word	0x40020488
 8005b60:	400204a0 	.word	0x400204a0
 8005b64:	400204b8 	.word	0x400204b8
 8005b68:	2300      	movs	r3, #0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d057      	beq.n	8005c1e <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00d      	beq.n	8005ba2 <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8a:	f043 0202 	orr.w	r2, r3, #2
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b96:	f003 031f 	and.w	r3, r3, #31
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	409a      	lsls	r2, r3
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	2104      	movs	r1, #4
 8005bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00d      	beq.n	8005bd6 <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbe:	f043 0204 	orr.w	r2, r3, #4
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bca:	f003 031f 	and.w	r3, r3, #31
 8005bce:	2204      	movs	r2, #4
 8005bd0:	409a      	lsls	r2, r3
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bde:	f003 031f 	and.w	r3, r3, #31
 8005be2:	2108      	movs	r1, #8
 8005be4:	fa01 f303 	lsl.w	r3, r1, r3
 8005be8:	4013      	ands	r3, r2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d038      	beq.n	8005c60 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf2:	f043 0201 	orr.w	r2, r3, #1
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfe:	f003 031f 	and.w	r3, r3, #31
 8005c02:	2208      	movs	r2, #8
 8005c04:	409a      	lsls	r2, r3
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e1f0      	b.n	8006000 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	2108      	movs	r1, #8
 8005c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c30:	4013      	ands	r3, r2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d014      	beq.n	8005c60 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3a:	f003 031f 	and.w	r3, r3, #31
 8005c3e:	2201      	movs	r2, #1
 8005c40:	409a      	lsls	r2, r3
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e1cf      	b.n	8006000 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c66:	d012      	beq.n	8005c8e <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005c68:	f7fd fc76 	bl	8003558 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d302      	bcc.n	8005c7e <HAL_DMA_PollForTransfer+0x38a>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d107      	bne.n	8005c8e <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2220      	movs	r2, #32
 8005c82:	655a      	str	r2, [r3, #84]	; 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f7ff f8d1 	bl	8004e2c <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e1b8      	b.n	8006000 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a81      	ldr	r2, [pc, #516]	; (8005e98 <HAL_DMA_PollForTransfer+0x5a4>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d072      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a7f      	ldr	r2, [pc, #508]	; (8005e9c <HAL_DMA_PollForTransfer+0x5a8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d06d      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a7e      	ldr	r2, [pc, #504]	; (8005ea0 <HAL_DMA_PollForTransfer+0x5ac>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d068      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a7c      	ldr	r2, [pc, #496]	; (8005ea4 <HAL_DMA_PollForTransfer+0x5b0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d063      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a7b      	ldr	r2, [pc, #492]	; (8005ea8 <HAL_DMA_PollForTransfer+0x5b4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d05e      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a79      	ldr	r2, [pc, #484]	; (8005eac <HAL_DMA_PollForTransfer+0x5b8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d059      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a78      	ldr	r2, [pc, #480]	; (8005eb0 <HAL_DMA_PollForTransfer+0x5bc>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d054      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a76      	ldr	r2, [pc, #472]	; (8005eb4 <HAL_DMA_PollForTransfer+0x5c0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d04f      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a75      	ldr	r2, [pc, #468]	; (8005eb8 <HAL_DMA_PollForTransfer+0x5c4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d04a      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a73      	ldr	r2, [pc, #460]	; (8005ebc <HAL_DMA_PollForTransfer+0x5c8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d045      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a72      	ldr	r2, [pc, #456]	; (8005ec0 <HAL_DMA_PollForTransfer+0x5cc>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d040      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a70      	ldr	r2, [pc, #448]	; (8005ec4 <HAL_DMA_PollForTransfer+0x5d0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d03b      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a6f      	ldr	r2, [pc, #444]	; (8005ec8 <HAL_DMA_PollForTransfer+0x5d4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d036      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a6d      	ldr	r2, [pc, #436]	; (8005ecc <HAL_DMA_PollForTransfer+0x5d8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d031      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a6c      	ldr	r2, [pc, #432]	; (8005ed0 <HAL_DMA_PollForTransfer+0x5dc>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d02c      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a6a      	ldr	r2, [pc, #424]	; (8005ed4 <HAL_DMA_PollForTransfer+0x5e0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d027      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a69      	ldr	r2, [pc, #420]	; (8005ed8 <HAL_DMA_PollForTransfer+0x5e4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d022      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a67      	ldr	r2, [pc, #412]	; (8005edc <HAL_DMA_PollForTransfer+0x5e8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01d      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a66      	ldr	r2, [pc, #408]	; (8005ee0 <HAL_DMA_PollForTransfer+0x5ec>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d018      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a64      	ldr	r2, [pc, #400]	; (8005ee4 <HAL_DMA_PollForTransfer+0x5f0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d013      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a63      	ldr	r2, [pc, #396]	; (8005ee8 <HAL_DMA_PollForTransfer+0x5f4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00e      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a61      	ldr	r2, [pc, #388]	; (8005eec <HAL_DMA_PollForTransfer+0x5f8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d009      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a60      	ldr	r2, [pc, #384]	; (8005ef0 <HAL_DMA_PollForTransfer+0x5fc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d004      	beq.n	8005d7e <HAL_DMA_PollForTransfer+0x48a>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a5e      	ldr	r2, [pc, #376]	; (8005ef4 <HAL_DMA_PollForTransfer+0x600>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d101      	bne.n	8005d82 <HAL_DMA_PollForTransfer+0x48e>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <HAL_DMA_PollForTransfer+0x490>
 8005d82:	2300      	movs	r3, #0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d029      	beq.n	8005ddc <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d012      	beq.n	8005db6 <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00a      	beq.n	8005db6 <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005da8:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005dce:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	655a      	str	r2, [r3, #84]	; 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f43f ae4c 	beq.w	8005a82 <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8005dea:	7afb      	ldrb	r3, [r7, #11]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f040 80a0 	bne.w	8005f32 <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a28      	ldr	r2, [pc, #160]	; (8005e98 <HAL_DMA_PollForTransfer+0x5a4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d04a      	beq.n	8005e92 <HAL_DMA_PollForTransfer+0x59e>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a26      	ldr	r2, [pc, #152]	; (8005e9c <HAL_DMA_PollForTransfer+0x5a8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d045      	beq.n	8005e92 <HAL_DMA_PollForTransfer+0x59e>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a25      	ldr	r2, [pc, #148]	; (8005ea0 <HAL_DMA_PollForTransfer+0x5ac>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d040      	beq.n	8005e92 <HAL_DMA_PollForTransfer+0x59e>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a23      	ldr	r2, [pc, #140]	; (8005ea4 <HAL_DMA_PollForTransfer+0x5b0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d03b      	beq.n	8005e92 <HAL_DMA_PollForTransfer+0x59e>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a22      	ldr	r2, [pc, #136]	; (8005ea8 <HAL_DMA_PollForTransfer+0x5b4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d036      	beq.n	8005e92 <HAL_DMA_PollForTransfer+0x59e>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a20      	ldr	r2, [pc, #128]	; (8005eac <HAL_DMA_PollForTransfer+0x5b8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d031      	beq.n	8005e92 <HAL_DMA_PollForTransfer+0x59e>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a1f      	ldr	r2, [pc, #124]	; (8005eb0 <HAL_DMA_PollForTransfer+0x5bc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d02c      	beq.n	8005e92 <HAL_DMA_PollForTransfer+0x59e>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a1d      	ldr	r2, [pc, #116]	; (8005eb4 <HAL_DMA_PollForTransfer+0x5c0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d027      	beq.n	8005e92 <HAL_DMA_PollForTransfer+0x59e>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a1c      	ldr	r2, [pc, #112]	; (8005eb8 <HAL_DMA_PollForTransfer+0x5c4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d022      	beq.n	8005e92 <HAL_DMA_PollForTransfer+0x59e>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1a      	ldr	r2, [pc, #104]	; (8005ebc <HAL_DMA_PollForTransfer+0x5c8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d01d      	beq.n	8005e92 <HAL_DMA_PollForTransfer+0x59e>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a19      	ldr	r2, [pc, #100]	; (8005ec0 <HAL_DMA_PollForTransfer+0x5cc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d018      	beq.n	8005e92 <HAL_DMA_PollForTransfer+0x59e>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a17      	ldr	r2, [pc, #92]	; (8005ec4 <HAL_DMA_PollForTransfer+0x5d0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d013      	beq.n	8005e92 <HAL_DMA_PollForTransfer+0x59e>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a16      	ldr	r2, [pc, #88]	; (8005ec8 <HAL_DMA_PollForTransfer+0x5d4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00e      	beq.n	8005e92 <HAL_DMA_PollForTransfer+0x59e>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a14      	ldr	r2, [pc, #80]	; (8005ecc <HAL_DMA_PollForTransfer+0x5d8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d009      	beq.n	8005e92 <HAL_DMA_PollForTransfer+0x59e>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a13      	ldr	r2, [pc, #76]	; (8005ed0 <HAL_DMA_PollForTransfer+0x5dc>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d004      	beq.n	8005e92 <HAL_DMA_PollForTransfer+0x59e>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a11      	ldr	r2, [pc, #68]	; (8005ed4 <HAL_DMA_PollForTransfer+0x5e0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d132      	bne.n	8005ef8 <HAL_DMA_PollForTransfer+0x604>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e031      	b.n	8005efa <HAL_DMA_PollForTransfer+0x606>
 8005e96:	bf00      	nop
 8005e98:	40020010 	.word	0x40020010
 8005e9c:	40020028 	.word	0x40020028
 8005ea0:	40020040 	.word	0x40020040
 8005ea4:	40020058 	.word	0x40020058
 8005ea8:	40020070 	.word	0x40020070
 8005eac:	40020088 	.word	0x40020088
 8005eb0:	400200a0 	.word	0x400200a0
 8005eb4:	400200b8 	.word	0x400200b8
 8005eb8:	40020410 	.word	0x40020410
 8005ebc:	40020428 	.word	0x40020428
 8005ec0:	40020440 	.word	0x40020440
 8005ec4:	40020458 	.word	0x40020458
 8005ec8:	40020470 	.word	0x40020470
 8005ecc:	40020488 	.word	0x40020488
 8005ed0:	400204a0 	.word	0x400204a0
 8005ed4:	400204b8 	.word	0x400204b8
 8005ed8:	58025408 	.word	0x58025408
 8005edc:	5802541c 	.word	0x5802541c
 8005ee0:	58025430 	.word	0x58025430
 8005ee4:	58025444 	.word	0x58025444
 8005ee8:	58025458 	.word	0x58025458
 8005eec:	5802546c 	.word	0x5802546c
 8005ef0:	58025480 	.word	0x58025480
 8005ef4:	58025494 	.word	0x58025494
 8005ef8:	2300      	movs	r3, #0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d008      	beq.n	8005f10 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f02:	f003 031f 	and.w	r3, r3, #31
 8005f06:	2230      	movs	r2, #48	; 0x30
 8005f08:	409a      	lsls	r2, r3
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e007      	b.n	8005f20 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	2202      	movs	r2, #2
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005f30:	e065      	b.n	8005ffe <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a34      	ldr	r2, [pc, #208]	; (8006008 <HAL_DMA_PollForTransfer+0x714>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d04a      	beq.n	8005fd2 <HAL_DMA_PollForTransfer+0x6de>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a32      	ldr	r2, [pc, #200]	; (800600c <HAL_DMA_PollForTransfer+0x718>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d045      	beq.n	8005fd2 <HAL_DMA_PollForTransfer+0x6de>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a31      	ldr	r2, [pc, #196]	; (8006010 <HAL_DMA_PollForTransfer+0x71c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d040      	beq.n	8005fd2 <HAL_DMA_PollForTransfer+0x6de>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a2f      	ldr	r2, [pc, #188]	; (8006014 <HAL_DMA_PollForTransfer+0x720>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d03b      	beq.n	8005fd2 <HAL_DMA_PollForTransfer+0x6de>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a2e      	ldr	r2, [pc, #184]	; (8006018 <HAL_DMA_PollForTransfer+0x724>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d036      	beq.n	8005fd2 <HAL_DMA_PollForTransfer+0x6de>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a2c      	ldr	r2, [pc, #176]	; (800601c <HAL_DMA_PollForTransfer+0x728>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d031      	beq.n	8005fd2 <HAL_DMA_PollForTransfer+0x6de>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a2b      	ldr	r2, [pc, #172]	; (8006020 <HAL_DMA_PollForTransfer+0x72c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d02c      	beq.n	8005fd2 <HAL_DMA_PollForTransfer+0x6de>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a29      	ldr	r2, [pc, #164]	; (8006024 <HAL_DMA_PollForTransfer+0x730>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d027      	beq.n	8005fd2 <HAL_DMA_PollForTransfer+0x6de>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a28      	ldr	r2, [pc, #160]	; (8006028 <HAL_DMA_PollForTransfer+0x734>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d022      	beq.n	8005fd2 <HAL_DMA_PollForTransfer+0x6de>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a26      	ldr	r2, [pc, #152]	; (800602c <HAL_DMA_PollForTransfer+0x738>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d01d      	beq.n	8005fd2 <HAL_DMA_PollForTransfer+0x6de>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a25      	ldr	r2, [pc, #148]	; (8006030 <HAL_DMA_PollForTransfer+0x73c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d018      	beq.n	8005fd2 <HAL_DMA_PollForTransfer+0x6de>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a23      	ldr	r2, [pc, #140]	; (8006034 <HAL_DMA_PollForTransfer+0x740>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <HAL_DMA_PollForTransfer+0x6de>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a22      	ldr	r2, [pc, #136]	; (8006038 <HAL_DMA_PollForTransfer+0x744>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00e      	beq.n	8005fd2 <HAL_DMA_PollForTransfer+0x6de>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a20      	ldr	r2, [pc, #128]	; (800603c <HAL_DMA_PollForTransfer+0x748>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d009      	beq.n	8005fd2 <HAL_DMA_PollForTransfer+0x6de>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <HAL_DMA_PollForTransfer+0x74c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_DMA_PollForTransfer+0x6de>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a1d      	ldr	r2, [pc, #116]	; (8006044 <HAL_DMA_PollForTransfer+0x750>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d101      	bne.n	8005fd6 <HAL_DMA_PollForTransfer+0x6e2>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <HAL_DMA_PollForTransfer+0x6e4>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d008      	beq.n	8005fee <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe0:	f003 031f 	and.w	r3, r3, #31
 8005fe4:	2210      	movs	r2, #16
 8005fe6:	409a      	lsls	r2, r3
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	e007      	b.n	8005ffe <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff2:	f003 031f 	and.w	r3, r3, #31
 8005ff6:	2204      	movs	r2, #4
 8005ff8:	409a      	lsls	r2, r3
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8005ffe:	7efb      	ldrb	r3, [r7, #27]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3728      	adds	r7, #40	; 0x28
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	40020010 	.word	0x40020010
 800600c:	40020028 	.word	0x40020028
 8006010:	40020040 	.word	0x40020040
 8006014:	40020058 	.word	0x40020058
 8006018:	40020070 	.word	0x40020070
 800601c:	40020088 	.word	0x40020088
 8006020:	400200a0 	.word	0x400200a0
 8006024:	400200b8 	.word	0x400200b8
 8006028:	40020410 	.word	0x40020410
 800602c:	40020428 	.word	0x40020428
 8006030:	40020440 	.word	0x40020440
 8006034:	40020458 	.word	0x40020458
 8006038:	40020470 	.word	0x40020470
 800603c:	40020488 	.word	0x40020488
 8006040:	400204a0 	.word	0x400204a0
 8006044:	400204b8 	.word	0x400204b8

08006048 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08a      	sub	sp, #40	; 0x28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006054:	4b67      	ldr	r3, [pc, #412]	; (80061f4 <HAL_DMA_IRQHandler+0x1ac>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a67      	ldr	r2, [pc, #412]	; (80061f8 <HAL_DMA_IRQHandler+0x1b0>)
 800605a:	fba2 2303 	umull	r2, r3, r2, r3
 800605e:	0a9b      	lsrs	r3, r3, #10
 8006060:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006066:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a5f      	ldr	r2, [pc, #380]	; (80061fc <HAL_DMA_IRQHandler+0x1b4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d04a      	beq.n	800611a <HAL_DMA_IRQHandler+0xd2>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a5d      	ldr	r2, [pc, #372]	; (8006200 <HAL_DMA_IRQHandler+0x1b8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d045      	beq.n	800611a <HAL_DMA_IRQHandler+0xd2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a5c      	ldr	r2, [pc, #368]	; (8006204 <HAL_DMA_IRQHandler+0x1bc>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d040      	beq.n	800611a <HAL_DMA_IRQHandler+0xd2>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a5a      	ldr	r2, [pc, #360]	; (8006208 <HAL_DMA_IRQHandler+0x1c0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d03b      	beq.n	800611a <HAL_DMA_IRQHandler+0xd2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a59      	ldr	r2, [pc, #356]	; (800620c <HAL_DMA_IRQHandler+0x1c4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d036      	beq.n	800611a <HAL_DMA_IRQHandler+0xd2>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a57      	ldr	r2, [pc, #348]	; (8006210 <HAL_DMA_IRQHandler+0x1c8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d031      	beq.n	800611a <HAL_DMA_IRQHandler+0xd2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a56      	ldr	r2, [pc, #344]	; (8006214 <HAL_DMA_IRQHandler+0x1cc>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d02c      	beq.n	800611a <HAL_DMA_IRQHandler+0xd2>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a54      	ldr	r2, [pc, #336]	; (8006218 <HAL_DMA_IRQHandler+0x1d0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d027      	beq.n	800611a <HAL_DMA_IRQHandler+0xd2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a53      	ldr	r2, [pc, #332]	; (800621c <HAL_DMA_IRQHandler+0x1d4>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d022      	beq.n	800611a <HAL_DMA_IRQHandler+0xd2>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a51      	ldr	r2, [pc, #324]	; (8006220 <HAL_DMA_IRQHandler+0x1d8>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d01d      	beq.n	800611a <HAL_DMA_IRQHandler+0xd2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a50      	ldr	r2, [pc, #320]	; (8006224 <HAL_DMA_IRQHandler+0x1dc>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d018      	beq.n	800611a <HAL_DMA_IRQHandler+0xd2>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a4e      	ldr	r2, [pc, #312]	; (8006228 <HAL_DMA_IRQHandler+0x1e0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <HAL_DMA_IRQHandler+0xd2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a4d      	ldr	r2, [pc, #308]	; (800622c <HAL_DMA_IRQHandler+0x1e4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d00e      	beq.n	800611a <HAL_DMA_IRQHandler+0xd2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a4b      	ldr	r2, [pc, #300]	; (8006230 <HAL_DMA_IRQHandler+0x1e8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d009      	beq.n	800611a <HAL_DMA_IRQHandler+0xd2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a4a      	ldr	r2, [pc, #296]	; (8006234 <HAL_DMA_IRQHandler+0x1ec>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d004      	beq.n	800611a <HAL_DMA_IRQHandler+0xd2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a48      	ldr	r2, [pc, #288]	; (8006238 <HAL_DMA_IRQHandler+0x1f0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d101      	bne.n	800611e <HAL_DMA_IRQHandler+0xd6>
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <HAL_DMA_IRQHandler+0xd8>
 800611e:	2300      	movs	r3, #0
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 842b 	beq.w	800697c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	2208      	movs	r2, #8
 8006130:	409a      	lsls	r2, r3
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	4013      	ands	r3, r2
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 80a2 	beq.w	8006280 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a2e      	ldr	r2, [pc, #184]	; (80061fc <HAL_DMA_IRQHandler+0x1b4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d04a      	beq.n	80061dc <HAL_DMA_IRQHandler+0x194>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a2d      	ldr	r2, [pc, #180]	; (8006200 <HAL_DMA_IRQHandler+0x1b8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d045      	beq.n	80061dc <HAL_DMA_IRQHandler+0x194>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a2b      	ldr	r2, [pc, #172]	; (8006204 <HAL_DMA_IRQHandler+0x1bc>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d040      	beq.n	80061dc <HAL_DMA_IRQHandler+0x194>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a2a      	ldr	r2, [pc, #168]	; (8006208 <HAL_DMA_IRQHandler+0x1c0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d03b      	beq.n	80061dc <HAL_DMA_IRQHandler+0x194>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a28      	ldr	r2, [pc, #160]	; (800620c <HAL_DMA_IRQHandler+0x1c4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d036      	beq.n	80061dc <HAL_DMA_IRQHandler+0x194>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a27      	ldr	r2, [pc, #156]	; (8006210 <HAL_DMA_IRQHandler+0x1c8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d031      	beq.n	80061dc <HAL_DMA_IRQHandler+0x194>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a25      	ldr	r2, [pc, #148]	; (8006214 <HAL_DMA_IRQHandler+0x1cc>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d02c      	beq.n	80061dc <HAL_DMA_IRQHandler+0x194>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a24      	ldr	r2, [pc, #144]	; (8006218 <HAL_DMA_IRQHandler+0x1d0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d027      	beq.n	80061dc <HAL_DMA_IRQHandler+0x194>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a22      	ldr	r2, [pc, #136]	; (800621c <HAL_DMA_IRQHandler+0x1d4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d022      	beq.n	80061dc <HAL_DMA_IRQHandler+0x194>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a21      	ldr	r2, [pc, #132]	; (8006220 <HAL_DMA_IRQHandler+0x1d8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d01d      	beq.n	80061dc <HAL_DMA_IRQHandler+0x194>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a1f      	ldr	r2, [pc, #124]	; (8006224 <HAL_DMA_IRQHandler+0x1dc>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d018      	beq.n	80061dc <HAL_DMA_IRQHandler+0x194>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a1e      	ldr	r2, [pc, #120]	; (8006228 <HAL_DMA_IRQHandler+0x1e0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d013      	beq.n	80061dc <HAL_DMA_IRQHandler+0x194>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a1c      	ldr	r2, [pc, #112]	; (800622c <HAL_DMA_IRQHandler+0x1e4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d00e      	beq.n	80061dc <HAL_DMA_IRQHandler+0x194>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a1b      	ldr	r2, [pc, #108]	; (8006230 <HAL_DMA_IRQHandler+0x1e8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d009      	beq.n	80061dc <HAL_DMA_IRQHandler+0x194>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a19      	ldr	r2, [pc, #100]	; (8006234 <HAL_DMA_IRQHandler+0x1ec>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d004      	beq.n	80061dc <HAL_DMA_IRQHandler+0x194>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a18      	ldr	r2, [pc, #96]	; (8006238 <HAL_DMA_IRQHandler+0x1f0>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d12f      	bne.n	800623c <HAL_DMA_IRQHandler+0x1f4>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0304 	and.w	r3, r3, #4
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	bf14      	ite	ne
 80061ea:	2301      	movne	r3, #1
 80061ec:	2300      	moveq	r3, #0
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	e02e      	b.n	8006250 <HAL_DMA_IRQHandler+0x208>
 80061f2:	bf00      	nop
 80061f4:	24000000 	.word	0x24000000
 80061f8:	1b4e81b5 	.word	0x1b4e81b5
 80061fc:	40020010 	.word	0x40020010
 8006200:	40020028 	.word	0x40020028
 8006204:	40020040 	.word	0x40020040
 8006208:	40020058 	.word	0x40020058
 800620c:	40020070 	.word	0x40020070
 8006210:	40020088 	.word	0x40020088
 8006214:	400200a0 	.word	0x400200a0
 8006218:	400200b8 	.word	0x400200b8
 800621c:	40020410 	.word	0x40020410
 8006220:	40020428 	.word	0x40020428
 8006224:	40020440 	.word	0x40020440
 8006228:	40020458 	.word	0x40020458
 800622c:	40020470 	.word	0x40020470
 8006230:	40020488 	.word	0x40020488
 8006234:	400204a0 	.word	0x400204a0
 8006238:	400204b8 	.word	0x400204b8
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b00      	cmp	r3, #0
 8006248:	bf14      	ite	ne
 800624a:	2301      	movne	r3, #1
 800624c:	2300      	moveq	r3, #0
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d015      	beq.n	8006280 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0204 	bic.w	r2, r2, #4
 8006262:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006268:	f003 031f 	and.w	r3, r3, #31
 800626c:	2208      	movs	r2, #8
 800626e:	409a      	lsls	r2, r3
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006278:	f043 0201 	orr.w	r2, r3, #1
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	fa22 f303 	lsr.w	r3, r2, r3
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d06e      	beq.n	8006374 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a69      	ldr	r2, [pc, #420]	; (8006440 <HAL_DMA_IRQHandler+0x3f8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d04a      	beq.n	8006336 <HAL_DMA_IRQHandler+0x2ee>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a67      	ldr	r2, [pc, #412]	; (8006444 <HAL_DMA_IRQHandler+0x3fc>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d045      	beq.n	8006336 <HAL_DMA_IRQHandler+0x2ee>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a66      	ldr	r2, [pc, #408]	; (8006448 <HAL_DMA_IRQHandler+0x400>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d040      	beq.n	8006336 <HAL_DMA_IRQHandler+0x2ee>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a64      	ldr	r2, [pc, #400]	; (800644c <HAL_DMA_IRQHandler+0x404>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d03b      	beq.n	8006336 <HAL_DMA_IRQHandler+0x2ee>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a63      	ldr	r2, [pc, #396]	; (8006450 <HAL_DMA_IRQHandler+0x408>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d036      	beq.n	8006336 <HAL_DMA_IRQHandler+0x2ee>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a61      	ldr	r2, [pc, #388]	; (8006454 <HAL_DMA_IRQHandler+0x40c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d031      	beq.n	8006336 <HAL_DMA_IRQHandler+0x2ee>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a60      	ldr	r2, [pc, #384]	; (8006458 <HAL_DMA_IRQHandler+0x410>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d02c      	beq.n	8006336 <HAL_DMA_IRQHandler+0x2ee>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a5e      	ldr	r2, [pc, #376]	; (800645c <HAL_DMA_IRQHandler+0x414>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d027      	beq.n	8006336 <HAL_DMA_IRQHandler+0x2ee>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a5d      	ldr	r2, [pc, #372]	; (8006460 <HAL_DMA_IRQHandler+0x418>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d022      	beq.n	8006336 <HAL_DMA_IRQHandler+0x2ee>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a5b      	ldr	r2, [pc, #364]	; (8006464 <HAL_DMA_IRQHandler+0x41c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01d      	beq.n	8006336 <HAL_DMA_IRQHandler+0x2ee>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a5a      	ldr	r2, [pc, #360]	; (8006468 <HAL_DMA_IRQHandler+0x420>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d018      	beq.n	8006336 <HAL_DMA_IRQHandler+0x2ee>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a58      	ldr	r2, [pc, #352]	; (800646c <HAL_DMA_IRQHandler+0x424>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <HAL_DMA_IRQHandler+0x2ee>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a57      	ldr	r2, [pc, #348]	; (8006470 <HAL_DMA_IRQHandler+0x428>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00e      	beq.n	8006336 <HAL_DMA_IRQHandler+0x2ee>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a55      	ldr	r2, [pc, #340]	; (8006474 <HAL_DMA_IRQHandler+0x42c>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d009      	beq.n	8006336 <HAL_DMA_IRQHandler+0x2ee>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a54      	ldr	r2, [pc, #336]	; (8006478 <HAL_DMA_IRQHandler+0x430>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d004      	beq.n	8006336 <HAL_DMA_IRQHandler+0x2ee>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a52      	ldr	r2, [pc, #328]	; (800647c <HAL_DMA_IRQHandler+0x434>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d10a      	bne.n	800634c <HAL_DMA_IRQHandler+0x304>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006340:	2b00      	cmp	r3, #0
 8006342:	bf14      	ite	ne
 8006344:	2301      	movne	r3, #1
 8006346:	2300      	moveq	r3, #0
 8006348:	b2db      	uxtb	r3, r3
 800634a:	e003      	b.n	8006354 <HAL_DMA_IRQHandler+0x30c>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2300      	movs	r3, #0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00d      	beq.n	8006374 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800635c:	f003 031f 	and.w	r3, r3, #31
 8006360:	2201      	movs	r2, #1
 8006362:	409a      	lsls	r2, r3
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636c:	f043 0202 	orr.w	r2, r3, #2
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	2204      	movs	r2, #4
 800637e:	409a      	lsls	r2, r3
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	4013      	ands	r3, r2
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 808f 	beq.w	80064a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a2c      	ldr	r2, [pc, #176]	; (8006440 <HAL_DMA_IRQHandler+0x3f8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d04a      	beq.n	800642a <HAL_DMA_IRQHandler+0x3e2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a2a      	ldr	r2, [pc, #168]	; (8006444 <HAL_DMA_IRQHandler+0x3fc>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d045      	beq.n	800642a <HAL_DMA_IRQHandler+0x3e2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a29      	ldr	r2, [pc, #164]	; (8006448 <HAL_DMA_IRQHandler+0x400>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d040      	beq.n	800642a <HAL_DMA_IRQHandler+0x3e2>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a27      	ldr	r2, [pc, #156]	; (800644c <HAL_DMA_IRQHandler+0x404>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d03b      	beq.n	800642a <HAL_DMA_IRQHandler+0x3e2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a26      	ldr	r2, [pc, #152]	; (8006450 <HAL_DMA_IRQHandler+0x408>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d036      	beq.n	800642a <HAL_DMA_IRQHandler+0x3e2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a24      	ldr	r2, [pc, #144]	; (8006454 <HAL_DMA_IRQHandler+0x40c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d031      	beq.n	800642a <HAL_DMA_IRQHandler+0x3e2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a23      	ldr	r2, [pc, #140]	; (8006458 <HAL_DMA_IRQHandler+0x410>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d02c      	beq.n	800642a <HAL_DMA_IRQHandler+0x3e2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a21      	ldr	r2, [pc, #132]	; (800645c <HAL_DMA_IRQHandler+0x414>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d027      	beq.n	800642a <HAL_DMA_IRQHandler+0x3e2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a20      	ldr	r2, [pc, #128]	; (8006460 <HAL_DMA_IRQHandler+0x418>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d022      	beq.n	800642a <HAL_DMA_IRQHandler+0x3e2>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a1e      	ldr	r2, [pc, #120]	; (8006464 <HAL_DMA_IRQHandler+0x41c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d01d      	beq.n	800642a <HAL_DMA_IRQHandler+0x3e2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a1d      	ldr	r2, [pc, #116]	; (8006468 <HAL_DMA_IRQHandler+0x420>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d018      	beq.n	800642a <HAL_DMA_IRQHandler+0x3e2>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a1b      	ldr	r2, [pc, #108]	; (800646c <HAL_DMA_IRQHandler+0x424>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d013      	beq.n	800642a <HAL_DMA_IRQHandler+0x3e2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1a      	ldr	r2, [pc, #104]	; (8006470 <HAL_DMA_IRQHandler+0x428>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00e      	beq.n	800642a <HAL_DMA_IRQHandler+0x3e2>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a18      	ldr	r2, [pc, #96]	; (8006474 <HAL_DMA_IRQHandler+0x42c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d009      	beq.n	800642a <HAL_DMA_IRQHandler+0x3e2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a17      	ldr	r2, [pc, #92]	; (8006478 <HAL_DMA_IRQHandler+0x430>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <HAL_DMA_IRQHandler+0x3e2>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a15      	ldr	r2, [pc, #84]	; (800647c <HAL_DMA_IRQHandler+0x434>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d12a      	bne.n	8006480 <HAL_DMA_IRQHandler+0x438>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	bf14      	ite	ne
 8006438:	2301      	movne	r3, #1
 800643a:	2300      	moveq	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	e023      	b.n	8006488 <HAL_DMA_IRQHandler+0x440>
 8006440:	40020010 	.word	0x40020010
 8006444:	40020028 	.word	0x40020028
 8006448:	40020040 	.word	0x40020040
 800644c:	40020058 	.word	0x40020058
 8006450:	40020070 	.word	0x40020070
 8006454:	40020088 	.word	0x40020088
 8006458:	400200a0 	.word	0x400200a0
 800645c:	400200b8 	.word	0x400200b8
 8006460:	40020410 	.word	0x40020410
 8006464:	40020428 	.word	0x40020428
 8006468:	40020440 	.word	0x40020440
 800646c:	40020458 	.word	0x40020458
 8006470:	40020470 	.word	0x40020470
 8006474:	40020488 	.word	0x40020488
 8006478:	400204a0 	.word	0x400204a0
 800647c:	400204b8 	.word	0x400204b8
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2300      	movs	r3, #0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00d      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006490:	f003 031f 	and.w	r3, r3, #31
 8006494:	2204      	movs	r2, #4
 8006496:	409a      	lsls	r2, r3
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a0:	f043 0204 	orr.w	r2, r3, #4
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ac:	f003 031f 	and.w	r3, r3, #31
 80064b0:	2210      	movs	r2, #16
 80064b2:	409a      	lsls	r2, r3
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	4013      	ands	r3, r2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 80a6 	beq.w	800660a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a85      	ldr	r2, [pc, #532]	; (80066d8 <HAL_DMA_IRQHandler+0x690>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d04a      	beq.n	800655e <HAL_DMA_IRQHandler+0x516>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a83      	ldr	r2, [pc, #524]	; (80066dc <HAL_DMA_IRQHandler+0x694>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d045      	beq.n	800655e <HAL_DMA_IRQHandler+0x516>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a82      	ldr	r2, [pc, #520]	; (80066e0 <HAL_DMA_IRQHandler+0x698>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d040      	beq.n	800655e <HAL_DMA_IRQHandler+0x516>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a80      	ldr	r2, [pc, #512]	; (80066e4 <HAL_DMA_IRQHandler+0x69c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d03b      	beq.n	800655e <HAL_DMA_IRQHandler+0x516>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a7f      	ldr	r2, [pc, #508]	; (80066e8 <HAL_DMA_IRQHandler+0x6a0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d036      	beq.n	800655e <HAL_DMA_IRQHandler+0x516>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a7d      	ldr	r2, [pc, #500]	; (80066ec <HAL_DMA_IRQHandler+0x6a4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d031      	beq.n	800655e <HAL_DMA_IRQHandler+0x516>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a7c      	ldr	r2, [pc, #496]	; (80066f0 <HAL_DMA_IRQHandler+0x6a8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d02c      	beq.n	800655e <HAL_DMA_IRQHandler+0x516>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a7a      	ldr	r2, [pc, #488]	; (80066f4 <HAL_DMA_IRQHandler+0x6ac>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d027      	beq.n	800655e <HAL_DMA_IRQHandler+0x516>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a79      	ldr	r2, [pc, #484]	; (80066f8 <HAL_DMA_IRQHandler+0x6b0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d022      	beq.n	800655e <HAL_DMA_IRQHandler+0x516>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a77      	ldr	r2, [pc, #476]	; (80066fc <HAL_DMA_IRQHandler+0x6b4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d01d      	beq.n	800655e <HAL_DMA_IRQHandler+0x516>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a76      	ldr	r2, [pc, #472]	; (8006700 <HAL_DMA_IRQHandler+0x6b8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d018      	beq.n	800655e <HAL_DMA_IRQHandler+0x516>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a74      	ldr	r2, [pc, #464]	; (8006704 <HAL_DMA_IRQHandler+0x6bc>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d013      	beq.n	800655e <HAL_DMA_IRQHandler+0x516>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a73      	ldr	r2, [pc, #460]	; (8006708 <HAL_DMA_IRQHandler+0x6c0>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00e      	beq.n	800655e <HAL_DMA_IRQHandler+0x516>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a71      	ldr	r2, [pc, #452]	; (800670c <HAL_DMA_IRQHandler+0x6c4>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d009      	beq.n	800655e <HAL_DMA_IRQHandler+0x516>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a70      	ldr	r2, [pc, #448]	; (8006710 <HAL_DMA_IRQHandler+0x6c8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d004      	beq.n	800655e <HAL_DMA_IRQHandler+0x516>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a6e      	ldr	r2, [pc, #440]	; (8006714 <HAL_DMA_IRQHandler+0x6cc>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d10a      	bne.n	8006574 <HAL_DMA_IRQHandler+0x52c>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b00      	cmp	r3, #0
 800656a:	bf14      	ite	ne
 800656c:	2301      	movne	r3, #1
 800656e:	2300      	moveq	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	e009      	b.n	8006588 <HAL_DMA_IRQHandler+0x540>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0304 	and.w	r3, r3, #4
 800657e:	2b00      	cmp	r3, #0
 8006580:	bf14      	ite	ne
 8006582:	2301      	movne	r3, #1
 8006584:	2300      	moveq	r3, #0
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d03e      	beq.n	800660a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006590:	f003 031f 	and.w	r3, r3, #31
 8006594:	2210      	movs	r2, #16
 8006596:	409a      	lsls	r2, r3
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d018      	beq.n	80065dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d108      	bne.n	80065ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d024      	beq.n	800660a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	4798      	blx	r3
 80065c8:	e01f      	b.n	800660a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d01b      	beq.n	800660a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	4798      	blx	r3
 80065da:	e016      	b.n	800660a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d107      	bne.n	80065fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0208 	bic.w	r2, r2, #8
 80065f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800660e:	f003 031f 	and.w	r3, r3, #31
 8006612:	2220      	movs	r2, #32
 8006614:	409a      	lsls	r2, r3
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	4013      	ands	r3, r2
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 8110 	beq.w	8006840 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a2c      	ldr	r2, [pc, #176]	; (80066d8 <HAL_DMA_IRQHandler+0x690>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d04a      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x678>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a2b      	ldr	r2, [pc, #172]	; (80066dc <HAL_DMA_IRQHandler+0x694>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d045      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x678>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a29      	ldr	r2, [pc, #164]	; (80066e0 <HAL_DMA_IRQHandler+0x698>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d040      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x678>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a28      	ldr	r2, [pc, #160]	; (80066e4 <HAL_DMA_IRQHandler+0x69c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d03b      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x678>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a26      	ldr	r2, [pc, #152]	; (80066e8 <HAL_DMA_IRQHandler+0x6a0>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d036      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x678>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a25      	ldr	r2, [pc, #148]	; (80066ec <HAL_DMA_IRQHandler+0x6a4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d031      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x678>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a23      	ldr	r2, [pc, #140]	; (80066f0 <HAL_DMA_IRQHandler+0x6a8>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d02c      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x678>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a22      	ldr	r2, [pc, #136]	; (80066f4 <HAL_DMA_IRQHandler+0x6ac>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d027      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x678>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a20      	ldr	r2, [pc, #128]	; (80066f8 <HAL_DMA_IRQHandler+0x6b0>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d022      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x678>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1f      	ldr	r2, [pc, #124]	; (80066fc <HAL_DMA_IRQHandler+0x6b4>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d01d      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x678>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a1d      	ldr	r2, [pc, #116]	; (8006700 <HAL_DMA_IRQHandler+0x6b8>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d018      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x678>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a1c      	ldr	r2, [pc, #112]	; (8006704 <HAL_DMA_IRQHandler+0x6bc>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d013      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x678>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a1a      	ldr	r2, [pc, #104]	; (8006708 <HAL_DMA_IRQHandler+0x6c0>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00e      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x678>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a19      	ldr	r2, [pc, #100]	; (800670c <HAL_DMA_IRQHandler+0x6c4>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d009      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x678>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a17      	ldr	r2, [pc, #92]	; (8006710 <HAL_DMA_IRQHandler+0x6c8>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d004      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x678>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a16      	ldr	r2, [pc, #88]	; (8006714 <HAL_DMA_IRQHandler+0x6cc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d12b      	bne.n	8006718 <HAL_DMA_IRQHandler+0x6d0>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0310 	and.w	r3, r3, #16
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bf14      	ite	ne
 80066ce:	2301      	movne	r3, #1
 80066d0:	2300      	moveq	r3, #0
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	e02a      	b.n	800672c <HAL_DMA_IRQHandler+0x6e4>
 80066d6:	bf00      	nop
 80066d8:	40020010 	.word	0x40020010
 80066dc:	40020028 	.word	0x40020028
 80066e0:	40020040 	.word	0x40020040
 80066e4:	40020058 	.word	0x40020058
 80066e8:	40020070 	.word	0x40020070
 80066ec:	40020088 	.word	0x40020088
 80066f0:	400200a0 	.word	0x400200a0
 80066f4:	400200b8 	.word	0x400200b8
 80066f8:	40020410 	.word	0x40020410
 80066fc:	40020428 	.word	0x40020428
 8006700:	40020440 	.word	0x40020440
 8006704:	40020458 	.word	0x40020458
 8006708:	40020470 	.word	0x40020470
 800670c:	40020488 	.word	0x40020488
 8006710:	400204a0 	.word	0x400204a0
 8006714:	400204b8 	.word	0x400204b8
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	bf14      	ite	ne
 8006726:	2301      	movne	r3, #1
 8006728:	2300      	moveq	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 8087 	beq.w	8006840 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006736:	f003 031f 	and.w	r3, r3, #31
 800673a:	2220      	movs	r2, #32
 800673c:	409a      	lsls	r2, r3
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b04      	cmp	r3, #4
 800674c:	d139      	bne.n	80067c2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0216 	bic.w	r2, r2, #22
 800675c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	695a      	ldr	r2, [r3, #20]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800676c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d103      	bne.n	800677e <HAL_DMA_IRQHandler+0x736>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677a:	2b00      	cmp	r3, #0
 800677c:	d007      	beq.n	800678e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0208 	bic.w	r2, r2, #8
 800678c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006792:	f003 031f 	and.w	r3, r3, #31
 8006796:	223f      	movs	r2, #63	; 0x3f
 8006798:	409a      	lsls	r2, r3
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 834a 	beq.w	8006e4c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	4798      	blx	r3
          }
          return;
 80067c0:	e344      	b.n	8006e4c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d018      	beq.n	8006802 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d108      	bne.n	80067f0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d02c      	beq.n	8006840 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	4798      	blx	r3
 80067ee:	e027      	b.n	8006840 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d023      	beq.n	8006840 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	4798      	blx	r3
 8006800:	e01e      	b.n	8006840 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10f      	bne.n	8006830 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0210 	bic.w	r2, r2, #16
 800681e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d003      	beq.n	8006840 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 8306 	beq.w	8006e56 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 8088 	beq.w	8006968 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2204      	movs	r2, #4
 800685c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a7a      	ldr	r2, [pc, #488]	; (8006a50 <HAL_DMA_IRQHandler+0xa08>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d04a      	beq.n	8006900 <HAL_DMA_IRQHandler+0x8b8>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a79      	ldr	r2, [pc, #484]	; (8006a54 <HAL_DMA_IRQHandler+0xa0c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d045      	beq.n	8006900 <HAL_DMA_IRQHandler+0x8b8>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a77      	ldr	r2, [pc, #476]	; (8006a58 <HAL_DMA_IRQHandler+0xa10>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d040      	beq.n	8006900 <HAL_DMA_IRQHandler+0x8b8>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a76      	ldr	r2, [pc, #472]	; (8006a5c <HAL_DMA_IRQHandler+0xa14>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d03b      	beq.n	8006900 <HAL_DMA_IRQHandler+0x8b8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a74      	ldr	r2, [pc, #464]	; (8006a60 <HAL_DMA_IRQHandler+0xa18>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d036      	beq.n	8006900 <HAL_DMA_IRQHandler+0x8b8>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a73      	ldr	r2, [pc, #460]	; (8006a64 <HAL_DMA_IRQHandler+0xa1c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d031      	beq.n	8006900 <HAL_DMA_IRQHandler+0x8b8>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a71      	ldr	r2, [pc, #452]	; (8006a68 <HAL_DMA_IRQHandler+0xa20>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d02c      	beq.n	8006900 <HAL_DMA_IRQHandler+0x8b8>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a70      	ldr	r2, [pc, #448]	; (8006a6c <HAL_DMA_IRQHandler+0xa24>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d027      	beq.n	8006900 <HAL_DMA_IRQHandler+0x8b8>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a6e      	ldr	r2, [pc, #440]	; (8006a70 <HAL_DMA_IRQHandler+0xa28>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d022      	beq.n	8006900 <HAL_DMA_IRQHandler+0x8b8>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a6d      	ldr	r2, [pc, #436]	; (8006a74 <HAL_DMA_IRQHandler+0xa2c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d01d      	beq.n	8006900 <HAL_DMA_IRQHandler+0x8b8>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a6b      	ldr	r2, [pc, #428]	; (8006a78 <HAL_DMA_IRQHandler+0xa30>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d018      	beq.n	8006900 <HAL_DMA_IRQHandler+0x8b8>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a6a      	ldr	r2, [pc, #424]	; (8006a7c <HAL_DMA_IRQHandler+0xa34>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d013      	beq.n	8006900 <HAL_DMA_IRQHandler+0x8b8>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a68      	ldr	r2, [pc, #416]	; (8006a80 <HAL_DMA_IRQHandler+0xa38>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00e      	beq.n	8006900 <HAL_DMA_IRQHandler+0x8b8>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a67      	ldr	r2, [pc, #412]	; (8006a84 <HAL_DMA_IRQHandler+0xa3c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d009      	beq.n	8006900 <HAL_DMA_IRQHandler+0x8b8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a65      	ldr	r2, [pc, #404]	; (8006a88 <HAL_DMA_IRQHandler+0xa40>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <HAL_DMA_IRQHandler+0x8b8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a64      	ldr	r2, [pc, #400]	; (8006a8c <HAL_DMA_IRQHandler+0xa44>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d108      	bne.n	8006912 <HAL_DMA_IRQHandler+0x8ca>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0201 	bic.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	e007      	b.n	8006922 <HAL_DMA_IRQHandler+0x8da>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0201 	bic.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3301      	adds	r3, #1
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800692a:	429a      	cmp	r2, r3
 800692c:	d307      	bcc.n	800693e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1f2      	bne.n	8006922 <HAL_DMA_IRQHandler+0x8da>
 800693c:	e000      	b.n	8006940 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800693e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d004      	beq.n	8006958 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2203      	movs	r2, #3
 8006952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006956:	e003      	b.n	8006960 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8272 	beq.w	8006e56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	4798      	blx	r3
 800697a:	e26c      	b.n	8006e56 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a43      	ldr	r2, [pc, #268]	; (8006a90 <HAL_DMA_IRQHandler+0xa48>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d022      	beq.n	80069cc <HAL_DMA_IRQHandler+0x984>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a42      	ldr	r2, [pc, #264]	; (8006a94 <HAL_DMA_IRQHandler+0xa4c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d01d      	beq.n	80069cc <HAL_DMA_IRQHandler+0x984>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a40      	ldr	r2, [pc, #256]	; (8006a98 <HAL_DMA_IRQHandler+0xa50>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d018      	beq.n	80069cc <HAL_DMA_IRQHandler+0x984>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a3f      	ldr	r2, [pc, #252]	; (8006a9c <HAL_DMA_IRQHandler+0xa54>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d013      	beq.n	80069cc <HAL_DMA_IRQHandler+0x984>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a3d      	ldr	r2, [pc, #244]	; (8006aa0 <HAL_DMA_IRQHandler+0xa58>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00e      	beq.n	80069cc <HAL_DMA_IRQHandler+0x984>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a3c      	ldr	r2, [pc, #240]	; (8006aa4 <HAL_DMA_IRQHandler+0xa5c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d009      	beq.n	80069cc <HAL_DMA_IRQHandler+0x984>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a3a      	ldr	r2, [pc, #232]	; (8006aa8 <HAL_DMA_IRQHandler+0xa60>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d004      	beq.n	80069cc <HAL_DMA_IRQHandler+0x984>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a39      	ldr	r2, [pc, #228]	; (8006aac <HAL_DMA_IRQHandler+0xa64>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d101      	bne.n	80069d0 <HAL_DMA_IRQHandler+0x988>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <HAL_DMA_IRQHandler+0x98a>
 80069d0:	2300      	movs	r3, #0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 823f 	beq.w	8006e56 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e4:	f003 031f 	and.w	r3, r3, #31
 80069e8:	2204      	movs	r2, #4
 80069ea:	409a      	lsls	r2, r3
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	4013      	ands	r3, r2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 80cd 	beq.w	8006b90 <HAL_DMA_IRQHandler+0xb48>
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 80c7 	beq.w	8006b90 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	2204      	movs	r2, #4
 8006a0c:	409a      	lsls	r2, r3
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d049      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 8210 	beq.w	8006e50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a38:	e20a      	b.n	8006e50 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 8206 	beq.w	8006e50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a4c:	e200      	b.n	8006e50 <HAL_DMA_IRQHandler+0xe08>
 8006a4e:	bf00      	nop
 8006a50:	40020010 	.word	0x40020010
 8006a54:	40020028 	.word	0x40020028
 8006a58:	40020040 	.word	0x40020040
 8006a5c:	40020058 	.word	0x40020058
 8006a60:	40020070 	.word	0x40020070
 8006a64:	40020088 	.word	0x40020088
 8006a68:	400200a0 	.word	0x400200a0
 8006a6c:	400200b8 	.word	0x400200b8
 8006a70:	40020410 	.word	0x40020410
 8006a74:	40020428 	.word	0x40020428
 8006a78:	40020440 	.word	0x40020440
 8006a7c:	40020458 	.word	0x40020458
 8006a80:	40020470 	.word	0x40020470
 8006a84:	40020488 	.word	0x40020488
 8006a88:	400204a0 	.word	0x400204a0
 8006a8c:	400204b8 	.word	0x400204b8
 8006a90:	58025408 	.word	0x58025408
 8006a94:	5802541c 	.word	0x5802541c
 8006a98:	58025430 	.word	0x58025430
 8006a9c:	58025444 	.word	0x58025444
 8006aa0:	58025458 	.word	0x58025458
 8006aa4:	5802546c 	.word	0x5802546c
 8006aa8:	58025480 	.word	0x58025480
 8006aac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d160      	bne.n	8006b7c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a7f      	ldr	r2, [pc, #508]	; (8006cbc <HAL_DMA_IRQHandler+0xc74>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d04a      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xb12>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a7d      	ldr	r2, [pc, #500]	; (8006cc0 <HAL_DMA_IRQHandler+0xc78>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d045      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xb12>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a7c      	ldr	r2, [pc, #496]	; (8006cc4 <HAL_DMA_IRQHandler+0xc7c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d040      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xb12>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a7a      	ldr	r2, [pc, #488]	; (8006cc8 <HAL_DMA_IRQHandler+0xc80>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d03b      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xb12>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a79      	ldr	r2, [pc, #484]	; (8006ccc <HAL_DMA_IRQHandler+0xc84>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d036      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xb12>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a77      	ldr	r2, [pc, #476]	; (8006cd0 <HAL_DMA_IRQHandler+0xc88>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d031      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xb12>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a76      	ldr	r2, [pc, #472]	; (8006cd4 <HAL_DMA_IRQHandler+0xc8c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d02c      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xb12>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a74      	ldr	r2, [pc, #464]	; (8006cd8 <HAL_DMA_IRQHandler+0xc90>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d027      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xb12>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a73      	ldr	r2, [pc, #460]	; (8006cdc <HAL_DMA_IRQHandler+0xc94>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d022      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xb12>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a71      	ldr	r2, [pc, #452]	; (8006ce0 <HAL_DMA_IRQHandler+0xc98>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d01d      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xb12>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a70      	ldr	r2, [pc, #448]	; (8006ce4 <HAL_DMA_IRQHandler+0xc9c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d018      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xb12>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a6e      	ldr	r2, [pc, #440]	; (8006ce8 <HAL_DMA_IRQHandler+0xca0>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d013      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xb12>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a6d      	ldr	r2, [pc, #436]	; (8006cec <HAL_DMA_IRQHandler+0xca4>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00e      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xb12>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a6b      	ldr	r2, [pc, #428]	; (8006cf0 <HAL_DMA_IRQHandler+0xca8>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d009      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xb12>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a6a      	ldr	r2, [pc, #424]	; (8006cf4 <HAL_DMA_IRQHandler+0xcac>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d004      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xb12>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a68      	ldr	r2, [pc, #416]	; (8006cf8 <HAL_DMA_IRQHandler+0xcb0>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d108      	bne.n	8006b6c <HAL_DMA_IRQHandler+0xb24>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0208 	bic.w	r2, r2, #8
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	e007      	b.n	8006b7c <HAL_DMA_IRQHandler+0xb34>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0204 	bic.w	r2, r2, #4
 8006b7a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 8165 	beq.w	8006e50 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b8e:	e15f      	b.n	8006e50 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b94:	f003 031f 	and.w	r3, r3, #31
 8006b98:	2202      	movs	r2, #2
 8006b9a:	409a      	lsls	r2, r3
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80c5 	beq.w	8006d30 <HAL_DMA_IRQHandler+0xce8>
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 80bf 	beq.w	8006d30 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb6:	f003 031f 	and.w	r3, r3, #31
 8006bba:	2202      	movs	r2, #2
 8006bbc:	409a      	lsls	r2, r3
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d018      	beq.n	8006bfe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 813a 	beq.w	8006e54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006be8:	e134      	b.n	8006e54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 8130 	beq.w	8006e54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bfc:	e12a      	b.n	8006e54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f040 8089 	bne.w	8006d1c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a2b      	ldr	r2, [pc, #172]	; (8006cbc <HAL_DMA_IRQHandler+0xc74>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d04a      	beq.n	8006caa <HAL_DMA_IRQHandler+0xc62>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a29      	ldr	r2, [pc, #164]	; (8006cc0 <HAL_DMA_IRQHandler+0xc78>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d045      	beq.n	8006caa <HAL_DMA_IRQHandler+0xc62>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a28      	ldr	r2, [pc, #160]	; (8006cc4 <HAL_DMA_IRQHandler+0xc7c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d040      	beq.n	8006caa <HAL_DMA_IRQHandler+0xc62>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a26      	ldr	r2, [pc, #152]	; (8006cc8 <HAL_DMA_IRQHandler+0xc80>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d03b      	beq.n	8006caa <HAL_DMA_IRQHandler+0xc62>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a25      	ldr	r2, [pc, #148]	; (8006ccc <HAL_DMA_IRQHandler+0xc84>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d036      	beq.n	8006caa <HAL_DMA_IRQHandler+0xc62>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a23      	ldr	r2, [pc, #140]	; (8006cd0 <HAL_DMA_IRQHandler+0xc88>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d031      	beq.n	8006caa <HAL_DMA_IRQHandler+0xc62>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a22      	ldr	r2, [pc, #136]	; (8006cd4 <HAL_DMA_IRQHandler+0xc8c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d02c      	beq.n	8006caa <HAL_DMA_IRQHandler+0xc62>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a20      	ldr	r2, [pc, #128]	; (8006cd8 <HAL_DMA_IRQHandler+0xc90>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d027      	beq.n	8006caa <HAL_DMA_IRQHandler+0xc62>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a1f      	ldr	r2, [pc, #124]	; (8006cdc <HAL_DMA_IRQHandler+0xc94>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d022      	beq.n	8006caa <HAL_DMA_IRQHandler+0xc62>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a1d      	ldr	r2, [pc, #116]	; (8006ce0 <HAL_DMA_IRQHandler+0xc98>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d01d      	beq.n	8006caa <HAL_DMA_IRQHandler+0xc62>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a1c      	ldr	r2, [pc, #112]	; (8006ce4 <HAL_DMA_IRQHandler+0xc9c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d018      	beq.n	8006caa <HAL_DMA_IRQHandler+0xc62>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1a      	ldr	r2, [pc, #104]	; (8006ce8 <HAL_DMA_IRQHandler+0xca0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d013      	beq.n	8006caa <HAL_DMA_IRQHandler+0xc62>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a19      	ldr	r2, [pc, #100]	; (8006cec <HAL_DMA_IRQHandler+0xca4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00e      	beq.n	8006caa <HAL_DMA_IRQHandler+0xc62>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a17      	ldr	r2, [pc, #92]	; (8006cf0 <HAL_DMA_IRQHandler+0xca8>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d009      	beq.n	8006caa <HAL_DMA_IRQHandler+0xc62>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a16      	ldr	r2, [pc, #88]	; (8006cf4 <HAL_DMA_IRQHandler+0xcac>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d004      	beq.n	8006caa <HAL_DMA_IRQHandler+0xc62>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a14      	ldr	r2, [pc, #80]	; (8006cf8 <HAL_DMA_IRQHandler+0xcb0>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d128      	bne.n	8006cfc <HAL_DMA_IRQHandler+0xcb4>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0214 	bic.w	r2, r2, #20
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	e027      	b.n	8006d0c <HAL_DMA_IRQHandler+0xcc4>
 8006cbc:	40020010 	.word	0x40020010
 8006cc0:	40020028 	.word	0x40020028
 8006cc4:	40020040 	.word	0x40020040
 8006cc8:	40020058 	.word	0x40020058
 8006ccc:	40020070 	.word	0x40020070
 8006cd0:	40020088 	.word	0x40020088
 8006cd4:	400200a0 	.word	0x400200a0
 8006cd8:	400200b8 	.word	0x400200b8
 8006cdc:	40020410 	.word	0x40020410
 8006ce0:	40020428 	.word	0x40020428
 8006ce4:	40020440 	.word	0x40020440
 8006ce8:	40020458 	.word	0x40020458
 8006cec:	40020470 	.word	0x40020470
 8006cf0:	40020488 	.word	0x40020488
 8006cf4:	400204a0 	.word	0x400204a0
 8006cf8:	400204b8 	.word	0x400204b8
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 020a 	bic.w	r2, r2, #10
 8006d0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 8097 	beq.w	8006e54 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d2e:	e091      	b.n	8006e54 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d34:	f003 031f 	and.w	r3, r3, #31
 8006d38:	2208      	movs	r2, #8
 8006d3a:	409a      	lsls	r2, r3
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	4013      	ands	r3, r2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 8088 	beq.w	8006e56 <HAL_DMA_IRQHandler+0xe0e>
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 8082 	beq.w	8006e56 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a41      	ldr	r2, [pc, #260]	; (8006e5c <HAL_DMA_IRQHandler+0xe14>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d04a      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xdaa>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a3f      	ldr	r2, [pc, #252]	; (8006e60 <HAL_DMA_IRQHandler+0xe18>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d045      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xdaa>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a3e      	ldr	r2, [pc, #248]	; (8006e64 <HAL_DMA_IRQHandler+0xe1c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d040      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xdaa>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a3c      	ldr	r2, [pc, #240]	; (8006e68 <HAL_DMA_IRQHandler+0xe20>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d03b      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xdaa>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a3b      	ldr	r2, [pc, #236]	; (8006e6c <HAL_DMA_IRQHandler+0xe24>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d036      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xdaa>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a39      	ldr	r2, [pc, #228]	; (8006e70 <HAL_DMA_IRQHandler+0xe28>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d031      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xdaa>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a38      	ldr	r2, [pc, #224]	; (8006e74 <HAL_DMA_IRQHandler+0xe2c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d02c      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xdaa>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a36      	ldr	r2, [pc, #216]	; (8006e78 <HAL_DMA_IRQHandler+0xe30>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d027      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xdaa>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a35      	ldr	r2, [pc, #212]	; (8006e7c <HAL_DMA_IRQHandler+0xe34>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d022      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xdaa>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a33      	ldr	r2, [pc, #204]	; (8006e80 <HAL_DMA_IRQHandler+0xe38>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d01d      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xdaa>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a32      	ldr	r2, [pc, #200]	; (8006e84 <HAL_DMA_IRQHandler+0xe3c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d018      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xdaa>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a30      	ldr	r2, [pc, #192]	; (8006e88 <HAL_DMA_IRQHandler+0xe40>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d013      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xdaa>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a2f      	ldr	r2, [pc, #188]	; (8006e8c <HAL_DMA_IRQHandler+0xe44>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00e      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xdaa>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a2d      	ldr	r2, [pc, #180]	; (8006e90 <HAL_DMA_IRQHandler+0xe48>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d009      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xdaa>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a2c      	ldr	r2, [pc, #176]	; (8006e94 <HAL_DMA_IRQHandler+0xe4c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d004      	beq.n	8006df2 <HAL_DMA_IRQHandler+0xdaa>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a2a      	ldr	r2, [pc, #168]	; (8006e98 <HAL_DMA_IRQHandler+0xe50>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d108      	bne.n	8006e04 <HAL_DMA_IRQHandler+0xdbc>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 021c 	bic.w	r2, r2, #28
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	e007      	b.n	8006e14 <HAL_DMA_IRQHandler+0xdcc>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 020e 	bic.w	r2, r2, #14
 8006e12:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e18:	f003 031f 	and.w	r3, r3, #31
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	409a      	lsls	r2, r3
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d009      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
 8006e4a:	e004      	b.n	8006e56 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006e4c:	bf00      	nop
 8006e4e:	e002      	b.n	8006e56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e50:	bf00      	nop
 8006e52:	e000      	b.n	8006e56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e54:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e56:	3728      	adds	r7, #40	; 0x28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	40020010 	.word	0x40020010
 8006e60:	40020028 	.word	0x40020028
 8006e64:	40020040 	.word	0x40020040
 8006e68:	40020058 	.word	0x40020058
 8006e6c:	40020070 	.word	0x40020070
 8006e70:	40020088 	.word	0x40020088
 8006e74:	400200a0 	.word	0x400200a0
 8006e78:	400200b8 	.word	0x400200b8
 8006e7c:	40020410 	.word	0x40020410
 8006e80:	40020428 	.word	0x40020428
 8006e84:	40020440 	.word	0x40020440
 8006e88:	40020458 	.word	0x40020458
 8006e8c:	40020470 	.word	0x40020470
 8006e90:	40020488 	.word	0x40020488
 8006e94:	400204a0 	.word	0x400204a0
 8006e98:	400204b8 	.word	0x400204b8

08006e9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a7f      	ldr	r2, [pc, #508]	; (80070b8 <DMA_SetConfig+0x21c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d072      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a7d      	ldr	r2, [pc, #500]	; (80070bc <DMA_SetConfig+0x220>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d06d      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a7c      	ldr	r2, [pc, #496]	; (80070c0 <DMA_SetConfig+0x224>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d068      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a7a      	ldr	r2, [pc, #488]	; (80070c4 <DMA_SetConfig+0x228>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d063      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a79      	ldr	r2, [pc, #484]	; (80070c8 <DMA_SetConfig+0x22c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d05e      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a77      	ldr	r2, [pc, #476]	; (80070cc <DMA_SetConfig+0x230>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d059      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a76      	ldr	r2, [pc, #472]	; (80070d0 <DMA_SetConfig+0x234>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d054      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a74      	ldr	r2, [pc, #464]	; (80070d4 <DMA_SetConfig+0x238>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d04f      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a73      	ldr	r2, [pc, #460]	; (80070d8 <DMA_SetConfig+0x23c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d04a      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a71      	ldr	r2, [pc, #452]	; (80070dc <DMA_SetConfig+0x240>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d045      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a70      	ldr	r2, [pc, #448]	; (80070e0 <DMA_SetConfig+0x244>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d040      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a6e      	ldr	r2, [pc, #440]	; (80070e4 <DMA_SetConfig+0x248>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d03b      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a6d      	ldr	r2, [pc, #436]	; (80070e8 <DMA_SetConfig+0x24c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d036      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a6b      	ldr	r2, [pc, #428]	; (80070ec <DMA_SetConfig+0x250>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d031      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a6a      	ldr	r2, [pc, #424]	; (80070f0 <DMA_SetConfig+0x254>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d02c      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a68      	ldr	r2, [pc, #416]	; (80070f4 <DMA_SetConfig+0x258>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d027      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a67      	ldr	r2, [pc, #412]	; (80070f8 <DMA_SetConfig+0x25c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d022      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a65      	ldr	r2, [pc, #404]	; (80070fc <DMA_SetConfig+0x260>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d01d      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a64      	ldr	r2, [pc, #400]	; (8007100 <DMA_SetConfig+0x264>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d018      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a62      	ldr	r2, [pc, #392]	; (8007104 <DMA_SetConfig+0x268>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d013      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a61      	ldr	r2, [pc, #388]	; (8007108 <DMA_SetConfig+0x26c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d00e      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a5f      	ldr	r2, [pc, #380]	; (800710c <DMA_SetConfig+0x270>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d009      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a5e      	ldr	r2, [pc, #376]	; (8007110 <DMA_SetConfig+0x274>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d004      	beq.n	8006fa6 <DMA_SetConfig+0x10a>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a5c      	ldr	r2, [pc, #368]	; (8007114 <DMA_SetConfig+0x278>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d101      	bne.n	8006faa <DMA_SetConfig+0x10e>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e000      	b.n	8006fac <DMA_SetConfig+0x110>
 8006faa:	2300      	movs	r3, #0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00d      	beq.n	8006fcc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fb8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d004      	beq.n	8006fcc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006fca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a39      	ldr	r2, [pc, #228]	; (80070b8 <DMA_SetConfig+0x21c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d04a      	beq.n	800706c <DMA_SetConfig+0x1d0>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a38      	ldr	r2, [pc, #224]	; (80070bc <DMA_SetConfig+0x220>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d045      	beq.n	800706c <DMA_SetConfig+0x1d0>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a36      	ldr	r2, [pc, #216]	; (80070c0 <DMA_SetConfig+0x224>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d040      	beq.n	800706c <DMA_SetConfig+0x1d0>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a35      	ldr	r2, [pc, #212]	; (80070c4 <DMA_SetConfig+0x228>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d03b      	beq.n	800706c <DMA_SetConfig+0x1d0>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a33      	ldr	r2, [pc, #204]	; (80070c8 <DMA_SetConfig+0x22c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d036      	beq.n	800706c <DMA_SetConfig+0x1d0>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a32      	ldr	r2, [pc, #200]	; (80070cc <DMA_SetConfig+0x230>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d031      	beq.n	800706c <DMA_SetConfig+0x1d0>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a30      	ldr	r2, [pc, #192]	; (80070d0 <DMA_SetConfig+0x234>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d02c      	beq.n	800706c <DMA_SetConfig+0x1d0>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a2f      	ldr	r2, [pc, #188]	; (80070d4 <DMA_SetConfig+0x238>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d027      	beq.n	800706c <DMA_SetConfig+0x1d0>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a2d      	ldr	r2, [pc, #180]	; (80070d8 <DMA_SetConfig+0x23c>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d022      	beq.n	800706c <DMA_SetConfig+0x1d0>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a2c      	ldr	r2, [pc, #176]	; (80070dc <DMA_SetConfig+0x240>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d01d      	beq.n	800706c <DMA_SetConfig+0x1d0>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a2a      	ldr	r2, [pc, #168]	; (80070e0 <DMA_SetConfig+0x244>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d018      	beq.n	800706c <DMA_SetConfig+0x1d0>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a29      	ldr	r2, [pc, #164]	; (80070e4 <DMA_SetConfig+0x248>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d013      	beq.n	800706c <DMA_SetConfig+0x1d0>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a27      	ldr	r2, [pc, #156]	; (80070e8 <DMA_SetConfig+0x24c>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d00e      	beq.n	800706c <DMA_SetConfig+0x1d0>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a26      	ldr	r2, [pc, #152]	; (80070ec <DMA_SetConfig+0x250>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d009      	beq.n	800706c <DMA_SetConfig+0x1d0>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a24      	ldr	r2, [pc, #144]	; (80070f0 <DMA_SetConfig+0x254>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d004      	beq.n	800706c <DMA_SetConfig+0x1d0>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a23      	ldr	r2, [pc, #140]	; (80070f4 <DMA_SetConfig+0x258>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d101      	bne.n	8007070 <DMA_SetConfig+0x1d4>
 800706c:	2301      	movs	r3, #1
 800706e:	e000      	b.n	8007072 <DMA_SetConfig+0x1d6>
 8007070:	2300      	movs	r3, #0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d059      	beq.n	800712a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800707a:	f003 031f 	and.w	r3, r3, #31
 800707e:	223f      	movs	r2, #63	; 0x3f
 8007080:	409a      	lsls	r2, r3
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007094:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	2b40      	cmp	r3, #64	; 0x40
 80070a4:	d138      	bne.n	8007118 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80070b6:	e086      	b.n	80071c6 <DMA_SetConfig+0x32a>
 80070b8:	40020010 	.word	0x40020010
 80070bc:	40020028 	.word	0x40020028
 80070c0:	40020040 	.word	0x40020040
 80070c4:	40020058 	.word	0x40020058
 80070c8:	40020070 	.word	0x40020070
 80070cc:	40020088 	.word	0x40020088
 80070d0:	400200a0 	.word	0x400200a0
 80070d4:	400200b8 	.word	0x400200b8
 80070d8:	40020410 	.word	0x40020410
 80070dc:	40020428 	.word	0x40020428
 80070e0:	40020440 	.word	0x40020440
 80070e4:	40020458 	.word	0x40020458
 80070e8:	40020470 	.word	0x40020470
 80070ec:	40020488 	.word	0x40020488
 80070f0:	400204a0 	.word	0x400204a0
 80070f4:	400204b8 	.word	0x400204b8
 80070f8:	58025408 	.word	0x58025408
 80070fc:	5802541c 	.word	0x5802541c
 8007100:	58025430 	.word	0x58025430
 8007104:	58025444 	.word	0x58025444
 8007108:	58025458 	.word	0x58025458
 800710c:	5802546c 	.word	0x5802546c
 8007110:	58025480 	.word	0x58025480
 8007114:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	60da      	str	r2, [r3, #12]
}
 8007128:	e04d      	b.n	80071c6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a29      	ldr	r2, [pc, #164]	; (80071d4 <DMA_SetConfig+0x338>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d022      	beq.n	800717a <DMA_SetConfig+0x2de>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a27      	ldr	r2, [pc, #156]	; (80071d8 <DMA_SetConfig+0x33c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d01d      	beq.n	800717a <DMA_SetConfig+0x2de>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a26      	ldr	r2, [pc, #152]	; (80071dc <DMA_SetConfig+0x340>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d018      	beq.n	800717a <DMA_SetConfig+0x2de>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a24      	ldr	r2, [pc, #144]	; (80071e0 <DMA_SetConfig+0x344>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d013      	beq.n	800717a <DMA_SetConfig+0x2de>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a23      	ldr	r2, [pc, #140]	; (80071e4 <DMA_SetConfig+0x348>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00e      	beq.n	800717a <DMA_SetConfig+0x2de>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a21      	ldr	r2, [pc, #132]	; (80071e8 <DMA_SetConfig+0x34c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d009      	beq.n	800717a <DMA_SetConfig+0x2de>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a20      	ldr	r2, [pc, #128]	; (80071ec <DMA_SetConfig+0x350>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d004      	beq.n	800717a <DMA_SetConfig+0x2de>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a1e      	ldr	r2, [pc, #120]	; (80071f0 <DMA_SetConfig+0x354>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d101      	bne.n	800717e <DMA_SetConfig+0x2e2>
 800717a:	2301      	movs	r3, #1
 800717c:	e000      	b.n	8007180 <DMA_SetConfig+0x2e4>
 800717e:	2300      	movs	r3, #0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d020      	beq.n	80071c6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007188:	f003 031f 	and.w	r3, r3, #31
 800718c:	2201      	movs	r2, #1
 800718e:	409a      	lsls	r2, r3
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	2b40      	cmp	r3, #64	; 0x40
 80071a2:	d108      	bne.n	80071b6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	60da      	str	r2, [r3, #12]
}
 80071b4:	e007      	b.n	80071c6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	60da      	str	r2, [r3, #12]
}
 80071c6:	bf00      	nop
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	58025408 	.word	0x58025408
 80071d8:	5802541c 	.word	0x5802541c
 80071dc:	58025430 	.word	0x58025430
 80071e0:	58025444 	.word	0x58025444
 80071e4:	58025458 	.word	0x58025458
 80071e8:	5802546c 	.word	0x5802546c
 80071ec:	58025480 	.word	0x58025480
 80071f0:	58025494 	.word	0x58025494

080071f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a42      	ldr	r2, [pc, #264]	; (800730c <DMA_CalcBaseAndBitshift+0x118>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d04a      	beq.n	800729c <DMA_CalcBaseAndBitshift+0xa8>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a41      	ldr	r2, [pc, #260]	; (8007310 <DMA_CalcBaseAndBitshift+0x11c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d045      	beq.n	800729c <DMA_CalcBaseAndBitshift+0xa8>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a3f      	ldr	r2, [pc, #252]	; (8007314 <DMA_CalcBaseAndBitshift+0x120>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d040      	beq.n	800729c <DMA_CalcBaseAndBitshift+0xa8>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a3e      	ldr	r2, [pc, #248]	; (8007318 <DMA_CalcBaseAndBitshift+0x124>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d03b      	beq.n	800729c <DMA_CalcBaseAndBitshift+0xa8>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a3c      	ldr	r2, [pc, #240]	; (800731c <DMA_CalcBaseAndBitshift+0x128>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d036      	beq.n	800729c <DMA_CalcBaseAndBitshift+0xa8>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a3b      	ldr	r2, [pc, #236]	; (8007320 <DMA_CalcBaseAndBitshift+0x12c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d031      	beq.n	800729c <DMA_CalcBaseAndBitshift+0xa8>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a39      	ldr	r2, [pc, #228]	; (8007324 <DMA_CalcBaseAndBitshift+0x130>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d02c      	beq.n	800729c <DMA_CalcBaseAndBitshift+0xa8>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a38      	ldr	r2, [pc, #224]	; (8007328 <DMA_CalcBaseAndBitshift+0x134>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d027      	beq.n	800729c <DMA_CalcBaseAndBitshift+0xa8>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a36      	ldr	r2, [pc, #216]	; (800732c <DMA_CalcBaseAndBitshift+0x138>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d022      	beq.n	800729c <DMA_CalcBaseAndBitshift+0xa8>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a35      	ldr	r2, [pc, #212]	; (8007330 <DMA_CalcBaseAndBitshift+0x13c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d01d      	beq.n	800729c <DMA_CalcBaseAndBitshift+0xa8>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a33      	ldr	r2, [pc, #204]	; (8007334 <DMA_CalcBaseAndBitshift+0x140>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d018      	beq.n	800729c <DMA_CalcBaseAndBitshift+0xa8>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a32      	ldr	r2, [pc, #200]	; (8007338 <DMA_CalcBaseAndBitshift+0x144>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d013      	beq.n	800729c <DMA_CalcBaseAndBitshift+0xa8>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a30      	ldr	r2, [pc, #192]	; (800733c <DMA_CalcBaseAndBitshift+0x148>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d00e      	beq.n	800729c <DMA_CalcBaseAndBitshift+0xa8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a2f      	ldr	r2, [pc, #188]	; (8007340 <DMA_CalcBaseAndBitshift+0x14c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d009      	beq.n	800729c <DMA_CalcBaseAndBitshift+0xa8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a2d      	ldr	r2, [pc, #180]	; (8007344 <DMA_CalcBaseAndBitshift+0x150>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d004      	beq.n	800729c <DMA_CalcBaseAndBitshift+0xa8>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a2c      	ldr	r2, [pc, #176]	; (8007348 <DMA_CalcBaseAndBitshift+0x154>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d101      	bne.n	80072a0 <DMA_CalcBaseAndBitshift+0xac>
 800729c:	2301      	movs	r3, #1
 800729e:	e000      	b.n	80072a2 <DMA_CalcBaseAndBitshift+0xae>
 80072a0:	2300      	movs	r3, #0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d024      	beq.n	80072f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	3b10      	subs	r3, #16
 80072ae:	4a27      	ldr	r2, [pc, #156]	; (800734c <DMA_CalcBaseAndBitshift+0x158>)
 80072b0:	fba2 2303 	umull	r2, r3, r2, r3
 80072b4:	091b      	lsrs	r3, r3, #4
 80072b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f003 0307 	and.w	r3, r3, #7
 80072be:	4a24      	ldr	r2, [pc, #144]	; (8007350 <DMA_CalcBaseAndBitshift+0x15c>)
 80072c0:	5cd3      	ldrb	r3, [r2, r3]
 80072c2:	461a      	mov	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d908      	bls.n	80072e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	4b1f      	ldr	r3, [pc, #124]	; (8007354 <DMA_CalcBaseAndBitshift+0x160>)
 80072d6:	4013      	ands	r3, r2
 80072d8:	1d1a      	adds	r2, r3, #4
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	659a      	str	r2, [r3, #88]	; 0x58
 80072de:	e00d      	b.n	80072fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	4b1b      	ldr	r3, [pc, #108]	; (8007354 <DMA_CalcBaseAndBitshift+0x160>)
 80072e8:	4013      	ands	r3, r2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6593      	str	r3, [r2, #88]	; 0x58
 80072ee:	e005      	b.n	80072fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	40020010 	.word	0x40020010
 8007310:	40020028 	.word	0x40020028
 8007314:	40020040 	.word	0x40020040
 8007318:	40020058 	.word	0x40020058
 800731c:	40020070 	.word	0x40020070
 8007320:	40020088 	.word	0x40020088
 8007324:	400200a0 	.word	0x400200a0
 8007328:	400200b8 	.word	0x400200b8
 800732c:	40020410 	.word	0x40020410
 8007330:	40020428 	.word	0x40020428
 8007334:	40020440 	.word	0x40020440
 8007338:	40020458 	.word	0x40020458
 800733c:	40020470 	.word	0x40020470
 8007340:	40020488 	.word	0x40020488
 8007344:	400204a0 	.word	0x400204a0
 8007348:	400204b8 	.word	0x400204b8
 800734c:	aaaaaaab 	.word	0xaaaaaaab
 8007350:	0801e070 	.word	0x0801e070
 8007354:	fffffc00 	.word	0xfffffc00

08007358 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d120      	bne.n	80073ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007370:	2b03      	cmp	r3, #3
 8007372:	d858      	bhi.n	8007426 <DMA_CheckFifoParam+0xce>
 8007374:	a201      	add	r2, pc, #4	; (adr r2, 800737c <DMA_CheckFifoParam+0x24>)
 8007376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737a:	bf00      	nop
 800737c:	0800738d 	.word	0x0800738d
 8007380:	0800739f 	.word	0x0800739f
 8007384:	0800738d 	.word	0x0800738d
 8007388:	08007427 	.word	0x08007427
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d048      	beq.n	800742a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800739c:	e045      	b.n	800742a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073a6:	d142      	bne.n	800742e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073ac:	e03f      	b.n	800742e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073b6:	d123      	bne.n	8007400 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d838      	bhi.n	8007432 <DMA_CheckFifoParam+0xda>
 80073c0:	a201      	add	r2, pc, #4	; (adr r2, 80073c8 <DMA_CheckFifoParam+0x70>)
 80073c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c6:	bf00      	nop
 80073c8:	080073d9 	.word	0x080073d9
 80073cc:	080073df 	.word	0x080073df
 80073d0:	080073d9 	.word	0x080073d9
 80073d4:	080073f1 	.word	0x080073f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	73fb      	strb	r3, [r7, #15]
        break;
 80073dc:	e030      	b.n	8007440 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d025      	beq.n	8007436 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073ee:	e022      	b.n	8007436 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073f8:	d11f      	bne.n	800743a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073fe:	e01c      	b.n	800743a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007404:	2b02      	cmp	r3, #2
 8007406:	d902      	bls.n	800740e <DMA_CheckFifoParam+0xb6>
 8007408:	2b03      	cmp	r3, #3
 800740a:	d003      	beq.n	8007414 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800740c:	e018      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	73fb      	strb	r3, [r7, #15]
        break;
 8007412:	e015      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00e      	beq.n	800743e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	73fb      	strb	r3, [r7, #15]
    break;
 8007424:	e00b      	b.n	800743e <DMA_CheckFifoParam+0xe6>
        break;
 8007426:	bf00      	nop
 8007428:	e00a      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
        break;
 800742a:	bf00      	nop
 800742c:	e008      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
        break;
 800742e:	bf00      	nop
 8007430:	e006      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
        break;
 8007432:	bf00      	nop
 8007434:	e004      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
        break;
 8007436:	bf00      	nop
 8007438:	e002      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
        break;
 800743a:	bf00      	nop
 800743c:	e000      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
    break;
 800743e:	bf00      	nop
    }
  }

  return status;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop

08007450 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a38      	ldr	r2, [pc, #224]	; (8007544 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d022      	beq.n	80074ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a36      	ldr	r2, [pc, #216]	; (8007548 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d01d      	beq.n	80074ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a35      	ldr	r2, [pc, #212]	; (800754c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d018      	beq.n	80074ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a33      	ldr	r2, [pc, #204]	; (8007550 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d013      	beq.n	80074ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a32      	ldr	r2, [pc, #200]	; (8007554 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00e      	beq.n	80074ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a30      	ldr	r2, [pc, #192]	; (8007558 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d009      	beq.n	80074ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a2f      	ldr	r2, [pc, #188]	; (800755c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d004      	beq.n	80074ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a2d      	ldr	r2, [pc, #180]	; (8007560 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d101      	bne.n	80074b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80074b2:	2300      	movs	r3, #0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d01a      	beq.n	80074ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	3b08      	subs	r3, #8
 80074c0:	4a28      	ldr	r2, [pc, #160]	; (8007564 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80074c2:	fba2 2303 	umull	r2, r3, r2, r3
 80074c6:	091b      	lsrs	r3, r3, #4
 80074c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	4b26      	ldr	r3, [pc, #152]	; (8007568 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	461a      	mov	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a24      	ldr	r2, [pc, #144]	; (800756c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80074dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f003 031f 	and.w	r3, r3, #31
 80074e4:	2201      	movs	r2, #1
 80074e6:	409a      	lsls	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80074ec:	e024      	b.n	8007538 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	3b10      	subs	r3, #16
 80074f6:	4a1e      	ldr	r2, [pc, #120]	; (8007570 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80074f8:	fba2 2303 	umull	r2, r3, r2, r3
 80074fc:	091b      	lsrs	r3, r3, #4
 80074fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	4a1c      	ldr	r2, [pc, #112]	; (8007574 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d806      	bhi.n	8007516 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4a1b      	ldr	r2, [pc, #108]	; (8007578 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d902      	bls.n	8007516 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3308      	adds	r3, #8
 8007514:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	4b18      	ldr	r3, [pc, #96]	; (800757c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800751a:	4413      	add	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	461a      	mov	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a16      	ldr	r2, [pc, #88]	; (8007580 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007528:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f003 031f 	and.w	r3, r3, #31
 8007530:	2201      	movs	r2, #1
 8007532:	409a      	lsls	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007538:	bf00      	nop
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	58025408 	.word	0x58025408
 8007548:	5802541c 	.word	0x5802541c
 800754c:	58025430 	.word	0x58025430
 8007550:	58025444 	.word	0x58025444
 8007554:	58025458 	.word	0x58025458
 8007558:	5802546c 	.word	0x5802546c
 800755c:	58025480 	.word	0x58025480
 8007560:	58025494 	.word	0x58025494
 8007564:	cccccccd 	.word	0xcccccccd
 8007568:	16009600 	.word	0x16009600
 800756c:	58025880 	.word	0x58025880
 8007570:	aaaaaaab 	.word	0xaaaaaaab
 8007574:	400204b8 	.word	0x400204b8
 8007578:	4002040f 	.word	0x4002040f
 800757c:	10008200 	.word	0x10008200
 8007580:	40020880 	.word	0x40020880

08007584 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d04a      	beq.n	8007630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2b08      	cmp	r3, #8
 800759e:	d847      	bhi.n	8007630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a25      	ldr	r2, [pc, #148]	; (800763c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d022      	beq.n	80075f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a24      	ldr	r2, [pc, #144]	; (8007640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d01d      	beq.n	80075f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a22      	ldr	r2, [pc, #136]	; (8007644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d018      	beq.n	80075f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a21      	ldr	r2, [pc, #132]	; (8007648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d013      	beq.n	80075f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a1f      	ldr	r2, [pc, #124]	; (800764c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00e      	beq.n	80075f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a1e      	ldr	r2, [pc, #120]	; (8007650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d009      	beq.n	80075f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a1c      	ldr	r2, [pc, #112]	; (8007654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d004      	beq.n	80075f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a1b      	ldr	r2, [pc, #108]	; (8007658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d101      	bne.n	80075f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80075f0:	2301      	movs	r3, #1
 80075f2:	e000      	b.n	80075f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80075f4:	2300      	movs	r3, #0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	4b17      	ldr	r3, [pc, #92]	; (800765c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	461a      	mov	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a15      	ldr	r2, [pc, #84]	; (8007660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800760c:	671a      	str	r2, [r3, #112]	; 0x70
 800760e:	e009      	b.n	8007624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	4b14      	ldr	r3, [pc, #80]	; (8007664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	461a      	mov	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a11      	ldr	r2, [pc, #68]	; (8007668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007622:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3b01      	subs	r3, #1
 8007628:	2201      	movs	r2, #1
 800762a:	409a      	lsls	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007630:	bf00      	nop
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	58025408 	.word	0x58025408
 8007640:	5802541c 	.word	0x5802541c
 8007644:	58025430 	.word	0x58025430
 8007648:	58025444 	.word	0x58025444
 800764c:	58025458 	.word	0x58025458
 8007650:	5802546c 	.word	0x5802546c
 8007654:	58025480 	.word	0x58025480
 8007658:	58025494 	.word	0x58025494
 800765c:	1600963f 	.word	0x1600963f
 8007660:	58025940 	.word	0x58025940
 8007664:	1000823f 	.word	0x1000823f
 8007668:	40020940 	.word	0x40020940

0800766c <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08a      	sub	sp, #40	; 0x28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8007680:	2308      	movs	r3, #8
 8007682:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d003      	beq.n	8007692 <HAL_FLASH_Program+0x26>
 800768a:	219d      	movs	r1, #157	; 0x9d
 800768c:	484b      	ldr	r0, [pc, #300]	; (80077bc <HAL_FLASH_Program+0x150>)
 800768e:	f7fa f9f0 	bl	8001a72 <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007698:	d303      	bcc.n	80076a2 <HAL_FLASH_Program+0x36>
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80076a0:	d30b      	bcc.n	80076ba <HAL_FLASH_Program+0x4e>
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80076a8:	d303      	bcc.n	80076b2 <HAL_FLASH_Program+0x46>
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 80076b0:	d303      	bcc.n	80076ba <HAL_FLASH_Program+0x4e>
 80076b2:	219e      	movs	r1, #158	; 0x9e
 80076b4:	4841      	ldr	r0, [pc, #260]	; (80077bc <HAL_FLASH_Program+0x150>)
 80076b6:	f7fa f9dc 	bl	8001a72 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80076ba:	4b41      	ldr	r3, [pc, #260]	; (80077c0 <HAL_FLASH_Program+0x154>)
 80076bc:	7d1b      	ldrb	r3, [r3, #20]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d101      	bne.n	80076c6 <HAL_FLASH_Program+0x5a>
 80076c2:	2302      	movs	r3, #2
 80076c4:	e076      	b.n	80077b4 <HAL_FLASH_Program+0x148>
 80076c6:	4b3e      	ldr	r3, [pc, #248]	; (80077c0 <HAL_FLASH_Program+0x154>)
 80076c8:	2201      	movs	r2, #1
 80076ca:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076d2:	d306      	bcc.n	80076e2 <HAL_FLASH_Program+0x76>
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80076da:	d202      	bcs.n	80076e2 <HAL_FLASH_Program+0x76>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 80076dc:	2301      	movs	r3, #1
 80076de:	61bb      	str	r3, [r7, #24]
 80076e0:	e00c      	b.n	80076fc <HAL_FLASH_Program+0x90>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80076e8:	d306      	bcc.n	80076f8 <HAL_FLASH_Program+0x8c>
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 80076f0:	d202      	bcs.n	80076f8 <HAL_FLASH_Program+0x8c>
  {
    bank = FLASH_BANK_2;
 80076f2:	2302      	movs	r3, #2
 80076f4:	61bb      	str	r3, [r7, #24]
 80076f6:	e001      	b.n	80076fc <HAL_FLASH_Program+0x90>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e05b      	b.n	80077b4 <HAL_FLASH_Program+0x148>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80076fc:	4b30      	ldr	r3, [pc, #192]	; (80077c0 <HAL_FLASH_Program+0x154>)
 80076fe:	2200      	movs	r2, #0
 8007700:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8007702:	69b9      	ldr	r1, [r7, #24]
 8007704:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007708:	f000 f8c2 	bl	8007890 <FLASH_WaitForLastOperation>
 800770c:	4603      	mov	r3, r0
 800770e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8007712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007716:	2b00      	cmp	r3, #0
 8007718:	d147      	bne.n	80077aa <HAL_FLASH_Program+0x13e>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d106      	bne.n	800772e <HAL_FLASH_Program+0xc2>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8007720:	4b28      	ldr	r3, [pc, #160]	; (80077c4 <HAL_FLASH_Program+0x158>)
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	4a27      	ldr	r2, [pc, #156]	; (80077c4 <HAL_FLASH_Program+0x158>)
 8007726:	f043 0302 	orr.w	r3, r3, #2
 800772a:	60d3      	str	r3, [r2, #12]
 800772c:	e007      	b.n	800773e <HAL_FLASH_Program+0xd2>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800772e:	4b25      	ldr	r3, [pc, #148]	; (80077c4 <HAL_FLASH_Program+0x158>)
 8007730:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007734:	4a23      	ldr	r2, [pc, #140]	; (80077c4 <HAL_FLASH_Program+0x158>)
 8007736:	f043 0302 	orr.w	r3, r3, #2
 800773a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800773e:	f3bf 8f6f 	isb	sy
}
 8007742:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8007744:	f3bf 8f4f 	dsb	sy
}
 8007748:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	3304      	adds	r3, #4
 8007756:	623b      	str	r3, [r7, #32]
        src_addr++;
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	3304      	adds	r3, #4
 800775c:	61fb      	str	r3, [r7, #28]
        row_index--;
 800775e:	7dfb      	ldrb	r3, [r7, #23]
 8007760:	3b01      	subs	r3, #1
 8007762:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 8007764:	7dfb      	ldrb	r3, [r7, #23]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1ef      	bne.n	800774a <HAL_FLASH_Program+0xde>
  __ASM volatile ("isb 0xF":::"memory");
 800776a:	f3bf 8f6f 	isb	sy
}
 800776e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8007770:	f3bf 8f4f 	dsb	sy
}
 8007774:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8007776:	69b9      	ldr	r1, [r7, #24]
 8007778:	f24c 3050 	movw	r0, #50000	; 0xc350
 800777c:	f000 f888 	bl	8007890 <FLASH_WaitForLastOperation>
 8007780:	4603      	mov	r3, r0
 8007782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d106      	bne.n	800779a <HAL_FLASH_Program+0x12e>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800778c:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <HAL_FLASH_Program+0x158>)
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	4a0c      	ldr	r2, [pc, #48]	; (80077c4 <HAL_FLASH_Program+0x158>)
 8007792:	f023 0302 	bic.w	r3, r3, #2
 8007796:	60d3      	str	r3, [r2, #12]
 8007798:	e007      	b.n	80077aa <HAL_FLASH_Program+0x13e>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800779a:	4b0a      	ldr	r3, [pc, #40]	; (80077c4 <HAL_FLASH_Program+0x158>)
 800779c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80077a0:	4a08      	ldr	r2, [pc, #32]	; (80077c4 <HAL_FLASH_Program+0x158>)
 80077a2:	f023 0302 	bic.w	r3, r3, #2
 80077a6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80077aa:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <HAL_FLASH_Program+0x154>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	751a      	strb	r2, [r3, #20]

  return status;
 80077b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3728      	adds	r7, #40	; 0x28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	0801dbb4 	.word	0x0801dbb4
 80077c0:	240010ac 	.word	0x240010ac
 80077c4:	52002000 	.word	0x52002000

080077c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80077c8:	b480      	push	{r7}
 80077ca:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80077cc:	4b18      	ldr	r3, [pc, #96]	; (8007830 <HAL_FLASH_Unlock+0x68>)
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00d      	beq.n	80077f4 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 80077d8:	4b15      	ldr	r3, [pc, #84]	; (8007830 <HAL_FLASH_Unlock+0x68>)
 80077da:	4a16      	ldr	r2, [pc, #88]	; (8007834 <HAL_FLASH_Unlock+0x6c>)
 80077dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 80077de:	4b14      	ldr	r3, [pc, #80]	; (8007830 <HAL_FLASH_Unlock+0x68>)
 80077e0:	4a15      	ldr	r2, [pc, #84]	; (8007838 <HAL_FLASH_Unlock+0x70>)
 80077e2:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80077e4:	4b12      	ldr	r3, [pc, #72]	; (8007830 <HAL_FLASH_Unlock+0x68>)
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e018      	b.n	8007826 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 80077f4:	4b0e      	ldr	r3, [pc, #56]	; (8007830 <HAL_FLASH_Unlock+0x68>)
 80077f6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d010      	beq.n	8007824 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8007802:	4b0b      	ldr	r3, [pc, #44]	; (8007830 <HAL_FLASH_Unlock+0x68>)
 8007804:	4a0b      	ldr	r2, [pc, #44]	; (8007834 <HAL_FLASH_Unlock+0x6c>)
 8007806:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800780a:	4b09      	ldr	r3, [pc, #36]	; (8007830 <HAL_FLASH_Unlock+0x68>)
 800780c:	4a0a      	ldr	r2, [pc, #40]	; (8007838 <HAL_FLASH_Unlock+0x70>)
 800780e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8007812:	4b07      	ldr	r3, [pc, #28]	; (8007830 <HAL_FLASH_Unlock+0x68>)
 8007814:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e000      	b.n	8007826 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	52002000 	.word	0x52002000
 8007834:	45670123 	.word	0x45670123
 8007838:	cdef89ab 	.word	0xcdef89ab

0800783c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8007840:	4b12      	ldr	r3, [pc, #72]	; (800788c <HAL_FLASH_Lock+0x50>)
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	4a11      	ldr	r2, [pc, #68]	; (800788c <HAL_FLASH_Lock+0x50>)
 8007846:	f043 0301 	orr.w	r3, r3, #1
 800784a:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 800784c:	4b0f      	ldr	r3, [pc, #60]	; (800788c <HAL_FLASH_Lock+0x50>)
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e011      	b.n	8007880 <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 800785c:	4b0b      	ldr	r3, [pc, #44]	; (800788c <HAL_FLASH_Lock+0x50>)
 800785e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007862:	4a0a      	ldr	r2, [pc, #40]	; (800788c <HAL_FLASH_Lock+0x50>)
 8007864:	f043 0301 	orr.w	r3, r3, #1
 8007868:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 800786c:	4b07      	ldr	r3, [pc, #28]	; (800788c <HAL_FLASH_Lock+0x50>)
 800786e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e000      	b.n	8007880 <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	52002000 	.word	0x52002000

08007890 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800789a:	2304      	movs	r3, #4
 800789c:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 80078a2:	f7fb fe59 	bl	8003558 <HAL_GetTick>
 80078a6:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d007      	beq.n	80078be <FLASH_WaitForLastOperation+0x2e>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d004      	beq.n	80078be <FLASH_WaitForLastOperation+0x2e>
 80078b4:	f240 31ed 	movw	r1, #1005	; 0x3ed
 80078b8:	4844      	ldr	r0, [pc, #272]	; (80079cc <FLASH_WaitForLastOperation+0x13c>)
 80078ba:	f7fa f8da 	bl	8001a72 <assert_failed>

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d113      	bne.n	80078ec <FLASH_WaitForLastOperation+0x5c>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 80078c4:	4b42      	ldr	r3, [pc, #264]	; (80079d0 <FLASH_WaitForLastOperation+0x140>)
 80078c6:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80078c8:	e010      	b.n	80078ec <FLASH_WaitForLastOperation+0x5c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d0:	d00c      	beq.n	80078ec <FLASH_WaitForLastOperation+0x5c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80078d2:	f7fb fe41 	bl	8003558 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d302      	bcc.n	80078e8 <FLASH_WaitForLastOperation+0x58>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <FLASH_WaitForLastOperation+0x5c>
      {
        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e06a      	b.n	80079c2 <FLASH_WaitForLastOperation+0x132>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	4b39      	ldr	r3, [pc, #228]	; (80079d4 <FLASH_WaitForLastOperation+0x144>)
 80078f0:	4013      	ands	r3, r2
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d10a      	bne.n	800790e <FLASH_WaitForLastOperation+0x7e>
 80078f8:	4b37      	ldr	r3, [pc, #220]	; (80079d8 <FLASH_WaitForLastOperation+0x148>)
 80078fa:	691a      	ldr	r2, [r3, #16]
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	4013      	ands	r3, r2
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	429a      	cmp	r2, r3
 8007904:	bf0c      	ite	eq
 8007906:	2301      	moveq	r3, #1
 8007908:	2300      	movne	r3, #0
 800790a:	b2db      	uxtb	r3, r3
 800790c:	e00c      	b.n	8007928 <FLASH_WaitForLastOperation+0x98>
 800790e:	4b32      	ldr	r3, [pc, #200]	; (80079d8 <FLASH_WaitForLastOperation+0x148>)
 8007910:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8007914:	43da      	mvns	r2, r3
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	4013      	ands	r3, r2
 800791a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800791e:	2b00      	cmp	r3, #0
 8007920:	bf0c      	ite	eq
 8007922:	2301      	moveq	r3, #1
 8007924:	2300      	movne	r3, #0
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1ce      	bne.n	80078ca <FLASH_WaitForLastOperation+0x3a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d105      	bne.n	800793e <FLASH_WaitForLastOperation+0xae>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8007932:	4b29      	ldr	r3, [pc, #164]	; (80079d8 <FLASH_WaitForLastOperation+0x148>)
 8007934:	691a      	ldr	r2, [r3, #16]
 8007936:	4b29      	ldr	r3, [pc, #164]	; (80079dc <FLASH_WaitForLastOperation+0x14c>)
 8007938:	4013      	ands	r3, r2
 800793a:	613b      	str	r3, [r7, #16]
 800793c:	e007      	b.n	800794e <FLASH_WaitForLastOperation+0xbe>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800793e:	4b26      	ldr	r3, [pc, #152]	; (80079d8 <FLASH_WaitForLastOperation+0x148>)
 8007940:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8007944:	4b25      	ldr	r3, [pc, #148]	; (80079dc <FLASH_WaitForLastOperation+0x14c>)
 8007946:	4013      	ands	r3, r2
 8007948:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800794c:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d017      	beq.n	8007988 <FLASH_WaitForLastOperation+0xf8>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8007958:	4b21      	ldr	r3, [pc, #132]	; (80079e0 <FLASH_WaitForLastOperation+0x150>)
 800795a:	699a      	ldr	r2, [r3, #24]
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	4313      	orrs	r3, r2
 8007960:	4a1f      	ldr	r2, [pc, #124]	; (80079e0 <FLASH_WaitForLastOperation+0x150>)
 8007962:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	4b1b      	ldr	r3, [pc, #108]	; (80079d4 <FLASH_WaitForLastOperation+0x144>)
 8007968:	4013      	ands	r3, r2
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	429a      	cmp	r2, r3
 800796e:	d103      	bne.n	8007978 <FLASH_WaitForLastOperation+0xe8>
 8007970:	4a19      	ldr	r2, [pc, #100]	; (80079d8 <FLASH_WaitForLastOperation+0x148>)
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	6153      	str	r3, [r2, #20]
 8007976:	e005      	b.n	8007984 <FLASH_WaitForLastOperation+0xf4>
 8007978:	4a17      	ldr	r2, [pc, #92]	; (80079d8 <FLASH_WaitForLastOperation+0x148>)
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007980:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e01c      	b.n	80079c2 <FLASH_WaitForLastOperation+0x132>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d10b      	bne.n	80079a6 <FLASH_WaitForLastOperation+0x116>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800798e:	4b12      	ldr	r3, [pc, #72]	; (80079d8 <FLASH_WaitForLastOperation+0x148>)
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800799a:	d111      	bne.n	80079c0 <FLASH_WaitForLastOperation+0x130>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800799c:	4b0e      	ldr	r3, [pc, #56]	; (80079d8 <FLASH_WaitForLastOperation+0x148>)
 800799e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80079a2:	615a      	str	r2, [r3, #20]
 80079a4:	e00c      	b.n	80079c0 <FLASH_WaitForLastOperation+0x130>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 80079a6:	4b0c      	ldr	r3, [pc, #48]	; (80079d8 <FLASH_WaitForLastOperation+0x148>)
 80079a8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80079ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079b4:	d104      	bne.n	80079c0 <FLASH_WaitForLastOperation+0x130>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 80079b6:	4b08      	ldr	r3, [pc, #32]	; (80079d8 <FLASH_WaitForLastOperation+0x148>)
 80079b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80079bc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	0801dbb4 	.word	0x0801dbb4
 80079d0:	80000004 	.word	0x80000004
 80079d4:	1fef000f 	.word	0x1fef000f
 80079d8:	52002000 	.word	0x52002000
 80079dc:	17ee0000 	.word	0x17ee0000
 80079e0:	240010ac 	.word	0x240010ac

080079e4 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]
  uint32_t sector_index;

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d007      	beq.n	8007a0a <HAL_FLASHEx_Erase+0x26>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d003      	beq.n	8007a0a <HAL_FLASHEx_Erase+0x26>
 8007a02:	21b6      	movs	r1, #182	; 0xb6
 8007a04:	4867      	ldr	r0, [pc, #412]	; (8007ba4 <HAL_FLASHEx_Erase+0x1c0>)
 8007a06:	f7fa f834 	bl	8001a72 <assert_failed>
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d00b      	beq.n	8007a2a <HAL_FLASHEx_Erase+0x46>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d007      	beq.n	8007a2a <HAL_FLASHEx_Erase+0x46>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	d003      	beq.n	8007a2a <HAL_FLASHEx_Erase+0x46>
 8007a22:	21b7      	movs	r1, #183	; 0xb7
 8007a24:	485f      	ldr	r0, [pc, #380]	; (8007ba4 <HAL_FLASHEx_Erase+0x1c0>)
 8007a26:	f7fa f824 	bl	8001a72 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007a2a:	4b5f      	ldr	r3, [pc, #380]	; (8007ba8 <HAL_FLASHEx_Erase+0x1c4>)
 8007a2c:	7d1b      	ldrb	r3, [r3, #20]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d101      	bne.n	8007a36 <HAL_FLASHEx_Erase+0x52>
 8007a32:	2302      	movs	r3, #2
 8007a34:	e0b2      	b.n	8007b9c <HAL_FLASHEx_Erase+0x1b8>
 8007a36:	4b5c      	ldr	r3, [pc, #368]	; (8007ba8 <HAL_FLASHEx_Erase+0x1c4>)
 8007a38:	2201      	movs	r2, #1
 8007a3a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007a3c:	4b5a      	ldr	r3, [pc, #360]	; (8007ba8 <HAL_FLASHEx_Erase+0x1c4>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d009      	beq.n	8007a62 <HAL_FLASHEx_Erase+0x7e>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8007a4e:	2101      	movs	r1, #1
 8007a50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a54:	f7ff ff1c 	bl	8007890 <FLASH_WaitForLastOperation>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_FLASHEx_Erase+0x7e>
    {
      status = HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f003 0302 	and.w	r3, r3, #2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d009      	beq.n	8007a82 <HAL_FLASHEx_Erase+0x9e>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8007a6e:	2102      	movs	r1, #2
 8007a70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a74:	f7ff ff0c 	bl	8007890 <FLASH_WaitForLastOperation>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <HAL_FLASHEx_Erase+0x9e>
    {
      status = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f040 8085 	bne.w	8007b94 <HAL_FLASHEx_Erase+0x1b0>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d136      	bne.n	8007b00 <HAL_FLASHEx_Erase+0x11c>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	691a      	ldr	r2, [r3, #16]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	f000 f889 	bl	8007bb4 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00f      	beq.n	8007ace <HAL_FLASHEx_Erase+0xea>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8007aae:	2101      	movs	r1, #1
 8007ab0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007ab4:	f7ff feec 	bl	8007890 <FLASH_WaitForLastOperation>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <HAL_FLASHEx_Erase+0xde>
        {
          status = HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8007ac2:	4b3a      	ldr	r3, [pc, #232]	; (8007bac <HAL_FLASHEx_Erase+0x1c8>)
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	4a39      	ldr	r2, [pc, #228]	; (8007bac <HAL_FLASHEx_Erase+0x1c8>)
 8007ac8:	f023 0308 	bic.w	r3, r3, #8
 8007acc:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d05c      	beq.n	8007b94 <HAL_FLASHEx_Erase+0x1b0>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8007ada:	2102      	movs	r1, #2
 8007adc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007ae0:	f7ff fed6 	bl	8007890 <FLASH_WaitForLastOperation>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <HAL_FLASHEx_Erase+0x10a>
        {
          status = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8007aee:	4b2f      	ldr	r3, [pc, #188]	; (8007bac <HAL_FLASHEx_Erase+0x1c8>)
 8007af0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007af4:	4a2d      	ldr	r2, [pc, #180]	; (8007bac <HAL_FLASHEx_Erase+0x1c8>)
 8007af6:	f023 0308 	bic.w	r3, r3, #8
 8007afa:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8007afe:	e049      	b.n	8007b94 <HAL_FLASHEx_Erase+0x1b0>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	f04f 32ff 	mov.w	r2, #4294967295
 8007b06:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	60bb      	str	r3, [r7, #8]
 8007b0e:	e039      	b.n	8007b84 <HAL_FLASHEx_Erase+0x1a0>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6859      	ldr	r1, [r3, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	68b8      	ldr	r0, [r7, #8]
 8007b1c:	f000 f8d2 	bl	8007cc4 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00c      	beq.n	8007b46 <HAL_FLASHEx_Erase+0x162>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007b32:	f7ff fead 	bl	8007890 <FLASH_WaitForLastOperation>
 8007b36:	4603      	mov	r3, r0
 8007b38:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8007b3a:	4b1c      	ldr	r3, [pc, #112]	; (8007bac <HAL_FLASHEx_Erase+0x1c8>)
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	491b      	ldr	r1, [pc, #108]	; (8007bac <HAL_FLASHEx_Erase+0x1c8>)
 8007b40:	4b1b      	ldr	r3, [pc, #108]	; (8007bb0 <HAL_FLASHEx_Erase+0x1cc>)
 8007b42:	4013      	ands	r3, r2
 8007b44:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00e      	beq.n	8007b70 <HAL_FLASHEx_Erase+0x18c>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8007b52:	2102      	movs	r1, #2
 8007b54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007b58:	f7ff fe9a 	bl	8007890 <FLASH_WaitForLastOperation>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8007b60:	4b12      	ldr	r3, [pc, #72]	; (8007bac <HAL_FLASHEx_Erase+0x1c8>)
 8007b62:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8007b66:	4911      	ldr	r1, [pc, #68]	; (8007bac <HAL_FLASHEx_Erase+0x1c8>)
 8007b68:	4b11      	ldr	r3, [pc, #68]	; (8007bb0 <HAL_FLASHEx_Erase+0x1cc>)
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <HAL_FLASHEx_Erase+0x19a>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	601a      	str	r2, [r3, #0]
          break;
 8007b7c:	e00a      	b.n	8007b94 <HAL_FLASHEx_Erase+0x1b0>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	3301      	adds	r3, #1
 8007b82:	60bb      	str	r3, [r7, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d3bd      	bcc.n	8007b10 <HAL_FLASHEx_Erase+0x12c>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007b94:	4b04      	ldr	r3, [pc, #16]	; (8007ba8 <HAL_FLASHEx_Erase+0x1c4>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	751a      	strb	r2, [r3, #20]

  return status;
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	0801dbf0 	.word	0x0801dbf0
 8007ba8:	240010ac 	.word	0x240010ac
 8007bac:	52002000 	.word	0x52002000
 8007bb0:	fffff8fb 	.word	0xfffff8fb

08007bb4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
#if defined (FLASH_CR_PSIZE)
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00d      	beq.n	8007be0 <FLASH_MassErase+0x2c>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b10      	cmp	r3, #16
 8007bc8:	d00a      	beq.n	8007be0 <FLASH_MassErase+0x2c>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b20      	cmp	r3, #32
 8007bce:	d007      	beq.n	8007be0 <FLASH_MassErase+0x2c>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b30      	cmp	r3, #48	; 0x30
 8007bd4:	d004      	beq.n	8007be0 <FLASH_MassErase+0x2c>
 8007bd6:	f44f 7155 	mov.w	r1, #852	; 0x354
 8007bda:	4838      	ldr	r0, [pc, #224]	; (8007cbc <FLASH_MassErase+0x108>)
 8007bdc:	f7f9 ff49 	bl	8001a72 <assert_failed>
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d00a      	beq.n	8007bfc <FLASH_MassErase+0x48>
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d007      	beq.n	8007bfc <FLASH_MassErase+0x48>
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d004      	beq.n	8007bfc <FLASH_MassErase+0x48>
 8007bf2:	f44f 7156 	mov.w	r1, #856	; 0x358
 8007bf6:	4831      	ldr	r0, [pc, #196]	; (8007cbc <FLASH_MassErase+0x108>)
 8007bf8:	f7f9 ff3b 	bl	8001a72 <assert_failed>

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d122      	bne.n	8007c4c <FLASH_MassErase+0x98>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8007c06:	4b2e      	ldr	r3, [pc, #184]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	4a2d      	ldr	r2, [pc, #180]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c0c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007c10:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8007c12:	4b2b      	ldr	r3, [pc, #172]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c14:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007c18:	4a29      	ldr	r2, [pc, #164]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007c1e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 8007c22:	4b27      	ldr	r3, [pc, #156]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c24:	68da      	ldr	r2, [r3, #12]
 8007c26:	4926      	ldr	r1, [pc, #152]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 8007c2e:	4b24      	ldr	r3, [pc, #144]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c30:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8007c34:	4922      	ldr	r1, [pc, #136]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8007c3e:	4b20      	ldr	r3, [pc, #128]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	4a1f      	ldr	r2, [pc, #124]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c44:	f043 0310 	orr.w	r3, r3, #16
 8007c48:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8007c4a:	e033      	b.n	8007cb4 <FLASH_MassErase+0x100>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d011      	beq.n	8007c7a <FLASH_MassErase+0xc6>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8007c56:	4b1a      	ldr	r3, [pc, #104]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	4a19      	ldr	r2, [pc, #100]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c5c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007c60:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8007c62:	4b17      	ldr	r3, [pc, #92]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c64:	68da      	ldr	r2, [r3, #12]
 8007c66:	4916      	ldr	r1, [pc, #88]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8007c6e:	4b14      	ldr	r3, [pc, #80]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	4a13      	ldr	r2, [pc, #76]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c74:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8007c78:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	f003 0302 	and.w	r3, r3, #2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d017      	beq.n	8007cb4 <FLASH_MassErase+0x100>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8007c84:	4b0e      	ldr	r3, [pc, #56]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c86:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007c8a:	4a0d      	ldr	r2, [pc, #52]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c8c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007c90:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 8007c94:	4b0a      	ldr	r3, [pc, #40]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c96:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8007c9a:	4909      	ldr	r1, [pc, #36]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8007ca4:	4b06      	ldr	r3, [pc, #24]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007ca6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007caa:	4a05      	ldr	r2, [pc, #20]	; (8007cc0 <FLASH_MassErase+0x10c>)
 8007cac:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8007cb0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 8007cb4:	bf00      	nop
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	0801dbf0 	.word	0x0801dbf0
 8007cc0:	52002000 	.word	0x52002000

08007cc4 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FLASH_SECTOR(Sector));
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b07      	cmp	r3, #7
 8007cd4:	d904      	bls.n	8007ce0 <FLASH_Erase_Sector+0x1c>
 8007cd6:	f240 319f 	movw	r1, #927	; 0x39f
 8007cda:	4829      	ldr	r0, [pc, #164]	; (8007d80 <FLASH_Erase_Sector+0xbc>)
 8007cdc:	f7f9 fec9 	bl	8001a72 <assert_failed>
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d007      	beq.n	8007cf6 <FLASH_Erase_Sector+0x32>
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d004      	beq.n	8007cf6 <FLASH_Erase_Sector+0x32>
 8007cec:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 8007cf0:	4823      	ldr	r0, [pc, #140]	; (8007d80 <FLASH_Erase_Sector+0xbc>)
 8007cf2:	f7f9 febe 	bl	8001a72 <assert_failed>
#if defined (FLASH_CR_PSIZE)
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00d      	beq.n	8007d18 <FLASH_Erase_Sector+0x54>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b10      	cmp	r3, #16
 8007d00:	d00a      	beq.n	8007d18 <FLASH_Erase_Sector+0x54>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b20      	cmp	r3, #32
 8007d06:	d007      	beq.n	8007d18 <FLASH_Erase_Sector+0x54>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b30      	cmp	r3, #48	; 0x30
 8007d0c:	d004      	beq.n	8007d18 <FLASH_Erase_Sector+0x54>
 8007d0e:	f240 31a2 	movw	r1, #930	; 0x3a2
 8007d12:	481b      	ldr	r0, [pc, #108]	; (8007d80 <FLASH_Erase_Sector+0xbc>)
 8007d14:	f7f9 fead 	bl	8001a72 <assert_failed>
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d010      	beq.n	8007d44 <FLASH_Erase_Sector+0x80>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8007d22:	4b18      	ldr	r3, [pc, #96]	; (8007d84 <FLASH_Erase_Sector+0xc0>)
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	4a17      	ldr	r2, [pc, #92]	; (8007d84 <FLASH_Erase_Sector+0xc0>)
 8007d28:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8007d2c:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8007d2e:	4b15      	ldr	r3, [pc, #84]	; (8007d84 <FLASH_Erase_Sector+0xc0>)
 8007d30:	68da      	ldr	r2, [r3, #12]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	0219      	lsls	r1, r3, #8
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	430b      	orrs	r3, r1
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	4a11      	ldr	r2, [pc, #68]	; (8007d84 <FLASH_Erase_Sector+0xc0>)
 8007d3e:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8007d42:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d014      	beq.n	8007d78 <FLASH_Erase_Sector+0xb4>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8007d4e:	4b0d      	ldr	r3, [pc, #52]	; (8007d84 <FLASH_Erase_Sector+0xc0>)
 8007d50:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007d54:	4a0b      	ldr	r2, [pc, #44]	; (8007d84 <FLASH_Erase_Sector+0xc0>)
 8007d56:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8007d5a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8007d5e:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <FLASH_Erase_Sector+0xc0>)
 8007d60:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	0219      	lsls	r1, r3, #8
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	430b      	orrs	r3, r1
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	4a05      	ldr	r2, [pc, #20]	; (8007d84 <FLASH_Erase_Sector+0xc0>)
 8007d70:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8007d74:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8007d78:	bf00      	nop
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	0801dbf0 	.word	0x0801dbf0
 8007d84:	52002000 	.word	0x52002000

08007d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d96:	4b44      	ldr	r3, [pc, #272]	; (8007ea8 <HAL_GPIO_Init+0x120>)
 8007d98:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a43      	ldr	r2, [pc, #268]	; (8007eac <HAL_GPIO_Init+0x124>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d02b      	beq.n	8007dfa <HAL_GPIO_Init+0x72>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a42      	ldr	r2, [pc, #264]	; (8007eb0 <HAL_GPIO_Init+0x128>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d027      	beq.n	8007dfa <HAL_GPIO_Init+0x72>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a41      	ldr	r2, [pc, #260]	; (8007eb4 <HAL_GPIO_Init+0x12c>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d023      	beq.n	8007dfa <HAL_GPIO_Init+0x72>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a40      	ldr	r2, [pc, #256]	; (8007eb8 <HAL_GPIO_Init+0x130>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d01f      	beq.n	8007dfa <HAL_GPIO_Init+0x72>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a3f      	ldr	r2, [pc, #252]	; (8007ebc <HAL_GPIO_Init+0x134>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d01b      	beq.n	8007dfa <HAL_GPIO_Init+0x72>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a3e      	ldr	r2, [pc, #248]	; (8007ec0 <HAL_GPIO_Init+0x138>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d017      	beq.n	8007dfa <HAL_GPIO_Init+0x72>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a3d      	ldr	r2, [pc, #244]	; (8007ec4 <HAL_GPIO_Init+0x13c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d013      	beq.n	8007dfa <HAL_GPIO_Init+0x72>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a3c      	ldr	r2, [pc, #240]	; (8007ec8 <HAL_GPIO_Init+0x140>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00f      	beq.n	8007dfa <HAL_GPIO_Init+0x72>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a3b      	ldr	r2, [pc, #236]	; (8007ecc <HAL_GPIO_Init+0x144>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d00b      	beq.n	8007dfa <HAL_GPIO_Init+0x72>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a3a      	ldr	r2, [pc, #232]	; (8007ed0 <HAL_GPIO_Init+0x148>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d007      	beq.n	8007dfa <HAL_GPIO_Init+0x72>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a39      	ldr	r2, [pc, #228]	; (8007ed4 <HAL_GPIO_Init+0x14c>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d003      	beq.n	8007dfa <HAL_GPIO_Init+0x72>
 8007df2:	21b3      	movs	r1, #179	; 0xb3
 8007df4:	4838      	ldr	r0, [pc, #224]	; (8007ed8 <HAL_GPIO_Init+0x150>)
 8007df6:	f7f9 fe3c 	bl	8001a72 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d005      	beq.n	8007e10 <HAL_GPIO_Init+0x88>
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	4b34      	ldr	r3, [pc, #208]	; (8007edc <HAL_GPIO_Init+0x154>)
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <HAL_GPIO_Init+0x90>
 8007e10:	21b4      	movs	r1, #180	; 0xb4
 8007e12:	4831      	ldr	r0, [pc, #196]	; (8007ed8 <HAL_GPIO_Init+0x150>)
 8007e14:	f7f9 fe2d 	bl	8001a72 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 8252 	beq.w	80082c6 <HAL_GPIO_Init+0x53e>
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	f000 824d 	beq.w	80082c6 <HAL_GPIO_Init+0x53e>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	2b11      	cmp	r3, #17
 8007e32:	f000 8248 	beq.w	80082c6 <HAL_GPIO_Init+0x53e>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	f000 8243 	beq.w	80082c6 <HAL_GPIO_Init+0x53e>
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	2b12      	cmp	r3, #18
 8007e46:	f000 823e 	beq.w	80082c6 <HAL_GPIO_Init+0x53e>
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8007e52:	f000 8238 	beq.w	80082c6 <HAL_GPIO_Init+0x53e>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8007e5e:	f000 8232 	beq.w	80082c6 <HAL_GPIO_Init+0x53e>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8007e6a:	f000 822c 	beq.w	80082c6 <HAL_GPIO_Init+0x53e>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8007e76:	f000 8226 	beq.w	80082c6 <HAL_GPIO_Init+0x53e>
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8007e82:	f000 8220 	beq.w	80082c6 <HAL_GPIO_Init+0x53e>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8007e8e:	f000 821a 	beq.w	80082c6 <HAL_GPIO_Init+0x53e>
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	f000 8215 	beq.w	80082c6 <HAL_GPIO_Init+0x53e>
 8007e9c:	21b5      	movs	r1, #181	; 0xb5
 8007e9e:	480e      	ldr	r0, [pc, #56]	; (8007ed8 <HAL_GPIO_Init+0x150>)
 8007ea0:	f7f9 fde7 	bl	8001a72 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ea4:	e20f      	b.n	80082c6 <HAL_GPIO_Init+0x53e>
 8007ea6:	bf00      	nop
 8007ea8:	58000080 	.word	0x58000080
 8007eac:	58020000 	.word	0x58020000
 8007eb0:	58020400 	.word	0x58020400
 8007eb4:	58020800 	.word	0x58020800
 8007eb8:	58020c00 	.word	0x58020c00
 8007ebc:	58021000 	.word	0x58021000
 8007ec0:	58021400 	.word	0x58021400
 8007ec4:	58021800 	.word	0x58021800
 8007ec8:	58021c00 	.word	0x58021c00
 8007ecc:	58022000 	.word	0x58022000
 8007ed0:	58022400 	.word	0x58022400
 8007ed4:	58022800 	.word	0x58022800
 8007ed8:	0801dc30 	.word	0x0801dc30
 8007edc:	ffff0000 	.word	0xffff0000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8007eec:	4013      	ands	r3, r2
 8007eee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 81e4 	beq.w	80082c0 <HAL_GPIO_Init+0x538>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f003 0303 	and.w	r3, r3, #3
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d005      	beq.n	8007f10 <HAL_GPIO_Init+0x188>
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f003 0303 	and.w	r3, r3, #3
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d144      	bne.n	8007f9a <HAL_GPIO_Init+0x212>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00f      	beq.n	8007f38 <HAL_GPIO_Init+0x1b0>
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d00b      	beq.n	8007f38 <HAL_GPIO_Init+0x1b0>
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d007      	beq.n	8007f38 <HAL_GPIO_Init+0x1b0>
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	d003      	beq.n	8007f38 <HAL_GPIO_Init+0x1b0>
 8007f30:	21c4      	movs	r1, #196	; 0xc4
 8007f32:	489a      	ldr	r0, [pc, #616]	; (800819c <HAL_GPIO_Init+0x414>)
 8007f34:	f7f9 fd9d 	bl	8001a72 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	2203      	movs	r2, #3
 8007f44:	fa02 f303 	lsl.w	r3, r2, r3
 8007f48:	43db      	mvns	r3, r3
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f6e:	2201      	movs	r2, #1
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	fa02 f303 	lsl.w	r3, r2, r3
 8007f76:	43db      	mvns	r3, r3
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	091b      	lsrs	r3, r3, #4
 8007f84:	f003 0201 	and.w	r2, r3, #1
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f003 0303 	and.w	r3, r3, #3
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d027      	beq.n	8007ff6 <HAL_GPIO_Init+0x26e>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00b      	beq.n	8007fc6 <HAL_GPIO_Init+0x23e>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d007      	beq.n	8007fc6 <HAL_GPIO_Init+0x23e>
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d003      	beq.n	8007fc6 <HAL_GPIO_Init+0x23e>
 8007fbe:	21d6      	movs	r1, #214	; 0xd6
 8007fc0:	4876      	ldr	r0, [pc, #472]	; (800819c <HAL_GPIO_Init+0x414>)
 8007fc2:	f7f9 fd56 	bl	8001a72 <assert_failed>

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	005b      	lsls	r3, r3, #1
 8007fd0:	2203      	movs	r2, #3
 8007fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd6:	43db      	mvns	r3, r3
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	689a      	ldr	r2, [r3, #8]
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f003 0303 	and.w	r3, r3, #3
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d15b      	bne.n	80080ba <HAL_GPIO_Init+0x332>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a66      	ldr	r2, [pc, #408]	; (80081a0 <HAL_GPIO_Init+0x418>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d02b      	beq.n	8008062 <HAL_GPIO_Init+0x2da>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a65      	ldr	r2, [pc, #404]	; (80081a4 <HAL_GPIO_Init+0x41c>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d027      	beq.n	8008062 <HAL_GPIO_Init+0x2da>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a64      	ldr	r2, [pc, #400]	; (80081a8 <HAL_GPIO_Init+0x420>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d023      	beq.n	8008062 <HAL_GPIO_Init+0x2da>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a63      	ldr	r2, [pc, #396]	; (80081ac <HAL_GPIO_Init+0x424>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d01f      	beq.n	8008062 <HAL_GPIO_Init+0x2da>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a62      	ldr	r2, [pc, #392]	; (80081b0 <HAL_GPIO_Init+0x428>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d01b      	beq.n	8008062 <HAL_GPIO_Init+0x2da>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a61      	ldr	r2, [pc, #388]	; (80081b4 <HAL_GPIO_Init+0x42c>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d017      	beq.n	8008062 <HAL_GPIO_Init+0x2da>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a60      	ldr	r2, [pc, #384]	; (80081b8 <HAL_GPIO_Init+0x430>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d013      	beq.n	8008062 <HAL_GPIO_Init+0x2da>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a5f      	ldr	r2, [pc, #380]	; (80081bc <HAL_GPIO_Init+0x434>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d00f      	beq.n	8008062 <HAL_GPIO_Init+0x2da>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a5e      	ldr	r2, [pc, #376]	; (80081c0 <HAL_GPIO_Init+0x438>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d00b      	beq.n	8008062 <HAL_GPIO_Init+0x2da>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a5d      	ldr	r2, [pc, #372]	; (80081c4 <HAL_GPIO_Init+0x43c>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d007      	beq.n	8008062 <HAL_GPIO_Init+0x2da>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a5c      	ldr	r2, [pc, #368]	; (80081c8 <HAL_GPIO_Init+0x440>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d003      	beq.n	8008062 <HAL_GPIO_Init+0x2da>
 800805a:	21e3      	movs	r1, #227	; 0xe3
 800805c:	484f      	ldr	r0, [pc, #316]	; (800819c <HAL_GPIO_Init+0x414>)
 800805e:	f7f9 fd08 	bl	8001a72 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	2b0f      	cmp	r3, #15
 8008068:	d903      	bls.n	8008072 <HAL_GPIO_Init+0x2ea>
 800806a:	21e4      	movs	r1, #228	; 0xe4
 800806c:	484b      	ldr	r0, [pc, #300]	; (800819c <HAL_GPIO_Init+0x414>)
 800806e:	f7f9 fd00 	bl	8001a72 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	08da      	lsrs	r2, r3, #3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	3208      	adds	r2, #8
 800807a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800807e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	220f      	movs	r2, #15
 800808a:	fa02 f303 	lsl.w	r3, r2, r3
 800808e:	43db      	mvns	r3, r3
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	4013      	ands	r3, r2
 8008094:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	691a      	ldr	r2, [r3, #16]
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	f003 0307 	and.w	r3, r3, #7
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	fa02 f303 	lsl.w	r3, r2, r3
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	08da      	lsrs	r2, r3, #3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3208      	adds	r2, #8
 80080b4:	69b9      	ldr	r1, [r7, #24]
 80080b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	005b      	lsls	r3, r3, #1
 80080c4:	2203      	movs	r2, #3
 80080c6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ca:	43db      	mvns	r3, r3
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	4013      	ands	r3, r2
 80080d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f003 0203 	and.w	r2, r3, #3
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	fa02 f303 	lsl.w	r3, r2, r3
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	69ba      	ldr	r2, [r7, #24]
 80080ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 80e2 	beq.w	80082c0 <HAL_GPIO_Init+0x538>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080fc:	4b33      	ldr	r3, [pc, #204]	; (80081cc <HAL_GPIO_Init+0x444>)
 80080fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008102:	4a32      	ldr	r2, [pc, #200]	; (80081cc <HAL_GPIO_Init+0x444>)
 8008104:	f043 0302 	orr.w	r3, r3, #2
 8008108:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800810c:	4b2f      	ldr	r3, [pc, #188]	; (80081cc <HAL_GPIO_Init+0x444>)
 800810e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800811a:	4a2d      	ldr	r2, [pc, #180]	; (80081d0 <HAL_GPIO_Init+0x448>)
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	089b      	lsrs	r3, r3, #2
 8008120:	3302      	adds	r3, #2
 8008122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	f003 0303 	and.w	r3, r3, #3
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	220f      	movs	r2, #15
 8008132:	fa02 f303 	lsl.w	r3, r2, r3
 8008136:	43db      	mvns	r3, r3
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	4013      	ands	r3, r2
 800813c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a17      	ldr	r2, [pc, #92]	; (80081a0 <HAL_GPIO_Init+0x418>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d054      	beq.n	80081f0 <HAL_GPIO_Init+0x468>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a16      	ldr	r2, [pc, #88]	; (80081a4 <HAL_GPIO_Init+0x41c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d04e      	beq.n	80081ec <HAL_GPIO_Init+0x464>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a15      	ldr	r2, [pc, #84]	; (80081a8 <HAL_GPIO_Init+0x420>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d048      	beq.n	80081e8 <HAL_GPIO_Init+0x460>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a14      	ldr	r2, [pc, #80]	; (80081ac <HAL_GPIO_Init+0x424>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d042      	beq.n	80081e4 <HAL_GPIO_Init+0x45c>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a13      	ldr	r2, [pc, #76]	; (80081b0 <HAL_GPIO_Init+0x428>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d03c      	beq.n	80081e0 <HAL_GPIO_Init+0x458>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a12      	ldr	r2, [pc, #72]	; (80081b4 <HAL_GPIO_Init+0x42c>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d036      	beq.n	80081dc <HAL_GPIO_Init+0x454>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a11      	ldr	r2, [pc, #68]	; (80081b8 <HAL_GPIO_Init+0x430>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d030      	beq.n	80081d8 <HAL_GPIO_Init+0x450>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a10      	ldr	r2, [pc, #64]	; (80081bc <HAL_GPIO_Init+0x434>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d02a      	beq.n	80081d4 <HAL_GPIO_Init+0x44c>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a0f      	ldr	r2, [pc, #60]	; (80081c0 <HAL_GPIO_Init+0x438>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d007      	beq.n	8008196 <HAL_GPIO_Init+0x40e>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a0e      	ldr	r2, [pc, #56]	; (80081c4 <HAL_GPIO_Init+0x43c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d101      	bne.n	8008192 <HAL_GPIO_Init+0x40a>
 800818e:	2309      	movs	r3, #9
 8008190:	e02f      	b.n	80081f2 <HAL_GPIO_Init+0x46a>
 8008192:	230a      	movs	r3, #10
 8008194:	e02d      	b.n	80081f2 <HAL_GPIO_Init+0x46a>
 8008196:	2308      	movs	r3, #8
 8008198:	e02b      	b.n	80081f2 <HAL_GPIO_Init+0x46a>
 800819a:	bf00      	nop
 800819c:	0801dc30 	.word	0x0801dc30
 80081a0:	58020000 	.word	0x58020000
 80081a4:	58020400 	.word	0x58020400
 80081a8:	58020800 	.word	0x58020800
 80081ac:	58020c00 	.word	0x58020c00
 80081b0:	58021000 	.word	0x58021000
 80081b4:	58021400 	.word	0x58021400
 80081b8:	58021800 	.word	0x58021800
 80081bc:	58021c00 	.word	0x58021c00
 80081c0:	58022000 	.word	0x58022000
 80081c4:	58022400 	.word	0x58022400
 80081c8:	58022800 	.word	0x58022800
 80081cc:	58024400 	.word	0x58024400
 80081d0:	58000400 	.word	0x58000400
 80081d4:	2307      	movs	r3, #7
 80081d6:	e00c      	b.n	80081f2 <HAL_GPIO_Init+0x46a>
 80081d8:	2306      	movs	r3, #6
 80081da:	e00a      	b.n	80081f2 <HAL_GPIO_Init+0x46a>
 80081dc:	2305      	movs	r3, #5
 80081de:	e008      	b.n	80081f2 <HAL_GPIO_Init+0x46a>
 80081e0:	2304      	movs	r3, #4
 80081e2:	e006      	b.n	80081f2 <HAL_GPIO_Init+0x46a>
 80081e4:	2303      	movs	r3, #3
 80081e6:	e004      	b.n	80081f2 <HAL_GPIO_Init+0x46a>
 80081e8:	2302      	movs	r3, #2
 80081ea:	e002      	b.n	80081f2 <HAL_GPIO_Init+0x46a>
 80081ec:	2301      	movs	r3, #1
 80081ee:	e000      	b.n	80081f2 <HAL_GPIO_Init+0x46a>
 80081f0:	2300      	movs	r3, #0
 80081f2:	69fa      	ldr	r2, [r7, #28]
 80081f4:	f002 0203 	and.w	r2, r2, #3
 80081f8:	0092      	lsls	r2, r2, #2
 80081fa:	4093      	lsls	r3, r2
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	4313      	orrs	r3, r2
 8008200:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008202:	4937      	ldr	r1, [pc, #220]	; (80082e0 <HAL_GPIO_Init+0x558>)
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	089b      	lsrs	r3, r3, #2
 8008208:	3302      	adds	r3, #2
 800820a:	69ba      	ldr	r2, [r7, #24]
 800820c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	43db      	mvns	r3, r3
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	4013      	ands	r3, r2
 8008220:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <HAL_GPIO_Init+0x4ae>
        {
          temp |= iocurrent;
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	4313      	orrs	r3, r2
 8008234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800823e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	43db      	mvns	r3, r3
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	4013      	ands	r3, r2
 800824e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <HAL_GPIO_Init+0x4dc>
        {
          temp |= iocurrent;
 800825c:	69ba      	ldr	r2, [r7, #24]
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	4313      	orrs	r3, r2
 8008262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	43db      	mvns	r3, r3
 8008276:	69ba      	ldr	r2, [r7, #24]
 8008278:	4013      	ands	r3, r2
 800827a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <HAL_GPIO_Init+0x508>
        {
          temp |= iocurrent;
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	4313      	orrs	r3, r2
 800828e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	69ba      	ldr	r2, [r7, #24]
 8008294:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	43db      	mvns	r3, r3
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	4013      	ands	r3, r2
 80082a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <HAL_GPIO_Init+0x532>
        {
          temp |= iocurrent;
 80082b2:	69ba      	ldr	r2, [r7, #24]
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	3301      	adds	r3, #1
 80082c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	fa22 f303 	lsr.w	r3, r2, r3
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f47f ae05 	bne.w	8007ee0 <HAL_GPIO_Init+0x158>
  }
}
 80082d6:	bf00      	nop
 80082d8:	bf00      	nop
 80082da:	3720      	adds	r7, #32
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	58000400 	.word	0x58000400

080082e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80082ee:	2300      	movs	r3, #0
 80082f0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80082f2:	4b94      	ldr	r3, [pc, #592]	; (8008544 <HAL_GPIO_DeInit+0x260>)
 80082f4:	613b      	str	r3, [r7, #16]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a93      	ldr	r2, [pc, #588]	; (8008548 <HAL_GPIO_DeInit+0x264>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d02c      	beq.n	8008358 <HAL_GPIO_DeInit+0x74>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a92      	ldr	r2, [pc, #584]	; (800854c <HAL_GPIO_DeInit+0x268>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d028      	beq.n	8008358 <HAL_GPIO_DeInit+0x74>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a91      	ldr	r2, [pc, #580]	; (8008550 <HAL_GPIO_DeInit+0x26c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d024      	beq.n	8008358 <HAL_GPIO_DeInit+0x74>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a90      	ldr	r2, [pc, #576]	; (8008554 <HAL_GPIO_DeInit+0x270>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d020      	beq.n	8008358 <HAL_GPIO_DeInit+0x74>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a8f      	ldr	r2, [pc, #572]	; (8008558 <HAL_GPIO_DeInit+0x274>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d01c      	beq.n	8008358 <HAL_GPIO_DeInit+0x74>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a8e      	ldr	r2, [pc, #568]	; (800855c <HAL_GPIO_DeInit+0x278>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d018      	beq.n	8008358 <HAL_GPIO_DeInit+0x74>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a8d      	ldr	r2, [pc, #564]	; (8008560 <HAL_GPIO_DeInit+0x27c>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d014      	beq.n	8008358 <HAL_GPIO_DeInit+0x74>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a8c      	ldr	r2, [pc, #560]	; (8008564 <HAL_GPIO_DeInit+0x280>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d010      	beq.n	8008358 <HAL_GPIO_DeInit+0x74>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a8b      	ldr	r2, [pc, #556]	; (8008568 <HAL_GPIO_DeInit+0x284>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d00c      	beq.n	8008358 <HAL_GPIO_DeInit+0x74>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a8a      	ldr	r2, [pc, #552]	; (800856c <HAL_GPIO_DeInit+0x288>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d008      	beq.n	8008358 <HAL_GPIO_DeInit+0x74>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a89      	ldr	r2, [pc, #548]	; (8008570 <HAL_GPIO_DeInit+0x28c>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d004      	beq.n	8008358 <HAL_GPIO_DeInit+0x74>
 800834e:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8008352:	4888      	ldr	r0, [pc, #544]	; (8008574 <HAL_GPIO_DeInit+0x290>)
 8008354:	f7f9 fb8d 	bl	8001a72 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	b29b      	uxth	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	d005      	beq.n	800836c <HAL_GPIO_DeInit+0x88>
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	4b85      	ldr	r3, [pc, #532]	; (8008578 <HAL_GPIO_DeInit+0x294>)
 8008364:	4013      	ands	r3, r2
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 80e0 	beq.w	800852c <HAL_GPIO_DeInit+0x248>
 800836c:	f240 113d 	movw	r1, #317	; 0x13d
 8008370:	4880      	ldr	r0, [pc, #512]	; (8008574 <HAL_GPIO_DeInit+0x290>)
 8008372:	f7f9 fb7e 	bl	8001a72 <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008376:	e0d9      	b.n	800852c <HAL_GPIO_DeInit+0x248>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008378:	2201      	movs	r2, #1
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	fa02 f303 	lsl.w	r3, r2, r3
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	4013      	ands	r3, r2
 8008384:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 80cc 	beq.w	8008526 <HAL_GPIO_DeInit+0x242>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800838e:	4a7b      	ldr	r2, [pc, #492]	; (800857c <HAL_GPIO_DeInit+0x298>)
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	089b      	lsrs	r3, r3, #2
 8008394:	3302      	adds	r3, #2
 8008396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800839a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	f003 0303 	and.w	r3, r3, #3
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	220f      	movs	r2, #15
 80083a6:	fa02 f303 	lsl.w	r3, r2, r3
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	4013      	ands	r3, r2
 80083ae:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a65      	ldr	r2, [pc, #404]	; (8008548 <HAL_GPIO_DeInit+0x264>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d037      	beq.n	8008428 <HAL_GPIO_DeInit+0x144>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a64      	ldr	r2, [pc, #400]	; (800854c <HAL_GPIO_DeInit+0x268>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d031      	beq.n	8008424 <HAL_GPIO_DeInit+0x140>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a63      	ldr	r2, [pc, #396]	; (8008550 <HAL_GPIO_DeInit+0x26c>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d02b      	beq.n	8008420 <HAL_GPIO_DeInit+0x13c>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a62      	ldr	r2, [pc, #392]	; (8008554 <HAL_GPIO_DeInit+0x270>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d025      	beq.n	800841c <HAL_GPIO_DeInit+0x138>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a61      	ldr	r2, [pc, #388]	; (8008558 <HAL_GPIO_DeInit+0x274>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d01f      	beq.n	8008418 <HAL_GPIO_DeInit+0x134>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a60      	ldr	r2, [pc, #384]	; (800855c <HAL_GPIO_DeInit+0x278>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d019      	beq.n	8008414 <HAL_GPIO_DeInit+0x130>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a5f      	ldr	r2, [pc, #380]	; (8008560 <HAL_GPIO_DeInit+0x27c>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d013      	beq.n	8008410 <HAL_GPIO_DeInit+0x12c>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a5e      	ldr	r2, [pc, #376]	; (8008564 <HAL_GPIO_DeInit+0x280>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00d      	beq.n	800840c <HAL_GPIO_DeInit+0x128>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a5d      	ldr	r2, [pc, #372]	; (8008568 <HAL_GPIO_DeInit+0x284>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d007      	beq.n	8008408 <HAL_GPIO_DeInit+0x124>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a5c      	ldr	r2, [pc, #368]	; (800856c <HAL_GPIO_DeInit+0x288>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d101      	bne.n	8008404 <HAL_GPIO_DeInit+0x120>
 8008400:	2309      	movs	r3, #9
 8008402:	e012      	b.n	800842a <HAL_GPIO_DeInit+0x146>
 8008404:	230a      	movs	r3, #10
 8008406:	e010      	b.n	800842a <HAL_GPIO_DeInit+0x146>
 8008408:	2308      	movs	r3, #8
 800840a:	e00e      	b.n	800842a <HAL_GPIO_DeInit+0x146>
 800840c:	2307      	movs	r3, #7
 800840e:	e00c      	b.n	800842a <HAL_GPIO_DeInit+0x146>
 8008410:	2306      	movs	r3, #6
 8008412:	e00a      	b.n	800842a <HAL_GPIO_DeInit+0x146>
 8008414:	2305      	movs	r3, #5
 8008416:	e008      	b.n	800842a <HAL_GPIO_DeInit+0x146>
 8008418:	2304      	movs	r3, #4
 800841a:	e006      	b.n	800842a <HAL_GPIO_DeInit+0x146>
 800841c:	2303      	movs	r3, #3
 800841e:	e004      	b.n	800842a <HAL_GPIO_DeInit+0x146>
 8008420:	2302      	movs	r3, #2
 8008422:	e002      	b.n	800842a <HAL_GPIO_DeInit+0x146>
 8008424:	2301      	movs	r3, #1
 8008426:	e000      	b.n	800842a <HAL_GPIO_DeInit+0x146>
 8008428:	2300      	movs	r3, #0
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	f002 0203 	and.w	r2, r2, #3
 8008430:	0092      	lsls	r2, r2, #2
 8008432:	4093      	lsls	r3, r2
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	429a      	cmp	r2, r3
 8008438:	d136      	bne.n	80084a8 <HAL_GPIO_DeInit+0x1c4>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	43db      	mvns	r3, r3
 8008442:	401a      	ands	r2, r3
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	43db      	mvns	r3, r3
 8008450:	401a      	ands	r2, r3
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	43db      	mvns	r3, r3
 8008460:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008464:	4013      	ands	r3, r2
 8008466:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	43db      	mvns	r3, r3
 8008472:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008476:	4013      	ands	r3, r2
 8008478:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f003 0303 	and.w	r3, r3, #3
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	220f      	movs	r2, #15
 8008484:	fa02 f303 	lsl.w	r3, r2, r3
 8008488:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800848a:	4a3c      	ldr	r2, [pc, #240]	; (800857c <HAL_GPIO_DeInit+0x298>)
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	089b      	lsrs	r3, r3, #2
 8008490:	3302      	adds	r3, #2
 8008492:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	43da      	mvns	r2, r3
 800849a:	4838      	ldr	r0, [pc, #224]	; (800857c <HAL_GPIO_DeInit+0x298>)
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	089b      	lsrs	r3, r3, #2
 80084a0:	400a      	ands	r2, r1
 80084a2:	3302      	adds	r3, #2
 80084a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	005b      	lsls	r3, r3, #1
 80084b0:	2103      	movs	r1, #3
 80084b2:	fa01 f303 	lsl.w	r3, r1, r3
 80084b6:	431a      	orrs	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	08da      	lsrs	r2, r3, #3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3208      	adds	r2, #8
 80084c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f003 0307 	and.w	r3, r3, #7
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	220f      	movs	r2, #15
 80084d2:	fa02 f303 	lsl.w	r3, r2, r3
 80084d6:	43db      	mvns	r3, r3
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	08d2      	lsrs	r2, r2, #3
 80084dc:	4019      	ands	r1, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	3208      	adds	r2, #8
 80084e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	2103      	movs	r1, #3
 80084f0:	fa01 f303 	lsl.w	r3, r1, r3
 80084f4:	43db      	mvns	r3, r3
 80084f6:	401a      	ands	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	2101      	movs	r1, #1
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	fa01 f303 	lsl.w	r3, r1, r3
 8008508:	43db      	mvns	r3, r3
 800850a:	401a      	ands	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	2103      	movs	r1, #3
 800851a:	fa01 f303 	lsl.w	r3, r1, r3
 800851e:	43db      	mvns	r3, r3
 8008520:	401a      	ands	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	3301      	adds	r3, #1
 800852a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	fa22 f303 	lsr.w	r3, r2, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	f47f af1f 	bne.w	8008378 <HAL_GPIO_DeInit+0x94>
  }
}
 800853a:	bf00      	nop
 800853c:	bf00      	nop
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	58000080 	.word	0x58000080
 8008548:	58020000 	.word	0x58020000
 800854c:	58020400 	.word	0x58020400
 8008550:	58020800 	.word	0x58020800
 8008554:	58020c00 	.word	0x58020c00
 8008558:	58021000 	.word	0x58021000
 800855c:	58021400 	.word	0x58021400
 8008560:	58021800 	.word	0x58021800
 8008564:	58021c00 	.word	0x58021c00
 8008568:	58022000 	.word	0x58022000
 800856c:	58022400 	.word	0x58022400
 8008570:	58022800 	.word	0x58022800
 8008574:	0801dc30 	.word	0x0801dc30
 8008578:	ffff0000 	.word	0xffff0000
 800857c:	58000400 	.word	0x58000400

08008580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800858c:	887b      	ldrh	r3, [r7, #2]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d004      	beq.n	800859c <HAL_GPIO_ReadPin+0x1c>
 8008592:	887a      	ldrh	r2, [r7, #2]
 8008594:	4b0c      	ldr	r3, [pc, #48]	; (80085c8 <HAL_GPIO_ReadPin+0x48>)
 8008596:	4013      	ands	r3, r2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d004      	beq.n	80085a6 <HAL_GPIO_ReadPin+0x26>
 800859c:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80085a0:	480a      	ldr	r0, [pc, #40]	; (80085cc <HAL_GPIO_ReadPin+0x4c>)
 80085a2:	f7f9 fa66 	bl	8001a72 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	691a      	ldr	r2, [r3, #16]
 80085aa:	887b      	ldrh	r3, [r7, #2]
 80085ac:	4013      	ands	r3, r2
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80085b2:	2301      	movs	r3, #1
 80085b4:	73fb      	strb	r3, [r7, #15]
 80085b6:	e001      	b.n	80085bc <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	ffff0000 	.word	0xffff0000
 80085cc:	0801dc30 	.word	0x0801dc30

080085d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	807b      	strh	r3, [r7, #2]
 80085dc:	4613      	mov	r3, r2
 80085de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80085e0:	887b      	ldrh	r3, [r7, #2]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d004      	beq.n	80085f0 <HAL_GPIO_WritePin+0x20>
 80085e6:	887a      	ldrh	r2, [r7, #2]
 80085e8:	4b11      	ldr	r3, [pc, #68]	; (8008630 <HAL_GPIO_WritePin+0x60>)
 80085ea:	4013      	ands	r3, r2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d004      	beq.n	80085fa <HAL_GPIO_WritePin+0x2a>
 80085f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80085f4:	480f      	ldr	r0, [pc, #60]	; (8008634 <HAL_GPIO_WritePin+0x64>)
 80085f6:	f7f9 fa3c 	bl	8001a72 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80085fa:	787b      	ldrb	r3, [r7, #1]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d007      	beq.n	8008610 <HAL_GPIO_WritePin+0x40>
 8008600:	787b      	ldrb	r3, [r7, #1]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d004      	beq.n	8008610 <HAL_GPIO_WritePin+0x40>
 8008606:	f240 11ab 	movw	r1, #427	; 0x1ab
 800860a:	480a      	ldr	r0, [pc, #40]	; (8008634 <HAL_GPIO_WritePin+0x64>)
 800860c:	f7f9 fa31 	bl	8001a72 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8008610:	787b      	ldrb	r3, [r7, #1]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008616:	887a      	ldrh	r2, [r7, #2]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800861c:	e003      	b.n	8008626 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800861e:	887b      	ldrh	r3, [r7, #2]
 8008620:	041a      	lsls	r2, r3, #16
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	619a      	str	r2, [r3, #24]
}
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	ffff0000 	.word	0xffff0000
 8008634:	0801dc30 	.word	0x0801dc30

08008638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e107      	b.n	800885a <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a85      	ldr	r2, [pc, #532]	; (8008864 <HAL_I2C_Init+0x22c>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d013      	beq.n	800867c <HAL_I2C_Init+0x44>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a83      	ldr	r2, [pc, #524]	; (8008868 <HAL_I2C_Init+0x230>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d00e      	beq.n	800867c <HAL_I2C_Init+0x44>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a82      	ldr	r2, [pc, #520]	; (800886c <HAL_I2C_Init+0x234>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d009      	beq.n	800867c <HAL_I2C_Init+0x44>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a80      	ldr	r2, [pc, #512]	; (8008870 <HAL_I2C_Init+0x238>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d004      	beq.n	800867c <HAL_I2C_Init+0x44>
 8008672:	f240 2115 	movw	r1, #533	; 0x215
 8008676:	487f      	ldr	r0, [pc, #508]	; (8008874 <HAL_I2C_Init+0x23c>)
 8008678:	f7f9 f9fb 	bl	8001a72 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008684:	d304      	bcc.n	8008690 <HAL_I2C_Init+0x58>
 8008686:	f240 2116 	movw	r1, #534	; 0x216
 800868a:	487a      	ldr	r0, [pc, #488]	; (8008874 <HAL_I2C_Init+0x23c>)
 800868c:	f7f9 f9f1 	bl	8001a72 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d008      	beq.n	80086aa <HAL_I2C_Init+0x72>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	2b02      	cmp	r3, #2
 800869e:	d004      	beq.n	80086aa <HAL_I2C_Init+0x72>
 80086a0:	f240 2117 	movw	r1, #535	; 0x217
 80086a4:	4873      	ldr	r0, [pc, #460]	; (8008874 <HAL_I2C_Init+0x23c>)
 80086a6:	f7f9 f9e4 	bl	8001a72 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d009      	beq.n	80086c6 <HAL_I2C_Init+0x8e>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ba:	d004      	beq.n	80086c6 <HAL_I2C_Init+0x8e>
 80086bc:	f44f 7106 	mov.w	r1, #536	; 0x218
 80086c0:	486c      	ldr	r0, [pc, #432]	; (8008874 <HAL_I2C_Init+0x23c>)
 80086c2:	f7f9 f9d6 	bl	8001a72 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	2bff      	cmp	r3, #255	; 0xff
 80086cc:	d904      	bls.n	80086d8 <HAL_I2C_Init+0xa0>
 80086ce:	f240 2119 	movw	r1, #537	; 0x219
 80086d2:	4868      	ldr	r0, [pc, #416]	; (8008874 <HAL_I2C_Init+0x23c>)
 80086d4:	f7f9 f9cd 	bl	8001a72 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d020      	beq.n	8008722 <HAL_I2C_Init+0xea>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d01c      	beq.n	8008722 <HAL_I2C_Init+0xea>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d018      	beq.n	8008722 <HAL_I2C_Init+0xea>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d014      	beq.n	8008722 <HAL_I2C_Init+0xea>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	2b04      	cmp	r3, #4
 80086fe:	d010      	beq.n	8008722 <HAL_I2C_Init+0xea>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	2b05      	cmp	r3, #5
 8008706:	d00c      	beq.n	8008722 <HAL_I2C_Init+0xea>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	2b06      	cmp	r3, #6
 800870e:	d008      	beq.n	8008722 <HAL_I2C_Init+0xea>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	2b07      	cmp	r3, #7
 8008716:	d004      	beq.n	8008722 <HAL_I2C_Init+0xea>
 8008718:	f240 211a 	movw	r1, #538	; 0x21a
 800871c:	4855      	ldr	r0, [pc, #340]	; (8008874 <HAL_I2C_Init+0x23c>)
 800871e:	f7f9 f9a8 	bl	8001a72 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d009      	beq.n	800873e <HAL_I2C_Init+0x106>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008732:	d004      	beq.n	800873e <HAL_I2C_Init+0x106>
 8008734:	f240 211b 	movw	r1, #539	; 0x21b
 8008738:	484e      	ldr	r0, [pc, #312]	; (8008874 <HAL_I2C_Init+0x23c>)
 800873a:	f7f9 f99a 	bl	8001a72 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d009      	beq.n	800875a <HAL_I2C_Init+0x122>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800874e:	d004      	beq.n	800875a <HAL_I2C_Init+0x122>
 8008750:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8008754:	4847      	ldr	r0, [pc, #284]	; (8008874 <HAL_I2C_Init+0x23c>)
 8008756:	f7f9 f98c 	bl	8001a72 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d106      	bne.n	8008774 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7f8 fd36 	bl	80011e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2224      	movs	r2, #36	; 0x24
 8008778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0201 	bic.w	r2, r2, #1
 800878a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008798:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80087a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d107      	bne.n	80087c2 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689a      	ldr	r2, [r3, #8]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087be:	609a      	str	r2, [r3, #8]
 80087c0:	e006      	b.n	80087d0 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	689a      	ldr	r2, [r3, #8]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80087ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d104      	bne.n	80087e2 <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6859      	ldr	r1, [r3, #4]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	4b22      	ldr	r3, [pc, #136]	; (8008878 <HAL_I2C_Init+0x240>)
 80087ee:	430b      	orrs	r3, r1
 80087f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68da      	ldr	r2, [r3, #12]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008800:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691a      	ldr	r2, [r3, #16]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	69d9      	ldr	r1, [r3, #28]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a1a      	ldr	r2, [r3, #32]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	430a      	orrs	r2, r1
 800882a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0201 	orr.w	r2, r2, #1
 800883a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	40005400 	.word	0x40005400
 8008868:	40005800 	.word	0x40005800
 800886c:	40005c00 	.word	0x40005c00
 8008870:	58001c00 	.word	0x58001c00
 8008874:	0801dc6c 	.word	0x0801dc6c
 8008878:	02008000 	.word	0x02008000

0800887c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a32      	ldr	r2, [pc, #200]	; (8008954 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d012      	beq.n	80088b6 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a30      	ldr	r2, [pc, #192]	; (8008958 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d00d      	beq.n	80088b6 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a2f      	ldr	r2, [pc, #188]	; (800895c <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d008      	beq.n	80088b6 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a2d      	ldr	r2, [pc, #180]	; (8008960 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d003      	beq.n	80088b6 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80088ae:	2163      	movs	r1, #99	; 0x63
 80088b0:	482c      	ldr	r0, [pc, #176]	; (8008964 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80088b2:	f7f9 f8de 	bl	8001a72 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d007      	beq.n	80088cc <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088c2:	d003      	beq.n	80088cc <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80088c4:	2164      	movs	r1, #100	; 0x64
 80088c6:	4827      	ldr	r0, [pc, #156]	; (8008964 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80088c8:	f7f9 f8d3 	bl	8001a72 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b20      	cmp	r3, #32
 80088d6:	d138      	bne.n	800894a <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d101      	bne.n	80088e6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80088e2:	2302      	movs	r3, #2
 80088e4:	e032      	b.n	800894c <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2224      	movs	r2, #36	; 0x24
 80088f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f022 0201 	bic.w	r2, r2, #1
 8008904:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008914:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6819      	ldr	r1, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	430a      	orrs	r2, r1
 8008924:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f042 0201 	orr.w	r2, r2, #1
 8008934:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2220      	movs	r2, #32
 800893a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	e000      	b.n	800894c <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800894a:	2302      	movs	r3, #2
  }
}
 800894c:	4618      	mov	r0, r3
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	40005400 	.word	0x40005400
 8008958:	40005800 	.word	0x40005800
 800895c:	40005c00 	.word	0x40005c00
 8008960:	58001c00 	.word	0x58001c00
 8008964:	0801dca4 	.word	0x0801dca4

08008968 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a31      	ldr	r2, [pc, #196]	; (8008a3c <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d012      	beq.n	80089a2 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a2f      	ldr	r2, [pc, #188]	; (8008a40 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00d      	beq.n	80089a2 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a2e      	ldr	r2, [pc, #184]	; (8008a44 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d008      	beq.n	80089a2 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a2c      	ldr	r2, [pc, #176]	; (8008a48 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d003      	beq.n	80089a2 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800899a:	2191      	movs	r1, #145	; 0x91
 800899c:	482b      	ldr	r0, [pc, #172]	; (8008a4c <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 800899e:	f7f9 f868 	bl	8001a72 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b0f      	cmp	r3, #15
 80089a6:	d903      	bls.n	80089b0 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 80089a8:	2192      	movs	r1, #146	; 0x92
 80089aa:	4828      	ldr	r0, [pc, #160]	; (8008a4c <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80089ac:	f7f9 f861 	bl	8001a72 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b20      	cmp	r3, #32
 80089ba:	d139      	bne.n	8008a30 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d101      	bne.n	80089ca <HAL_I2CEx_ConfigDigitalFilter+0x62>
 80089c6:	2302      	movs	r3, #2
 80089c8:	e033      	b.n	8008a32 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2224      	movs	r2, #36	; 0x24
 80089d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 0201 	bic.w	r2, r2, #1
 80089e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80089f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	021b      	lsls	r3, r3, #8
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0201 	orr.w	r2, r2, #1
 8008a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2220      	movs	r2, #32
 8008a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	e000      	b.n	8008a32 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008a30:	2302      	movs	r3, #2
  }
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	40005400 	.word	0x40005400
 8008a40:	40005800 	.word	0x40005800
 8008a44:	40005c00 	.word	0x40005c00
 8008a48:	58001c00 	.word	0x58001c00
 8008a4c:	0801dca4 	.word	0x0801dca4

08008a50 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008a58:	f7fa fd7e 	bl	8003558 <HAL_GetTick>
 8008a5c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e225      	b.n	8008eb4 <HAL_MDMA_Init+0x464>
  }

  /* Check the parameters */
  assert_param(IS_MDMA_STREAM_ALL_INSTANCE(hmdma->Instance));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a82      	ldr	r2, [pc, #520]	; (8008c78 <HAL_MDMA_Init+0x228>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d04e      	beq.n	8008b10 <HAL_MDMA_Init+0xc0>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a81      	ldr	r2, [pc, #516]	; (8008c7c <HAL_MDMA_Init+0x22c>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d049      	beq.n	8008b10 <HAL_MDMA_Init+0xc0>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a7f      	ldr	r2, [pc, #508]	; (8008c80 <HAL_MDMA_Init+0x230>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d044      	beq.n	8008b10 <HAL_MDMA_Init+0xc0>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a7e      	ldr	r2, [pc, #504]	; (8008c84 <HAL_MDMA_Init+0x234>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d03f      	beq.n	8008b10 <HAL_MDMA_Init+0xc0>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a7c      	ldr	r2, [pc, #496]	; (8008c88 <HAL_MDMA_Init+0x238>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d03a      	beq.n	8008b10 <HAL_MDMA_Init+0xc0>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a7b      	ldr	r2, [pc, #492]	; (8008c8c <HAL_MDMA_Init+0x23c>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d035      	beq.n	8008b10 <HAL_MDMA_Init+0xc0>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a79      	ldr	r2, [pc, #484]	; (8008c90 <HAL_MDMA_Init+0x240>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d030      	beq.n	8008b10 <HAL_MDMA_Init+0xc0>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a78      	ldr	r2, [pc, #480]	; (8008c94 <HAL_MDMA_Init+0x244>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d02b      	beq.n	8008b10 <HAL_MDMA_Init+0xc0>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a76      	ldr	r2, [pc, #472]	; (8008c98 <HAL_MDMA_Init+0x248>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d026      	beq.n	8008b10 <HAL_MDMA_Init+0xc0>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a75      	ldr	r2, [pc, #468]	; (8008c9c <HAL_MDMA_Init+0x24c>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d021      	beq.n	8008b10 <HAL_MDMA_Init+0xc0>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a73      	ldr	r2, [pc, #460]	; (8008ca0 <HAL_MDMA_Init+0x250>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d01c      	beq.n	8008b10 <HAL_MDMA_Init+0xc0>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a72      	ldr	r2, [pc, #456]	; (8008ca4 <HAL_MDMA_Init+0x254>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d017      	beq.n	8008b10 <HAL_MDMA_Init+0xc0>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a70      	ldr	r2, [pc, #448]	; (8008ca8 <HAL_MDMA_Init+0x258>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d012      	beq.n	8008b10 <HAL_MDMA_Init+0xc0>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a6f      	ldr	r2, [pc, #444]	; (8008cac <HAL_MDMA_Init+0x25c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d00d      	beq.n	8008b10 <HAL_MDMA_Init+0xc0>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a6d      	ldr	r2, [pc, #436]	; (8008cb0 <HAL_MDMA_Init+0x260>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d008      	beq.n	8008b10 <HAL_MDMA_Init+0xc0>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a6c      	ldr	r2, [pc, #432]	; (8008cb4 <HAL_MDMA_Init+0x264>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d003      	beq.n	8008b10 <HAL_MDMA_Init+0xc0>
 8008b08:	21e5      	movs	r1, #229	; 0xe5
 8008b0a:	486b      	ldr	r0, [pc, #428]	; (8008cb8 <HAL_MDMA_Init+0x268>)
 8008b0c:	f7f8 ffb1 	bl	8001a72 <assert_failed>
  assert_param(IS_MDMA_PRIORITY(hmdma->Init.Priority));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00f      	beq.n	8008b38 <HAL_MDMA_Init+0xe8>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	2b40      	cmp	r3, #64	; 0x40
 8008b1e:	d00b      	beq.n	8008b38 <HAL_MDMA_Init+0xe8>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	2b80      	cmp	r3, #128	; 0x80
 8008b26:	d007      	beq.n	8008b38 <HAL_MDMA_Init+0xe8>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	2bc0      	cmp	r3, #192	; 0xc0
 8008b2e:	d003      	beq.n	8008b38 <HAL_MDMA_Init+0xe8>
 8008b30:	21e6      	movs	r1, #230	; 0xe6
 8008b32:	4861      	ldr	r0, [pc, #388]	; (8008cb8 <HAL_MDMA_Init+0x268>)
 8008b34:	f7f8 ff9d 	bl	8001a72 <assert_failed>
  assert_param(IS_MDMA_ENDIANNESS_MODE(hmdma->Init.Endianness));
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d012      	beq.n	8008b66 <HAL_MDMA_Init+0x116>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b48:	d00d      	beq.n	8008b66 <HAL_MDMA_Init+0x116>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b52:	d008      	beq.n	8008b66 <HAL_MDMA_Init+0x116>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b5c:	d003      	beq.n	8008b66 <HAL_MDMA_Init+0x116>
 8008b5e:	21e7      	movs	r1, #231	; 0xe7
 8008b60:	4855      	ldr	r0, [pc, #340]	; (8008cb8 <HAL_MDMA_Init+0x268>)
 8008b62:	f7f8 ff86 	bl	8001a72 <assert_failed>
  assert_param(IS_MDMA_REQUEST(hmdma->Init.Request));
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b6e:	d007      	beq.n	8008b80 <HAL_MDMA_Init+0x130>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	2b1f      	cmp	r3, #31
 8008b76:	d903      	bls.n	8008b80 <HAL_MDMA_Init+0x130>
 8008b78:	21e8      	movs	r1, #232	; 0xe8
 8008b7a:	484f      	ldr	r0, [pc, #316]	; (8008cb8 <HAL_MDMA_Init+0x268>)
 8008b7c:	f7f8 ff79 	bl	8001a72 <assert_failed>
  assert_param(IS_MDMA_SOURCE_INC(hmdma->Init.SourceInc));
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d02e      	beq.n	8008be6 <HAL_MDMA_Init+0x196>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d02a      	beq.n	8008be6 <HAL_MDMA_Init+0x196>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8008b98:	d025      	beq.n	8008be6 <HAL_MDMA_Init+0x196>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	f240 2202 	movw	r2, #514	; 0x202
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d01f      	beq.n	8008be6 <HAL_MDMA_Init+0x196>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	f240 3202 	movw	r2, #770	; 0x302
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d019      	beq.n	8008be6 <HAL_MDMA_Init+0x196>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d015      	beq.n	8008be6 <HAL_MDMA_Init+0x196>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	f240 1203 	movw	r2, #259	; 0x103
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d00f      	beq.n	8008be6 <HAL_MDMA_Init+0x196>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	f240 2203 	movw	r2, #515	; 0x203
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d009      	beq.n	8008be6 <HAL_MDMA_Init+0x196>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	f240 3203 	movw	r2, #771	; 0x303
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d003      	beq.n	8008be6 <HAL_MDMA_Init+0x196>
 8008bde:	21e9      	movs	r1, #233	; 0xe9
 8008be0:	4835      	ldr	r0, [pc, #212]	; (8008cb8 <HAL_MDMA_Init+0x268>)
 8008be2:	f7f8 ff46 	bl	8001a72 <assert_failed>
  assert_param(IS_MDMA_DESTINATION_INC(hmdma->Init.DestinationInc));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d02e      	beq.n	8008c4c <HAL_MDMA_Init+0x1fc>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	2b08      	cmp	r3, #8
 8008bf4:	d02a      	beq.n	8008c4c <HAL_MDMA_Init+0x1fc>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8008bfe:	d025      	beq.n	8008c4c <HAL_MDMA_Init+0x1fc>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	f640 0208 	movw	r2, #2056	; 0x808
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d01f      	beq.n	8008c4c <HAL_MDMA_Init+0x1fc>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	f640 4208 	movw	r2, #3080	; 0xc08
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d019      	beq.n	8008c4c <HAL_MDMA_Init+0x1fc>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	2b0c      	cmp	r3, #12
 8008c1e:	d015      	beq.n	8008c4c <HAL_MDMA_Init+0x1fc>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	f240 420c 	movw	r2, #1036	; 0x40c
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d00f      	beq.n	8008c4c <HAL_MDMA_Init+0x1fc>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	f640 020c 	movw	r2, #2060	; 0x80c
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d009      	beq.n	8008c4c <HAL_MDMA_Init+0x1fc>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	f640 420c 	movw	r2, #3084	; 0xc0c
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d003      	beq.n	8008c4c <HAL_MDMA_Init+0x1fc>
 8008c44:	21ea      	movs	r1, #234	; 0xea
 8008c46:	481c      	ldr	r0, [pc, #112]	; (8008cb8 <HAL_MDMA_Init+0x268>)
 8008c48:	f7f8 ff13 	bl	8001a72 <assert_failed>
  assert_param(IS_MDMA_SOURCE_DATASIZE(hmdma->Init.SourceDataSize));
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	69db      	ldr	r3, [r3, #28]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d033      	beq.n	8008cbc <HAL_MDMA_Init+0x26c>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	2b10      	cmp	r3, #16
 8008c5a:	d02f      	beq.n	8008cbc <HAL_MDMA_Init+0x26c>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	2b20      	cmp	r3, #32
 8008c62:	d02b      	beq.n	8008cbc <HAL_MDMA_Init+0x26c>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	2b30      	cmp	r3, #48	; 0x30
 8008c6a:	d027      	beq.n	8008cbc <HAL_MDMA_Init+0x26c>
 8008c6c:	21eb      	movs	r1, #235	; 0xeb
 8008c6e:	4812      	ldr	r0, [pc, #72]	; (8008cb8 <HAL_MDMA_Init+0x268>)
 8008c70:	f7f8 feff 	bl	8001a72 <assert_failed>
 8008c74:	e022      	b.n	8008cbc <HAL_MDMA_Init+0x26c>
 8008c76:	bf00      	nop
 8008c78:	52000040 	.word	0x52000040
 8008c7c:	52000080 	.word	0x52000080
 8008c80:	520000c0 	.word	0x520000c0
 8008c84:	52000100 	.word	0x52000100
 8008c88:	52000140 	.word	0x52000140
 8008c8c:	52000180 	.word	0x52000180
 8008c90:	520001c0 	.word	0x520001c0
 8008c94:	52000200 	.word	0x52000200
 8008c98:	52000240 	.word	0x52000240
 8008c9c:	52000280 	.word	0x52000280
 8008ca0:	520002c0 	.word	0x520002c0
 8008ca4:	52000300 	.word	0x52000300
 8008ca8:	52000340 	.word	0x52000340
 8008cac:	52000380 	.word	0x52000380
 8008cb0:	520003c0 	.word	0x520003c0
 8008cb4:	52000400 	.word	0x52000400
 8008cb8:	0801dce0 	.word	0x0801dce0
  assert_param(IS_MDMA_DESTINATION_DATASIZE(hmdma->Init.DestDataSize));
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a1b      	ldr	r3, [r3, #32]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00f      	beq.n	8008ce4 <HAL_MDMA_Init+0x294>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	2b40      	cmp	r3, #64	; 0x40
 8008cca:	d00b      	beq.n	8008ce4 <HAL_MDMA_Init+0x294>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	2b80      	cmp	r3, #128	; 0x80
 8008cd2:	d007      	beq.n	8008ce4 <HAL_MDMA_Init+0x294>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	2bc0      	cmp	r3, #192	; 0xc0
 8008cda:	d003      	beq.n	8008ce4 <HAL_MDMA_Init+0x294>
 8008cdc:	21ec      	movs	r1, #236	; 0xec
 8008cde:	4877      	ldr	r0, [pc, #476]	; (8008ebc <HAL_MDMA_Init+0x46c>)
 8008ce0:	f7f8 fec7 	bl	8001a72 <assert_failed>
  assert_param(IS_MDMA_DATA_ALIGNMENT(hmdma->Init.DataAlignment));
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cec:	d011      	beq.n	8008d12 <HAL_MDMA_Init+0x2c2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00d      	beq.n	8008d12 <HAL_MDMA_Init+0x2c2>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008cfe:	d008      	beq.n	8008d12 <HAL_MDMA_Init+0x2c2>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d08:	d003      	beq.n	8008d12 <HAL_MDMA_Init+0x2c2>
 8008d0a:	21ed      	movs	r1, #237	; 0xed
 8008d0c:	486b      	ldr	r0, [pc, #428]	; (8008ebc <HAL_MDMA_Init+0x46c>)
 8008d0e:	f7f8 feb0 	bl	8001a72 <assert_failed>
  assert_param(IS_MDMA_SOURCE_BURST(hmdma->Init.SourceBurst));
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d026      	beq.n	8008d68 <HAL_MDMA_Init+0x318>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d22:	d021      	beq.n	8008d68 <HAL_MDMA_Init+0x318>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d2c:	d01c      	beq.n	8008d68 <HAL_MDMA_Init+0x318>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d36:	d017      	beq.n	8008d68 <HAL_MDMA_Init+0x318>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d40:	d012      	beq.n	8008d68 <HAL_MDMA_Init+0x318>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d46:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008d4a:	d00d      	beq.n	8008d68 <HAL_MDMA_Init+0x318>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008d54:	d008      	beq.n	8008d68 <HAL_MDMA_Init+0x318>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8008d5e:	d003      	beq.n	8008d68 <HAL_MDMA_Init+0x318>
 8008d60:	21ee      	movs	r1, #238	; 0xee
 8008d62:	4856      	ldr	r0, [pc, #344]	; (8008ebc <HAL_MDMA_Init+0x46c>)
 8008d64:	f7f8 fe85 	bl	8001a72 <assert_failed>
  assert_param(IS_MDMA_DESTINATION_BURST(hmdma->Init.DestBurst));
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d026      	beq.n	8008dbe <HAL_MDMA_Init+0x36e>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d78:	d021      	beq.n	8008dbe <HAL_MDMA_Init+0x36e>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d82:	d01c      	beq.n	8008dbe <HAL_MDMA_Init+0x36e>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d88:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008d8c:	d017      	beq.n	8008dbe <HAL_MDMA_Init+0x36e>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d96:	d012      	beq.n	8008dbe <HAL_MDMA_Init+0x36e>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008da0:	d00d      	beq.n	8008dbe <HAL_MDMA_Init+0x36e>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008daa:	d008      	beq.n	8008dbe <HAL_MDMA_Init+0x36e>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db0:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
 8008db4:	d003      	beq.n	8008dbe <HAL_MDMA_Init+0x36e>
 8008db6:	21ef      	movs	r1, #239	; 0xef
 8008db8:	4840      	ldr	r0, [pc, #256]	; (8008ebc <HAL_MDMA_Init+0x46c>)
 8008dba:	f7f8 fe5a 	bl	8001a72 <assert_failed>
  assert_param(IS_MDMA_BUFFER_TRANSFER_LENGTH(hmdma->Init.BufferTransferLength));
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <HAL_MDMA_Init+0x37e>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dca:	2bfe      	cmp	r3, #254	; 0xfe
 8008dcc:	d903      	bls.n	8008dd6 <HAL_MDMA_Init+0x386>
 8008dce:	21f0      	movs	r1, #240	; 0xf0
 8008dd0:	483a      	ldr	r0, [pc, #232]	; (8008ebc <HAL_MDMA_Init+0x46c>)
 8008dd2:	f7f8 fe4e 	bl	8001a72 <assert_failed>
  assert_param(IS_MDMA_TRANSFER_TRIGGER_MODE(hmdma->Init.TransferTriggerMode));
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d012      	beq.n	8008e04 <HAL_MDMA_Init+0x3b4>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008de6:	d00d      	beq.n	8008e04 <HAL_MDMA_Init+0x3b4>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008df0:	d008      	beq.n	8008e04 <HAL_MDMA_Init+0x3b4>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008dfa:	d003      	beq.n	8008e04 <HAL_MDMA_Init+0x3b4>
 8008dfc:	21f1      	movs	r1, #241	; 0xf1
 8008dfe:	482f      	ldr	r0, [pc, #188]	; (8008ebc <HAL_MDMA_Init+0x46c>)
 8008e00:	f7f8 fe37 	bl	8001a72 <assert_failed>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e0c:	dd04      	ble.n	8008e18 <HAL_MDMA_Init+0x3c8>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e16:	db03      	blt.n	8008e20 <HAL_MDMA_Init+0x3d0>
 8008e18:	21f2      	movs	r1, #242	; 0xf2
 8008e1a:	4828      	ldr	r0, [pc, #160]	; (8008ebc <HAL_MDMA_Init+0x46c>)
 8008e1c:	f7f8 fe29 	bl	8001a72 <assert_failed>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e28:	dd04      	ble.n	8008e34 <HAL_MDMA_Init+0x3e4>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e32:	db03      	blt.n	8008e3c <HAL_MDMA_Init+0x3ec>
 8008e34:	21f3      	movs	r1, #243	; 0xf3
 8008e36:	4821      	ldr	r0, [pc, #132]	; (8008ebc <HAL_MDMA_Init+0x46c>)
 8008e38:	f7f8 fe1b 	bl	8001a72 <assert_failed>


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2202      	movs	r2, #2
 8008e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68da      	ldr	r2, [r3, #12]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f022 0201 	bic.w	r2, r2, #1
 8008e5a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008e5c:	e00f      	b.n	8008e7e <HAL_MDMA_Init+0x42e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8008e5e:	f7fa fb7b 	bl	8003558 <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	2b05      	cmp	r3, #5
 8008e6a:	d908      	bls.n	8008e7e <HAL_MDMA_Init+0x42e>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2240      	movs	r2, #64	; 0x40
 8008e70:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2203      	movs	r2, #3
 8008e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e01a      	b.n	8008eb4 <HAL_MDMA_Init+0x464>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1e8      	bne.n	8008e5e <HAL_MDMA_Init+0x40e>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f9bd 	bl	800920c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	0801dce0 	.word	0x0801dce0

08008ec0 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e03e      	b.n	8008f58 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d101      	bne.n	8008ee8 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8008ee4:	2302      	movs	r3, #2
 8008ee6:	e037      	b.n	8008f58 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d126      	bne.n	8008f4a <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d11c      	bne.n	8008f44 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d108      	bne.n	8008f32 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	691a      	ldr	r2, [r3, #16]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008f2e:	611a      	str	r2, [r3, #16]
 8008f30:	e00d      	b.n	8008f4e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	691a      	ldr	r2, [r3, #16]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008f40:	611a      	str	r2, [r3, #16]
 8008f42:	e004      	b.n	8008f4e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	75fb      	strb	r3, [r7, #23]
 8008f48:	e001      	b.n	8008f4e <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	371c      	adds	r7, #28
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008f70:	4b91      	ldr	r3, [pc, #580]	; (80091b8 <HAL_MDMA_IRQHandler+0x254>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a91      	ldr	r2, [pc, #580]	; (80091bc <HAL_MDMA_IRQHandler+0x258>)
 8008f76:	fba2 2303 	umull	r2, r3, r2, r3
 8008f7a:	0a9b      	lsrs	r3, r3, #10
 8008f7c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	461a      	mov	r2, r3
 8008f84:	4b8e      	ldr	r3, [pc, #568]	; (80091c0 <HAL_MDMA_IRQHandler+0x25c>)
 8008f86:	4413      	add	r3, r2
 8008f88:	099b      	lsrs	r3, r3, #6
 8008f8a:	f003 031f 	and.w	r3, r3, #31
 8008f8e:	2201      	movs	r2, #1
 8008f90:	fa02 f303 	lsl.w	r3, r2, r3
 8008f94:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008f96:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f000 812d 	beq.w	8009200 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0301 	and.w	r3, r3, #1
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d054      	beq.n	800905e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d04d      	beq.n	800905e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68da      	ldr	r2, [r3, #12]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f022 0202 	bic.w	r2, r2, #2
 8008fd0:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d106      	bne.n	8008ff2 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fe8:	f043 0201 	orr.w	r2, r3, #1
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	669a      	str	r2, [r3, #104]	; 0x68
 8008ff0:	e005      	b.n	8008ffe <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ff6:	f043 0202 	orr.w	r2, r3, #2
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009004:	2b00      	cmp	r3, #0
 8009006:	d005      	beq.n	8009014 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800900c:	f043 0204 	orr.w	r2, r3, #4
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800901a:	2b00      	cmp	r3, #0
 800901c:	d005      	beq.n	800902a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009022:	f043 0208 	orr.w	r2, r3, #8
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009030:	2b00      	cmp	r3, #0
 8009032:	d005      	beq.n	8009040 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009038:	f043 0210 	orr.w	r2, r3, #16
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009046:	2b00      	cmp	r3, #0
 8009048:	d005      	beq.n	8009056 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800904e:	f043 0220 	orr.w	r2, r3, #32
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2201      	movs	r2, #1
 800905c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0310 	and.w	r3, r3, #16
 8009068:	2b00      	cmp	r3, #0
 800906a:	d012      	beq.n	8009092 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	f003 0320 	and.w	r3, r3, #32
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00b      	beq.n	8009092 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2210      	movs	r2, #16
 8009080:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0308 	and.w	r3, r3, #8
 800909c:	2b00      	cmp	r3, #0
 800909e:	d012      	beq.n	80090c6 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	f003 0310 	and.w	r3, r3, #16
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00b      	beq.n	80090c6 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2208      	movs	r2, #8
 80090b4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0304 	and.w	r3, r3, #4
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d012      	beq.n	80090fa <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	f003 0308 	and.w	r3, r3, #8
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00b      	beq.n	80090fa <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2204      	movs	r2, #4
 80090e8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d003      	beq.n	80090fa <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0302 	and.w	r3, r3, #2
 8009104:	2b00      	cmp	r3, #0
 8009106:	d039      	beq.n	800917c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	f003 0304 	and.w	r3, r3, #4
 8009112:	2b00      	cmp	r3, #0
 8009114:	d032      	beq.n	800917c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68da      	ldr	r2, [r3, #12]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8009124:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800912c:	b2db      	uxtb	r3, r3
 800912e:	2b04      	cmp	r3, #4
 8009130:	d110      	bne.n	8009154 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2201      	movs	r2, #1
 800913e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009146:	2b00      	cmp	r3, #0
 8009148:	d05c      	beq.n	8009204 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	4798      	blx	r3
        }
        return;
 8009152:	e057      	b.n	8009204 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2202      	movs	r2, #2
 800915a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009180:	2b00      	cmp	r3, #0
 8009182:	d040      	beq.n	8009206 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2204      	movs	r2, #4
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68da      	ldr	r2, [r3, #12]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 0201 	bic.w	r2, r2, #1
 800919a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	3301      	adds	r3, #1
 80091a0:	60bb      	str	r3, [r7, #8]
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d30d      	bcc.n	80091c4 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1f2      	bne.n	800919c <HAL_MDMA_IRQHandler+0x238>
 80091b6:	e006      	b.n	80091c6 <HAL_MDMA_IRQHandler+0x262>
 80091b8:	24000000 	.word	0x24000000
 80091bc:	1b4e81b5 	.word	0x1b4e81b5
 80091c0:	adffffc0 	.word	0xadffffc0
        break;
 80091c4:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d004      	beq.n	80091e6 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2203      	movs	r2, #3
 80091e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80091e4:	e003      	b.n	80091ee <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d007      	beq.n	8009206 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	4798      	blx	r3
 80091fe:	e002      	b.n	8009206 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8009200:	bf00      	nop
 8009202:	e000      	b.n	8009206 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8009204:	bf00      	nop
    }
  }
}
 8009206:	3718      	adds	r7, #24
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68d9      	ldr	r1, [r3, #12]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	691a      	ldr	r2, [r3, #16]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	430a      	orrs	r2, r1
 8009222:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	695a      	ldr	r2, [r3, #20]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009232:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800923e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009244:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800924a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009250:	3b01      	subs	r3, #1
 8009252:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8009254:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8009260:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009262:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800926c:	d107      	bne.n	800927e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	691a      	ldr	r2, [r3, #16]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800927c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2200      	movs	r2, #0
 8009284:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800928a:	2b00      	cmp	r3, #0
 800928c:	da11      	bge.n	80092b2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	695a      	ldr	r2, [r3, #20]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800929c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a2:	425b      	negs	r3, r3
 80092a4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	b292      	uxth	r2, r2
 80092ae:	621a      	str	r2, [r3, #32]
 80092b0:	e006      	b.n	80092c0 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b6:	461a      	mov	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	b292      	uxth	r2, r2
 80092be:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	da15      	bge.n	80092f4 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	695a      	ldr	r2, [r3, #20]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80092d6:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092dc:	425b      	negs	r3, r3
 80092de:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6a19      	ldr	r1, [r3, #32]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	041a      	lsls	r2, r3, #16
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	621a      	str	r2, [r3, #32]
 80092f2:	e009      	b.n	8009308 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6a19      	ldr	r1, [r3, #32]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fe:	041a      	lsls	r2, r3, #16
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	430a      	orrs	r2, r1
 8009306:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009310:	d006      	beq.n	8009320 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	b2d2      	uxtb	r2, r2
 800931c:	629a      	str	r2, [r3, #40]	; 0x28
 800931e:	e003      	b.n	8009328 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2200      	movs	r2, #0
 8009326:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2200      	movs	r2, #0
 800932e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009330:	bf00      	nop
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800933c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800933e:	b08f      	sub	sp, #60	; 0x3c
 8009340:	af0a      	add	r7, sp, #40	; 0x28
 8009342:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d101      	bne.n	800934e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e124      	b.n	8009598 <HAL_PCD_Init+0x25c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a93      	ldr	r2, [pc, #588]	; (80095a0 <HAL_PCD_Init+0x264>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d008      	beq.n	800936a <HAL_PCD_Init+0x2e>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a91      	ldr	r2, [pc, #580]	; (80095a4 <HAL_PCD_Init+0x268>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d003      	beq.n	800936a <HAL_PCD_Init+0x2e>
 8009362:	2187      	movs	r1, #135	; 0x87
 8009364:	4890      	ldr	r0, [pc, #576]	; (80095a8 <HAL_PCD_Init+0x26c>)
 8009366:	f7f8 fb84 	bl	8001a72 <assert_failed>

  USBx = hpcd->Instance;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	d106      	bne.n	800938a <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7f9 ffbd 	bl	8003304 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2203      	movs	r2, #3
 800938e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800939a:	2b00      	cmp	r3, #0
 800939c:	d102      	bne.n	80093a4 <HAL_PCD_Init+0x68>
  {
    hpcd->Init.dma_enable = 0U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f00d f9f9 	bl	80167a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	603b      	str	r3, [r7, #0]
 80093b4:	687e      	ldr	r6, [r7, #4]
 80093b6:	466d      	mov	r5, sp
 80093b8:	f106 0410 	add.w	r4, r6, #16
 80093bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80093c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80093cc:	1d33      	adds	r3, r6, #4
 80093ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093d0:	6838      	ldr	r0, [r7, #0]
 80093d2:	f00d f977 	bl	80166c4 <USB_CoreInit>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d005      	beq.n	80093e8 <HAL_PCD_Init+0xac>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2202      	movs	r2, #2
 80093e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e0d7      	b.n	8009598 <HAL_PCD_Init+0x25c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2100      	movs	r1, #0
 80093ee:	4618      	mov	r0, r3
 80093f0:	f00d f9e7 	bl	80167c2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093f4:	2300      	movs	r3, #0
 80093f6:	73fb      	strb	r3, [r7, #15]
 80093f8:	e04a      	b.n	8009490 <HAL_PCD_Init+0x154>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80093fa:	7bfa      	ldrb	r2, [r7, #15]
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	4613      	mov	r3, r2
 8009400:	00db      	lsls	r3, r3, #3
 8009402:	1a9b      	subs	r3, r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	440b      	add	r3, r1
 8009408:	333d      	adds	r3, #61	; 0x3d
 800940a:	2201      	movs	r2, #1
 800940c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800940e:	7bfa      	ldrb	r2, [r7, #15]
 8009410:	6879      	ldr	r1, [r7, #4]
 8009412:	4613      	mov	r3, r2
 8009414:	00db      	lsls	r3, r3, #3
 8009416:	1a9b      	subs	r3, r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	440b      	add	r3, r1
 800941c:	333c      	adds	r3, #60	; 0x3c
 800941e:	7bfa      	ldrb	r2, [r7, #15]
 8009420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009422:	7bfa      	ldrb	r2, [r7, #15]
 8009424:	7bfb      	ldrb	r3, [r7, #15]
 8009426:	b298      	uxth	r0, r3
 8009428:	6879      	ldr	r1, [r7, #4]
 800942a:	4613      	mov	r3, r2
 800942c:	00db      	lsls	r3, r3, #3
 800942e:	1a9b      	subs	r3, r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	440b      	add	r3, r1
 8009434:	3342      	adds	r3, #66	; 0x42
 8009436:	4602      	mov	r2, r0
 8009438:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800943a:	7bfa      	ldrb	r2, [r7, #15]
 800943c:	6879      	ldr	r1, [r7, #4]
 800943e:	4613      	mov	r3, r2
 8009440:	00db      	lsls	r3, r3, #3
 8009442:	1a9b      	subs	r3, r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	333f      	adds	r3, #63	; 0x3f
 800944a:	2200      	movs	r2, #0
 800944c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800944e:	7bfa      	ldrb	r2, [r7, #15]
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	4613      	mov	r3, r2
 8009454:	00db      	lsls	r3, r3, #3
 8009456:	1a9b      	subs	r3, r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	3344      	adds	r3, #68	; 0x44
 800945e:	2200      	movs	r2, #0
 8009460:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009462:	7bfa      	ldrb	r2, [r7, #15]
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	4613      	mov	r3, r2
 8009468:	00db      	lsls	r3, r3, #3
 800946a:	1a9b      	subs	r3, r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	440b      	add	r3, r1
 8009470:	3348      	adds	r3, #72	; 0x48
 8009472:	2200      	movs	r2, #0
 8009474:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009476:	7bfa      	ldrb	r2, [r7, #15]
 8009478:	6879      	ldr	r1, [r7, #4]
 800947a:	4613      	mov	r3, r2
 800947c:	00db      	lsls	r3, r3, #3
 800947e:	1a9b      	subs	r3, r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	440b      	add	r3, r1
 8009484:	3350      	adds	r3, #80	; 0x50
 8009486:	2200      	movs	r2, #0
 8009488:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800948a:	7bfb      	ldrb	r3, [r7, #15]
 800948c:	3301      	adds	r3, #1
 800948e:	73fb      	strb	r3, [r7, #15]
 8009490:	7bfa      	ldrb	r2, [r7, #15]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	429a      	cmp	r2, r3
 8009498:	d3af      	bcc.n	80093fa <HAL_PCD_Init+0xbe>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800949a:	2300      	movs	r3, #0
 800949c:	73fb      	strb	r3, [r7, #15]
 800949e:	e044      	b.n	800952a <HAL_PCD_Init+0x1ee>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80094a0:	7bfa      	ldrb	r2, [r7, #15]
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	4613      	mov	r3, r2
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	1a9b      	subs	r3, r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	440b      	add	r3, r1
 80094ae:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80094b2:	2200      	movs	r2, #0
 80094b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80094b6:	7bfa      	ldrb	r2, [r7, #15]
 80094b8:	6879      	ldr	r1, [r7, #4]
 80094ba:	4613      	mov	r3, r2
 80094bc:	00db      	lsls	r3, r3, #3
 80094be:	1a9b      	subs	r3, r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	440b      	add	r3, r1
 80094c4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80094c8:	7bfa      	ldrb	r2, [r7, #15]
 80094ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80094cc:	7bfa      	ldrb	r2, [r7, #15]
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	4613      	mov	r3, r2
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	1a9b      	subs	r3, r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	440b      	add	r3, r1
 80094da:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80094de:	2200      	movs	r2, #0
 80094e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80094e2:	7bfa      	ldrb	r2, [r7, #15]
 80094e4:	6879      	ldr	r1, [r7, #4]
 80094e6:	4613      	mov	r3, r2
 80094e8:	00db      	lsls	r3, r3, #3
 80094ea:	1a9b      	subs	r3, r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	440b      	add	r3, r1
 80094f0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80094f4:	2200      	movs	r2, #0
 80094f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80094f8:	7bfa      	ldrb	r2, [r7, #15]
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	4613      	mov	r3, r2
 80094fe:	00db      	lsls	r3, r3, #3
 8009500:	1a9b      	subs	r3, r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	440b      	add	r3, r1
 8009506:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800950a:	2200      	movs	r2, #0
 800950c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800950e:	7bfa      	ldrb	r2, [r7, #15]
 8009510:	6879      	ldr	r1, [r7, #4]
 8009512:	4613      	mov	r3, r2
 8009514:	00db      	lsls	r3, r3, #3
 8009516:	1a9b      	subs	r3, r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	440b      	add	r3, r1
 800951c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009520:	2200      	movs	r2, #0
 8009522:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	3301      	adds	r3, #1
 8009528:	73fb      	strb	r3, [r7, #15]
 800952a:	7bfa      	ldrb	r2, [r7, #15]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	429a      	cmp	r2, r3
 8009532:	d3b5      	bcc.n	80094a0 <HAL_PCD_Init+0x164>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	603b      	str	r3, [r7, #0]
 800953a:	687e      	ldr	r6, [r7, #4]
 800953c:	466d      	mov	r5, sp
 800953e:	f106 0410 	add.w	r4, r6, #16
 8009542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800954a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800954e:	e885 0003 	stmia.w	r5, {r0, r1}
 8009552:	1d33      	adds	r3, r6, #4
 8009554:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009556:	6838      	ldr	r0, [r7, #0]
 8009558:	f00d f980 	bl	801685c <USB_DevInit>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d005      	beq.n	800956e <HAL_PCD_Init+0x232>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2202      	movs	r2, #2
 8009566:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e014      	b.n	8009598 <HAL_PCD_Init+0x25c>
  }

  hpcd->USB_Address = 0U;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009582:	2b01      	cmp	r3, #1
 8009584:	d102      	bne.n	800958c <HAL_PCD_Init+0x250>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f810 	bl	80095ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4618      	mov	r0, r3
 8009592:	f00d fb3a 	bl	8016c0a <USB_DevDisconnect>

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095a0:	40080000 	.word	0x40080000
 80095a4:	40040000 	.word	0x40040000
 80095a8:	0801dd1c 	.word	0x0801dd1c

080095ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095da:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	10000003 	.word	0x10000003

080095f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d007      	beq.n	8009612 <HAL_PWREx_ConfigSupply+0x1e>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d004      	beq.n	8009612 <HAL_PWREx_ConfigSupply+0x1e>
 8009608:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800960c:	481a      	ldr	r0, [pc, #104]	; (8009678 <HAL_PWREx_ConfigSupply+0x84>)
 800960e:	f7f8 fa30 	bl	8001a72 <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009612:	4b1a      	ldr	r3, [pc, #104]	; (800967c <HAL_PWREx_ConfigSupply+0x88>)
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	f003 0304 	and.w	r3, r3, #4
 800961a:	2b04      	cmp	r3, #4
 800961c:	d00a      	beq.n	8009634 <HAL_PWREx_ConfigSupply+0x40>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800961e:	4b17      	ldr	r3, [pc, #92]	; (800967c <HAL_PWREx_ConfigSupply+0x88>)
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	f003 0307 	and.w	r3, r3, #7
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	429a      	cmp	r2, r3
 800962a:	d001      	beq.n	8009630 <HAL_PWREx_ConfigSupply+0x3c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e01f      	b.n	8009670 <HAL_PWREx_ConfigSupply+0x7c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	e01d      	b.n	8009670 <HAL_PWREx_ConfigSupply+0x7c>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009634:	4b11      	ldr	r3, [pc, #68]	; (800967c <HAL_PWREx_ConfigSupply+0x88>)
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	f023 0207 	bic.w	r2, r3, #7
 800963c:	490f      	ldr	r1, [pc, #60]	; (800967c <HAL_PWREx_ConfigSupply+0x88>)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4313      	orrs	r3, r2
 8009642:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009644:	f7f9 ff88 	bl	8003558 <HAL_GetTick>
 8009648:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800964a:	e009      	b.n	8009660 <HAL_PWREx_ConfigSupply+0x6c>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800964c:	f7f9 ff84 	bl	8003558 <HAL_GetTick>
 8009650:	4602      	mov	r2, r0
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800965a:	d901      	bls.n	8009660 <HAL_PWREx_ConfigSupply+0x6c>
    {
      return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e007      	b.n	8009670 <HAL_PWREx_ConfigSupply+0x7c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009660:	4b06      	ldr	r3, [pc, #24]	; (800967c <HAL_PWREx_ConfigSupply+0x88>)
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800966c:	d1ee      	bne.n	800964c <HAL_PWREx_ConfigSupply+0x58>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	0801dd54 	.word	0x0801dd54
 800967c:	58024800 	.word	0x58024800

08009680 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009680:	b480      	push	{r7}
 8009682:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009684:	4b05      	ldr	r3, [pc, #20]	; (800969c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	4a04      	ldr	r2, [pc, #16]	; (800969c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800968a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800968e:	60d3      	str	r3, [r2, #12]
}
 8009690:	bf00      	nop
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	58024800 	.word	0x58024800

080096a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b08c      	sub	sp, #48	; 0x30
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d102      	bne.n	80096b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	f000 bd65 	b.w	800a17e <HAL_RCC_OscConfig+0xade>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d028      	beq.n	800970e <HAL_RCC_OscConfig+0x6e>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 0301 	and.w	r3, r3, #1
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d122      	bne.n	800970e <HAL_RCC_OscConfig+0x6e>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 0302 	and.w	r3, r3, #2
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d11c      	bne.n	800970e <HAL_RCC_OscConfig+0x6e>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0310 	and.w	r3, r3, #16
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d116      	bne.n	800970e <HAL_RCC_OscConfig+0x6e>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 0308 	and.w	r3, r3, #8
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d110      	bne.n	800970e <HAL_RCC_OscConfig+0x6e>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0304 	and.w	r3, r3, #4
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10a      	bne.n	800970e <HAL_RCC_OscConfig+0x6e>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 0320 	and.w	r3, r3, #32
 8009700:	2b00      	cmp	r3, #0
 8009702:	d104      	bne.n	800970e <HAL_RCC_OscConfig+0x6e>
 8009704:	f240 11a1 	movw	r1, #417	; 0x1a1
 8009708:	4897      	ldr	r0, [pc, #604]	; (8009968 <HAL_RCC_OscConfig+0x2c8>)
 800970a:	f7f8 f9b2 	bl	8001a72 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	f000 809d 	beq.w	8009856 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00e      	beq.n	8009742 <HAL_RCC_OscConfig+0xa2>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800972c:	d009      	beq.n	8009742 <HAL_RCC_OscConfig+0xa2>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009736:	d004      	beq.n	8009742 <HAL_RCC_OscConfig+0xa2>
 8009738:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800973c:	488a      	ldr	r0, [pc, #552]	; (8009968 <HAL_RCC_OscConfig+0x2c8>)
 800973e:	f7f8 f998 	bl	8001a72 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009742:	4b8a      	ldr	r3, [pc, #552]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800974a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800974c:	4b87      	ldr	r3, [pc, #540]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 800974e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009750:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009754:	2b10      	cmp	r3, #16
 8009756:	d007      	beq.n	8009768 <HAL_RCC_OscConfig+0xc8>
 8009758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975a:	2b18      	cmp	r3, #24
 800975c:	d111      	bne.n	8009782 <HAL_RCC_OscConfig+0xe2>
 800975e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009760:	f003 0303 	and.w	r3, r3, #3
 8009764:	2b02      	cmp	r3, #2
 8009766:	d10c      	bne.n	8009782 <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009768:	4b80      	ldr	r3, [pc, #512]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d06f      	beq.n	8009854 <HAL_RCC_OscConfig+0x1b4>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d16b      	bne.n	8009854 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	f000 bcfe 	b.w	800a17e <HAL_RCC_OscConfig+0xade>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800978a:	d106      	bne.n	800979a <HAL_RCC_OscConfig+0xfa>
 800978c:	4b77      	ldr	r3, [pc, #476]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a76      	ldr	r2, [pc, #472]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 8009792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009796:	6013      	str	r3, [r2, #0]
 8009798:	e02e      	b.n	80097f8 <HAL_RCC_OscConfig+0x158>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10c      	bne.n	80097bc <HAL_RCC_OscConfig+0x11c>
 80097a2:	4b72      	ldr	r3, [pc, #456]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a71      	ldr	r2, [pc, #452]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80097a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	4b6f      	ldr	r3, [pc, #444]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a6e      	ldr	r2, [pc, #440]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80097b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097b8:	6013      	str	r3, [r2, #0]
 80097ba:	e01d      	b.n	80097f8 <HAL_RCC_OscConfig+0x158>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097c4:	d10c      	bne.n	80097e0 <HAL_RCC_OscConfig+0x140>
 80097c6:	4b69      	ldr	r3, [pc, #420]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a68      	ldr	r2, [pc, #416]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80097cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097d0:	6013      	str	r3, [r2, #0]
 80097d2:	4b66      	ldr	r3, [pc, #408]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a65      	ldr	r2, [pc, #404]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80097d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097dc:	6013      	str	r3, [r2, #0]
 80097de:	e00b      	b.n	80097f8 <HAL_RCC_OscConfig+0x158>
 80097e0:	4b62      	ldr	r3, [pc, #392]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a61      	ldr	r2, [pc, #388]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80097e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ea:	6013      	str	r3, [r2, #0]
 80097ec:	4b5f      	ldr	r3, [pc, #380]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a5e      	ldr	r2, [pc, #376]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80097f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d014      	beq.n	800982a <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009800:	f7f9 feaa 	bl	8003558 <HAL_GetTick>
 8009804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009806:	e009      	b.n	800981c <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009808:	f7f9 fea6 	bl	8003558 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	2b64      	cmp	r3, #100	; 0x64
 8009814:	d902      	bls.n	800981c <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	f000 bcb1 	b.w	800a17e <HAL_RCC_OscConfig+0xade>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800981c:	4b53      	ldr	r3, [pc, #332]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d0ef      	beq.n	8009808 <HAL_RCC_OscConfig+0x168>
 8009828:	e015      	b.n	8009856 <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800982a:	f7f9 fe95 	bl	8003558 <HAL_GetTick>
 800982e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009830:	e009      	b.n	8009846 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009832:	f7f9 fe91 	bl	8003558 <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	2b64      	cmp	r3, #100	; 0x64
 800983e:	d902      	bls.n	8009846 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	f000 bc9c 	b.w	800a17e <HAL_RCC_OscConfig+0xade>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009846:	4b49      	ldr	r3, [pc, #292]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1ef      	bne.n	8009832 <HAL_RCC_OscConfig+0x192>
 8009852:	e000      	b.n	8009856 <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 0302 	and.w	r3, r3, #2
 800985e:	2b00      	cmp	r3, #0
 8009860:	f000 80f4 	beq.w	8009a4c <HAL_RCC_OscConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d018      	beq.n	800989e <HAL_RCC_OscConfig+0x1fe>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d014      	beq.n	800989e <HAL_RCC_OscConfig+0x1fe>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d010      	beq.n	800989e <HAL_RCC_OscConfig+0x1fe>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	2b09      	cmp	r3, #9
 8009882:	d00c      	beq.n	800989e <HAL_RCC_OscConfig+0x1fe>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	2b11      	cmp	r3, #17
 800988a:	d008      	beq.n	800989e <HAL_RCC_OscConfig+0x1fe>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	2b19      	cmp	r3, #25
 8009892:	d004      	beq.n	800989e <HAL_RCC_OscConfig+0x1fe>
 8009894:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8009898:	4833      	ldr	r0, [pc, #204]	; (8009968 <HAL_RCC_OscConfig+0x2c8>)
 800989a:	f7f8 f8ea 	bl	8001a72 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	2b7f      	cmp	r3, #127	; 0x7f
 80098a4:	d904      	bls.n	80098b0 <HAL_RCC_OscConfig+0x210>
 80098a6:	f240 11db 	movw	r1, #475	; 0x1db
 80098aa:	482f      	ldr	r0, [pc, #188]	; (8009968 <HAL_RCC_OscConfig+0x2c8>)
 80098ac:	f7f8 f8e1 	bl	8001a72 <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098b0:	4b2e      	ldr	r3, [pc, #184]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098ba:	4b2c      	ldr	r3, [pc, #176]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80098bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098be:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d007      	beq.n	80098d6 <HAL_RCC_OscConfig+0x236>
 80098c6:	6a3b      	ldr	r3, [r7, #32]
 80098c8:	2b18      	cmp	r3, #24
 80098ca:	d15c      	bne.n	8009986 <HAL_RCC_OscConfig+0x2e6>
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	f003 0303 	and.w	r3, r3, #3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d157      	bne.n	8009986 <HAL_RCC_OscConfig+0x2e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098d6:	4b25      	ldr	r3, [pc, #148]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0304 	and.w	r3, r3, #4
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d006      	beq.n	80098f0 <HAL_RCC_OscConfig+0x250>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d102      	bne.n	80098f0 <HAL_RCC_OscConfig+0x250>
      {
        return HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	f000 bc47 	b.w	800a17e <HAL_RCC_OscConfig+0xade>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80098f0:	4b1e      	ldr	r3, [pc, #120]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f023 0219 	bic.w	r2, r3, #25
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	491b      	ldr	r1, [pc, #108]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 80098fe:	4313      	orrs	r3, r2
 8009900:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009902:	f7f9 fe29 	bl	8003558 <HAL_GetTick>
 8009906:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009908:	e009      	b.n	800991e <HAL_RCC_OscConfig+0x27e>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800990a:	f7f9 fe25 	bl	8003558 <HAL_GetTick>
 800990e:	4602      	mov	r2, r0
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	2b02      	cmp	r3, #2
 8009916:	d902      	bls.n	800991e <HAL_RCC_OscConfig+0x27e>
            {
              return HAL_TIMEOUT;
 8009918:	2303      	movs	r3, #3
 800991a:	f000 bc30 	b.w	800a17e <HAL_RCC_OscConfig+0xade>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800991e:	4b13      	ldr	r3, [pc, #76]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 0304 	and.w	r3, r3, #4
 8009926:	2b00      	cmp	r3, #0
 8009928:	d0ef      	beq.n	800990a <HAL_RCC_OscConfig+0x26a>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800992a:	f7f9 fe45 	bl	80035b8 <HAL_GetREVID>
 800992e:	4603      	mov	r3, r0
 8009930:	f241 0203 	movw	r2, #4099	; 0x1003
 8009934:	4293      	cmp	r3, r2
 8009936:	d81b      	bhi.n	8009970 <HAL_RCC_OscConfig+0x2d0>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	2b40      	cmp	r3, #64	; 0x40
 800993e:	d108      	bne.n	8009952 <HAL_RCC_OscConfig+0x2b2>
 8009940:	4b0a      	ldr	r3, [pc, #40]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009948:	4a08      	ldr	r2, [pc, #32]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 800994a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800994e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009950:	e07c      	b.n	8009a4c <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009952:	4b06      	ldr	r3, [pc, #24]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	031b      	lsls	r3, r3, #12
 8009960:	4902      	ldr	r1, [pc, #8]	; (800996c <HAL_RCC_OscConfig+0x2cc>)
 8009962:	4313      	orrs	r3, r2
 8009964:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009966:	e071      	b.n	8009a4c <HAL_RCC_OscConfig+0x3ac>
 8009968:	0801dd90 	.word	0x0801dd90
 800996c:	58024400 	.word	0x58024400
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009970:	4b96      	ldr	r3, [pc, #600]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	061b      	lsls	r3, r3, #24
 800997e:	4993      	ldr	r1, [pc, #588]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009980:	4313      	orrs	r3, r2
 8009982:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009984:	e062      	b.n	8009a4c <HAL_RCC_OscConfig+0x3ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d045      	beq.n	8009a1a <HAL_RCC_OscConfig+0x37a>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800998e:	4b8f      	ldr	r3, [pc, #572]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f023 0219 	bic.w	r2, r3, #25
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	498c      	ldr	r1, [pc, #560]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 800999c:	4313      	orrs	r3, r2
 800999e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a0:	f7f9 fdda 	bl	8003558 <HAL_GetTick>
 80099a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099a6:	e008      	b.n	80099ba <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099a8:	f7f9 fdd6 	bl	8003558 <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d901      	bls.n	80099ba <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e3e1      	b.n	800a17e <HAL_RCC_OscConfig+0xade>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099ba:	4b84      	ldr	r3, [pc, #528]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 0304 	and.w	r3, r3, #4
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d0f0      	beq.n	80099a8 <HAL_RCC_OscConfig+0x308>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099c6:	f7f9 fdf7 	bl	80035b8 <HAL_GetREVID>
 80099ca:	4603      	mov	r3, r0
 80099cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d817      	bhi.n	8009a04 <HAL_RCC_OscConfig+0x364>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	2b40      	cmp	r3, #64	; 0x40
 80099da:	d108      	bne.n	80099ee <HAL_RCC_OscConfig+0x34e>
 80099dc:	4b7b      	ldr	r3, [pc, #492]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80099e4:	4a79      	ldr	r2, [pc, #484]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 80099e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099ea:	6053      	str	r3, [r2, #4]
 80099ec:	e02e      	b.n	8009a4c <HAL_RCC_OscConfig+0x3ac>
 80099ee:	4b77      	ldr	r3, [pc, #476]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	031b      	lsls	r3, r3, #12
 80099fc:	4973      	ldr	r1, [pc, #460]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	604b      	str	r3, [r1, #4]
 8009a02:	e023      	b.n	8009a4c <HAL_RCC_OscConfig+0x3ac>
 8009a04:	4b71      	ldr	r3, [pc, #452]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	061b      	lsls	r3, r3, #24
 8009a12:	496e      	ldr	r1, [pc, #440]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009a14:	4313      	orrs	r3, r2
 8009a16:	604b      	str	r3, [r1, #4]
 8009a18:	e018      	b.n	8009a4c <HAL_RCC_OscConfig+0x3ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a1a:	4b6c      	ldr	r3, [pc, #432]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a6b      	ldr	r2, [pc, #428]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009a20:	f023 0301 	bic.w	r3, r3, #1
 8009a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a26:	f7f9 fd97 	bl	8003558 <HAL_GetTick>
 8009a2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a2c:	e008      	b.n	8009a40 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a2e:	f7f9 fd93 	bl	8003558 <HAL_GetTick>
 8009a32:	4602      	mov	r2, r0
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d901      	bls.n	8009a40 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e39e      	b.n	800a17e <HAL_RCC_OscConfig+0xade>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a40:	4b62      	ldr	r3, [pc, #392]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 0304 	and.w	r3, r3, #4
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1f0      	bne.n	8009a2e <HAL_RCC_OscConfig+0x38e>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 0310 	and.w	r3, r3, #16
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f000 80c3 	beq.w	8009be0 <HAL_RCC_OscConfig+0x540>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d008      	beq.n	8009a74 <HAL_RCC_OscConfig+0x3d4>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	2b80      	cmp	r3, #128	; 0x80
 8009a68:	d004      	beq.n	8009a74 <HAL_RCC_OscConfig+0x3d4>
 8009a6a:	f240 212b 	movw	r1, #555	; 0x22b
 8009a6e:	4858      	ldr	r0, [pc, #352]	; (8009bd0 <HAL_RCC_OscConfig+0x530>)
 8009a70:	f7f7 ffff 	bl	8001a72 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	2b3f      	cmp	r3, #63	; 0x3f
 8009a7a:	d904      	bls.n	8009a86 <HAL_RCC_OscConfig+0x3e6>
 8009a7c:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8009a80:	4853      	ldr	r0, [pc, #332]	; (8009bd0 <HAL_RCC_OscConfig+0x530>)
 8009a82:	f7f7 fff6 	bl	8001a72 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a86:	4b51      	ldr	r3, [pc, #324]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a90:	4b4e      	ldr	r3, [pc, #312]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a94:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	2b08      	cmp	r3, #8
 8009a9a:	d007      	beq.n	8009aac <HAL_RCC_OscConfig+0x40c>
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	2b18      	cmp	r3, #24
 8009aa0:	d13a      	bne.n	8009b18 <HAL_RCC_OscConfig+0x478>
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	f003 0303 	and.w	r3, r3, #3
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d135      	bne.n	8009b18 <HAL_RCC_OscConfig+0x478>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009aac:	4b47      	ldr	r3, [pc, #284]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d005      	beq.n	8009ac4 <HAL_RCC_OscConfig+0x424>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	69db      	ldr	r3, [r3, #28]
 8009abc:	2b80      	cmp	r3, #128	; 0x80
 8009abe:	d001      	beq.n	8009ac4 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e35c      	b.n	800a17e <HAL_RCC_OscConfig+0xade>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ac4:	f7f9 fd78 	bl	80035b8 <HAL_GetREVID>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	f241 0203 	movw	r2, #4099	; 0x1003
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d817      	bhi.n	8009b02 <HAL_RCC_OscConfig+0x462>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	2b20      	cmp	r3, #32
 8009ad8:	d108      	bne.n	8009aec <HAL_RCC_OscConfig+0x44c>
 8009ada:	4b3c      	ldr	r3, [pc, #240]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009ae2:	4a3a      	ldr	r2, [pc, #232]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009ae4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ae8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009aea:	e079      	b.n	8009be0 <HAL_RCC_OscConfig+0x540>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009aec:	4b37      	ldr	r3, [pc, #220]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a1b      	ldr	r3, [r3, #32]
 8009af8:	069b      	lsls	r3, r3, #26
 8009afa:	4934      	ldr	r1, [pc, #208]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b00:	e06e      	b.n	8009be0 <HAL_RCC_OscConfig+0x540>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b02:	4b32      	ldr	r3, [pc, #200]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a1b      	ldr	r3, [r3, #32]
 8009b0e:	061b      	lsls	r3, r3, #24
 8009b10:	492e      	ldr	r1, [pc, #184]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009b12:	4313      	orrs	r3, r2
 8009b14:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b16:	e063      	b.n	8009be0 <HAL_RCC_OscConfig+0x540>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	69db      	ldr	r3, [r3, #28]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d042      	beq.n	8009ba6 <HAL_RCC_OscConfig+0x506>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009b20:	4b2a      	ldr	r3, [pc, #168]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a29      	ldr	r2, [pc, #164]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b2c:	f7f9 fd14 	bl	8003558 <HAL_GetTick>
 8009b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b32:	e008      	b.n	8009b46 <HAL_RCC_OscConfig+0x4a6>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009b34:	f7f9 fd10 	bl	8003558 <HAL_GetTick>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	1ad3      	subs	r3, r2, r3
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d901      	bls.n	8009b46 <HAL_RCC_OscConfig+0x4a6>
          {
            return HAL_TIMEOUT;
 8009b42:	2303      	movs	r3, #3
 8009b44:	e31b      	b.n	800a17e <HAL_RCC_OscConfig+0xade>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b46:	4b21      	ldr	r3, [pc, #132]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d0f0      	beq.n	8009b34 <HAL_RCC_OscConfig+0x494>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b52:	f7f9 fd31 	bl	80035b8 <HAL_GetREVID>
 8009b56:	4603      	mov	r3, r0
 8009b58:	f241 0203 	movw	r2, #4099	; 0x1003
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d817      	bhi.n	8009b90 <HAL_RCC_OscConfig+0x4f0>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a1b      	ldr	r3, [r3, #32]
 8009b64:	2b20      	cmp	r3, #32
 8009b66:	d108      	bne.n	8009b7a <HAL_RCC_OscConfig+0x4da>
 8009b68:	4b18      	ldr	r3, [pc, #96]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009b70:	4a16      	ldr	r2, [pc, #88]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009b72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b76:	6053      	str	r3, [r2, #4]
 8009b78:	e032      	b.n	8009be0 <HAL_RCC_OscConfig+0x540>
 8009b7a:	4b14      	ldr	r3, [pc, #80]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	069b      	lsls	r3, r3, #26
 8009b88:	4910      	ldr	r1, [pc, #64]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	604b      	str	r3, [r1, #4]
 8009b8e:	e027      	b.n	8009be0 <HAL_RCC_OscConfig+0x540>
 8009b90:	4b0e      	ldr	r3, [pc, #56]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a1b      	ldr	r3, [r3, #32]
 8009b9c:	061b      	lsls	r3, r3, #24
 8009b9e:	490b      	ldr	r1, [pc, #44]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	60cb      	str	r3, [r1, #12]
 8009ba4:	e01c      	b.n	8009be0 <HAL_RCC_OscConfig+0x540>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009ba6:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a08      	ldr	r2, [pc, #32]	; (8009bcc <HAL_RCC_OscConfig+0x52c>)
 8009bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bb2:	f7f9 fcd1 	bl	8003558 <HAL_GetTick>
 8009bb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009bb8:	e00c      	b.n	8009bd4 <HAL_RCC_OscConfig+0x534>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009bba:	f7f9 fccd 	bl	8003558 <HAL_GetTick>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d905      	bls.n	8009bd4 <HAL_RCC_OscConfig+0x534>
          {
            return HAL_TIMEOUT;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e2d8      	b.n	800a17e <HAL_RCC_OscConfig+0xade>
 8009bcc:	58024400 	.word	0x58024400
 8009bd0:	0801dd90 	.word	0x0801dd90
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009bd4:	4b96      	ldr	r3, [pc, #600]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1ec      	bne.n	8009bba <HAL_RCC_OscConfig+0x51a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 0308 	and.w	r3, r3, #8
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d043      	beq.n	8009c74 <HAL_RCC_OscConfig+0x5d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d008      	beq.n	8009c06 <HAL_RCC_OscConfig+0x566>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	695b      	ldr	r3, [r3, #20]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d004      	beq.n	8009c06 <HAL_RCC_OscConfig+0x566>
 8009bfc:	f240 216d 	movw	r1, #621	; 0x26d
 8009c00:	488c      	ldr	r0, [pc, #560]	; (8009e34 <HAL_RCC_OscConfig+0x794>)
 8009c02:	f7f7 ff36 	bl	8001a72 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d019      	beq.n	8009c42 <HAL_RCC_OscConfig+0x5a2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c0e:	4b88      	ldr	r3, [pc, #544]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c12:	4a87      	ldr	r2, [pc, #540]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009c14:	f043 0301 	orr.w	r3, r3, #1
 8009c18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c1a:	f7f9 fc9d 	bl	8003558 <HAL_GetTick>
 8009c1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c20:	e008      	b.n	8009c34 <HAL_RCC_OscConfig+0x594>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c22:	f7f9 fc99 	bl	8003558 <HAL_GetTick>
 8009c26:	4602      	mov	r2, r0
 8009c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d901      	bls.n	8009c34 <HAL_RCC_OscConfig+0x594>
        {
          return HAL_TIMEOUT;
 8009c30:	2303      	movs	r3, #3
 8009c32:	e2a4      	b.n	800a17e <HAL_RCC_OscConfig+0xade>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c34:	4b7e      	ldr	r3, [pc, #504]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c38:	f003 0302 	and.w	r3, r3, #2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d0f0      	beq.n	8009c22 <HAL_RCC_OscConfig+0x582>
 8009c40:	e018      	b.n	8009c74 <HAL_RCC_OscConfig+0x5d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c42:	4b7b      	ldr	r3, [pc, #492]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c46:	4a7a      	ldr	r2, [pc, #488]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009c48:	f023 0301 	bic.w	r3, r3, #1
 8009c4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c4e:	f7f9 fc83 	bl	8003558 <HAL_GetTick>
 8009c52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c54:	e008      	b.n	8009c68 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c56:	f7f9 fc7f 	bl	8003558 <HAL_GetTick>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d901      	bls.n	8009c68 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e28a      	b.n	800a17e <HAL_RCC_OscConfig+0xade>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c68:	4b71      	ldr	r3, [pc, #452]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c6c:	f003 0302 	and.w	r3, r3, #2
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1f0      	bne.n	8009c56 <HAL_RCC_OscConfig+0x5b6>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0320 	and.w	r3, r3, #32
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d043      	beq.n	8009d08 <HAL_RCC_OscConfig+0x668>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d008      	beq.n	8009c9a <HAL_RCC_OscConfig+0x5fa>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d004      	beq.n	8009c9a <HAL_RCC_OscConfig+0x5fa>
 8009c90:	f44f 7126 	mov.w	r1, #664	; 0x298
 8009c94:	4867      	ldr	r0, [pc, #412]	; (8009e34 <HAL_RCC_OscConfig+0x794>)
 8009c96:	f7f7 feec 	bl	8001a72 <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d019      	beq.n	8009cd6 <HAL_RCC_OscConfig+0x636>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009ca2:	4b63      	ldr	r3, [pc, #396]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a62      	ldr	r2, [pc, #392]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009ca8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009cac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009cae:	f7f9 fc53 	bl	8003558 <HAL_GetTick>
 8009cb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009cb4:	e008      	b.n	8009cc8 <HAL_RCC_OscConfig+0x628>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009cb6:	f7f9 fc4f 	bl	8003558 <HAL_GetTick>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbe:	1ad3      	subs	r3, r2, r3
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d901      	bls.n	8009cc8 <HAL_RCC_OscConfig+0x628>
        {
          return HAL_TIMEOUT;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	e25a      	b.n	800a17e <HAL_RCC_OscConfig+0xade>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009cc8:	4b59      	ldr	r3, [pc, #356]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d0f0      	beq.n	8009cb6 <HAL_RCC_OscConfig+0x616>
 8009cd4:	e018      	b.n	8009d08 <HAL_RCC_OscConfig+0x668>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009cd6:	4b56      	ldr	r3, [pc, #344]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a55      	ldr	r2, [pc, #340]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ce0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009ce2:	f7f9 fc39 	bl	8003558 <HAL_GetTick>
 8009ce6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009ce8:	e008      	b.n	8009cfc <HAL_RCC_OscConfig+0x65c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009cea:	f7f9 fc35 	bl	8003558 <HAL_GetTick>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d901      	bls.n	8009cfc <HAL_RCC_OscConfig+0x65c>
        {
          return HAL_TIMEOUT;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e240      	b.n	800a17e <HAL_RCC_OscConfig+0xade>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009cfc:	4b4c      	ldr	r3, [pc, #304]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1f0      	bne.n	8009cea <HAL_RCC_OscConfig+0x64a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 0304 	and.w	r3, r3, #4
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f000 8099 	beq.w	8009e48 <HAL_RCC_OscConfig+0x7a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00c      	beq.n	8009d38 <HAL_RCC_OscConfig+0x698>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d008      	beq.n	8009d38 <HAL_RCC_OscConfig+0x698>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	2b05      	cmp	r3, #5
 8009d2c:	d004      	beq.n	8009d38 <HAL_RCC_OscConfig+0x698>
 8009d2e:	f240 21c2 	movw	r1, #706	; 0x2c2
 8009d32:	4840      	ldr	r0, [pc, #256]	; (8009e34 <HAL_RCC_OscConfig+0x794>)
 8009d34:	f7f7 fe9d 	bl	8001a72 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009d38:	4b3f      	ldr	r3, [pc, #252]	; (8009e38 <HAL_RCC_OscConfig+0x798>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a3e      	ldr	r2, [pc, #248]	; (8009e38 <HAL_RCC_OscConfig+0x798>)
 8009d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d44:	f7f9 fc08 	bl	8003558 <HAL_GetTick>
 8009d48:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d4a:	e008      	b.n	8009d5e <HAL_RCC_OscConfig+0x6be>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009d4c:	f7f9 fc04 	bl	8003558 <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	2b64      	cmp	r3, #100	; 0x64
 8009d58:	d901      	bls.n	8009d5e <HAL_RCC_OscConfig+0x6be>
      {
        return HAL_TIMEOUT;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	e20f      	b.n	800a17e <HAL_RCC_OscConfig+0xade>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d5e:	4b36      	ldr	r3, [pc, #216]	; (8009e38 <HAL_RCC_OscConfig+0x798>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d0f0      	beq.n	8009d4c <HAL_RCC_OscConfig+0x6ac>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d106      	bne.n	8009d80 <HAL_RCC_OscConfig+0x6e0>
 8009d72:	4b2f      	ldr	r3, [pc, #188]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d76:	4a2e      	ldr	r2, [pc, #184]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009d78:	f043 0301 	orr.w	r3, r3, #1
 8009d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d7e:	e02d      	b.n	8009ddc <HAL_RCC_OscConfig+0x73c>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10c      	bne.n	8009da2 <HAL_RCC_OscConfig+0x702>
 8009d88:	4b29      	ldr	r3, [pc, #164]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8c:	4a28      	ldr	r2, [pc, #160]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009d8e:	f023 0301 	bic.w	r3, r3, #1
 8009d92:	6713      	str	r3, [r2, #112]	; 0x70
 8009d94:	4b26      	ldr	r3, [pc, #152]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d98:	4a25      	ldr	r2, [pc, #148]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009d9a:	f023 0304 	bic.w	r3, r3, #4
 8009d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8009da0:	e01c      	b.n	8009ddc <HAL_RCC_OscConfig+0x73c>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	2b05      	cmp	r3, #5
 8009da8:	d10c      	bne.n	8009dc4 <HAL_RCC_OscConfig+0x724>
 8009daa:	4b21      	ldr	r3, [pc, #132]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dae:	4a20      	ldr	r2, [pc, #128]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009db0:	f043 0304 	orr.w	r3, r3, #4
 8009db4:	6713      	str	r3, [r2, #112]	; 0x70
 8009db6:	4b1e      	ldr	r3, [pc, #120]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dba:	4a1d      	ldr	r2, [pc, #116]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009dbc:	f043 0301 	orr.w	r3, r3, #1
 8009dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8009dc2:	e00b      	b.n	8009ddc <HAL_RCC_OscConfig+0x73c>
 8009dc4:	4b1a      	ldr	r3, [pc, #104]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc8:	4a19      	ldr	r2, [pc, #100]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009dca:	f023 0301 	bic.w	r3, r3, #1
 8009dce:	6713      	str	r3, [r2, #112]	; 0x70
 8009dd0:	4b17      	ldr	r3, [pc, #92]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd4:	4a16      	ldr	r2, [pc, #88]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009dd6:	f023 0304 	bic.w	r3, r3, #4
 8009dda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d015      	beq.n	8009e10 <HAL_RCC_OscConfig+0x770>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009de4:	f7f9 fbb8 	bl	8003558 <HAL_GetTick>
 8009de8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dea:	e00a      	b.n	8009e02 <HAL_RCC_OscConfig+0x762>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009dec:	f7f9 fbb4 	bl	8003558 <HAL_GetTick>
 8009df0:	4602      	mov	r2, r0
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d901      	bls.n	8009e02 <HAL_RCC_OscConfig+0x762>
        {
          return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e1bd      	b.n	800a17e <HAL_RCC_OscConfig+0xade>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e02:	4b0b      	ldr	r3, [pc, #44]	; (8009e30 <HAL_RCC_OscConfig+0x790>)
 8009e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e06:	f003 0302 	and.w	r3, r3, #2
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d0ee      	beq.n	8009dec <HAL_RCC_OscConfig+0x74c>
 8009e0e:	e01b      	b.n	8009e48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e10:	f7f9 fba2 	bl	8003558 <HAL_GetTick>
 8009e14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e16:	e011      	b.n	8009e3c <HAL_RCC_OscConfig+0x79c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e18:	f7f9 fb9e 	bl	8003558 <HAL_GetTick>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d908      	bls.n	8009e3c <HAL_RCC_OscConfig+0x79c>
        {
          return HAL_TIMEOUT;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e1a7      	b.n	800a17e <HAL_RCC_OscConfig+0xade>
 8009e2e:	bf00      	nop
 8009e30:	58024400 	.word	0x58024400
 8009e34:	0801dd90 	.word	0x0801dd90
 8009e38:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e3c:	4b97      	ldr	r3, [pc, #604]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 8009e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e40:	f003 0302 	and.w	r3, r3, #2
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1e7      	bne.n	8009e18 <HAL_RCC_OscConfig+0x778>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00c      	beq.n	8009e6a <HAL_RCC_OscConfig+0x7ca>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d008      	beq.n	8009e6a <HAL_RCC_OscConfig+0x7ca>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d004      	beq.n	8009e6a <HAL_RCC_OscConfig+0x7ca>
 8009e60:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8009e64:	488e      	ldr	r0, [pc, #568]	; (800a0a0 <HAL_RCC_OscConfig+0xa00>)
 8009e66:	f7f7 fe04 	bl	8001a72 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f000 8184 	beq.w	800a17c <HAL_RCC_OscConfig+0xadc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009e74:	4b89      	ldr	r3, [pc, #548]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e7c:	2b18      	cmp	r3, #24
 8009e7e:	f000 813f 	beq.w	800a100 <HAL_RCC_OscConfig+0xa60>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	f040 8120 	bne.w	800a0cc <HAL_RCC_OscConfig+0xa2c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d010      	beq.n	8009eb6 <HAL_RCC_OscConfig+0x816>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00c      	beq.n	8009eb6 <HAL_RCC_OscConfig+0x816>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	d008      	beq.n	8009eb6 <HAL_RCC_OscConfig+0x816>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d004      	beq.n	8009eb6 <HAL_RCC_OscConfig+0x816>
 8009eac:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009eb0:	487b      	ldr	r0, [pc, #492]	; (800a0a0 <HAL_RCC_OscConfig+0xa00>)
 8009eb2:	f7f7 fdde 	bl	8001a72 <assert_failed>
        assert_param(IS_RCC_PLLRGE_VALUE(RCC_OscInitStruct->PLL.PLLRGE));
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d010      	beq.n	8009ee0 <HAL_RCC_OscConfig+0x840>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec2:	2b04      	cmp	r3, #4
 8009ec4:	d00c      	beq.n	8009ee0 <HAL_RCC_OscConfig+0x840>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eca:	2b08      	cmp	r3, #8
 8009ecc:	d008      	beq.n	8009ee0 <HAL_RCC_OscConfig+0x840>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed2:	2b0c      	cmp	r3, #12
 8009ed4:	d004      	beq.n	8009ee0 <HAL_RCC_OscConfig+0x840>
 8009ed6:	f240 21fe 	movw	r1, #766	; 0x2fe
 8009eda:	4871      	ldr	r0, [pc, #452]	; (800a0a0 <HAL_RCC_OscConfig+0xa00>)
 8009edc:	f7f7 fdc9 	bl	8001a72 <assert_failed>
        assert_param(IS_RCC_PLLVCO_VALUE(RCC_OscInitStruct->PLL.PLLVCOSEL));
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d008      	beq.n	8009efa <HAL_RCC_OscConfig+0x85a>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d004      	beq.n	8009efa <HAL_RCC_OscConfig+0x85a>
 8009ef0:	f240 21ff 	movw	r1, #767	; 0x2ff
 8009ef4:	486a      	ldr	r0, [pc, #424]	; (800a0a0 <HAL_RCC_OscConfig+0xa00>)
 8009ef6:	f7f7 fdbc 	bl	8001a72 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d003      	beq.n	8009f0a <HAL_RCC_OscConfig+0x86a>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f06:	2b3f      	cmp	r3, #63	; 0x3f
 8009f08:	d904      	bls.n	8009f14 <HAL_RCC_OscConfig+0x874>
 8009f0a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8009f0e:	4864      	ldr	r0, [pc, #400]	; (800a0a0 <HAL_RCC_OscConfig+0xa00>)
 8009f10:	f7f7 fdaf 	bl	8001a72 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f18:	2b03      	cmp	r3, #3
 8009f1a:	d904      	bls.n	8009f26 <HAL_RCC_OscConfig+0x886>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f24:	d904      	bls.n	8009f30 <HAL_RCC_OscConfig+0x890>
 8009f26:	f240 3101 	movw	r1, #769	; 0x301
 8009f2a:	485d      	ldr	r0, [pc, #372]	; (800a0a0 <HAL_RCC_OscConfig+0xa00>)
 8009f2c:	f7f7 fda1 	bl	8001a72 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d003      	beq.n	8009f40 <HAL_RCC_OscConfig+0x8a0>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3c:	2b80      	cmp	r3, #128	; 0x80
 8009f3e:	d904      	bls.n	8009f4a <HAL_RCC_OscConfig+0x8aa>
 8009f40:	f240 3102 	movw	r1, #770	; 0x302
 8009f44:	4856      	ldr	r0, [pc, #344]	; (800a0a0 <HAL_RCC_OscConfig+0xa00>)
 8009f46:	f7f7 fd94 	bl	8001a72 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d003      	beq.n	8009f5a <HAL_RCC_OscConfig+0x8ba>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f56:	2b80      	cmp	r3, #128	; 0x80
 8009f58:	d904      	bls.n	8009f64 <HAL_RCC_OscConfig+0x8c4>
 8009f5a:	f240 3103 	movw	r1, #771	; 0x303
 8009f5e:	4850      	ldr	r0, [pc, #320]	; (800a0a0 <HAL_RCC_OscConfig+0xa00>)
 8009f60:	f7f7 fd87 	bl	8001a72 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d003      	beq.n	8009f74 <HAL_RCC_OscConfig+0x8d4>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f70:	2b80      	cmp	r3, #128	; 0x80
 8009f72:	d904      	bls.n	8009f7e <HAL_RCC_OscConfig+0x8de>
 8009f74:	f44f 7141 	mov.w	r1, #772	; 0x304
 8009f78:	4849      	ldr	r0, [pc, #292]	; (800a0a0 <HAL_RCC_OscConfig+0xa00>)
 8009f7a:	f7f7 fd7a 	bl	8001a72 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f86:	d304      	bcc.n	8009f92 <HAL_RCC_OscConfig+0x8f2>
 8009f88:	f240 3105 	movw	r1, #773	; 0x305
 8009f8c:	4844      	ldr	r0, [pc, #272]	; (800a0a0 <HAL_RCC_OscConfig+0xa00>)
 8009f8e:	f7f7 fd70 	bl	8001a72 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f92:	4b42      	ldr	r3, [pc, #264]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a41      	ldr	r2, [pc, #260]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 8009f98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f9e:	f7f9 fadb 	bl	8003558 <HAL_GetTick>
 8009fa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fa4:	e008      	b.n	8009fb8 <HAL_RCC_OscConfig+0x918>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009fa6:	f7f9 fad7 	bl	8003558 <HAL_GetTick>
 8009faa:	4602      	mov	r2, r0
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d901      	bls.n	8009fb8 <HAL_RCC_OscConfig+0x918>
          {
            return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e0e2      	b.n	800a17e <HAL_RCC_OscConfig+0xade>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fb8:	4b38      	ldr	r3, [pc, #224]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1f0      	bne.n	8009fa6 <HAL_RCC_OscConfig+0x906>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fc4:	4b35      	ldr	r3, [pc, #212]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 8009fc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fc8:	4b36      	ldr	r3, [pc, #216]	; (800a0a4 <HAL_RCC_OscConfig+0xa04>)
 8009fca:	4013      	ands	r3, r2
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009fd4:	0112      	lsls	r2, r2, #4
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	4930      	ldr	r1, [pc, #192]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	628b      	str	r3, [r1, #40]	; 0x28
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fec:	3b01      	subs	r3, #1
 8009fee:	025b      	lsls	r3, r3, #9
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	041b      	lsls	r3, r3, #16
 8009ffc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a000:	431a      	orrs	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a006:	3b01      	subs	r3, #1
 800a008:	061b      	lsls	r3, r3, #24
 800a00a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a00e:	4923      	ldr	r1, [pc, #140]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a010:	4313      	orrs	r3, r2
 800a012:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a014:	4b21      	ldr	r3, [pc, #132]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a018:	4a20      	ldr	r2, [pc, #128]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a01a:	f023 0301 	bic.w	r3, r3, #1
 800a01e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a020:	4b1e      	ldr	r3, [pc, #120]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a024:	4b20      	ldr	r3, [pc, #128]	; (800a0a8 <HAL_RCC_OscConfig+0xa08>)
 800a026:	4013      	ands	r3, r2
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a02c:	00d2      	lsls	r2, r2, #3
 800a02e:	491b      	ldr	r1, [pc, #108]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a030:	4313      	orrs	r3, r2
 800a032:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a034:	4b19      	ldr	r3, [pc, #100]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a038:	f023 020c 	bic.w	r2, r3, #12
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a040:	4916      	ldr	r1, [pc, #88]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a042:	4313      	orrs	r3, r2
 800a044:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a046:	4b15      	ldr	r3, [pc, #84]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04a:	f023 0202 	bic.w	r2, r3, #2
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a052:	4912      	ldr	r1, [pc, #72]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a054:	4313      	orrs	r3, r2
 800a056:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a058:	4b10      	ldr	r3, [pc, #64]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05c:	4a0f      	ldr	r2, [pc, #60]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a05e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a062:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a064:	4b0d      	ldr	r3, [pc, #52]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a068:	4a0c      	ldr	r2, [pc, #48]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a06a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a06e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a070:	4b0a      	ldr	r3, [pc, #40]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a074:	4a09      	ldr	r2, [pc, #36]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a076:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a07a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a07c:	4b07      	ldr	r3, [pc, #28]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a080:	4a06      	ldr	r2, [pc, #24]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a082:	f043 0301 	orr.w	r3, r3, #1
 800a086:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a088:	4b04      	ldr	r3, [pc, #16]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a03      	ldr	r2, [pc, #12]	; (800a09c <HAL_RCC_OscConfig+0x9fc>)
 800a08e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a094:	f7f9 fa60 	bl	8003558 <HAL_GetTick>
 800a098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a09a:	e010      	b.n	800a0be <HAL_RCC_OscConfig+0xa1e>
 800a09c:	58024400 	.word	0x58024400
 800a0a0:	0801dd90 	.word	0x0801dd90
 800a0a4:	fffffc0c 	.word	0xfffffc0c
 800a0a8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0ac:	f7f9 fa54 	bl	8003558 <HAL_GetTick>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d901      	bls.n	800a0be <HAL_RCC_OscConfig+0xa1e>
          {
            return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e05f      	b.n	800a17e <HAL_RCC_OscConfig+0xade>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0be:	4b32      	ldr	r3, [pc, #200]	; (800a188 <HAL_RCC_OscConfig+0xae8>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d0f0      	beq.n	800a0ac <HAL_RCC_OscConfig+0xa0c>
 800a0ca:	e057      	b.n	800a17c <HAL_RCC_OscConfig+0xadc>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0cc:	4b2e      	ldr	r3, [pc, #184]	; (800a188 <HAL_RCC_OscConfig+0xae8>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a2d      	ldr	r2, [pc, #180]	; (800a188 <HAL_RCC_OscConfig+0xae8>)
 800a0d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0d8:	f7f9 fa3e 	bl	8003558 <HAL_GetTick>
 800a0dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0de:	e008      	b.n	800a0f2 <HAL_RCC_OscConfig+0xa52>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0e0:	f7f9 fa3a 	bl	8003558 <HAL_GetTick>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d901      	bls.n	800a0f2 <HAL_RCC_OscConfig+0xa52>
          {
            return HAL_TIMEOUT;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	e045      	b.n	800a17e <HAL_RCC_OscConfig+0xade>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0f2:	4b25      	ldr	r3, [pc, #148]	; (800a188 <HAL_RCC_OscConfig+0xae8>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1f0      	bne.n	800a0e0 <HAL_RCC_OscConfig+0xa40>
 800a0fe:	e03d      	b.n	800a17c <HAL_RCC_OscConfig+0xadc>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a100:	4b21      	ldr	r3, [pc, #132]	; (800a188 <HAL_RCC_OscConfig+0xae8>)
 800a102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a104:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a106:	4b20      	ldr	r3, [pc, #128]	; (800a188 <HAL_RCC_OscConfig+0xae8>)
 800a108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a110:	2b01      	cmp	r3, #1
 800a112:	d031      	beq.n	800a178 <HAL_RCC_OscConfig+0xad8>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	f003 0203 	and.w	r2, r3, #3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a11e:	429a      	cmp	r2, r3
 800a120:	d12a      	bne.n	800a178 <HAL_RCC_OscConfig+0xad8>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	091b      	lsrs	r3, r3, #4
 800a126:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a12e:	429a      	cmp	r2, r3
 800a130:	d122      	bne.n	800a178 <HAL_RCC_OscConfig+0xad8>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a13c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a13e:	429a      	cmp	r2, r3
 800a140:	d11a      	bne.n	800a178 <HAL_RCC_OscConfig+0xad8>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	0a5b      	lsrs	r3, r3, #9
 800a146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a14e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a150:	429a      	cmp	r2, r3
 800a152:	d111      	bne.n	800a178 <HAL_RCC_OscConfig+0xad8>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	0c1b      	lsrs	r3, r3, #16
 800a158:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a160:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a162:	429a      	cmp	r2, r3
 800a164:	d108      	bne.n	800a178 <HAL_RCC_OscConfig+0xad8>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	0e1b      	lsrs	r3, r3, #24
 800a16a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a172:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a174:	429a      	cmp	r2, r3
 800a176:	d001      	beq.n	800a17c <HAL_RCC_OscConfig+0xadc>
      {
        return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e000      	b.n	800a17e <HAL_RCC_OscConfig+0xade>
      }
    }
  }
  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3730      	adds	r7, #48	; 0x30
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	58024400 	.word	0x58024400

0800a18c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e354      	b.n	800a84a <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d003      	beq.n	800a1b0 <HAL_RCC_ClockConfig+0x24>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2b3f      	cmp	r3, #63	; 0x3f
 800a1ae:	d904      	bls.n	800a1ba <HAL_RCC_ClockConfig+0x2e>
 800a1b0:	f240 3192 	movw	r1, #914	; 0x392
 800a1b4:	4827      	ldr	r0, [pc, #156]	; (800a254 <HAL_RCC_ClockConfig+0xc8>)
 800a1b6:	f7f7 fc5c 	bl	8001a72 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d031      	beq.n	800a224 <HAL_RCC_ClockConfig+0x98>
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d02e      	beq.n	800a224 <HAL_RCC_ClockConfig+0x98>
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d02b      	beq.n	800a224 <HAL_RCC_ClockConfig+0x98>
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d028      	beq.n	800a224 <HAL_RCC_ClockConfig+0x98>
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	2b04      	cmp	r3, #4
 800a1d6:	d025      	beq.n	800a224 <HAL_RCC_ClockConfig+0x98>
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	2b05      	cmp	r3, #5
 800a1dc:	d022      	beq.n	800a224 <HAL_RCC_ClockConfig+0x98>
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2b06      	cmp	r3, #6
 800a1e2:	d01f      	beq.n	800a224 <HAL_RCC_ClockConfig+0x98>
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	2b07      	cmp	r3, #7
 800a1e8:	d01c      	beq.n	800a224 <HAL_RCC_ClockConfig+0x98>
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2b08      	cmp	r3, #8
 800a1ee:	d019      	beq.n	800a224 <HAL_RCC_ClockConfig+0x98>
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	2b09      	cmp	r3, #9
 800a1f4:	d016      	beq.n	800a224 <HAL_RCC_ClockConfig+0x98>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2b0a      	cmp	r3, #10
 800a1fa:	d013      	beq.n	800a224 <HAL_RCC_ClockConfig+0x98>
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	2b0b      	cmp	r3, #11
 800a200:	d010      	beq.n	800a224 <HAL_RCC_ClockConfig+0x98>
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b0c      	cmp	r3, #12
 800a206:	d00d      	beq.n	800a224 <HAL_RCC_ClockConfig+0x98>
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	2b0d      	cmp	r3, #13
 800a20c:	d00a      	beq.n	800a224 <HAL_RCC_ClockConfig+0x98>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b0e      	cmp	r3, #14
 800a212:	d007      	beq.n	800a224 <HAL_RCC_ClockConfig+0x98>
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2b0f      	cmp	r3, #15
 800a218:	d004      	beq.n	800a224 <HAL_RCC_ClockConfig+0x98>
 800a21a:	f240 3193 	movw	r1, #915	; 0x393
 800a21e:	480d      	ldr	r0, [pc, #52]	; (800a254 <HAL_RCC_ClockConfig+0xc8>)
 800a220:	f7f7 fc27 	bl	8001a72 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a224:	4b0c      	ldr	r3, [pc, #48]	; (800a258 <HAL_RCC_ClockConfig+0xcc>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 030f 	and.w	r3, r3, #15
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d914      	bls.n	800a25c <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a232:	4b09      	ldr	r3, [pc, #36]	; (800a258 <HAL_RCC_ClockConfig+0xcc>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f023 020f 	bic.w	r2, r3, #15
 800a23a:	4907      	ldr	r1, [pc, #28]	; (800a258 <HAL_RCC_ClockConfig+0xcc>)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	4313      	orrs	r3, r2
 800a240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a242:	4b05      	ldr	r3, [pc, #20]	; (800a258 <HAL_RCC_ClockConfig+0xcc>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 030f 	and.w	r3, r3, #15
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d005      	beq.n	800a25c <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e2fa      	b.n	800a84a <HAL_RCC_ClockConfig+0x6be>
 800a254:	0801dd90 	.word	0x0801dd90
 800a258:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	2b00      	cmp	r3, #0
 800a266:	d029      	beq.n	800a2bc <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	691a      	ldr	r2, [r3, #16]
 800a26c:	4b7e      	ldr	r3, [pc, #504]	; (800a468 <HAL_RCC_ClockConfig+0x2dc>)
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a274:	429a      	cmp	r2, r3
 800a276:	d921      	bls.n	800a2bc <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d014      	beq.n	800a2aa <HAL_RCC_ClockConfig+0x11e>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	2b40      	cmp	r3, #64	; 0x40
 800a286:	d010      	beq.n	800a2aa <HAL_RCC_ClockConfig+0x11e>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	2b50      	cmp	r3, #80	; 0x50
 800a28e:	d00c      	beq.n	800a2aa <HAL_RCC_ClockConfig+0x11e>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	2b60      	cmp	r3, #96	; 0x60
 800a296:	d008      	beq.n	800a2aa <HAL_RCC_ClockConfig+0x11e>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	2b70      	cmp	r3, #112	; 0x70
 800a29e:	d004      	beq.n	800a2aa <HAL_RCC_ClockConfig+0x11e>
 800a2a0:	f240 31af 	movw	r1, #943	; 0x3af
 800a2a4:	4871      	ldr	r0, [pc, #452]	; (800a46c <HAL_RCC_ClockConfig+0x2e0>)
 800a2a6:	f7f7 fbe4 	bl	8001a72 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a2aa:	4b6f      	ldr	r3, [pc, #444]	; (800a468 <HAL_RCC_ClockConfig+0x2dc>)
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	496c      	ldr	r1, [pc, #432]	; (800a468 <HAL_RCC_ClockConfig+0x2dc>)
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f003 0308 	and.w	r3, r3, #8
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d029      	beq.n	800a31c <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	695a      	ldr	r2, [r3, #20]
 800a2cc:	4b66      	ldr	r3, [pc, #408]	; (800a468 <HAL_RCC_ClockConfig+0x2dc>)
 800a2ce:	69db      	ldr	r3, [r3, #28]
 800a2d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d921      	bls.n	800a31c <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	695b      	ldr	r3, [r3, #20]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d014      	beq.n	800a30a <HAL_RCC_ClockConfig+0x17e>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	695b      	ldr	r3, [r3, #20]
 800a2e4:	2b40      	cmp	r3, #64	; 0x40
 800a2e6:	d010      	beq.n	800a30a <HAL_RCC_ClockConfig+0x17e>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	2b50      	cmp	r3, #80	; 0x50
 800a2ee:	d00c      	beq.n	800a30a <HAL_RCC_ClockConfig+0x17e>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	695b      	ldr	r3, [r3, #20]
 800a2f4:	2b60      	cmp	r3, #96	; 0x60
 800a2f6:	d008      	beq.n	800a30a <HAL_RCC_ClockConfig+0x17e>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	695b      	ldr	r3, [r3, #20]
 800a2fc:	2b70      	cmp	r3, #112	; 0x70
 800a2fe:	d004      	beq.n	800a30a <HAL_RCC_ClockConfig+0x17e>
 800a300:	f240 31c1 	movw	r1, #961	; 0x3c1
 800a304:	4859      	ldr	r0, [pc, #356]	; (800a46c <HAL_RCC_ClockConfig+0x2e0>)
 800a306:	f7f7 fbb4 	bl	8001a72 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a30a:	4b57      	ldr	r3, [pc, #348]	; (800a468 <HAL_RCC_ClockConfig+0x2dc>)
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	4954      	ldr	r1, [pc, #336]	; (800a468 <HAL_RCC_ClockConfig+0x2dc>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 0310 	and.w	r3, r3, #16
 800a324:	2b00      	cmp	r3, #0
 800a326:	d02d      	beq.n	800a384 <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	699a      	ldr	r2, [r3, #24]
 800a32c:	4b4e      	ldr	r3, [pc, #312]	; (800a468 <HAL_RCC_ClockConfig+0x2dc>)
 800a32e:	69db      	ldr	r3, [r3, #28]
 800a330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a334:	429a      	cmp	r2, r3
 800a336:	d925      	bls.n	800a384 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d018      	beq.n	800a372 <HAL_RCC_ClockConfig+0x1e6>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a348:	d013      	beq.n	800a372 <HAL_RCC_ClockConfig+0x1e6>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	699b      	ldr	r3, [r3, #24]
 800a34e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a352:	d00e      	beq.n	800a372 <HAL_RCC_ClockConfig+0x1e6>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	699b      	ldr	r3, [r3, #24]
 800a358:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a35c:	d009      	beq.n	800a372 <HAL_RCC_ClockConfig+0x1e6>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a366:	d004      	beq.n	800a372 <HAL_RCC_ClockConfig+0x1e6>
 800a368:	f240 31d2 	movw	r1, #978	; 0x3d2
 800a36c:	483f      	ldr	r0, [pc, #252]	; (800a46c <HAL_RCC_ClockConfig+0x2e0>)
 800a36e:	f7f7 fb80 	bl	8001a72 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a372:	4b3d      	ldr	r3, [pc, #244]	; (800a468 <HAL_RCC_ClockConfig+0x2dc>)
 800a374:	69db      	ldr	r3, [r3, #28]
 800a376:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	493a      	ldr	r1, [pc, #232]	; (800a468 <HAL_RCC_ClockConfig+0x2dc>)
 800a380:	4313      	orrs	r3, r2
 800a382:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f003 0320 	and.w	r3, r3, #32
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d029      	beq.n	800a3e4 <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	69da      	ldr	r2, [r3, #28]
 800a394:	4b34      	ldr	r3, [pc, #208]	; (800a468 <HAL_RCC_ClockConfig+0x2dc>)
 800a396:	6a1b      	ldr	r3, [r3, #32]
 800a398:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d921      	bls.n	800a3e4 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	69db      	ldr	r3, [r3, #28]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d014      	beq.n	800a3d2 <HAL_RCC_ClockConfig+0x246>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	69db      	ldr	r3, [r3, #28]
 800a3ac:	2b40      	cmp	r3, #64	; 0x40
 800a3ae:	d010      	beq.n	800a3d2 <HAL_RCC_ClockConfig+0x246>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	69db      	ldr	r3, [r3, #28]
 800a3b4:	2b50      	cmp	r3, #80	; 0x50
 800a3b6:	d00c      	beq.n	800a3d2 <HAL_RCC_ClockConfig+0x246>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	69db      	ldr	r3, [r3, #28]
 800a3bc:	2b60      	cmp	r3, #96	; 0x60
 800a3be:	d008      	beq.n	800a3d2 <HAL_RCC_ClockConfig+0x246>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	69db      	ldr	r3, [r3, #28]
 800a3c4:	2b70      	cmp	r3, #112	; 0x70
 800a3c6:	d004      	beq.n	800a3d2 <HAL_RCC_ClockConfig+0x246>
 800a3c8:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 800a3cc:	4827      	ldr	r0, [pc, #156]	; (800a46c <HAL_RCC_ClockConfig+0x2e0>)
 800a3ce:	f7f7 fb50 	bl	8001a72 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a3d2:	4b25      	ldr	r3, [pc, #148]	; (800a468 <HAL_RCC_ClockConfig+0x2dc>)
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	4922      	ldr	r1, [pc, #136]	; (800a468 <HAL_RCC_ClockConfig+0x2dc>)
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 0302 	and.w	r3, r3, #2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d03f      	beq.n	800a470 <HAL_RCC_ClockConfig+0x2e4>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	68da      	ldr	r2, [r3, #12]
 800a3f4:	4b1c      	ldr	r3, [pc, #112]	; (800a468 <HAL_RCC_ClockConfig+0x2dc>)
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	f003 030f 	and.w	r3, r3, #15
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d937      	bls.n	800a470 <HAL_RCC_ClockConfig+0x2e4>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d024      	beq.n	800a452 <HAL_RCC_ClockConfig+0x2c6>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	2b08      	cmp	r3, #8
 800a40e:	d020      	beq.n	800a452 <HAL_RCC_ClockConfig+0x2c6>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	2b09      	cmp	r3, #9
 800a416:	d01c      	beq.n	800a452 <HAL_RCC_ClockConfig+0x2c6>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	2b0a      	cmp	r3, #10
 800a41e:	d018      	beq.n	800a452 <HAL_RCC_ClockConfig+0x2c6>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	2b0b      	cmp	r3, #11
 800a426:	d014      	beq.n	800a452 <HAL_RCC_ClockConfig+0x2c6>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	2b0c      	cmp	r3, #12
 800a42e:	d010      	beq.n	800a452 <HAL_RCC_ClockConfig+0x2c6>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	2b0d      	cmp	r3, #13
 800a436:	d00c      	beq.n	800a452 <HAL_RCC_ClockConfig+0x2c6>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	2b0e      	cmp	r3, #14
 800a43e:	d008      	beq.n	800a452 <HAL_RCC_ClockConfig+0x2c6>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	2b0f      	cmp	r3, #15
 800a446:	d004      	beq.n	800a452 <HAL_RCC_ClockConfig+0x2c6>
 800a448:	f240 31f7 	movw	r1, #1015	; 0x3f7
 800a44c:	4807      	ldr	r0, [pc, #28]	; (800a46c <HAL_RCC_ClockConfig+0x2e0>)
 800a44e:	f7f7 fb10 	bl	8001a72 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a452:	4b05      	ldr	r3, [pc, #20]	; (800a468 <HAL_RCC_ClockConfig+0x2dc>)
 800a454:	699b      	ldr	r3, [r3, #24]
 800a456:	f023 020f 	bic.w	r2, r3, #15
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	4902      	ldr	r1, [pc, #8]	; (800a468 <HAL_RCC_ClockConfig+0x2dc>)
 800a460:	4313      	orrs	r3, r2
 800a462:	618b      	str	r3, [r1, #24]
 800a464:	e004      	b.n	800a470 <HAL_RCC_ClockConfig+0x2e4>
 800a466:	bf00      	nop
 800a468:	58024400 	.word	0x58024400
 800a46c:	0801dd90 	.word	0x0801dd90
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 0301 	and.w	r3, r3, #1
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 809c 	beq.w	800a5b6 <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d02c      	beq.n	800a4e0 <HAL_RCC_ClockConfig+0x354>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a48e:	d027      	beq.n	800a4e0 <HAL_RCC_ClockConfig+0x354>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800a498:	d022      	beq.n	800a4e0 <HAL_RCC_ClockConfig+0x354>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a4a2:	d01d      	beq.n	800a4e0 <HAL_RCC_ClockConfig+0x354>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800a4ac:	d018      	beq.n	800a4e0 <HAL_RCC_ClockConfig+0x354>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4b6:	d013      	beq.n	800a4e0 <HAL_RCC_ClockConfig+0x354>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 800a4c0:	d00e      	beq.n	800a4e0 <HAL_RCC_ClockConfig+0x354>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800a4ca:	d009      	beq.n	800a4e0 <HAL_RCC_ClockConfig+0x354>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a4d4:	d004      	beq.n	800a4e0 <HAL_RCC_ClockConfig+0x354>
 800a4d6:	f240 4107 	movw	r1, #1031	; 0x407
 800a4da:	4863      	ldr	r0, [pc, #396]	; (800a668 <HAL_RCC_ClockConfig+0x4dc>)
 800a4dc:	f7f7 fac9 	bl	8001a72 <assert_failed>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d010      	beq.n	800a50a <HAL_RCC_ClockConfig+0x37e>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00c      	beq.n	800a50a <HAL_RCC_ClockConfig+0x37e>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d008      	beq.n	800a50a <HAL_RCC_ClockConfig+0x37e>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	2b03      	cmp	r3, #3
 800a4fe:	d004      	beq.n	800a50a <HAL_RCC_ClockConfig+0x37e>
 800a500:	f44f 6181 	mov.w	r1, #1032	; 0x408
 800a504:	4858      	ldr	r0, [pc, #352]	; (800a668 <HAL_RCC_ClockConfig+0x4dc>)
 800a506:	f7f7 fab4 	bl	8001a72 <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a50a:	4b58      	ldr	r3, [pc, #352]	; (800a66c <HAL_RCC_ClockConfig+0x4e0>)
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	4955      	ldr	r1, [pc, #340]	; (800a66c <HAL_RCC_ClockConfig+0x4e0>)
 800a518:	4313      	orrs	r3, r2
 800a51a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	2b02      	cmp	r3, #2
 800a522:	d107      	bne.n	800a534 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a524:	4b51      	ldr	r3, [pc, #324]	; (800a66c <HAL_RCC_ClockConfig+0x4e0>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d121      	bne.n	800a574 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	e18a      	b.n	800a84a <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	2b03      	cmp	r3, #3
 800a53a:	d107      	bne.n	800a54c <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a53c:	4b4b      	ldr	r3, [pc, #300]	; (800a66c <HAL_RCC_ClockConfig+0x4e0>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a544:	2b00      	cmp	r3, #0
 800a546:	d115      	bne.n	800a574 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	e17e      	b.n	800a84a <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d107      	bne.n	800a564 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a554:	4b45      	ldr	r3, [pc, #276]	; (800a66c <HAL_RCC_ClockConfig+0x4e0>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d109      	bne.n	800a574 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	e172      	b.n	800a84a <HAL_RCC_ClockConfig+0x6be>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a564:	4b41      	ldr	r3, [pc, #260]	; (800a66c <HAL_RCC_ClockConfig+0x4e0>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 0304 	and.w	r3, r3, #4
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d101      	bne.n	800a574 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e16a      	b.n	800a84a <HAL_RCC_ClockConfig+0x6be>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a574:	4b3d      	ldr	r3, [pc, #244]	; (800a66c <HAL_RCC_ClockConfig+0x4e0>)
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	f023 0207 	bic.w	r2, r3, #7
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	493a      	ldr	r1, [pc, #232]	; (800a66c <HAL_RCC_ClockConfig+0x4e0>)
 800a582:	4313      	orrs	r3, r2
 800a584:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a586:	f7f8 ffe7 	bl	8003558 <HAL_GetTick>
 800a58a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a58c:	e00a      	b.n	800a5a4 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a58e:	f7f8 ffe3 	bl	8003558 <HAL_GetTick>
 800a592:	4602      	mov	r2, r0
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	f241 3288 	movw	r2, #5000	; 0x1388
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d901      	bls.n	800a5a4 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	e152      	b.n	800a84a <HAL_RCC_ClockConfig+0x6be>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5a4:	4b31      	ldr	r3, [pc, #196]	; (800a66c <HAL_RCC_ClockConfig+0x4e0>)
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	00db      	lsls	r3, r3, #3
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d1eb      	bne.n	800a58e <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0302 	and.w	r3, r3, #2
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d039      	beq.n	800a636 <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	68da      	ldr	r2, [r3, #12]
 800a5c6:	4b29      	ldr	r3, [pc, #164]	; (800a66c <HAL_RCC_ClockConfig+0x4e0>)
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	f003 030f 	and.w	r3, r3, #15
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d231      	bcs.n	800a636 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d024      	beq.n	800a624 <HAL_RCC_ClockConfig+0x498>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	2b08      	cmp	r3, #8
 800a5e0:	d020      	beq.n	800a624 <HAL_RCC_ClockConfig+0x498>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	2b09      	cmp	r3, #9
 800a5e8:	d01c      	beq.n	800a624 <HAL_RCC_ClockConfig+0x498>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	2b0a      	cmp	r3, #10
 800a5f0:	d018      	beq.n	800a624 <HAL_RCC_ClockConfig+0x498>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	2b0b      	cmp	r3, #11
 800a5f8:	d014      	beq.n	800a624 <HAL_RCC_ClockConfig+0x498>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	2b0c      	cmp	r3, #12
 800a600:	d010      	beq.n	800a624 <HAL_RCC_ClockConfig+0x498>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	2b0d      	cmp	r3, #13
 800a608:	d00c      	beq.n	800a624 <HAL_RCC_ClockConfig+0x498>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	2b0e      	cmp	r3, #14
 800a610:	d008      	beq.n	800a624 <HAL_RCC_ClockConfig+0x498>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	2b0f      	cmp	r3, #15
 800a618:	d004      	beq.n	800a624 <HAL_RCC_ClockConfig+0x498>
 800a61a:	f240 4149 	movw	r1, #1097	; 0x449
 800a61e:	4812      	ldr	r0, [pc, #72]	; (800a668 <HAL_RCC_ClockConfig+0x4dc>)
 800a620:	f7f7 fa27 	bl	8001a72 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a624:	4b11      	ldr	r3, [pc, #68]	; (800a66c <HAL_RCC_ClockConfig+0x4e0>)
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	f023 020f 	bic.w	r2, r3, #15
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	490e      	ldr	r1, [pc, #56]	; (800a66c <HAL_RCC_ClockConfig+0x4e0>)
 800a632:	4313      	orrs	r3, r2
 800a634:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a636:	4b0e      	ldr	r3, [pc, #56]	; (800a670 <HAL_RCC_ClockConfig+0x4e4>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 030f 	and.w	r3, r3, #15
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	429a      	cmp	r2, r3
 800a642:	d217      	bcs.n	800a674 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a644:	4b0a      	ldr	r3, [pc, #40]	; (800a670 <HAL_RCC_ClockConfig+0x4e4>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f023 020f 	bic.w	r2, r3, #15
 800a64c:	4908      	ldr	r1, [pc, #32]	; (800a670 <HAL_RCC_ClockConfig+0x4e4>)
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	4313      	orrs	r3, r2
 800a652:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a654:	4b06      	ldr	r3, [pc, #24]	; (800a670 <HAL_RCC_ClockConfig+0x4e4>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 030f 	and.w	r3, r3, #15
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d008      	beq.n	800a674 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e0f1      	b.n	800a84a <HAL_RCC_ClockConfig+0x6be>
 800a666:	bf00      	nop
 800a668:	0801dd90 	.word	0x0801dd90
 800a66c:	58024400 	.word	0x58024400
 800a670:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0304 	and.w	r3, r3, #4
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d029      	beq.n	800a6d4 <HAL_RCC_ClockConfig+0x548>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	691a      	ldr	r2, [r3, #16]
 800a684:	4b73      	ldr	r3, [pc, #460]	; (800a854 <HAL_RCC_ClockConfig+0x6c8>)
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d221      	bcs.n	800a6d4 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d014      	beq.n	800a6c2 <HAL_RCC_ClockConfig+0x536>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	2b40      	cmp	r3, #64	; 0x40
 800a69e:	d010      	beq.n	800a6c2 <HAL_RCC_ClockConfig+0x536>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	2b50      	cmp	r3, #80	; 0x50
 800a6a6:	d00c      	beq.n	800a6c2 <HAL_RCC_ClockConfig+0x536>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	2b60      	cmp	r3, #96	; 0x60
 800a6ae:	d008      	beq.n	800a6c2 <HAL_RCC_ClockConfig+0x536>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	2b70      	cmp	r3, #112	; 0x70
 800a6b6:	d004      	beq.n	800a6c2 <HAL_RCC_ClockConfig+0x536>
 800a6b8:	f240 416a 	movw	r1, #1130	; 0x46a
 800a6bc:	4866      	ldr	r0, [pc, #408]	; (800a858 <HAL_RCC_ClockConfig+0x6cc>)
 800a6be:	f7f7 f9d8 	bl	8001a72 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a6c2:	4b64      	ldr	r3, [pc, #400]	; (800a854 <HAL_RCC_ClockConfig+0x6c8>)
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	4961      	ldr	r1, [pc, #388]	; (800a854 <HAL_RCC_ClockConfig+0x6c8>)
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 0308 	and.w	r3, r3, #8
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d029      	beq.n	800a734 <HAL_RCC_ClockConfig+0x5a8>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	695a      	ldr	r2, [r3, #20]
 800a6e4:	4b5b      	ldr	r3, [pc, #364]	; (800a854 <HAL_RCC_ClockConfig+0x6c8>)
 800a6e6:	69db      	ldr	r3, [r3, #28]
 800a6e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d221      	bcs.n	800a734 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	695b      	ldr	r3, [r3, #20]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d014      	beq.n	800a722 <HAL_RCC_ClockConfig+0x596>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	695b      	ldr	r3, [r3, #20]
 800a6fc:	2b40      	cmp	r3, #64	; 0x40
 800a6fe:	d010      	beq.n	800a722 <HAL_RCC_ClockConfig+0x596>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	695b      	ldr	r3, [r3, #20]
 800a704:	2b50      	cmp	r3, #80	; 0x50
 800a706:	d00c      	beq.n	800a722 <HAL_RCC_ClockConfig+0x596>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	695b      	ldr	r3, [r3, #20]
 800a70c:	2b60      	cmp	r3, #96	; 0x60
 800a70e:	d008      	beq.n	800a722 <HAL_RCC_ClockConfig+0x596>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	695b      	ldr	r3, [r3, #20]
 800a714:	2b70      	cmp	r3, #112	; 0x70
 800a716:	d004      	beq.n	800a722 <HAL_RCC_ClockConfig+0x596>
 800a718:	f240 417c 	movw	r1, #1148	; 0x47c
 800a71c:	484e      	ldr	r0, [pc, #312]	; (800a858 <HAL_RCC_ClockConfig+0x6cc>)
 800a71e:	f7f7 f9a8 	bl	8001a72 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a722:	4b4c      	ldr	r3, [pc, #304]	; (800a854 <HAL_RCC_ClockConfig+0x6c8>)
 800a724:	69db      	ldr	r3, [r3, #28]
 800a726:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	695b      	ldr	r3, [r3, #20]
 800a72e:	4949      	ldr	r1, [pc, #292]	; (800a854 <HAL_RCC_ClockConfig+0x6c8>)
 800a730:	4313      	orrs	r3, r2
 800a732:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0310 	and.w	r3, r3, #16
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d02d      	beq.n	800a79c <HAL_RCC_ClockConfig+0x610>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	699a      	ldr	r2, [r3, #24]
 800a744:	4b43      	ldr	r3, [pc, #268]	; (800a854 <HAL_RCC_ClockConfig+0x6c8>)
 800a746:	69db      	ldr	r3, [r3, #28]
 800a748:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d225      	bcs.n	800a79c <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d018      	beq.n	800a78a <HAL_RCC_ClockConfig+0x5fe>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	699b      	ldr	r3, [r3, #24]
 800a75c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a760:	d013      	beq.n	800a78a <HAL_RCC_ClockConfig+0x5fe>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a76a:	d00e      	beq.n	800a78a <HAL_RCC_ClockConfig+0x5fe>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a774:	d009      	beq.n	800a78a <HAL_RCC_ClockConfig+0x5fe>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a77e:	d004      	beq.n	800a78a <HAL_RCC_ClockConfig+0x5fe>
 800a780:	f240 418e 	movw	r1, #1166	; 0x48e
 800a784:	4834      	ldr	r0, [pc, #208]	; (800a858 <HAL_RCC_ClockConfig+0x6cc>)
 800a786:	f7f7 f974 	bl	8001a72 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a78a:	4b32      	ldr	r3, [pc, #200]	; (800a854 <HAL_RCC_ClockConfig+0x6c8>)
 800a78c:	69db      	ldr	r3, [r3, #28]
 800a78e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	699b      	ldr	r3, [r3, #24]
 800a796:	492f      	ldr	r1, [pc, #188]	; (800a854 <HAL_RCC_ClockConfig+0x6c8>)
 800a798:	4313      	orrs	r3, r2
 800a79a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 0320 	and.w	r3, r3, #32
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d029      	beq.n	800a7fc <HAL_RCC_ClockConfig+0x670>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	69da      	ldr	r2, [r3, #28]
 800a7ac:	4b29      	ldr	r3, [pc, #164]	; (800a854 <HAL_RCC_ClockConfig+0x6c8>)
 800a7ae:	6a1b      	ldr	r3, [r3, #32]
 800a7b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d221      	bcs.n	800a7fc <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	69db      	ldr	r3, [r3, #28]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d014      	beq.n	800a7ea <HAL_RCC_ClockConfig+0x65e>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	69db      	ldr	r3, [r3, #28]
 800a7c4:	2b40      	cmp	r3, #64	; 0x40
 800a7c6:	d010      	beq.n	800a7ea <HAL_RCC_ClockConfig+0x65e>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	69db      	ldr	r3, [r3, #28]
 800a7cc:	2b50      	cmp	r3, #80	; 0x50
 800a7ce:	d00c      	beq.n	800a7ea <HAL_RCC_ClockConfig+0x65e>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	69db      	ldr	r3, [r3, #28]
 800a7d4:	2b60      	cmp	r3, #96	; 0x60
 800a7d6:	d008      	beq.n	800a7ea <HAL_RCC_ClockConfig+0x65e>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	69db      	ldr	r3, [r3, #28]
 800a7dc:	2b70      	cmp	r3, #112	; 0x70
 800a7de:	d004      	beq.n	800a7ea <HAL_RCC_ClockConfig+0x65e>
 800a7e0:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
 800a7e4:	481c      	ldr	r0, [pc, #112]	; (800a858 <HAL_RCC_ClockConfig+0x6cc>)
 800a7e6:	f7f7 f944 	bl	8001a72 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a7ea:	4b1a      	ldr	r3, [pc, #104]	; (800a854 <HAL_RCC_ClockConfig+0x6c8>)
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	69db      	ldr	r3, [r3, #28]
 800a7f6:	4917      	ldr	r1, [pc, #92]	; (800a854 <HAL_RCC_ClockConfig+0x6c8>)
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a7fc:	f000 f836 	bl	800a86c <HAL_RCC_GetSysClockFreq>
 800a800:	4602      	mov	r2, r0
 800a802:	4b14      	ldr	r3, [pc, #80]	; (800a854 <HAL_RCC_ClockConfig+0x6c8>)
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	0a1b      	lsrs	r3, r3, #8
 800a808:	f003 030f 	and.w	r3, r3, #15
 800a80c:	4913      	ldr	r1, [pc, #76]	; (800a85c <HAL_RCC_ClockConfig+0x6d0>)
 800a80e:	5ccb      	ldrb	r3, [r1, r3]
 800a810:	f003 031f 	and.w	r3, r3, #31
 800a814:	fa22 f303 	lsr.w	r3, r2, r3
 800a818:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a81a:	4b0e      	ldr	r3, [pc, #56]	; (800a854 <HAL_RCC_ClockConfig+0x6c8>)
 800a81c:	699b      	ldr	r3, [r3, #24]
 800a81e:	f003 030f 	and.w	r3, r3, #15
 800a822:	4a0e      	ldr	r2, [pc, #56]	; (800a85c <HAL_RCC_ClockConfig+0x6d0>)
 800a824:	5cd3      	ldrb	r3, [r2, r3]
 800a826:	f003 031f 	and.w	r3, r3, #31
 800a82a:	693a      	ldr	r2, [r7, #16]
 800a82c:	fa22 f303 	lsr.w	r3, r2, r3
 800a830:	4a0b      	ldr	r2, [pc, #44]	; (800a860 <HAL_RCC_ClockConfig+0x6d4>)
 800a832:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a834:	4a0b      	ldr	r2, [pc, #44]	; (800a864 <HAL_RCC_ClockConfig+0x6d8>)
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a83a:	4b0b      	ldr	r3, [pc, #44]	; (800a868 <HAL_RCC_ClockConfig+0x6dc>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4618      	mov	r0, r3
 800a840:	f7f8 fe40 	bl	80034c4 <HAL_InitTick>
 800a844:	4603      	mov	r3, r0
 800a846:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a848:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3718      	adds	r7, #24
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	58024400 	.word	0x58024400
 800a858:	0801dd90 	.word	0x0801dd90
 800a85c:	0801e060 	.word	0x0801e060
 800a860:	24000004 	.word	0x24000004
 800a864:	24000000 	.word	0x24000000
 800a868:	24000008 	.word	0x24000008

0800a86c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b089      	sub	sp, #36	; 0x24
 800a870:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a872:	4bb3      	ldr	r3, [pc, #716]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a87a:	2b18      	cmp	r3, #24
 800a87c:	f200 8155 	bhi.w	800ab2a <HAL_RCC_GetSysClockFreq+0x2be>
 800a880:	a201      	add	r2, pc, #4	; (adr r2, 800a888 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a886:	bf00      	nop
 800a888:	0800a8ed 	.word	0x0800a8ed
 800a88c:	0800ab2b 	.word	0x0800ab2b
 800a890:	0800ab2b 	.word	0x0800ab2b
 800a894:	0800ab2b 	.word	0x0800ab2b
 800a898:	0800ab2b 	.word	0x0800ab2b
 800a89c:	0800ab2b 	.word	0x0800ab2b
 800a8a0:	0800ab2b 	.word	0x0800ab2b
 800a8a4:	0800ab2b 	.word	0x0800ab2b
 800a8a8:	0800a913 	.word	0x0800a913
 800a8ac:	0800ab2b 	.word	0x0800ab2b
 800a8b0:	0800ab2b 	.word	0x0800ab2b
 800a8b4:	0800ab2b 	.word	0x0800ab2b
 800a8b8:	0800ab2b 	.word	0x0800ab2b
 800a8bc:	0800ab2b 	.word	0x0800ab2b
 800a8c0:	0800ab2b 	.word	0x0800ab2b
 800a8c4:	0800ab2b 	.word	0x0800ab2b
 800a8c8:	0800a919 	.word	0x0800a919
 800a8cc:	0800ab2b 	.word	0x0800ab2b
 800a8d0:	0800ab2b 	.word	0x0800ab2b
 800a8d4:	0800ab2b 	.word	0x0800ab2b
 800a8d8:	0800ab2b 	.word	0x0800ab2b
 800a8dc:	0800ab2b 	.word	0x0800ab2b
 800a8e0:	0800ab2b 	.word	0x0800ab2b
 800a8e4:	0800ab2b 	.word	0x0800ab2b
 800a8e8:	0800a91f 	.word	0x0800a91f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8ec:	4b94      	ldr	r3, [pc, #592]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 0320 	and.w	r3, r3, #32
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d009      	beq.n	800a90c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8f8:	4b91      	ldr	r3, [pc, #580]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	08db      	lsrs	r3, r3, #3
 800a8fe:	f003 0303 	and.w	r3, r3, #3
 800a902:	4a90      	ldr	r2, [pc, #576]	; (800ab44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a904:	fa22 f303 	lsr.w	r3, r2, r3
 800a908:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a90a:	e111      	b.n	800ab30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a90c:	4b8d      	ldr	r3, [pc, #564]	; (800ab44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a90e:	61bb      	str	r3, [r7, #24]
    break;
 800a910:	e10e      	b.n	800ab30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a912:	4b8d      	ldr	r3, [pc, #564]	; (800ab48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a914:	61bb      	str	r3, [r7, #24]
    break;
 800a916:	e10b      	b.n	800ab30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a918:	4b8c      	ldr	r3, [pc, #560]	; (800ab4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a91a:	61bb      	str	r3, [r7, #24]
    break;
 800a91c:	e108      	b.n	800ab30 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a91e:	4b88      	ldr	r3, [pc, #544]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a922:	f003 0303 	and.w	r3, r3, #3
 800a926:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a928:	4b85      	ldr	r3, [pc, #532]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a92a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a92c:	091b      	lsrs	r3, r3, #4
 800a92e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a932:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a934:	4b82      	ldr	r3, [pc, #520]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a938:	f003 0301 	and.w	r3, r3, #1
 800a93c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a93e:	4b80      	ldr	r3, [pc, #512]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a942:	08db      	lsrs	r3, r3, #3
 800a944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	fb02 f303 	mul.w	r3, r2, r3
 800a94e:	ee07 3a90 	vmov	s15, r3
 800a952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a956:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f000 80e1 	beq.w	800ab24 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2b02      	cmp	r3, #2
 800a966:	f000 8083 	beq.w	800aa70 <HAL_RCC_GetSysClockFreq+0x204>
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	f200 80a1 	bhi.w	800aab4 <HAL_RCC_GetSysClockFreq+0x248>
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d003      	beq.n	800a980 <HAL_RCC_GetSysClockFreq+0x114>
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d056      	beq.n	800aa2c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a97e:	e099      	b.n	800aab4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a980:	4b6f      	ldr	r3, [pc, #444]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 0320 	and.w	r3, r3, #32
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d02d      	beq.n	800a9e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a98c:	4b6c      	ldr	r3, [pc, #432]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	08db      	lsrs	r3, r3, #3
 800a992:	f003 0303 	and.w	r3, r3, #3
 800a996:	4a6b      	ldr	r2, [pc, #428]	; (800ab44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a998:	fa22 f303 	lsr.w	r3, r2, r3
 800a99c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	ee07 3a90 	vmov	s15, r3
 800a9a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	ee07 3a90 	vmov	s15, r3
 800a9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9b6:	4b62      	ldr	r3, [pc, #392]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9be:	ee07 3a90 	vmov	s15, r3
 800a9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ab50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a9ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a9e6:	e087      	b.n	800aaf8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	ee07 3a90 	vmov	s15, r3
 800a9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ab54 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a9f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9fa:	4b51      	ldr	r3, [pc, #324]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa02:	ee07 3a90 	vmov	s15, r3
 800aa06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ab50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa2a:	e065      	b.n	800aaf8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	ee07 3a90 	vmov	s15, r3
 800aa32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa36:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ab58 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aa3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa3e:	4b40      	ldr	r3, [pc, #256]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ab50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa6e:	e043      	b.n	800aaf8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	ee07 3a90 	vmov	s15, r3
 800aa76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ab5c <HAL_RCC_GetSysClockFreq+0x2f0>
 800aa7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa82:	4b2f      	ldr	r3, [pc, #188]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa92:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ab50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aab2:	e021      	b.n	800aaf8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	ee07 3a90 	vmov	s15, r3
 800aaba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aabe:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ab58 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aac6:	4b1e      	ldr	r3, [pc, #120]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aace:	ee07 3a90 	vmov	s15, r3
 800aad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad6:	ed97 6a02 	vldr	s12, [r7, #8]
 800aada:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ab50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaf6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800aaf8:	4b11      	ldr	r3, [pc, #68]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aafc:	0a5b      	lsrs	r3, r3, #9
 800aafe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab02:	3301      	adds	r3, #1
 800ab04:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	ee07 3a90 	vmov	s15, r3
 800ab0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab10:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab1c:	ee17 3a90 	vmov	r3, s15
 800ab20:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ab22:	e005      	b.n	800ab30 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800ab24:	2300      	movs	r3, #0
 800ab26:	61bb      	str	r3, [r7, #24]
    break;
 800ab28:	e002      	b.n	800ab30 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ab2a:	4b07      	ldr	r3, [pc, #28]	; (800ab48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ab2c:	61bb      	str	r3, [r7, #24]
    break;
 800ab2e:	bf00      	nop
  }

  return sysclockfreq;
 800ab30:	69bb      	ldr	r3, [r7, #24]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3724      	adds	r7, #36	; 0x24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	58024400 	.word	0x58024400
 800ab44:	03d09000 	.word	0x03d09000
 800ab48:	003d0900 	.word	0x003d0900
 800ab4c:	017d7840 	.word	0x017d7840
 800ab50:	46000000 	.word	0x46000000
 800ab54:	4c742400 	.word	0x4c742400
 800ab58:	4a742400 	.word	0x4a742400
 800ab5c:	4bbebc20 	.word	0x4bbebc20

0800ab60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ab66:	f7ff fe81 	bl	800a86c <HAL_RCC_GetSysClockFreq>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	4b10      	ldr	r3, [pc, #64]	; (800abb0 <HAL_RCC_GetHCLKFreq+0x50>)
 800ab6e:	699b      	ldr	r3, [r3, #24]
 800ab70:	0a1b      	lsrs	r3, r3, #8
 800ab72:	f003 030f 	and.w	r3, r3, #15
 800ab76:	490f      	ldr	r1, [pc, #60]	; (800abb4 <HAL_RCC_GetHCLKFreq+0x54>)
 800ab78:	5ccb      	ldrb	r3, [r1, r3]
 800ab7a:	f003 031f 	and.w	r3, r3, #31
 800ab7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab84:	4b0a      	ldr	r3, [pc, #40]	; (800abb0 <HAL_RCC_GetHCLKFreq+0x50>)
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	f003 030f 	and.w	r3, r3, #15
 800ab8c:	4a09      	ldr	r2, [pc, #36]	; (800abb4 <HAL_RCC_GetHCLKFreq+0x54>)
 800ab8e:	5cd3      	ldrb	r3, [r2, r3]
 800ab90:	f003 031f 	and.w	r3, r3, #31
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	fa22 f303 	lsr.w	r3, r2, r3
 800ab9a:	4a07      	ldr	r2, [pc, #28]	; (800abb8 <HAL_RCC_GetHCLKFreq+0x58>)
 800ab9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ab9e:	4a07      	ldr	r2, [pc, #28]	; (800abbc <HAL_RCC_GetHCLKFreq+0x5c>)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800aba4:	4b04      	ldr	r3, [pc, #16]	; (800abb8 <HAL_RCC_GetHCLKFreq+0x58>)
 800aba6:	681b      	ldr	r3, [r3, #0]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	58024400 	.word	0x58024400
 800abb4:	0801e060 	.word	0x0801e060
 800abb8:	24000004 	.word	0x24000004
 800abbc:	24000000 	.word	0x24000000

0800abc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800abc4:	f7ff ffcc 	bl	800ab60 <HAL_RCC_GetHCLKFreq>
 800abc8:	4602      	mov	r2, r0
 800abca:	4b06      	ldr	r3, [pc, #24]	; (800abe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800abcc:	69db      	ldr	r3, [r3, #28]
 800abce:	091b      	lsrs	r3, r3, #4
 800abd0:	f003 0307 	and.w	r3, r3, #7
 800abd4:	4904      	ldr	r1, [pc, #16]	; (800abe8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800abd6:	5ccb      	ldrb	r3, [r1, r3]
 800abd8:	f003 031f 	and.w	r3, r3, #31
 800abdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	58024400 	.word	0x58024400
 800abe8:	0801e060 	.word	0x0801e060

0800abec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800abf0:	f7ff ffb6 	bl	800ab60 <HAL_RCC_GetHCLKFreq>
 800abf4:	4602      	mov	r2, r0
 800abf6:	4b06      	ldr	r3, [pc, #24]	; (800ac10 <HAL_RCC_GetPCLK2Freq+0x24>)
 800abf8:	69db      	ldr	r3, [r3, #28]
 800abfa:	0a1b      	lsrs	r3, r3, #8
 800abfc:	f003 0307 	and.w	r3, r3, #7
 800ac00:	4904      	ldr	r1, [pc, #16]	; (800ac14 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac02:	5ccb      	ldrb	r3, [r1, r3]
 800ac04:	f003 031f 	and.w	r3, r3, #31
 800ac08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	58024400 	.word	0x58024400
 800ac14:	0801e060 	.word	0x0801e060

0800ac18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b086      	sub	sp, #24
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ac20:	2300      	movs	r3, #0
 800ac22:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ac24:	2300      	movs	r3, #0
 800ac26:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d03f      	beq.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac3c:	d02a      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ac3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac42:	d824      	bhi.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ac44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac48:	d018      	beq.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ac4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac4e:	d81e      	bhi.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d003      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ac54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac58:	d007      	beq.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ac5a:	e018      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac5c:	4ba3      	ldr	r3, [pc, #652]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ac5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac60:	4aa2      	ldr	r2, [pc, #648]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ac62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ac68:	e015      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	2102      	movs	r1, #2
 800ac70:	4618      	mov	r0, r3
 800ac72:	f002 fabf 	bl	800d1f4 <RCCEx_PLL2_Config>
 800ac76:	4603      	mov	r3, r0
 800ac78:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ac7a:	e00c      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3324      	adds	r3, #36	; 0x24
 800ac80:	2102      	movs	r1, #2
 800ac82:	4618      	mov	r0, r3
 800ac84:	f002 fbd8 	bl	800d438 <RCCEx_PLL3_Config>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ac8c:	e003      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	75fb      	strb	r3, [r7, #23]
      break;
 800ac92:	e000      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800ac94:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac96:	7dfb      	ldrb	r3, [r7, #23]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d109      	bne.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ac9c:	4b93      	ldr	r3, [pc, #588]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ac9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aca8:	4990      	ldr	r1, [pc, #576]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800acaa:	4313      	orrs	r3, r2
 800acac:	650b      	str	r3, [r1, #80]	; 0x50
 800acae:	e001      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acb0:	7dfb      	ldrb	r3, [r7, #23]
 800acb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d03d      	beq.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc4:	2b04      	cmp	r3, #4
 800acc6:	d826      	bhi.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800acc8:	a201      	add	r2, pc, #4	; (adr r2, 800acd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800acca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acce:	bf00      	nop
 800acd0:	0800ace5 	.word	0x0800ace5
 800acd4:	0800acf3 	.word	0x0800acf3
 800acd8:	0800ad05 	.word	0x0800ad05
 800acdc:	0800ad1d 	.word	0x0800ad1d
 800ace0:	0800ad1d 	.word	0x0800ad1d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ace4:	4b81      	ldr	r3, [pc, #516]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ace6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace8:	4a80      	ldr	r2, [pc, #512]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800acea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800acf0:	e015      	b.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	3304      	adds	r3, #4
 800acf6:	2100      	movs	r1, #0
 800acf8:	4618      	mov	r0, r3
 800acfa:	f002 fa7b 	bl	800d1f4 <RCCEx_PLL2_Config>
 800acfe:	4603      	mov	r3, r0
 800ad00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ad02:	e00c      	b.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	3324      	adds	r3, #36	; 0x24
 800ad08:	2100      	movs	r1, #0
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f002 fb94 	bl	800d438 <RCCEx_PLL3_Config>
 800ad10:	4603      	mov	r3, r0
 800ad12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ad14:	e003      	b.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad16:	2301      	movs	r3, #1
 800ad18:	75fb      	strb	r3, [r7, #23]
      break;
 800ad1a:	e000      	b.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ad1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad1e:	7dfb      	ldrb	r3, [r7, #23]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d109      	bne.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ad24:	4b71      	ldr	r3, [pc, #452]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ad26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad28:	f023 0207 	bic.w	r2, r3, #7
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad30:	496e      	ldr	r1, [pc, #440]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ad32:	4313      	orrs	r3, r2
 800ad34:	650b      	str	r3, [r1, #80]	; 0x50
 800ad36:	e001      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad38:	7dfb      	ldrb	r3, [r7, #23]
 800ad3a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d042      	beq.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad50:	d02b      	beq.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x192>
 800ad52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad56:	d825      	bhi.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ad58:	2bc0      	cmp	r3, #192	; 0xc0
 800ad5a:	d028      	beq.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ad5c:	2bc0      	cmp	r3, #192	; 0xc0
 800ad5e:	d821      	bhi.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ad60:	2b80      	cmp	r3, #128	; 0x80
 800ad62:	d016      	beq.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800ad64:	2b80      	cmp	r3, #128	; 0x80
 800ad66:	d81d      	bhi.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d002      	beq.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800ad6c:	2b40      	cmp	r3, #64	; 0x40
 800ad6e:	d007      	beq.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800ad70:	e018      	b.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad72:	4b5e      	ldr	r3, [pc, #376]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ad74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad76:	4a5d      	ldr	r2, [pc, #372]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ad78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ad7e:	e017      	b.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	3304      	adds	r3, #4
 800ad84:	2100      	movs	r1, #0
 800ad86:	4618      	mov	r0, r3
 800ad88:	f002 fa34 	bl	800d1f4 <RCCEx_PLL2_Config>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ad90:	e00e      	b.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	3324      	adds	r3, #36	; 0x24
 800ad96:	2100      	movs	r1, #0
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f002 fb4d 	bl	800d438 <RCCEx_PLL3_Config>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ada2:	e005      	b.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	75fb      	strb	r3, [r7, #23]
      break;
 800ada8:	e002      	b.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800adaa:	bf00      	nop
 800adac:	e000      	b.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800adae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adb0:	7dfb      	ldrb	r3, [r7, #23]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d109      	bne.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800adb6:	4b4d      	ldr	r3, [pc, #308]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800adb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc2:	494a      	ldr	r1, [pc, #296]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800adc4:	4313      	orrs	r3, r2
 800adc6:	650b      	str	r3, [r1, #80]	; 0x50
 800adc8:	e001      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adca:	7dfb      	ldrb	r3, [r7, #23]
 800adcc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800add6:	2b00      	cmp	r3, #0
 800add8:	d049      	beq.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ade0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ade4:	d030      	beq.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ade6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800adea:	d82a      	bhi.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800adec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800adf0:	d02c      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x234>
 800adf2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800adf6:	d824      	bhi.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800adf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adfc:	d018      	beq.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800adfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae02:	d81e      	bhi.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d003      	beq.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800ae08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae0c:	d007      	beq.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ae0e:	e018      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae10:	4b36      	ldr	r3, [pc, #216]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae14:	4a35      	ldr	r2, [pc, #212]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae1c:	e017      	b.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3304      	adds	r3, #4
 800ae22:	2100      	movs	r1, #0
 800ae24:	4618      	mov	r0, r3
 800ae26:	f002 f9e5 	bl	800d1f4 <RCCEx_PLL2_Config>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ae2e:	e00e      	b.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	3324      	adds	r3, #36	; 0x24
 800ae34:	2100      	movs	r1, #0
 800ae36:	4618      	mov	r0, r3
 800ae38:	f002 fafe 	bl	800d438 <RCCEx_PLL3_Config>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae40:	e005      	b.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	75fb      	strb	r3, [r7, #23]
      break;
 800ae46:	e002      	b.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800ae48:	bf00      	nop
 800ae4a:	e000      	b.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800ae4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae4e:	7dfb      	ldrb	r3, [r7, #23]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ae54:	4b25      	ldr	r3, [pc, #148]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae58:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ae62:	4922      	ldr	r1, [pc, #136]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae64:	4313      	orrs	r3, r2
 800ae66:	658b      	str	r3, [r1, #88]	; 0x58
 800ae68:	e001      	b.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
 800ae6c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d04b      	beq.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ae80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae84:	d030      	beq.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800ae86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae8a:	d82a      	bhi.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ae8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae90:	d02e      	beq.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800ae92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae96:	d824      	bhi.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ae98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae9c:	d018      	beq.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800ae9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aea2:	d81e      	bhi.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d003      	beq.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aeac:	d007      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aeae:	e018      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeb0:	4b0e      	ldr	r3, [pc, #56]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb4:	4a0d      	ldr	r2, [pc, #52]	; (800aeec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aeb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aebc:	e019      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	3304      	adds	r3, #4
 800aec2:	2100      	movs	r1, #0
 800aec4:	4618      	mov	r0, r3
 800aec6:	f002 f995 	bl	800d1f4 <RCCEx_PLL2_Config>
 800aeca:	4603      	mov	r3, r0
 800aecc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800aece:	e010      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	3324      	adds	r3, #36	; 0x24
 800aed4:	2100      	movs	r1, #0
 800aed6:	4618      	mov	r0, r3
 800aed8:	f002 faae 	bl	800d438 <RCCEx_PLL3_Config>
 800aedc:	4603      	mov	r3, r0
 800aede:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aee0:	e007      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	75fb      	strb	r3, [r7, #23]
      break;
 800aee6:	e004      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800aee8:	bf00      	nop
 800aeea:	e002      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800aeec:	58024400 	.word	0x58024400
      break;
 800aef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aef2:	7dfb      	ldrb	r3, [r7, #23]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d10a      	bne.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aef8:	4b99      	ldr	r3, [pc, #612]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aefa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aefc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af06:	4996      	ldr	r1, [pc, #600]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800af08:	4313      	orrs	r3, r2
 800af0a:	658b      	str	r3, [r1, #88]	; 0x58
 800af0c:	e001      	b.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af0e:	7dfb      	ldrb	r3, [r7, #23]
 800af10:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d032      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af22:	2b30      	cmp	r3, #48	; 0x30
 800af24:	d01c      	beq.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800af26:	2b30      	cmp	r3, #48	; 0x30
 800af28:	d817      	bhi.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800af2a:	2b20      	cmp	r3, #32
 800af2c:	d00c      	beq.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800af2e:	2b20      	cmp	r3, #32
 800af30:	d813      	bhi.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800af32:	2b00      	cmp	r3, #0
 800af34:	d016      	beq.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800af36:	2b10      	cmp	r3, #16
 800af38:	d10f      	bne.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af3a:	4b89      	ldr	r3, [pc, #548]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800af3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3e:	4a88      	ldr	r2, [pc, #544]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800af40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800af46:	e00e      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	3304      	adds	r3, #4
 800af4c:	2102      	movs	r1, #2
 800af4e:	4618      	mov	r0, r3
 800af50:	f002 f950 	bl	800d1f4 <RCCEx_PLL2_Config>
 800af54:	4603      	mov	r3, r0
 800af56:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800af58:	e005      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	75fb      	strb	r3, [r7, #23]
      break;
 800af5e:	e002      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800af60:	bf00      	nop
 800af62:	e000      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800af64:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af66:	7dfb      	ldrb	r3, [r7, #23]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d109      	bne.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800af6c:	4b7c      	ldr	r3, [pc, #496]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800af6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af78:	4979      	ldr	r1, [pc, #484]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800af7a:	4313      	orrs	r3, r2
 800af7c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800af7e:	e001      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af80:	7dfb      	ldrb	r3, [r7, #23]
 800af82:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d047      	beq.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af98:	d030      	beq.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800af9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af9e:	d82a      	bhi.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800afa0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800afa4:	d02c      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800afa6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800afaa:	d824      	bhi.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800afac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afb0:	d018      	beq.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800afb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afb6:	d81e      	bhi.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d003      	beq.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800afbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afc0:	d007      	beq.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800afc2:	e018      	b.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afc4:	4b66      	ldr	r3, [pc, #408]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800afc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc8:	4a65      	ldr	r2, [pc, #404]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800afca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800afd0:	e017      	b.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	3304      	adds	r3, #4
 800afd6:	2100      	movs	r1, #0
 800afd8:	4618      	mov	r0, r3
 800afda:	f002 f90b 	bl	800d1f4 <RCCEx_PLL2_Config>
 800afde:	4603      	mov	r3, r0
 800afe0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800afe2:	e00e      	b.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	3324      	adds	r3, #36	; 0x24
 800afe8:	2100      	movs	r1, #0
 800afea:	4618      	mov	r0, r3
 800afec:	f002 fa24 	bl	800d438 <RCCEx_PLL3_Config>
 800aff0:	4603      	mov	r3, r0
 800aff2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aff4:	e005      	b.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	75fb      	strb	r3, [r7, #23]
      break;
 800affa:	e002      	b.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800affc:	bf00      	nop
 800affe:	e000      	b.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b000:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b002:	7dfb      	ldrb	r3, [r7, #23]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d109      	bne.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b008:	4b55      	ldr	r3, [pc, #340]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b00a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b00c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b014:	4952      	ldr	r1, [pc, #328]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b016:	4313      	orrs	r3, r2
 800b018:	650b      	str	r3, [r1, #80]	; 0x50
 800b01a:	e001      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b01c:	7dfb      	ldrb	r3, [r7, #23]
 800b01e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d049      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b034:	d02e      	beq.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b036:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b03a:	d828      	bhi.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b03c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b040:	d02a      	beq.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800b042:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b046:	d822      	bhi.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b048:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b04c:	d026      	beq.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800b04e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b052:	d81c      	bhi.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b058:	d010      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800b05a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b05e:	d816      	bhi.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b060:	2b00      	cmp	r3, #0
 800b062:	d01d      	beq.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800b064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b068:	d111      	bne.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	3304      	adds	r3, #4
 800b06e:	2101      	movs	r1, #1
 800b070:	4618      	mov	r0, r3
 800b072:	f002 f8bf 	bl	800d1f4 <RCCEx_PLL2_Config>
 800b076:	4603      	mov	r3, r0
 800b078:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b07a:	e012      	b.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	3324      	adds	r3, #36	; 0x24
 800b080:	2101      	movs	r1, #1
 800b082:	4618      	mov	r0, r3
 800b084:	f002 f9d8 	bl	800d438 <RCCEx_PLL3_Config>
 800b088:	4603      	mov	r3, r0
 800b08a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b08c:	e009      	b.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	75fb      	strb	r3, [r7, #23]
      break;
 800b092:	e006      	b.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b094:	bf00      	nop
 800b096:	e004      	b.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b098:	bf00      	nop
 800b09a:	e002      	b.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b09c:	bf00      	nop
 800b09e:	e000      	b.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b0a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0a2:	7dfb      	ldrb	r3, [r7, #23]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d109      	bne.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b0a8:	4b2d      	ldr	r3, [pc, #180]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0b4:	492a      	ldr	r1, [pc, #168]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	650b      	str	r3, [r1, #80]	; 0x50
 800b0ba:	e001      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0bc:	7dfb      	ldrb	r3, [r7, #23]
 800b0be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d04d      	beq.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b0d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0d6:	d02e      	beq.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800b0d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0dc:	d828      	bhi.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b0de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0e2:	d02a      	beq.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800b0e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0e8:	d822      	bhi.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b0ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0ee:	d026      	beq.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x526>
 800b0f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0f4:	d81c      	bhi.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b0f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0fa:	d010      	beq.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b0fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b100:	d816      	bhi.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b102:	2b00      	cmp	r3, #0
 800b104:	d01d      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800b106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b10a:	d111      	bne.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	3304      	adds	r3, #4
 800b110:	2101      	movs	r1, #1
 800b112:	4618      	mov	r0, r3
 800b114:	f002 f86e 	bl	800d1f4 <RCCEx_PLL2_Config>
 800b118:	4603      	mov	r3, r0
 800b11a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b11c:	e012      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	3324      	adds	r3, #36	; 0x24
 800b122:	2101      	movs	r1, #1
 800b124:	4618      	mov	r0, r3
 800b126:	f002 f987 	bl	800d438 <RCCEx_PLL3_Config>
 800b12a:	4603      	mov	r3, r0
 800b12c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b12e:	e009      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	75fb      	strb	r3, [r7, #23]
      break;
 800b134:	e006      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b136:	bf00      	nop
 800b138:	e004      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b13a:	bf00      	nop
 800b13c:	e002      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b13e:	bf00      	nop
 800b140:	e000      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b142:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b144:	7dfb      	ldrb	r3, [r7, #23]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10c      	bne.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b14a:	4b05      	ldr	r3, [pc, #20]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b14c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b14e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b158:	4901      	ldr	r1, [pc, #4]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b15a:	4313      	orrs	r3, r2
 800b15c:	658b      	str	r3, [r1, #88]	; 0x58
 800b15e:	e003      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800b160:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b164:	7dfb      	ldrb	r3, [r7, #23]
 800b166:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d02f      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b17c:	d00e      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800b17e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b182:	d814      	bhi.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x596>
 800b184:	2b00      	cmp	r3, #0
 800b186:	d015      	beq.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800b188:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b18c:	d10f      	bne.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b18e:	4b2d      	ldr	r3, [pc, #180]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 800b190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b192:	4a2c      	ldr	r2, [pc, #176]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 800b194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b198:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b19a:	e00c      	b.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	3304      	adds	r3, #4
 800b1a0:	2101      	movs	r1, #1
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f002 f826 	bl	800d1f4 <RCCEx_PLL2_Config>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b1ac:	e003      	b.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b1b2:	e000      	b.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800b1b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1b6:	7dfb      	ldrb	r3, [r7, #23]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d109      	bne.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b1bc:	4b21      	ldr	r3, [pc, #132]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 800b1be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1c8:	491e      	ldr	r1, [pc, #120]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	650b      	str	r3, [r1, #80]	; 0x50
 800b1ce:	e001      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1d0:	7dfb      	ldrb	r3, [r7, #23]
 800b1d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d035      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x634>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1e4:	2b03      	cmp	r3, #3
 800b1e6:	d81b      	bhi.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b1e8:	a201      	add	r2, pc, #4	; (adr r2, 800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800b1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ee:	bf00      	nop
 800b1f0:	0800b227 	.word	0x0800b227
 800b1f4:	0800b201 	.word	0x0800b201
 800b1f8:	0800b20f 	.word	0x0800b20f
 800b1fc:	0800b227 	.word	0x0800b227
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b200:	4b10      	ldr	r3, [pc, #64]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 800b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b204:	4a0f      	ldr	r2, [pc, #60]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 800b206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b20a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b20c:	e00c      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	3304      	adds	r3, #4
 800b212:	2102      	movs	r1, #2
 800b214:	4618      	mov	r0, r3
 800b216:	f001 ffed 	bl	800d1f4 <RCCEx_PLL2_Config>
 800b21a:	4603      	mov	r3, r0
 800b21c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b21e:	e003      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	75fb      	strb	r3, [r7, #23]
      break;
 800b224:	e000      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b226:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b228:	7dfb      	ldrb	r3, [r7, #23]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10c      	bne.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x630>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b22e:	4b05      	ldr	r3, [pc, #20]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 800b230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b232:	f023 0203 	bic.w	r2, r3, #3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b23a:	4902      	ldr	r1, [pc, #8]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 800b23c:	4313      	orrs	r3, r2
 800b23e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b240:	e004      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x634>
 800b242:	bf00      	nop
 800b244:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b248:	7dfb      	ldrb	r3, [r7, #23]
 800b24a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b254:	2b00      	cmp	r3, #0
 800b256:	f000 829b 	beq.w	800b790 <HAL_RCCEx_PeriphCLKConfig+0xb78>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b264:	f000 81a9 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b26e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b272:	f000 81a2 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b27c:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 800b280:	f000 819b 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b28a:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 800b28e:	f000 8194 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b298:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 800b29c:	f000 818d 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2a6:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 800b2aa:	f000 8186 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2b4:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 800b2b8:	f000 817f 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2c2:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 800b2c6:	f000 8178 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2d0:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 800b2d4:	f000 8171 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2de:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 800b2e2:	f000 816a 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2ec:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 800b2f0:	f000 8163 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2fa:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 800b2fe:	f000 815c 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b308:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 800b30c:	f000 8155 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b316:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 800b31a:	f000 814e 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b324:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 800b328:	f000 8147 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b332:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 800b336:	f000 8140 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b340:	4aa3      	ldr	r2, [pc, #652]	; (800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b342:	4293      	cmp	r3, r2
 800b344:	f000 8139 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b34e:	4aa1      	ldr	r2, [pc, #644]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800b350:	4293      	cmp	r3, r2
 800b352:	f000 8132 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b35c:	4a9e      	ldr	r2, [pc, #632]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	f000 812b 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b36a:	4a9c      	ldr	r2, [pc, #624]	; (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	f000 8124 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b378:	4a99      	ldr	r2, [pc, #612]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	f000 811d 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b386:	4a97      	ldr	r2, [pc, #604]	; (800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	f000 8116 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b394:	4a94      	ldr	r2, [pc, #592]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800b396:	4293      	cmp	r3, r2
 800b398:	f000 810f 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3a2:	4a92      	ldr	r2, [pc, #584]	; (800b5ec <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	f000 8108 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3b0:	4a8f      	ldr	r2, [pc, #572]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	f000 8101 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3be:	4a8d      	ldr	r2, [pc, #564]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	f000 80fa 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3cc:	4a8a      	ldr	r2, [pc, #552]	; (800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	f000 80f3 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3da:	4a88      	ldr	r2, [pc, #544]	; (800b5fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	f000 80ec 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3e8:	4a85      	ldr	r2, [pc, #532]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	f000 80e5 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3f6:	4a83      	ldr	r2, [pc, #524]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	f000 80de 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b404:	4a80      	ldr	r2, [pc, #512]	; (800b608 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800b406:	4293      	cmp	r3, r2
 800b408:	f000 80d7 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b412:	4a7e      	ldr	r2, [pc, #504]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 800b414:	4293      	cmp	r3, r2
 800b416:	f000 80d0 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b420:	4a7b      	ldr	r2, [pc, #492]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 800b422:	4293      	cmp	r3, r2
 800b424:	f000 80c9 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b42e:	4a79      	ldr	r2, [pc, #484]	; (800b614 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 800b430:	4293      	cmp	r3, r2
 800b432:	f000 80c2 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b43c:	4a76      	ldr	r2, [pc, #472]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	f000 80bb 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b44a:	4a74      	ldr	r2, [pc, #464]	; (800b61c <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	f000 80b4 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b458:	4a71      	ldr	r2, [pc, #452]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	f000 80ad 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b466:	4a6f      	ldr	r2, [pc, #444]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	f000 80a6 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b474:	4a6c      	ldr	r2, [pc, #432]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b476:	4293      	cmp	r3, r2
 800b478:	f000 809f 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b482:	4a6a      	ldr	r2, [pc, #424]	; (800b62c <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 800b484:	4293      	cmp	r3, r2
 800b486:	f000 8098 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b490:	4a67      	ldr	r2, [pc, #412]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800b492:	4293      	cmp	r3, r2
 800b494:	f000 8091 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b49e:	4a65      	ldr	r2, [pc, #404]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	f000 808a 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4ac:	4a62      	ldr	r2, [pc, #392]	; (800b638 <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	f000 8083 	beq.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4ba:	4a60      	ldr	r2, [pc, #384]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d07c      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4c6:	4a5e      	ldr	r2, [pc, #376]	; (800b640 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d076      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4d2:	4a5c      	ldr	r2, [pc, #368]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d070      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4de:	4a5a      	ldr	r2, [pc, #360]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d06a      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4ea:	4a58      	ldr	r2, [pc, #352]	; (800b64c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d064      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4f6:	4a56      	ldr	r2, [pc, #344]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d05e      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b502:	4a54      	ldr	r2, [pc, #336]	; (800b654 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d058      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b50e:	4a52      	ldr	r2, [pc, #328]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d052      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b51a:	4a50      	ldr	r2, [pc, #320]	; (800b65c <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d04c      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b526:	4a4e      	ldr	r2, [pc, #312]	; (800b660 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d046      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b532:	4a4c      	ldr	r2, [pc, #304]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d040      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b53e:	4a4a      	ldr	r2, [pc, #296]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0xa50>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d03a      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b54a:	4a48      	ldr	r2, [pc, #288]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0xa54>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d034      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b556:	4a46      	ldr	r2, [pc, #280]	; (800b670 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d02e      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b562:	4a44      	ldr	r2, [pc, #272]	; (800b674 <HAL_RCCEx_PeriphCLKConfig+0xa5c>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d028      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b56e:	4a42      	ldr	r2, [pc, #264]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d022      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b57a:	4a40      	ldr	r2, [pc, #256]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0xa64>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d01c      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b586:	4a3e      	ldr	r2, [pc, #248]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0xa68>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d016      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b592:	4a3c      	ldr	r2, [pc, #240]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0xa6c>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d010      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b59e:	4a3a      	ldr	r2, [pc, #232]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0xa70>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d00a      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5aa:	4a38      	ldr	r2, [pc, #224]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d004      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800b5b0:	f240 317d 	movw	r1, #893	; 0x37d
 800b5b4:	4836      	ldr	r0, [pc, #216]	; (800b690 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800b5b6:	f7f6 fa5c 	bl	8001a72 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b5ba:	4b36      	ldr	r3, [pc, #216]	; (800b694 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a35      	ldr	r2, [pc, #212]	; (800b694 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800b5c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b5c6:	f7f7 ffc7 	bl	8003558 <HAL_GetTick>
 800b5ca:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b5cc:	e06e      	b.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0xa94>
 800b5ce:	bf00      	nop
 800b5d0:	00010300 	.word	0x00010300
 800b5d4:	00011300 	.word	0x00011300
 800b5d8:	00012300 	.word	0x00012300
 800b5dc:	00013300 	.word	0x00013300
 800b5e0:	00014300 	.word	0x00014300
 800b5e4:	00015300 	.word	0x00015300
 800b5e8:	00016300 	.word	0x00016300
 800b5ec:	00017300 	.word	0x00017300
 800b5f0:	00018300 	.word	0x00018300
 800b5f4:	00019300 	.word	0x00019300
 800b5f8:	0001a300 	.word	0x0001a300
 800b5fc:	0001b300 	.word	0x0001b300
 800b600:	0001c300 	.word	0x0001c300
 800b604:	0001d300 	.word	0x0001d300
 800b608:	0001e300 	.word	0x0001e300
 800b60c:	0001f300 	.word	0x0001f300
 800b610:	00020300 	.word	0x00020300
 800b614:	00021300 	.word	0x00021300
 800b618:	00022300 	.word	0x00022300
 800b61c:	00023300 	.word	0x00023300
 800b620:	00024300 	.word	0x00024300
 800b624:	00025300 	.word	0x00025300
 800b628:	00026300 	.word	0x00026300
 800b62c:	00027300 	.word	0x00027300
 800b630:	00028300 	.word	0x00028300
 800b634:	00029300 	.word	0x00029300
 800b638:	0002a300 	.word	0x0002a300
 800b63c:	0002b300 	.word	0x0002b300
 800b640:	0002c300 	.word	0x0002c300
 800b644:	0002d300 	.word	0x0002d300
 800b648:	0002e300 	.word	0x0002e300
 800b64c:	0002f300 	.word	0x0002f300
 800b650:	00030300 	.word	0x00030300
 800b654:	00031300 	.word	0x00031300
 800b658:	00032300 	.word	0x00032300
 800b65c:	00033300 	.word	0x00033300
 800b660:	00034300 	.word	0x00034300
 800b664:	00035300 	.word	0x00035300
 800b668:	00036300 	.word	0x00036300
 800b66c:	00037300 	.word	0x00037300
 800b670:	00038300 	.word	0x00038300
 800b674:	00039300 	.word	0x00039300
 800b678:	0003a300 	.word	0x0003a300
 800b67c:	0003b300 	.word	0x0003b300
 800b680:	0003c300 	.word	0x0003c300
 800b684:	0003d300 	.word	0x0003d300
 800b688:	0003e300 	.word	0x0003e300
 800b68c:	0003f300 	.word	0x0003f300
 800b690:	0801ddc8 	.word	0x0801ddc8
 800b694:	58024800 	.word	0x58024800
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b698:	f7f7 ff5e 	bl	8003558 <HAL_GetTick>
 800b69c:	4602      	mov	r2, r0
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	1ad3      	subs	r3, r2, r3
 800b6a2:	2b64      	cmp	r3, #100	; 0x64
 800b6a4:	d902      	bls.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0xa94>
      {
        ret = HAL_TIMEOUT;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	75fb      	strb	r3, [r7, #23]
        break;
 800b6aa:	e005      	b.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b6ac:	4bb9      	ldr	r3, [pc, #740]	; (800b994 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d0ef      	beq.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0xa80>
      }
    }

    if(ret == HAL_OK)
 800b6b8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d166      	bne.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b6be:	4bb6      	ldr	r3, [pc, #728]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b6c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b6c8:	4053      	eors	r3, r2
 800b6ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d013      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0xae2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b6d2:	4bb1      	ldr	r3, [pc, #708]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b6d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6da:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b6dc:	4bae      	ldr	r3, [pc, #696]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b6de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6e0:	4aad      	ldr	r2, [pc, #692]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b6e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6e6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b6e8:	4bab      	ldr	r3, [pc, #684]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b6ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ec:	4aaa      	ldr	r2, [pc, #680]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b6ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6f2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b6f4:	4aa8      	ldr	r2, [pc, #672]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b704:	d115      	bne.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b706:	f7f7 ff27 	bl	8003558 <HAL_GetTick>
 800b70a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b70c:	e00b      	b.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b70e:	f7f7 ff23 	bl	8003558 <HAL_GetTick>
 800b712:	4602      	mov	r2, r0
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	1ad3      	subs	r3, r2, r3
 800b718:	f241 3288 	movw	r2, #5000	; 0x1388
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d902      	bls.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
          {
            ret = HAL_TIMEOUT;
 800b720:	2303      	movs	r3, #3
 800b722:	75fb      	strb	r3, [r7, #23]
            break;
 800b724:	e005      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b726:	4b9c      	ldr	r3, [pc, #624]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b72a:	f003 0302 	and.w	r3, r3, #2
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d0ed      	beq.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
          }
        }
      }

      if(ret == HAL_OK)
 800b732:	7dfb      	ldrb	r3, [r7, #23]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d126      	bne.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b73e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b746:	d10d      	bne.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 800b748:	4b93      	ldr	r3, [pc, #588]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b74a:	691b      	ldr	r3, [r3, #16]
 800b74c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b756:	0919      	lsrs	r1, r3, #4
 800b758:	4b90      	ldr	r3, [pc, #576]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0xd84>)
 800b75a:	400b      	ands	r3, r1
 800b75c:	498e      	ldr	r1, [pc, #568]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b75e:	4313      	orrs	r3, r2
 800b760:	610b      	str	r3, [r1, #16]
 800b762:	e005      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 800b764:	4b8c      	ldr	r3, [pc, #560]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b766:	691b      	ldr	r3, [r3, #16]
 800b768:	4a8b      	ldr	r2, [pc, #556]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b76a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b76e:	6113      	str	r3, [r2, #16]
 800b770:	4b89      	ldr	r3, [pc, #548]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b772:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b77a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b77e:	4986      	ldr	r1, [pc, #536]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b780:	4313      	orrs	r3, r2
 800b782:	670b      	str	r3, [r1, #112]	; 0x70
 800b784:	e004      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0xb78>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b786:	7dfb      	ldrb	r3, [r7, #23]
 800b788:	75bb      	strb	r3, [r7, #22]
 800b78a:	e001      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0xb78>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b78c:	7dfb      	ldrb	r3, [r7, #23]
 800b78e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f003 0301 	and.w	r3, r3, #1
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d07e      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0xc82>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7a0:	2b28      	cmp	r3, #40	; 0x28
 800b7a2:	d867      	bhi.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800b7a4:	a201      	add	r2, pc, #4	; (adr r2, 800b7ac <HAL_RCCEx_PeriphCLKConfig+0xb94>)
 800b7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7aa:	bf00      	nop
 800b7ac:	0800b87b 	.word	0x0800b87b
 800b7b0:	0800b875 	.word	0x0800b875
 800b7b4:	0800b875 	.word	0x0800b875
 800b7b8:	0800b875 	.word	0x0800b875
 800b7bc:	0800b875 	.word	0x0800b875
 800b7c0:	0800b875 	.word	0x0800b875
 800b7c4:	0800b875 	.word	0x0800b875
 800b7c8:	0800b875 	.word	0x0800b875
 800b7cc:	0800b851 	.word	0x0800b851
 800b7d0:	0800b875 	.word	0x0800b875
 800b7d4:	0800b875 	.word	0x0800b875
 800b7d8:	0800b875 	.word	0x0800b875
 800b7dc:	0800b875 	.word	0x0800b875
 800b7e0:	0800b875 	.word	0x0800b875
 800b7e4:	0800b875 	.word	0x0800b875
 800b7e8:	0800b875 	.word	0x0800b875
 800b7ec:	0800b863 	.word	0x0800b863
 800b7f0:	0800b875 	.word	0x0800b875
 800b7f4:	0800b875 	.word	0x0800b875
 800b7f8:	0800b875 	.word	0x0800b875
 800b7fc:	0800b875 	.word	0x0800b875
 800b800:	0800b875 	.word	0x0800b875
 800b804:	0800b875 	.word	0x0800b875
 800b808:	0800b875 	.word	0x0800b875
 800b80c:	0800b87b 	.word	0x0800b87b
 800b810:	0800b875 	.word	0x0800b875
 800b814:	0800b875 	.word	0x0800b875
 800b818:	0800b875 	.word	0x0800b875
 800b81c:	0800b875 	.word	0x0800b875
 800b820:	0800b875 	.word	0x0800b875
 800b824:	0800b875 	.word	0x0800b875
 800b828:	0800b875 	.word	0x0800b875
 800b82c:	0800b87b 	.word	0x0800b87b
 800b830:	0800b875 	.word	0x0800b875
 800b834:	0800b875 	.word	0x0800b875
 800b838:	0800b875 	.word	0x0800b875
 800b83c:	0800b875 	.word	0x0800b875
 800b840:	0800b875 	.word	0x0800b875
 800b844:	0800b875 	.word	0x0800b875
 800b848:	0800b875 	.word	0x0800b875
 800b84c:	0800b87b 	.word	0x0800b87b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	3304      	adds	r3, #4
 800b854:	2101      	movs	r1, #1
 800b856:	4618      	mov	r0, r3
 800b858:	f001 fccc 	bl	800d1f4 <RCCEx_PLL2_Config>
 800b85c:	4603      	mov	r3, r0
 800b85e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b860:	e00c      	b.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0xc64>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	3324      	adds	r3, #36	; 0x24
 800b866:	2101      	movs	r1, #1
 800b868:	4618      	mov	r0, r3
 800b86a:	f001 fde5 	bl	800d438 <RCCEx_PLL3_Config>
 800b86e:	4603      	mov	r3, r0
 800b870:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b872:	e003      	b.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0xc64>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	75fb      	strb	r3, [r7, #23]
      break;
 800b878:	e000      	b.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0xc64>
      break;
 800b87a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b87c:	7dfb      	ldrb	r3, [r7, #23]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d109      	bne.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b882:	4b45      	ldr	r3, [pc, #276]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b886:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b88e:	4942      	ldr	r1, [pc, #264]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b890:	4313      	orrs	r3, r2
 800b892:	654b      	str	r3, [r1, #84]	; 0x54
 800b894:	e001      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b896:	7dfb      	ldrb	r3, [r7, #23]
 800b898:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f003 0302 	and.w	r3, r3, #2
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d037      	beq.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8aa:	2b05      	cmp	r3, #5
 800b8ac:	d820      	bhi.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0xcd8>
 800b8ae:	a201      	add	r2, pc, #4	; (adr r2, 800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b4:	0800b8f7 	.word	0x0800b8f7
 800b8b8:	0800b8cd 	.word	0x0800b8cd
 800b8bc:	0800b8df 	.word	0x0800b8df
 800b8c0:	0800b8f7 	.word	0x0800b8f7
 800b8c4:	0800b8f7 	.word	0x0800b8f7
 800b8c8:	0800b8f7 	.word	0x0800b8f7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	3304      	adds	r3, #4
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f001 fc8e 	bl	800d1f4 <RCCEx_PLL2_Config>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b8dc:	e00c      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xce0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	3324      	adds	r3, #36	; 0x24
 800b8e2:	2101      	movs	r1, #1
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f001 fda7 	bl	800d438 <RCCEx_PLL3_Config>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b8ee:	e003      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xce0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b8f4:	e000      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xce0>
      break;
 800b8f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8f8:	7dfb      	ldrb	r3, [r7, #23]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d109      	bne.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b8fe:	4b26      	ldr	r3, [pc, #152]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b902:	f023 0207 	bic.w	r2, r3, #7
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b90a:	4923      	ldr	r1, [pc, #140]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b90c:	4313      	orrs	r3, r2
 800b90e:	654b      	str	r3, [r1, #84]	; 0x54
 800b910:	e001      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b912:	7dfb      	ldrb	r3, [r7, #23]
 800b914:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f003 0304 	and.w	r3, r3, #4
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d040      	beq.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b928:	2b05      	cmp	r3, #5
 800b92a:	d821      	bhi.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 800b92c:	a201      	add	r2, pc, #4	; (adr r2, 800b934 <HAL_RCCEx_PeriphCLKConfig+0xd1c>)
 800b92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b932:	bf00      	nop
 800b934:	0800b977 	.word	0x0800b977
 800b938:	0800b94d 	.word	0x0800b94d
 800b93c:	0800b95f 	.word	0x0800b95f
 800b940:	0800b977 	.word	0x0800b977
 800b944:	0800b977 	.word	0x0800b977
 800b948:	0800b977 	.word	0x0800b977
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	3304      	adds	r3, #4
 800b950:	2101      	movs	r1, #1
 800b952:	4618      	mov	r0, r3
 800b954:	f001 fc4e 	bl	800d1f4 <RCCEx_PLL2_Config>
 800b958:	4603      	mov	r3, r0
 800b95a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b95c:	e00c      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0xd60>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	3324      	adds	r3, #36	; 0x24
 800b962:	2101      	movs	r1, #1
 800b964:	4618      	mov	r0, r3
 800b966:	f001 fd67 	bl	800d438 <RCCEx_PLL3_Config>
 800b96a:	4603      	mov	r3, r0
 800b96c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b96e:	e003      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b970:	2301      	movs	r3, #1
 800b972:	75fb      	strb	r3, [r7, #23]
      break;
 800b974:	e000      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      break;
 800b976:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b978:	7dfb      	ldrb	r3, [r7, #23]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d110      	bne.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xd88>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b97e:	4b06      	ldr	r3, [pc, #24]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b982:	f023 0207 	bic.w	r2, r3, #7
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b98c:	4902      	ldr	r1, [pc, #8]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800b98e:	4313      	orrs	r3, r2
 800b990:	658b      	str	r3, [r1, #88]	; 0x58
 800b992:	e007      	b.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 800b994:	58024800 	.word	0x58024800
 800b998:	58024400 	.word	0x58024400
 800b99c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
 800b9a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f003 0320 	and.w	r3, r3, #32
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d04b      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9ba:	d02e      	beq.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0xe02>
 800b9bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9c0:	d828      	bhi.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 800b9c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9c6:	d02a      	beq.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xe06>
 800b9c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9cc:	d822      	bhi.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 800b9ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9d2:	d026      	beq.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
 800b9d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9d8:	d81c      	bhi.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 800b9da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9de:	d010      	beq.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0xdea>
 800b9e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9e4:	d816      	bhi.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d01d      	beq.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 800b9ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9ee:	d111      	bne.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	3304      	adds	r3, #4
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f001 fbfc 	bl	800d1f4 <RCCEx_PLL2_Config>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ba00:	e012      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0xe10>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	3324      	adds	r3, #36	; 0x24
 800ba06:	2102      	movs	r1, #2
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f001 fd15 	bl	800d438 <RCCEx_PLL3_Config>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ba12:	e009      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	75fb      	strb	r3, [r7, #23]
      break;
 800ba18:	e006      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 800ba1a:	bf00      	nop
 800ba1c:	e004      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 800ba1e:	bf00      	nop
 800ba20:	e002      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 800ba22:	bf00      	nop
 800ba24:	e000      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 800ba26:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba28:	7dfb      	ldrb	r3, [r7, #23]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10a      	bne.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ba2e:	4baa      	ldr	r3, [pc, #680]	; (800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>)
 800ba30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba32:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba3c:	49a6      	ldr	r1, [pc, #664]	; (800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>)
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	654b      	str	r3, [r1, #84]	; 0x54
 800ba42:	e001      	b.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0xe30>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba44:	7dfb      	ldrb	r3, [r7, #23]
 800ba46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d04b      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0xed4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ba5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ba5e:	d02e      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0xea6>
 800ba60:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ba64:	d828      	bhi.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ba66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba6a:	d02a      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
 800ba6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba70:	d822      	bhi.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ba72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ba76:	d026      	beq.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0xeae>
 800ba78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ba7c:	d81c      	bhi.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ba7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba82:	d010      	beq.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
 800ba84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba88:	d816      	bhi.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d01d      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0xeb2>
 800ba8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba92:	d111      	bne.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	3304      	adds	r3, #4
 800ba98:	2100      	movs	r1, #0
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f001 fbaa 	bl	800d1f4 <RCCEx_PLL2_Config>
 800baa0:	4603      	mov	r3, r0
 800baa2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800baa4:	e012      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xeb4>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	3324      	adds	r3, #36	; 0x24
 800baaa:	2102      	movs	r1, #2
 800baac:	4618      	mov	r0, r3
 800baae:	f001 fcc3 	bl	800d438 <RCCEx_PLL3_Config>
 800bab2:	4603      	mov	r3, r0
 800bab4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bab6:	e009      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	75fb      	strb	r3, [r7, #23]
      break;
 800babc:	e006      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 800babe:	bf00      	nop
 800bac0:	e004      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 800bac2:	bf00      	nop
 800bac4:	e002      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 800bac6:	bf00      	nop
 800bac8:	e000      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 800baca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bacc:	7dfb      	ldrb	r3, [r7, #23]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10a      	bne.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0xed0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bad2:	4b81      	ldr	r3, [pc, #516]	; (800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>)
 800bad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bad6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bae0:	497d      	ldr	r1, [pc, #500]	; (800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>)
 800bae2:	4313      	orrs	r3, r2
 800bae4:	658b      	str	r3, [r1, #88]	; 0x58
 800bae6:	e001      	b.n	800baec <HAL_RCCEx_PeriphCLKConfig+0xed4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae8:	7dfb      	ldrb	r3, [r7, #23]
 800baea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d04b      	beq.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0xf78>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bafe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bb02:	d02e      	beq.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 800bb04:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bb08:	d828      	bhi.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xf44>
 800bb0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb0e:	d02a      	beq.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0xf4e>
 800bb10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb14:	d822      	bhi.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xf44>
 800bb16:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bb1a:	d026      	beq.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0xf52>
 800bb1c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bb20:	d81c      	bhi.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xf44>
 800bb22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb26:	d010      	beq.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0xf32>
 800bb28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb2c:	d816      	bhi.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xf44>
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d01d      	beq.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xf56>
 800bb32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb36:	d111      	bne.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xf44>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	3304      	adds	r3, #4
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f001 fb58 	bl	800d1f4 <RCCEx_PLL2_Config>
 800bb44:	4603      	mov	r3, r0
 800bb46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800bb48:	e012      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xf58>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	3324      	adds	r3, #36	; 0x24
 800bb4e:	2102      	movs	r1, #2
 800bb50:	4618      	mov	r0, r3
 800bb52:	f001 fc71 	bl	800d438 <RCCEx_PLL3_Config>
 800bb56:	4603      	mov	r3, r0
 800bb58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800bb5a:	e009      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	75fb      	strb	r3, [r7, #23]
      break;
 800bb60:	e006      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 800bb62:	bf00      	nop
 800bb64:	e004      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 800bb66:	bf00      	nop
 800bb68:	e002      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 800bb6a:	bf00      	nop
 800bb6c:	e000      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 800bb6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb70:	7dfb      	ldrb	r3, [r7, #23]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10a      	bne.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0xf74>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bb76:	4b58      	ldr	r3, [pc, #352]	; (800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>)
 800bb78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb84:	4954      	ldr	r1, [pc, #336]	; (800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>)
 800bb86:	4313      	orrs	r3, r2
 800bb88:	658b      	str	r3, [r1, #88]	; 0x58
 800bb8a:	e001      	b.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0xf78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb8c:	7dfb      	ldrb	r3, [r7, #23]
 800bb8e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 0308 	and.w	r3, r3, #8
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d036      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0xff2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bba6:	d015      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbb2:	d00f      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00a      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bbc8:	d004      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 800bbca:	f240 510d 	movw	r1, #1293	; 0x50d
 800bbce:	4843      	ldr	r0, [pc, #268]	; (800bcdc <HAL_RCCEx_PeriphCLKConfig+0x10c4>)
 800bbd0:	f7f5 ff4f 	bl	8001a72 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbde:	d10a      	bne.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0xfde>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	3324      	adds	r3, #36	; 0x24
 800bbe4:	2102      	movs	r1, #2
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f001 fc26 	bl	800d438 <RCCEx_PLL3_Config>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d001      	beq.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0xfde>
        {
          status = HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bbf6:	4b38      	ldr	r3, [pc, #224]	; (800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>)
 800bbf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbfa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc04:	4934      	ldr	r1, [pc, #208]	; (800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>)
 800bc06:	4313      	orrs	r3, r2
 800bc08:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f003 0310 	and.w	r3, r3, #16
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d036      	beq.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x106c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc20:	d015      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x1036>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc2c:	d00f      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x1036>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00a      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x1036>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc42:	d004      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x1036>
 800bc44:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800bc48:	4824      	ldr	r0, [pc, #144]	; (800bcdc <HAL_RCCEx_PeriphCLKConfig+0x10c4>)
 800bc4a:	f7f5 ff12 	bl	8001a72 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc58:	d10a      	bne.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x1058>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	3324      	adds	r3, #36	; 0x24
 800bc5e:	2102      	movs	r1, #2
 800bc60:	4618      	mov	r0, r3
 800bc62:	f001 fbe9 	bl	800d438 <RCCEx_PLL3_Config>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d001      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x1058>
      {
        status = HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bc70:	4b19      	ldr	r3, [pc, #100]	; (800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>)
 800bc72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc7e:	4916      	ldr	r1, [pc, #88]	; (800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>)
 800bc80:	4313      	orrs	r3, r2
 800bc82:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d038      	beq.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x10ea>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc9a:	d021      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800bc9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bca0:	d817      	bhi.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d003      	beq.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x1096>
 800bca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcaa:	d009      	beq.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 800bcac:	e011      	b.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	3304      	adds	r3, #4
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f001 fa9d 	bl	800d1f4 <RCCEx_PLL2_Config>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bcbe:	e010      	b.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	3324      	adds	r3, #36	; 0x24
 800bcc4:	2102      	movs	r1, #2
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f001 fbb6 	bl	800d438 <RCCEx_PLL3_Config>
 800bccc:	4603      	mov	r3, r0
 800bcce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bcd0:	e007      	b.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	75fb      	strb	r3, [r7, #23]
      break;
 800bcd6:	e004      	b.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
 800bcd8:	58024400 	.word	0x58024400
 800bcdc:	0801ddc8 	.word	0x0801ddc8
      break;
 800bce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10a      	bne.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0x10e6>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bce8:	4b65      	ldr	r3, [pc, #404]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800bcea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bcf6:	4962      	ldr	r1, [pc, #392]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	658b      	str	r3, [r1, #88]	; 0x58
 800bcfc:	e001      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x10ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcfe:	7dfb      	ldrb	r3, [r7, #23]
 800bd00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d033      	beq.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0x115e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bd18:	d01c      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800bd1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bd1e:	d816      	bhi.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x1136>
 800bd20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd24:	d003      	beq.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bd26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd2a:	d007      	beq.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1124>
 800bd2c:	e00f      	b.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd2e:	4b54      	ldr	r3, [pc, #336]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800bd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd32:	4a53      	ldr	r2, [pc, #332]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800bd34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800bd3a:	e00c      	b.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x113e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	3324      	adds	r3, #36	; 0x24
 800bd40:	2101      	movs	r1, #1
 800bd42:	4618      	mov	r0, r3
 800bd44:	f001 fb78 	bl	800d438 <RCCEx_PLL3_Config>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800bd4c:	e003      	b.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x113e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	75fb      	strb	r3, [r7, #23]
      break;
 800bd52:	e000      	b.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x113e>
      break;
 800bd54:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd56:	7dfb      	ldrb	r3, [r7, #23]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10a      	bne.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x115a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bd5c:	4b48      	ldr	r3, [pc, #288]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800bd5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd6a:	4945      	ldr	r1, [pc, #276]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	654b      	str	r3, [r1, #84]	; 0x54
 800bd70:	e001      	b.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0x115e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd72:	7dfb      	ldrb	r3, [r7, #23]
 800bd74:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d037      	beq.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d009      	beq.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x1186>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd92:	d004      	beq.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x1186>
 800bd94:	f240 5186 	movw	r1, #1414	; 0x586
 800bd98:	483a      	ldr	r0, [pc, #232]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x126c>)
 800bd9a:	f7f5 fe6a 	bl	8001a72 <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d003      	beq.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x1196>
 800bda6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdaa:	d007      	beq.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x11a4>
 800bdac:	e00f      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x11b6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdae:	4b34      	ldr	r3, [pc, #208]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800bdb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb2:	4a33      	ldr	r2, [pc, #204]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800bdb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bdba:	e00b      	b.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	3304      	adds	r3, #4
 800bdc0:	2102      	movs	r1, #2
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f001 fa16 	bl	800d1f4 <RCCEx_PLL2_Config>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bdcc:	e002      	b.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>

    default:
      ret = HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	75fb      	strb	r3, [r7, #23]
      break;
 800bdd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bdd4:	7dfb      	ldrb	r3, [r7, #23]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d109      	bne.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0x11d6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bdda:	4b29      	ldr	r3, [pc, #164]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800bddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bde6:	4926      	ldr	r1, [pc, #152]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800bde8:	4313      	orrs	r3, r2
 800bdea:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bdec:	e001      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdee:	7dfb      	ldrb	r3, [r7, #23]
 800bdf0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00a      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x11fc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	3324      	adds	r3, #36	; 0x24
 800be02:	2102      	movs	r1, #2
 800be04:	4618      	mov	r0, r3
 800be06:	f001 fb17 	bl	800d438 <RCCEx_PLL3_Config>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d001      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x11fc>
    {
      status=HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d035      	beq.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0x1274>
  {

    switch(PeriphClkInit->RngClockSelection)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be28:	d017      	beq.n	800be5a <HAL_RCCEx_PeriphCLKConfig+0x1242>
 800be2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be2e:	d811      	bhi.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x123c>
 800be30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be34:	d013      	beq.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x1246>
 800be36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be3a:	d80b      	bhi.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x123c>
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d010      	beq.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x124a>
 800be40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be44:	d106      	bne.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x123c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be46:	4b0e      	ldr	r3, [pc, #56]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800be48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4a:	4a0d      	ldr	r2, [pc, #52]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800be4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800be52:	e007      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x124c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be54:	2301      	movs	r3, #1
 800be56:	75fb      	strb	r3, [r7, #23]
      break;
 800be58:	e004      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x124c>
      break;
 800be5a:	bf00      	nop
 800be5c:	e002      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x124c>
      break;
 800be5e:	bf00      	nop
 800be60:	e000      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x124c>
      break;
 800be62:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be64:	7dfb      	ldrb	r3, [r7, #23]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10e      	bne.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x1270>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800be6a:	4b05      	ldr	r3, [pc, #20]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800be6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be76:	4902      	ldr	r1, [pc, #8]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800be78:	4313      	orrs	r3, r2
 800be7a:	654b      	str	r3, [r1, #84]	; 0x54
 800be7c:	e006      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0x1274>
 800be7e:	bf00      	nop
 800be80:	58024400 	.word	0x58024400
 800be84:	0801ddc8 	.word	0x0801ddc8
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be88:	7dfb      	ldrb	r3, [r7, #23]
 800be8a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be94:	2b00      	cmp	r3, #0
 800be96:	d016      	beq.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x12ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d009      	beq.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bea8:	d004      	beq.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
 800beaa:	f240 51e5 	movw	r1, #1509	; 0x5e5
 800beae:	485e      	ldr	r0, [pc, #376]	; (800c028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800beb0:	f7f5 fddf 	bl	8001a72 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800beb4:	4b5d      	ldr	r3, [pc, #372]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800beb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bec0:	495a      	ldr	r1, [pc, #360]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800bec2:	4313      	orrs	r3, r2
 800bec4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d019      	beq.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d00a      	beq.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x12da>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bee6:	d004      	beq.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x12da>
 800bee8:	f240 51ef 	movw	r1, #1519	; 0x5ef
 800beec:	484e      	ldr	r0, [pc, #312]	; (800c028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800beee:	f7f5 fdc0 	bl	8001a72 <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bef2:	4b4e      	ldr	r3, [pc, #312]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bf00:	494a      	ldr	r1, [pc, #296]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800bf02:	4313      	orrs	r3, r2
 800bf04:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d016      	beq.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x1328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d009      	beq.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0x1316>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf22:	d004      	beq.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0x1316>
 800bf24:	f240 51f9 	movw	r1, #1529	; 0x5f9
 800bf28:	483f      	ldr	r0, [pc, #252]	; (800c028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf2a:	f7f5 fda2 	bl	8001a72 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bf2e:	4b3f      	ldr	r3, [pc, #252]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800bf30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf32:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf3a:	493c      	ldr	r1, [pc, #240]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d01d      	beq.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00a      	beq.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x1354>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bf5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf60:	d004      	beq.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x1354>
 800bf62:	f240 610f 	movw	r1, #1551	; 0x60f
 800bf66:	4830      	ldr	r0, [pc, #192]	; (800c028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf68:	f7f5 fd83 	bl	8001a72 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bf6c:	4b2f      	ldr	r3, [pc, #188]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800bf6e:	691b      	ldr	r3, [r3, #16]
 800bf70:	4a2e      	ldr	r2, [pc, #184]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800bf72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bf76:	6113      	str	r3, [r2, #16]
 800bf78:	4b2c      	ldr	r3, [pc, #176]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800bf7a:	691a      	ldr	r2, [r3, #16]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bf82:	492a      	ldr	r1, [pc, #168]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800bf84:	4313      	orrs	r3, r2
 800bf86:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	da1b      	bge.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x13b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00e      	beq.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x139e>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfa0:	d009      	beq.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x139e>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfaa:	d004      	beq.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x139e>
 800bfac:	f240 6119 	movw	r1, #1561	; 0x619
 800bfb0:	481d      	ldr	r0, [pc, #116]	; (800c028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfb2:	f7f5 fd5e 	bl	8001a72 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bfb6:	4b1d      	ldr	r3, [pc, #116]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800bfb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfc2:	491a      	ldr	r1, [pc, #104]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d01f      	beq.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0x13fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d010      	beq.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfe8:	d00a      	beq.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bff0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bff4:	d004      	beq.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800bff6:	f240 6123 	movw	r1, #1571	; 0x623
 800bffa:	480b      	ldr	r0, [pc, #44]	; (800c028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bffc:	f7f5 fd39 	bl	8001a72 <assert_failed>

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c000:	4b0a      	ldr	r3, [pc, #40]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800c002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c004:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c00e:	4907      	ldr	r1, [pc, #28]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800c010:	4313      	orrs	r3, r2
 800c012:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c014:	7dbb      	ldrb	r3, [r7, #22]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d101      	bne.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x1406>
  {
    return HAL_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	e000      	b.n	800c020 <HAL_RCCEx_PeriphCLKConfig+0x1408>
  }
  return HAL_ERROR;
 800c01e:	2301      	movs	r3, #1
}
 800c020:	4618      	mov	r0, r3
 800c022:	3718      	adds	r7, #24
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	0801ddc8 	.word	0x0801ddc8
 800c02c:	58024400 	.word	0x58024400

0800c030 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b090      	sub	sp, #64	; 0x40
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c03e:	f040 8095 	bne.w	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800c042:	4b97      	ldr	r3, [pc, #604]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c046:	f003 0307 	and.w	r3, r3, #7
 800c04a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04e:	2b04      	cmp	r3, #4
 800c050:	f200 8088 	bhi.w	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c054:	a201      	add	r2, pc, #4	; (adr r2, 800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800c056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05a:	bf00      	nop
 800c05c:	0800c071 	.word	0x0800c071
 800c060:	0800c099 	.word	0x0800c099
 800c064:	0800c0c1 	.word	0x0800c0c1
 800c068:	0800c15d 	.word	0x0800c15d
 800c06c:	0800c0e9 	.word	0x0800c0e9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c070:	4b8b      	ldr	r3, [pc, #556]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c078:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c07c:	d108      	bne.n	800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c07e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c082:	4618      	mov	r0, r3
 800c084:	f000 ff64 	bl	800cf50 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800c088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c08c:	f000 bc94 	b.w	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c090:	2300      	movs	r3, #0
 800c092:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c094:	f000 bc90 	b.w	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c098:	4b81      	ldr	r3, [pc, #516]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0a4:	d108      	bne.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0a6:	f107 0318 	add.w	r3, r7, #24
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f000 fca8 	bl	800ca00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c0b4:	f000 bc80 	b.w	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0bc:	f000 bc7c 	b.w	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0c0:	4b77      	ldr	r3, [pc, #476]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0cc:	d108      	bne.n	800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0ce:	f107 030c 	add.w	r3, r7, #12
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f000 fde8 	bl	800cca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c0dc:	f000 bc6c 	b.w	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0e4:	f000 bc68 	b.w	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c0e8:	4b6d      	ldr	r3, [pc, #436]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c0ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0f0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0f2:	4b6b      	ldr	r3, [pc, #428]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f003 0304 	and.w	r3, r3, #4
 800c0fa:	2b04      	cmp	r3, #4
 800c0fc:	d10c      	bne.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800c0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c100:	2b00      	cmp	r3, #0
 800c102:	d109      	bne.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c104:	4b66      	ldr	r3, [pc, #408]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	08db      	lsrs	r3, r3, #3
 800c10a:	f003 0303 	and.w	r3, r3, #3
 800c10e:	4a65      	ldr	r2, [pc, #404]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c110:	fa22 f303 	lsr.w	r3, r2, r3
 800c114:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c116:	e01f      	b.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c118:	4b61      	ldr	r3, [pc, #388]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c124:	d106      	bne.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800c126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c12c:	d102      	bne.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c12e:	4b5e      	ldr	r3, [pc, #376]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c130:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c132:	e011      	b.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c134:	4b5a      	ldr	r3, [pc, #360]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c13c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c140:	d106      	bne.n	800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800c142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c148:	d102      	bne.n	800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c14a:	4b58      	ldr	r3, [pc, #352]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c14c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c14e:	e003      	b.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c150:	2300      	movs	r3, #0
 800c152:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c154:	f000 bc30 	b.w	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800c158:	f000 bc2e 	b.w	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c15c:	4b54      	ldr	r3, [pc, #336]	; (800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c15e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c160:	f000 bc2a 	b.w	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800c164:	2300      	movs	r3, #0
 800c166:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c168:	f000 bc26 	b.w	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c172:	f040 809f 	bne.w	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800c176:	4b4a      	ldr	r3, [pc, #296]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c17a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c17e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c186:	d04d      	beq.n	800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800c188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c18e:	f200 8084 	bhi.w	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800c192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c194:	2bc0      	cmp	r3, #192	; 0xc0
 800c196:	d07d      	beq.n	800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800c198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19a:	2bc0      	cmp	r3, #192	; 0xc0
 800c19c:	d87d      	bhi.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	2b80      	cmp	r3, #128	; 0x80
 800c1a2:	d02d      	beq.n	800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a6:	2b80      	cmp	r3, #128	; 0x80
 800c1a8:	d877      	bhi.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d003      	beq.n	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800c1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b2:	2b40      	cmp	r3, #64	; 0x40
 800c1b4:	d012      	beq.n	800c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800c1b6:	e070      	b.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1b8:	4b39      	ldr	r3, [pc, #228]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1c4:	d107      	bne.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f000 fec0 	bl	800cf50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c1d4:	e3f0      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c1da:	e3ed      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1dc:	4b30      	ldr	r3, [pc, #192]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1e8:	d107      	bne.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1ea:	f107 0318 	add.w	r3, r7, #24
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 fc06 	bl	800ca00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c1f8:	e3de      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c1fe:	e3db      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c200:	4b27      	ldr	r3, [pc, #156]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c20c:	d107      	bne.n	800c21e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c20e:	f107 030c 	add.w	r3, r7, #12
 800c212:	4618      	mov	r0, r3
 800c214:	f000 fd48 	bl	800cca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c21c:	e3cc      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c21e:	2300      	movs	r3, #0
 800c220:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c222:	e3c9      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c224:	4b1e      	ldr	r3, [pc, #120]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c228:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c22c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c22e:	4b1c      	ldr	r3, [pc, #112]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f003 0304 	and.w	r3, r3, #4
 800c236:	2b04      	cmp	r3, #4
 800c238:	d10c      	bne.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800c23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d109      	bne.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c240:	4b17      	ldr	r3, [pc, #92]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	08db      	lsrs	r3, r3, #3
 800c246:	f003 0303 	and.w	r3, r3, #3
 800c24a:	4a16      	ldr	r2, [pc, #88]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c24c:	fa22 f303 	lsr.w	r3, r2, r3
 800c250:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c252:	e01e      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c254:	4b12      	ldr	r3, [pc, #72]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c25c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c260:	d106      	bne.n	800c270 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800c262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c264:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c268:	d102      	bne.n	800c270 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c26a:	4b0f      	ldr	r3, [pc, #60]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c26c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c26e:	e010      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c270:	4b0b      	ldr	r3, [pc, #44]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c27c:	d106      	bne.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800c27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c284:	d102      	bne.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c286:	4b09      	ldr	r3, [pc, #36]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c28a:	e002      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c290:	e392      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800c292:	e391      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c294:	4b06      	ldr	r3, [pc, #24]	; (800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c296:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c298:	e38e      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800c29a:	2300      	movs	r3, #0
 800c29c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c29e:	e38b      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800c2a0:	58024400 	.word	0x58024400
 800c2a4:	03d09000 	.word	0x03d09000
 800c2a8:	003d0900 	.word	0x003d0900
 800c2ac:	017d7840 	.word	0x017d7840
 800c2b0:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2ba:	f040 809c 	bne.w	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800c2be:	4b9d      	ldr	r3, [pc, #628]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c2c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2c2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c2c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c2ce:	d054      	beq.n	800c37a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800c2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c2d6:	f200 808b 	bhi.w	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c2e0:	f000 8083 	beq.w	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c2ea:	f200 8081 	bhi.w	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2f4:	d02f      	beq.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2fc:	d878      	bhi.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	2b00      	cmp	r3, #0
 800c302:	d004      	beq.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800c304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c30a:	d012      	beq.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800c30c:	e070      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c30e:	4b89      	ldr	r3, [pc, #548]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c31a:	d107      	bne.n	800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c31c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c320:	4618      	mov	r0, r3
 800c322:	f000 fe15 	bl	800cf50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c328:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c32a:	e345      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c32c:	2300      	movs	r3, #0
 800c32e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c330:	e342      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c332:	4b80      	ldr	r3, [pc, #512]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c33a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c33e:	d107      	bne.n	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c340:	f107 0318 	add.w	r3, r7, #24
 800c344:	4618      	mov	r0, r3
 800c346:	f000 fb5b 	bl	800ca00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c34e:	e333      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c350:	2300      	movs	r3, #0
 800c352:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c354:	e330      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c356:	4b77      	ldr	r3, [pc, #476]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c35e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c362:	d107      	bne.n	800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c364:	f107 030c 	add.w	r3, r7, #12
 800c368:	4618      	mov	r0, r3
 800c36a:	f000 fc9d 	bl	800cca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c372:	e321      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c374:	2300      	movs	r3, #0
 800c376:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c378:	e31e      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c37a:	4b6e      	ldr	r3, [pc, #440]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c37c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c37e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c382:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c384:	4b6b      	ldr	r3, [pc, #428]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f003 0304 	and.w	r3, r3, #4
 800c38c:	2b04      	cmp	r3, #4
 800c38e:	d10c      	bne.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800c390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c392:	2b00      	cmp	r3, #0
 800c394:	d109      	bne.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c396:	4b67      	ldr	r3, [pc, #412]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	08db      	lsrs	r3, r3, #3
 800c39c:	f003 0303 	and.w	r3, r3, #3
 800c3a0:	4a65      	ldr	r2, [pc, #404]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800c3a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3a8:	e01e      	b.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3aa:	4b62      	ldr	r3, [pc, #392]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3b6:	d106      	bne.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3be:	d102      	bne.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c3c0:	4b5e      	ldr	r3, [pc, #376]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800c3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3c4:	e010      	b.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3c6:	4b5b      	ldr	r3, [pc, #364]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3d2:	d106      	bne.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3da:	d102      	bne.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c3dc:	4b58      	ldr	r3, [pc, #352]	; (800c540 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800c3de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3e0:	e002      	b.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c3e6:	e2e7      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800c3e8:	e2e6      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c3ea:	4b56      	ldr	r3, [pc, #344]	; (800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3ee:	e2e3      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3f4:	e2e0      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3fc:	f040 80a7 	bne.w	800c54e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800c400:	4b4c      	ldr	r3, [pc, #304]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c404:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c408:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c410:	d055      	beq.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c418:	f200 8096 	bhi.w	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800c41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c422:	f000 8084 	beq.w	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800c426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c428:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c42c:	f200 808c 	bhi.w	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800c430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c432:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c436:	d030      	beq.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800c438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c43e:	f200 8083 	bhi.w	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800c442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c444:	2b00      	cmp	r3, #0
 800c446:	d004      	beq.n	800c452 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c44e:	d012      	beq.n	800c476 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800c450:	e07a      	b.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c452:	4b38      	ldr	r3, [pc, #224]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c45a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c45e:	d107      	bne.n	800c470 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c464:	4618      	mov	r0, r3
 800c466:	f000 fd73 	bl	800cf50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c46e:	e2a3      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c470:	2300      	movs	r3, #0
 800c472:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c474:	e2a0      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c476:	4b2f      	ldr	r3, [pc, #188]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c47e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c482:	d107      	bne.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c484:	f107 0318 	add.w	r3, r7, #24
 800c488:	4618      	mov	r0, r3
 800c48a:	f000 fab9 	bl	800ca00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800c492:	e291      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c494:	2300      	movs	r3, #0
 800c496:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c498:	e28e      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c49a:	4b26      	ldr	r3, [pc, #152]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4a6:	d107      	bne.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4a8:	f107 030c 	add.w	r3, r7, #12
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f000 fbfb 	bl	800cca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c4b6:	e27f      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c4bc:	e27c      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c4be:	4b1d      	ldr	r3, [pc, #116]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c4c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c4c6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c4c8:	4b1a      	ldr	r3, [pc, #104]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f003 0304 	and.w	r3, r3, #4
 800c4d0:	2b04      	cmp	r3, #4
 800c4d2:	d10c      	bne.n	800c4ee <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800c4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d109      	bne.n	800c4ee <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c4da:	4b16      	ldr	r3, [pc, #88]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	08db      	lsrs	r3, r3, #3
 800c4e0:	f003 0303 	and.w	r3, r3, #3
 800c4e4:	4a14      	ldr	r2, [pc, #80]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800c4e6:	fa22 f303 	lsr.w	r3, r2, r3
 800c4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4ec:	e01e      	b.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4ee:	4b11      	ldr	r3, [pc, #68]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4fa:	d106      	bne.n	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800c4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c502:	d102      	bne.n	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c504:	4b0d      	ldr	r3, [pc, #52]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800c506:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c508:	e010      	b.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c50a:	4b0a      	ldr	r3, [pc, #40]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c516:	d106      	bne.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800c518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c51a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c51e:	d102      	bne.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c520:	4b07      	ldr	r3, [pc, #28]	; (800c540 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800c522:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c524:	e002      	b.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c526:	2300      	movs	r3, #0
 800c528:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c52a:	e245      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800c52c:	e244      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c52e:	4b05      	ldr	r3, [pc, #20]	; (800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800c530:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c532:	e241      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800c534:	58024400 	.word	0x58024400
 800c538:	03d09000 	.word	0x03d09000
 800c53c:	003d0900 	.word	0x003d0900
 800c540:	017d7840 	.word	0x017d7840
 800c544:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800c548:	2300      	movs	r3, #0
 800c54a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c54c:	e234      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c554:	f040 809c 	bne.w	800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800c558:	4b9b      	ldr	r3, [pc, #620]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c55c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c560:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c568:	d054      	beq.n	800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800c56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c570:	f200 808b 	bhi.w	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800c574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c576:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c57a:	f000 8083 	beq.w	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800c57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c580:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c584:	f200 8081 	bhi.w	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800c588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c58e:	d02f      	beq.n	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c596:	d878      	bhi.n	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800c598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d004      	beq.n	800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800c59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5a4:	d012      	beq.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800c5a6:	e070      	b.n	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c5a8:	4b87      	ldr	r3, [pc, #540]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5b4:	d107      	bne.n	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f000 fcc8 	bl	800cf50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c5c4:	e1f8      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c5ca:	e1f5      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5cc:	4b7e      	ldr	r3, [pc, #504]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5d8:	d107      	bne.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5da:	f107 0318 	add.w	r3, r7, #24
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f000 fa0e 	bl	800ca00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c5e4:	69bb      	ldr	r3, [r7, #24]
 800c5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c5e8:	e1e6      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c5ee:	e1e3      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5f0:	4b75      	ldr	r3, [pc, #468]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5fc:	d107      	bne.n	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5fe:	f107 030c 	add.w	r3, r7, #12
 800c602:	4618      	mov	r0, r3
 800c604:	f000 fb50 	bl	800cca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c60c:	e1d4      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c60e:	2300      	movs	r3, #0
 800c610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c612:	e1d1      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c614:	4b6c      	ldr	r3, [pc, #432]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c618:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c61c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c61e:	4b6a      	ldr	r3, [pc, #424]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f003 0304 	and.w	r3, r3, #4
 800c626:	2b04      	cmp	r3, #4
 800c628:	d10c      	bne.n	800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d109      	bne.n	800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c630:	4b65      	ldr	r3, [pc, #404]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	08db      	lsrs	r3, r3, #3
 800c636:	f003 0303 	and.w	r3, r3, #3
 800c63a:	4a64      	ldr	r2, [pc, #400]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800c63c:	fa22 f303 	lsr.w	r3, r2, r3
 800c640:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c642:	e01e      	b.n	800c682 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c644:	4b60      	ldr	r3, [pc, #384]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c64c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c650:	d106      	bne.n	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800c652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c654:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c658:	d102      	bne.n	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c65a:	4b5d      	ldr	r3, [pc, #372]	; (800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800c65c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c65e:	e010      	b.n	800c682 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c660:	4b59      	ldr	r3, [pc, #356]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c66c:	d106      	bne.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800c66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c674:	d102      	bne.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c676:	4b57      	ldr	r3, [pc, #348]	; (800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800c678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c67a:	e002      	b.n	800c682 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c67c:	2300      	movs	r3, #0
 800c67e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c680:	e19a      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800c682:	e199      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c684:	4b54      	ldr	r3, [pc, #336]	; (800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c686:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c688:	e196      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800c68a:	2300      	movs	r3, #0
 800c68c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c68e:	e193      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c696:	d173      	bne.n	800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800c698:	4b4b      	ldr	r3, [pc, #300]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c69a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c69c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c6a0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6a8:	d02f      	beq.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800c6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6b0:	d863      	bhi.n	800c77a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800c6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d004      	beq.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6be:	d012      	beq.n	800c6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800c6c0:	e05b      	b.n	800c77a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6c2:	4b41      	ldr	r3, [pc, #260]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6ce:	d107      	bne.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6d0:	f107 0318 	add.w	r3, r7, #24
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f000 f993 	bl	800ca00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c6de:	e16b      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c6e4:	e168      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6e6:	4b38      	ldr	r3, [pc, #224]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6f2:	d107      	bne.n	800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6f4:	f107 030c 	add.w	r3, r7, #12
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f000 fad5 	bl	800cca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c702:	e159      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c704:	2300      	movs	r3, #0
 800c706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c708:	e156      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c70a:	4b2f      	ldr	r3, [pc, #188]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c70c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c70e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c712:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c714:	4b2c      	ldr	r3, [pc, #176]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f003 0304 	and.w	r3, r3, #4
 800c71c:	2b04      	cmp	r3, #4
 800c71e:	d10c      	bne.n	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800c720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c722:	2b00      	cmp	r3, #0
 800c724:	d109      	bne.n	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c726:	4b28      	ldr	r3, [pc, #160]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	08db      	lsrs	r3, r3, #3
 800c72c:	f003 0303 	and.w	r3, r3, #3
 800c730:	4a26      	ldr	r2, [pc, #152]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800c732:	fa22 f303 	lsr.w	r3, r2, r3
 800c736:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c738:	e01e      	b.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c73a:	4b23      	ldr	r3, [pc, #140]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c746:	d106      	bne.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800c748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c74a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c74e:	d102      	bne.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c750:	4b1f      	ldr	r3, [pc, #124]	; (800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800c752:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c754:	e010      	b.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c756:	4b1c      	ldr	r3, [pc, #112]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c75e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c762:	d106      	bne.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800c764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c76a:	d102      	bne.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c76c:	4b19      	ldr	r3, [pc, #100]	; (800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800c76e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c770:	e002      	b.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c772:	2300      	movs	r3, #0
 800c774:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c776:	e11f      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800c778:	e11e      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800c77a:	2300      	movs	r3, #0
 800c77c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c77e:	e11b      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c786:	d13e      	bne.n	800c806 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800c788:	4b0f      	ldr	r3, [pc, #60]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c78a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c78c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c790:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c794:	2b00      	cmp	r3, #0
 800c796:	d004      	beq.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c79e:	d01d      	beq.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800c7a0:	e02e      	b.n	800c800 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7a2:	4b09      	ldr	r3, [pc, #36]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7ae:	d107      	bne.n	800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f000 fbcb 	bl	800cf50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c7be:	e0fb      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c7c4:	e0f8      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800c7c6:	bf00      	nop
 800c7c8:	58024400 	.word	0x58024400
 800c7cc:	03d09000 	.word	0x03d09000
 800c7d0:	003d0900 	.word	0x003d0900
 800c7d4:	017d7840 	.word	0x017d7840
 800c7d8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7dc:	4b79      	ldr	r3, [pc, #484]	; (800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7e8:	d107      	bne.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7ea:	f107 0318 	add.w	r3, r7, #24
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f000 f906 	bl	800ca00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c7f4:	6a3b      	ldr	r3, [r7, #32]
 800c7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c7f8:	e0de      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c7fe:	e0db      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800c800:	2300      	movs	r3, #0
 800c802:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c804:	e0d8      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c80c:	f040 8085 	bne.w	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800c810:	4b6c      	ldr	r3, [pc, #432]	; (800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c814:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c818:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c820:	d06b      	beq.n	800c8fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800c822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c828:	d874      	bhi.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800c82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c830:	d056      	beq.n	800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800c832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c838:	d86c      	bhi.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800c83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c840:	d03b      	beq.n	800c8ba <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800c842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c844:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c848:	d864      	bhi.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800c84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c850:	d021      	beq.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800c852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c858:	d85c      	bhi.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800c85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d004      	beq.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c862:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c866:	d004      	beq.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800c868:	e054      	b.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c86a:	f000 f8b3 	bl	800c9d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800c86e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800c870:	e0a2      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c872:	4b54      	ldr	r3, [pc, #336]	; (800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c87a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c87e:	d107      	bne.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c880:	f107 0318 	add.w	r3, r7, #24
 800c884:	4618      	mov	r0, r3
 800c886:	f000 f8bb 	bl	800ca00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c88e:	e093      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c890:	2300      	movs	r3, #0
 800c892:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c894:	e090      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c896:	4b4b      	ldr	r3, [pc, #300]	; (800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c89e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8a2:	d107      	bne.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8a4:	f107 030c 	add.w	r3, r7, #12
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f000 f9fd 	bl	800cca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c8b2:	e081      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c8b8:	e07e      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8ba:	4b42      	ldr	r3, [pc, #264]	; (800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f003 0304 	and.w	r3, r3, #4
 800c8c2:	2b04      	cmp	r3, #4
 800c8c4:	d109      	bne.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c8c6:	4b3f      	ldr	r3, [pc, #252]	; (800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	08db      	lsrs	r3, r3, #3
 800c8cc:	f003 0303 	and.w	r3, r3, #3
 800c8d0:	4a3d      	ldr	r2, [pc, #244]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c8d2:	fa22 f303 	lsr.w	r3, r2, r3
 800c8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c8d8:	e06e      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c8de:	e06b      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c8e0:	4b38      	ldr	r3, [pc, #224]	; (800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ec:	d102      	bne.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800c8ee:	4b37      	ldr	r3, [pc, #220]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c8f2:	e061      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c8f8:	e05e      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8fa:	4b32      	ldr	r3, [pc, #200]	; (800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c902:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c906:	d102      	bne.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800c908:	4b31      	ldr	r3, [pc, #196]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c90a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c90c:	e054      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c90e:	2300      	movs	r3, #0
 800c910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c912:	e051      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800c914:	2300      	movs	r3, #0
 800c916:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c918:	e04e      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c920:	d148      	bne.n	800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800c922:	4b28      	ldr	r3, [pc, #160]	; (800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c926:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c92a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c932:	d02a      	beq.n	800c98a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800c934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c93a:	d838      	bhi.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800c93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d004      	beq.n	800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800c942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c944:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c948:	d00d      	beq.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800c94a:	e030      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c94c:	4b1d      	ldr	r3, [pc, #116]	; (800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c958:	d102      	bne.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800c95a:	4b1d      	ldr	r3, [pc, #116]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c95c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c95e:	e02b      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c964:	e028      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c966:	4b17      	ldr	r3, [pc, #92]	; (800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c96e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c972:	d107      	bne.n	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c978:	4618      	mov	r0, r3
 800c97a:	f000 fae9 	bl	800cf50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c980:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c982:	e019      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c984:	2300      	movs	r3, #0
 800c986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c988:	e016      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c98a:	4b0e      	ldr	r3, [pc, #56]	; (800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c996:	d107      	bne.n	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c998:	f107 0318 	add.w	r3, r7, #24
 800c99c:	4618      	mov	r0, r3
 800c99e:	f000 f82f 	bl	800ca00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c9a6:	e007      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c9ac:	e004      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c9b2:	e001      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800c9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3740      	adds	r7, #64	; 0x40
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	58024400 	.word	0x58024400
 800c9c8:	03d09000 	.word	0x03d09000
 800c9cc:	003d0900 	.word	0x003d0900
 800c9d0:	017d7840 	.word	0x017d7840

0800c9d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c9d8:	f7fe f8c2 	bl	800ab60 <HAL_RCC_GetHCLKFreq>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	4b06      	ldr	r3, [pc, #24]	; (800c9f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c9e0:	6a1b      	ldr	r3, [r3, #32]
 800c9e2:	091b      	lsrs	r3, r3, #4
 800c9e4:	f003 0307 	and.w	r3, r3, #7
 800c9e8:	4904      	ldr	r1, [pc, #16]	; (800c9fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c9ea:	5ccb      	ldrb	r3, [r1, r3]
 800c9ec:	f003 031f 	and.w	r3, r3, #31
 800c9f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	58024400 	.word	0x58024400
 800c9fc:	0801e060 	.word	0x0801e060

0800ca00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b089      	sub	sp, #36	; 0x24
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca08:	4ba1      	ldr	r3, [pc, #644]	; (800cc90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca0c:	f003 0303 	and.w	r3, r3, #3
 800ca10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ca12:	4b9f      	ldr	r3, [pc, #636]	; (800cc90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca16:	0b1b      	lsrs	r3, r3, #12
 800ca18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ca1e:	4b9c      	ldr	r3, [pc, #624]	; (800cc90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca22:	091b      	lsrs	r3, r3, #4
 800ca24:	f003 0301 	and.w	r3, r3, #1
 800ca28:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ca2a:	4b99      	ldr	r3, [pc, #612]	; (800cc90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca2e:	08db      	lsrs	r3, r3, #3
 800ca30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca34:	693a      	ldr	r2, [r7, #16]
 800ca36:	fb02 f303 	mul.w	r3, r2, r3
 800ca3a:	ee07 3a90 	vmov	s15, r3
 800ca3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f000 8111 	beq.w	800cc70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ca4e:	69bb      	ldr	r3, [r7, #24]
 800ca50:	2b02      	cmp	r3, #2
 800ca52:	f000 8083 	beq.w	800cb5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	f200 80a1 	bhi.w	800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d003      	beq.n	800ca6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ca64:	69bb      	ldr	r3, [r7, #24]
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d056      	beq.n	800cb18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ca6a:	e099      	b.n	800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca6c:	4b88      	ldr	r3, [pc, #544]	; (800cc90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f003 0320 	and.w	r3, r3, #32
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d02d      	beq.n	800cad4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ca78:	4b85      	ldr	r3, [pc, #532]	; (800cc90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	08db      	lsrs	r3, r3, #3
 800ca7e:	f003 0303 	and.w	r3, r3, #3
 800ca82:	4a84      	ldr	r2, [pc, #528]	; (800cc94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ca84:	fa22 f303 	lsr.w	r3, r2, r3
 800ca88:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	ee07 3a90 	vmov	s15, r3
 800ca90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	ee07 3a90 	vmov	s15, r3
 800ca9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caa2:	4b7b      	ldr	r3, [pc, #492]	; (800cc90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caaa:	ee07 3a90 	vmov	s15, r3
 800caae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cab2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cab6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cc98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cabe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cace:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cad2:	e087      	b.n	800cbe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	ee07 3a90 	vmov	s15, r3
 800cada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cade:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cc9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cae6:	4b6a      	ldr	r3, [pc, #424]	; (800cc90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caee:	ee07 3a90 	vmov	s15, r3
 800caf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cafa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cc98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cafe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb16:	e065      	b.n	800cbe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	ee07 3a90 	vmov	s15, r3
 800cb1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb2a:	4b59      	ldr	r3, [pc, #356]	; (800cc90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb32:	ee07 3a90 	vmov	s15, r3
 800cb36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cc98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb5a:	e043      	b.n	800cbe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	ee07 3a90 	vmov	s15, r3
 800cb62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cb6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb6e:	4b48      	ldr	r3, [pc, #288]	; (800cc90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb76:	ee07 3a90 	vmov	s15, r3
 800cb7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb82:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cc98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb9e:	e021      	b.n	800cbe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	ee07 3a90 	vmov	s15, r3
 800cba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cbae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbb2:	4b37      	ldr	r3, [pc, #220]	; (800cc90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbba:	ee07 3a90 	vmov	s15, r3
 800cbbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cc98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cbca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cbe2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800cbe4:	4b2a      	ldr	r3, [pc, #168]	; (800cc90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe8:	0a5b      	lsrs	r3, r3, #9
 800cbea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbee:	ee07 3a90 	vmov	s15, r3
 800cbf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc0a:	ee17 2a90 	vmov	r2, s15
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800cc12:	4b1f      	ldr	r3, [pc, #124]	; (800cc90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc16:	0c1b      	lsrs	r3, r3, #16
 800cc18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc1c:	ee07 3a90 	vmov	s15, r3
 800cc20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc38:	ee17 2a90 	vmov	r2, s15
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800cc40:	4b13      	ldr	r3, [pc, #76]	; (800cc90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc44:	0e1b      	lsrs	r3, r3, #24
 800cc46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc4a:	ee07 3a90 	vmov	s15, r3
 800cc4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc66:	ee17 2a90 	vmov	r2, s15
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cc6e:	e008      	b.n	800cc82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	609a      	str	r2, [r3, #8]
}
 800cc82:	bf00      	nop
 800cc84:	3724      	adds	r7, #36	; 0x24
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	58024400 	.word	0x58024400
 800cc94:	03d09000 	.word	0x03d09000
 800cc98:	46000000 	.word	0x46000000
 800cc9c:	4c742400 	.word	0x4c742400
 800cca0:	4a742400 	.word	0x4a742400
 800cca4:	4bbebc20 	.word	0x4bbebc20

0800cca8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b089      	sub	sp, #36	; 0x24
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ccb0:	4ba1      	ldr	r3, [pc, #644]	; (800cf38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb4:	f003 0303 	and.w	r3, r3, #3
 800ccb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ccba:	4b9f      	ldr	r3, [pc, #636]	; (800cf38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccbe:	0d1b      	lsrs	r3, r3, #20
 800ccc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ccc6:	4b9c      	ldr	r3, [pc, #624]	; (800cf38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccca:	0a1b      	lsrs	r3, r3, #8
 800cccc:	f003 0301 	and.w	r3, r3, #1
 800ccd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ccd2:	4b99      	ldr	r3, [pc, #612]	; (800cf38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccd6:	08db      	lsrs	r3, r3, #3
 800ccd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ccdc:	693a      	ldr	r2, [r7, #16]
 800ccde:	fb02 f303 	mul.w	r3, r2, r3
 800cce2:	ee07 3a90 	vmov	s15, r3
 800cce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	f000 8111 	beq.w	800cf18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	2b02      	cmp	r3, #2
 800ccfa:	f000 8083 	beq.w	800ce04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	f200 80a1 	bhi.w	800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d003      	beq.n	800cd14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d056      	beq.n	800cdc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cd12:	e099      	b.n	800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd14:	4b88      	ldr	r3, [pc, #544]	; (800cf38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f003 0320 	and.w	r3, r3, #32
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d02d      	beq.n	800cd7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cd20:	4b85      	ldr	r3, [pc, #532]	; (800cf38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	08db      	lsrs	r3, r3, #3
 800cd26:	f003 0303 	and.w	r3, r3, #3
 800cd2a:	4a84      	ldr	r2, [pc, #528]	; (800cf3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cd2c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd30:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	ee07 3a90 	vmov	s15, r3
 800cd38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	ee07 3a90 	vmov	s15, r3
 800cd42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd4a:	4b7b      	ldr	r3, [pc, #492]	; (800cf38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd52:	ee07 3a90 	vmov	s15, r3
 800cd56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cf40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cd7a:	e087      	b.n	800ce8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	ee07 3a90 	vmov	s15, r3
 800cd82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cf44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cd8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd8e:	4b6a      	ldr	r3, [pc, #424]	; (800cf38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd96:	ee07 3a90 	vmov	s15, r3
 800cd9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cda2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cf40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cda6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cdbe:	e065      	b.n	800ce8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	ee07 3a90 	vmov	s15, r3
 800cdc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cf48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cdce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdd2:	4b59      	ldr	r3, [pc, #356]	; (800cf38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdda:	ee07 3a90 	vmov	s15, r3
 800cdde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cde2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cde6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cf40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ce02:	e043      	b.n	800ce8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	ee07 3a90 	vmov	s15, r3
 800ce0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cf4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ce12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce16:	4b48      	ldr	r3, [pc, #288]	; (800cf38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce1e:	ee07 3a90 	vmov	s15, r3
 800ce22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cf40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ce46:	e021      	b.n	800ce8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	ee07 3a90 	vmov	s15, r3
 800ce4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cf48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ce56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce5a:	4b37      	ldr	r3, [pc, #220]	; (800cf38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce62:	ee07 3a90 	vmov	s15, r3
 800ce66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cf40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ce8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ce8c:	4b2a      	ldr	r3, [pc, #168]	; (800cf38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce90:	0a5b      	lsrs	r3, r3, #9
 800ce92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce96:	ee07 3a90 	vmov	s15, r3
 800ce9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cea6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ceaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceb2:	ee17 2a90 	vmov	r2, s15
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ceba:	4b1f      	ldr	r3, [pc, #124]	; (800cf38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cebe:	0c1b      	lsrs	r3, r3, #16
 800cec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cec4:	ee07 3a90 	vmov	s15, r3
 800cec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cecc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ced0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ced4:	edd7 6a07 	vldr	s13, [r7, #28]
 800ced8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cedc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cee0:	ee17 2a90 	vmov	r2, s15
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800cee8:	4b13      	ldr	r3, [pc, #76]	; (800cf38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ceea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceec:	0e1b      	lsrs	r3, r3, #24
 800ceee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cef2:	ee07 3a90 	vmov	s15, r3
 800cef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cefa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cefe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf02:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf0e:	ee17 2a90 	vmov	r2, s15
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cf16:	e008      	b.n	800cf2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2200      	movs	r2, #0
 800cf22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	609a      	str	r2, [r3, #8]
}
 800cf2a:	bf00      	nop
 800cf2c:	3724      	adds	r7, #36	; 0x24
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	58024400 	.word	0x58024400
 800cf3c:	03d09000 	.word	0x03d09000
 800cf40:	46000000 	.word	0x46000000
 800cf44:	4c742400 	.word	0x4c742400
 800cf48:	4a742400 	.word	0x4a742400
 800cf4c:	4bbebc20 	.word	0x4bbebc20

0800cf50 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b089      	sub	sp, #36	; 0x24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf58:	4ba0      	ldr	r3, [pc, #640]	; (800d1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf5c:	f003 0303 	and.w	r3, r3, #3
 800cf60:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800cf62:	4b9e      	ldr	r3, [pc, #632]	; (800d1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf66:	091b      	lsrs	r3, r3, #4
 800cf68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf6c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cf6e:	4b9b      	ldr	r3, [pc, #620]	; (800d1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf72:	f003 0301 	and.w	r3, r3, #1
 800cf76:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800cf78:	4b98      	ldr	r3, [pc, #608]	; (800d1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf7c:	08db      	lsrs	r3, r3, #3
 800cf7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf82:	693a      	ldr	r2, [r7, #16]
 800cf84:	fb02 f303 	mul.w	r3, r2, r3
 800cf88:	ee07 3a90 	vmov	s15, r3
 800cf8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf90:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	f000 8111 	beq.w	800d1be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	2b02      	cmp	r3, #2
 800cfa0:	f000 8083 	beq.w	800d0aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cfa4:	69bb      	ldr	r3, [r7, #24]
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	f200 80a1 	bhi.w	800d0ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cfac:	69bb      	ldr	r3, [r7, #24]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d003      	beq.n	800cfba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d056      	beq.n	800d066 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cfb8:	e099      	b.n	800d0ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfba:	4b88      	ldr	r3, [pc, #544]	; (800d1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f003 0320 	and.w	r3, r3, #32
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d02d      	beq.n	800d022 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cfc6:	4b85      	ldr	r3, [pc, #532]	; (800d1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	08db      	lsrs	r3, r3, #3
 800cfcc:	f003 0303 	and.w	r3, r3, #3
 800cfd0:	4a83      	ldr	r2, [pc, #524]	; (800d1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cfd2:	fa22 f303 	lsr.w	r3, r2, r3
 800cfd6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	ee07 3a90 	vmov	s15, r3
 800cfde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	ee07 3a90 	vmov	s15, r3
 800cfe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cff0:	4b7a      	ldr	r3, [pc, #488]	; (800d1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cff8:	ee07 3a90 	vmov	s15, r3
 800cffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d000:	ed97 6a03 	vldr	s12, [r7, #12]
 800d004:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d00c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d01c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d020:	e087      	b.n	800d132 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	ee07 3a90 	vmov	s15, r3
 800d028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d02c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d034:	4b69      	ldr	r3, [pc, #420]	; (800d1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d03c:	ee07 3a90 	vmov	s15, r3
 800d040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d044:	ed97 6a03 	vldr	s12, [r7, #12]
 800d048:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d04c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d05c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d060:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d064:	e065      	b.n	800d132 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	ee07 3a90 	vmov	s15, r3
 800d06c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d070:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d1ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d074:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d078:	4b58      	ldr	r3, [pc, #352]	; (800d1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d07c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d080:	ee07 3a90 	vmov	s15, r3
 800d084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d088:	ed97 6a03 	vldr	s12, [r7, #12]
 800d08c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d090:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d098:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d09c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d0a8:	e043      	b.n	800d132 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	ee07 3a90 	vmov	s15, r3
 800d0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d0b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0bc:	4b47      	ldr	r3, [pc, #284]	; (800d1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0c4:	ee07 3a90 	vmov	s15, r3
 800d0c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d0d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d0ec:	e021      	b.n	800d132 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	ee07 3a90 	vmov	s15, r3
 800d0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0f8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d0fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d100:	4b36      	ldr	r3, [pc, #216]	; (800d1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d108:	ee07 3a90 	vmov	s15, r3
 800d10c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d110:	ed97 6a03 	vldr	s12, [r7, #12]
 800d114:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d118:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d11c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d120:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d124:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d12c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d130:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800d132:	4b2a      	ldr	r3, [pc, #168]	; (800d1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d136:	0a5b      	lsrs	r3, r3, #9
 800d138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d13c:	ee07 3a90 	vmov	s15, r3
 800d140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d148:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d14c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d158:	ee17 2a90 	vmov	r2, s15
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800d160:	4b1e      	ldr	r3, [pc, #120]	; (800d1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d164:	0c1b      	lsrs	r3, r3, #16
 800d166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d16a:	ee07 3a90 	vmov	s15, r3
 800d16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d176:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d17a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d17e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d186:	ee17 2a90 	vmov	r2, s15
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800d18e:	4b13      	ldr	r3, [pc, #76]	; (800d1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d192:	0e1b      	lsrs	r3, r3, #24
 800d194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d198:	ee07 3a90 	vmov	s15, r3
 800d19c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1b4:	ee17 2a90 	vmov	r2, s15
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d1bc:	e008      	b.n	800d1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	609a      	str	r2, [r3, #8]
}
 800d1d0:	bf00      	nop
 800d1d2:	3724      	adds	r7, #36	; 0x24
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr
 800d1dc:	58024400 	.word	0x58024400
 800d1e0:	03d09000 	.word	0x03d09000
 800d1e4:	46000000 	.word	0x46000000
 800d1e8:	4c742400 	.word	0x4c742400
 800d1ec:	4a742400 	.word	0x4a742400
 800d1f0:	4bbebc20 	.word	0x4bbebc20

0800d1f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d1fe:	2300      	movs	r3, #0
 800d200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d003      	beq.n	800d212 <RCCEx_PLL2_Config+0x1e>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b3f      	cmp	r3, #63	; 0x3f
 800d210:	d904      	bls.n	800d21c <RCCEx_PLL2_Config+0x28>
 800d212:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 800d216:	4885      	ldr	r0, [pc, #532]	; (800d42c <RCCEx_PLL2_Config+0x238>)
 800d218:	f7f4 fc2b 	bl	8001a72 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	2b03      	cmp	r3, #3
 800d222:	d904      	bls.n	800d22e <RCCEx_PLL2_Config+0x3a>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d22c:	d904      	bls.n	800d238 <RCCEx_PLL2_Config+0x44>
 800d22e:	f640 51c1 	movw	r1, #3521	; 0xdc1
 800d232:	487e      	ldr	r0, [pc, #504]	; (800d42c <RCCEx_PLL2_Config+0x238>)
 800d234:	f7f4 fc1d 	bl	8001a72 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d003      	beq.n	800d248 <RCCEx_PLL2_Config+0x54>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	2b80      	cmp	r3, #128	; 0x80
 800d246:	d904      	bls.n	800d252 <RCCEx_PLL2_Config+0x5e>
 800d248:	f640 51c2 	movw	r1, #3522	; 0xdc2
 800d24c:	4877      	ldr	r0, [pc, #476]	; (800d42c <RCCEx_PLL2_Config+0x238>)
 800d24e:	f7f4 fc10 	bl	8001a72 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	691b      	ldr	r3, [r3, #16]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d003      	beq.n	800d262 <RCCEx_PLL2_Config+0x6e>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	2b80      	cmp	r3, #128	; 0x80
 800d260:	d904      	bls.n	800d26c <RCCEx_PLL2_Config+0x78>
 800d262:	f640 51c3 	movw	r1, #3523	; 0xdc3
 800d266:	4871      	ldr	r0, [pc, #452]	; (800d42c <RCCEx_PLL2_Config+0x238>)
 800d268:	f7f4 fc03 	bl	8001a72 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	68db      	ldr	r3, [r3, #12]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d003      	beq.n	800d27c <RCCEx_PLL2_Config+0x88>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	2b80      	cmp	r3, #128	; 0x80
 800d27a:	d904      	bls.n	800d286 <RCCEx_PLL2_Config+0x92>
 800d27c:	f640 51c4 	movw	r1, #3524	; 0xdc4
 800d280:	486a      	ldr	r0, [pc, #424]	; (800d42c <RCCEx_PLL2_Config+0x238>)
 800d282:	f7f4 fbf6 	bl	8001a72 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	695b      	ldr	r3, [r3, #20]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d010      	beq.n	800d2b0 <RCCEx_PLL2_Config+0xbc>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	695b      	ldr	r3, [r3, #20]
 800d292:	2b40      	cmp	r3, #64	; 0x40
 800d294:	d00c      	beq.n	800d2b0 <RCCEx_PLL2_Config+0xbc>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	695b      	ldr	r3, [r3, #20]
 800d29a:	2b80      	cmp	r3, #128	; 0x80
 800d29c:	d008      	beq.n	800d2b0 <RCCEx_PLL2_Config+0xbc>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	695b      	ldr	r3, [r3, #20]
 800d2a2:	2bc0      	cmp	r3, #192	; 0xc0
 800d2a4:	d004      	beq.n	800d2b0 <RCCEx_PLL2_Config+0xbc>
 800d2a6:	f640 51c5 	movw	r1, #3525	; 0xdc5
 800d2aa:	4860      	ldr	r0, [pc, #384]	; (800d42c <RCCEx_PLL2_Config+0x238>)
 800d2ac:	f7f4 fbe1 	bl	8001a72 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	699b      	ldr	r3, [r3, #24]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d008      	beq.n	800d2ca <RCCEx_PLL2_Config+0xd6>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	699b      	ldr	r3, [r3, #24]
 800d2bc:	2b20      	cmp	r3, #32
 800d2be:	d004      	beq.n	800d2ca <RCCEx_PLL2_Config+0xd6>
 800d2c0:	f640 51c6 	movw	r1, #3526	; 0xdc6
 800d2c4:	4859      	ldr	r0, [pc, #356]	; (800d42c <RCCEx_PLL2_Config+0x238>)
 800d2c6:	f7f4 fbd4 	bl	8001a72 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	69db      	ldr	r3, [r3, #28]
 800d2ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2d2:	d304      	bcc.n	800d2de <RCCEx_PLL2_Config+0xea>
 800d2d4:	f640 51c7 	movw	r1, #3527	; 0xdc7
 800d2d8:	4854      	ldr	r0, [pc, #336]	; (800d42c <RCCEx_PLL2_Config+0x238>)
 800d2da:	f7f4 fbca 	bl	8001a72 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d2de:	4b54      	ldr	r3, [pc, #336]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e2:	f003 0303 	and.w	r3, r3, #3
 800d2e6:	2b03      	cmp	r3, #3
 800d2e8:	d101      	bne.n	800d2ee <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	e099      	b.n	800d422 <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d2ee:	4b50      	ldr	r3, [pc, #320]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4a4f      	ldr	r2, [pc, #316]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d2f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d2f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2fa:	f7f6 f92d 	bl	8003558 <HAL_GetTick>
 800d2fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d300:	e008      	b.n	800d314 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d302:	f7f6 f929 	bl	8003558 <HAL_GetTick>
 800d306:	4602      	mov	r2, r0
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	1ad3      	subs	r3, r2, r3
 800d30c:	2b02      	cmp	r3, #2
 800d30e:	d901      	bls.n	800d314 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 800d310:	2303      	movs	r3, #3
 800d312:	e086      	b.n	800d422 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d314:	4b46      	ldr	r3, [pc, #280]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1f0      	bne.n	800d302 <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d320:	4b43      	ldr	r3, [pc, #268]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d324:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	031b      	lsls	r3, r3, #12
 800d32e:	4940      	ldr	r1, [pc, #256]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d330:	4313      	orrs	r3, r2
 800d332:	628b      	str	r3, [r1, #40]	; 0x28
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	3b01      	subs	r3, #1
 800d33a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	3b01      	subs	r3, #1
 800d344:	025b      	lsls	r3, r3, #9
 800d346:	b29b      	uxth	r3, r3
 800d348:	431a      	orrs	r2, r3
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	3b01      	subs	r3, #1
 800d350:	041b      	lsls	r3, r3, #16
 800d352:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d356:	431a      	orrs	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	691b      	ldr	r3, [r3, #16]
 800d35c:	3b01      	subs	r3, #1
 800d35e:	061b      	lsls	r3, r3, #24
 800d360:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d364:	4932      	ldr	r1, [pc, #200]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d366:	4313      	orrs	r3, r2
 800d368:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d36a:	4b31      	ldr	r3, [pc, #196]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d36e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	695b      	ldr	r3, [r3, #20]
 800d376:	492e      	ldr	r1, [pc, #184]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d378:	4313      	orrs	r3, r2
 800d37a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d37c:	4b2c      	ldr	r3, [pc, #176]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d380:	f023 0220 	bic.w	r2, r3, #32
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	699b      	ldr	r3, [r3, #24]
 800d388:	4929      	ldr	r1, [pc, #164]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d38a:	4313      	orrs	r3, r2
 800d38c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d38e:	4b28      	ldr	r3, [pc, #160]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d392:	4a27      	ldr	r2, [pc, #156]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d394:	f023 0310 	bic.w	r3, r3, #16
 800d398:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d39a:	4b25      	ldr	r3, [pc, #148]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d39c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d39e:	4b25      	ldr	r3, [pc, #148]	; (800d434 <RCCEx_PLL2_Config+0x240>)
 800d3a0:	4013      	ands	r3, r2
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	69d2      	ldr	r2, [r2, #28]
 800d3a6:	00d2      	lsls	r2, r2, #3
 800d3a8:	4921      	ldr	r1, [pc, #132]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d3ae:	4b20      	ldr	r3, [pc, #128]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b2:	4a1f      	ldr	r2, [pc, #124]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d3b4:	f043 0310 	orr.w	r3, r3, #16
 800d3b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d106      	bne.n	800d3ce <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d3c0:	4b1b      	ldr	r3, [pc, #108]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c4:	4a1a      	ldr	r2, [pc, #104]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d3c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d3ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d3cc:	e00f      	b.n	800d3ee <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	2b01      	cmp	r3, #1
 800d3d2:	d106      	bne.n	800d3e2 <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d3d4:	4b16      	ldr	r3, [pc, #88]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d8:	4a15      	ldr	r2, [pc, #84]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d3da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d3de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d3e0:	e005      	b.n	800d3ee <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d3e2:	4b13      	ldr	r3, [pc, #76]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e6:	4a12      	ldr	r2, [pc, #72]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d3e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d3ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d3ee:	4b10      	ldr	r3, [pc, #64]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	4a0f      	ldr	r2, [pc, #60]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d3f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d3f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3fa:	f7f6 f8ad 	bl	8003558 <HAL_GetTick>
 800d3fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d400:	e008      	b.n	800d414 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d402:	f7f6 f8a9 	bl	8003558 <HAL_GetTick>
 800d406:	4602      	mov	r2, r0
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	1ad3      	subs	r3, r2, r3
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d901      	bls.n	800d414 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 800d410:	2303      	movs	r3, #3
 800d412:	e006      	b.n	800d422 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d414:	4b06      	ldr	r3, [pc, #24]	; (800d430 <RCCEx_PLL2_Config+0x23c>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d0f0      	beq.n	800d402 <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 800d420:	7bfb      	ldrb	r3, [r7, #15]
}
 800d422:	4618      	mov	r0, r3
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	0801ddc8 	.word	0x0801ddc8
 800d430:	58024400 	.word	0x58024400
 800d434:	ffff0007 	.word	0xffff0007

0800d438 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d442:	2300      	movs	r3, #0
 800d444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d003      	beq.n	800d456 <RCCEx_PLL3_Config+0x1e>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2b3f      	cmp	r3, #63	; 0x3f
 800d454:	d904      	bls.n	800d460 <RCCEx_PLL3_Config+0x28>
 800d456:	f640 6128 	movw	r1, #3624	; 0xe28
 800d45a:	4887      	ldr	r0, [pc, #540]	; (800d678 <RCCEx_PLL3_Config+0x240>)
 800d45c:	f7f4 fb09 	bl	8001a72 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	2b03      	cmp	r3, #3
 800d466:	d904      	bls.n	800d472 <RCCEx_PLL3_Config+0x3a>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d470:	d904      	bls.n	800d47c <RCCEx_PLL3_Config+0x44>
 800d472:	f640 6129 	movw	r1, #3625	; 0xe29
 800d476:	4880      	ldr	r0, [pc, #512]	; (800d678 <RCCEx_PLL3_Config+0x240>)
 800d478:	f7f4 fafb 	bl	8001a72 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	689b      	ldr	r3, [r3, #8]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d003      	beq.n	800d48c <RCCEx_PLL3_Config+0x54>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	689b      	ldr	r3, [r3, #8]
 800d488:	2b80      	cmp	r3, #128	; 0x80
 800d48a:	d904      	bls.n	800d496 <RCCEx_PLL3_Config+0x5e>
 800d48c:	f640 612a 	movw	r1, #3626	; 0xe2a
 800d490:	4879      	ldr	r0, [pc, #484]	; (800d678 <RCCEx_PLL3_Config+0x240>)
 800d492:	f7f4 faee 	bl	8001a72 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	691b      	ldr	r3, [r3, #16]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d003      	beq.n	800d4a6 <RCCEx_PLL3_Config+0x6e>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	691b      	ldr	r3, [r3, #16]
 800d4a2:	2b80      	cmp	r3, #128	; 0x80
 800d4a4:	d904      	bls.n	800d4b0 <RCCEx_PLL3_Config+0x78>
 800d4a6:	f640 612b 	movw	r1, #3627	; 0xe2b
 800d4aa:	4873      	ldr	r0, [pc, #460]	; (800d678 <RCCEx_PLL3_Config+0x240>)
 800d4ac:	f7f4 fae1 	bl	8001a72 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d003      	beq.n	800d4c0 <RCCEx_PLL3_Config+0x88>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	68db      	ldr	r3, [r3, #12]
 800d4bc:	2b80      	cmp	r3, #128	; 0x80
 800d4be:	d904      	bls.n	800d4ca <RCCEx_PLL3_Config+0x92>
 800d4c0:	f640 612c 	movw	r1, #3628	; 0xe2c
 800d4c4:	486c      	ldr	r0, [pc, #432]	; (800d678 <RCCEx_PLL3_Config+0x240>)
 800d4c6:	f7f4 fad4 	bl	8001a72 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	695b      	ldr	r3, [r3, #20]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d013      	beq.n	800d4fa <RCCEx_PLL3_Config+0xc2>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	695b      	ldr	r3, [r3, #20]
 800d4d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4da:	d00e      	beq.n	800d4fa <RCCEx_PLL3_Config+0xc2>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	695b      	ldr	r3, [r3, #20]
 800d4e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4e4:	d009      	beq.n	800d4fa <RCCEx_PLL3_Config+0xc2>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	695b      	ldr	r3, [r3, #20]
 800d4ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d4ee:	d004      	beq.n	800d4fa <RCCEx_PLL3_Config+0xc2>
 800d4f0:	f640 612d 	movw	r1, #3629	; 0xe2d
 800d4f4:	4860      	ldr	r0, [pc, #384]	; (800d678 <RCCEx_PLL3_Config+0x240>)
 800d4f6:	f7f4 fabc 	bl	8001a72 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	699b      	ldr	r3, [r3, #24]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d009      	beq.n	800d516 <RCCEx_PLL3_Config+0xde>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	699b      	ldr	r3, [r3, #24]
 800d506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d50a:	d004      	beq.n	800d516 <RCCEx_PLL3_Config+0xde>
 800d50c:	f640 612e 	movw	r1, #3630	; 0xe2e
 800d510:	4859      	ldr	r0, [pc, #356]	; (800d678 <RCCEx_PLL3_Config+0x240>)
 800d512:	f7f4 faae 	bl	8001a72 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	69db      	ldr	r3, [r3, #28]
 800d51a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d51e:	d304      	bcc.n	800d52a <RCCEx_PLL3_Config+0xf2>
 800d520:	f640 612f 	movw	r1, #3631	; 0xe2f
 800d524:	4854      	ldr	r0, [pc, #336]	; (800d678 <RCCEx_PLL3_Config+0x240>)
 800d526:	f7f4 faa4 	bl	8001a72 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d52a:	4b54      	ldr	r3, [pc, #336]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d52e:	f003 0303 	and.w	r3, r3, #3
 800d532:	2b03      	cmp	r3, #3
 800d534:	d101      	bne.n	800d53a <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 800d536:	2301      	movs	r3, #1
 800d538:	e099      	b.n	800d66e <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d53a:	4b50      	ldr	r3, [pc, #320]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4a4f      	ldr	r2, [pc, #316]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d546:	f7f6 f807 	bl	8003558 <HAL_GetTick>
 800d54a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d54c:	e008      	b.n	800d560 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d54e:	f7f6 f803 	bl	8003558 <HAL_GetTick>
 800d552:	4602      	mov	r2, r0
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	1ad3      	subs	r3, r2, r3
 800d558:	2b02      	cmp	r3, #2
 800d55a:	d901      	bls.n	800d560 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 800d55c:	2303      	movs	r3, #3
 800d55e:	e086      	b.n	800d66e <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d560:	4b46      	ldr	r3, [pc, #280]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d1f0      	bne.n	800d54e <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d56c:	4b43      	ldr	r3, [pc, #268]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d570:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	051b      	lsls	r3, r3, #20
 800d57a:	4940      	ldr	r1, [pc, #256]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d57c:	4313      	orrs	r3, r2
 800d57e:	628b      	str	r3, [r1, #40]	; 0x28
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	3b01      	subs	r3, #1
 800d586:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	3b01      	subs	r3, #1
 800d590:	025b      	lsls	r3, r3, #9
 800d592:	b29b      	uxth	r3, r3
 800d594:	431a      	orrs	r2, r3
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	68db      	ldr	r3, [r3, #12]
 800d59a:	3b01      	subs	r3, #1
 800d59c:	041b      	lsls	r3, r3, #16
 800d59e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d5a2:	431a      	orrs	r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	691b      	ldr	r3, [r3, #16]
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	061b      	lsls	r3, r3, #24
 800d5ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d5b0:	4932      	ldr	r1, [pc, #200]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d5b6:	4b31      	ldr	r3, [pc, #196]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	695b      	ldr	r3, [r3, #20]
 800d5c2:	492e      	ldr	r1, [pc, #184]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d5c8:	4b2c      	ldr	r3, [pc, #176]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	699b      	ldr	r3, [r3, #24]
 800d5d4:	4929      	ldr	r1, [pc, #164]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d5da:	4b28      	ldr	r3, [pc, #160]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5de:	4a27      	ldr	r2, [pc, #156]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d5e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d5e6:	4b25      	ldr	r3, [pc, #148]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d5e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5ea:	4b25      	ldr	r3, [pc, #148]	; (800d680 <RCCEx_PLL3_Config+0x248>)
 800d5ec:	4013      	ands	r3, r2
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	69d2      	ldr	r2, [r2, #28]
 800d5f2:	00d2      	lsls	r2, r2, #3
 800d5f4:	4921      	ldr	r1, [pc, #132]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d5fa:	4b20      	ldr	r3, [pc, #128]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5fe:	4a1f      	ldr	r2, [pc, #124]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d604:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d106      	bne.n	800d61a <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d60c:	4b1b      	ldr	r3, [pc, #108]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d610:	4a1a      	ldr	r2, [pc, #104]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d612:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d616:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d618:	e00f      	b.n	800d63a <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d106      	bne.n	800d62e <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d620:	4b16      	ldr	r3, [pc, #88]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d624:	4a15      	ldr	r2, [pc, #84]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d626:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d62a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d62c:	e005      	b.n	800d63a <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d62e:	4b13      	ldr	r3, [pc, #76]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d632:	4a12      	ldr	r2, [pc, #72]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d634:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d638:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d63a:	4b10      	ldr	r3, [pc, #64]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4a0f      	ldr	r2, [pc, #60]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d646:	f7f5 ff87 	bl	8003558 <HAL_GetTick>
 800d64a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d64c:	e008      	b.n	800d660 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d64e:	f7f5 ff83 	bl	8003558 <HAL_GetTick>
 800d652:	4602      	mov	r2, r0
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	1ad3      	subs	r3, r2, r3
 800d658:	2b02      	cmp	r3, #2
 800d65a:	d901      	bls.n	800d660 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 800d65c:	2303      	movs	r3, #3
 800d65e:	e006      	b.n	800d66e <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d660:	4b06      	ldr	r3, [pc, #24]	; (800d67c <RCCEx_PLL3_Config+0x244>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d0f0      	beq.n	800d64e <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 800d66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	0801ddc8 	.word	0x0801ddc8
 800d67c:	58024400 	.word	0x58024400
 800d680:	ffff0007 	.word	0xffff0007

0800d684 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d101      	bne.n	800d696 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d692:	2301      	movs	r3, #1
 800d694:	e069      	b.n	800d76a <HAL_RNG_Init+0xe6>
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a36      	ldr	r2, [pc, #216]	; (800d774 <HAL_RNG_Init+0xf0>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d003      	beq.n	800d6a8 <HAL_RNG_Init+0x24>
 800d6a0:	21b0      	movs	r1, #176	; 0xb0
 800d6a2:	4835      	ldr	r0, [pc, #212]	; (800d778 <HAL_RNG_Init+0xf4>)
 800d6a4:	f7f4 f9e5 	bl	8001a72 <assert_failed>
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d007      	beq.n	800d6c0 <HAL_RNG_Init+0x3c>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	2b20      	cmp	r3, #32
 800d6b6:	d003      	beq.n	800d6c0 <HAL_RNG_Init+0x3c>
 800d6b8:	21b1      	movs	r1, #177	; 0xb1
 800d6ba:	482f      	ldr	r0, [pc, #188]	; (800d778 <HAL_RNG_Init+0xf4>)
 800d6bc:	f7f4 f9d9 	bl	8001a72 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	7a5b      	ldrb	r3, [r3, #9]
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d105      	bne.n	800d6d6 <HAL_RNG_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7f4 fa53 	bl	8001b7c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2202      	movs	r2, #2
 800d6da:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f023 0120 	bic.w	r1, r3, #32
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	685a      	ldr	r2, [r3, #4]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	430a      	orrs	r2, r1
 800d6f0:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f042 0204 	orr.w	r2, r2, #4
 800d700:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d70c:	2b40      	cmp	r3, #64	; 0x40
 800d70e:	d104      	bne.n	800d71a <HAL_RNG_Init+0x96>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2204      	movs	r2, #4
 800d714:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800d716:	2301      	movs	r3, #1
 800d718:	e027      	b.n	800d76a <HAL_RNG_Init+0xe6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800d71a:	f7f5 ff1d 	bl	8003558 <HAL_GetTick>
 800d71e:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d720:	e015      	b.n	800d74e <HAL_RNG_Init+0xca>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d722:	f7f5 ff19 	bl	8003558 <HAL_GetTick>
 800d726:	4602      	mov	r2, r0
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	1ad3      	subs	r3, r2, r3
 800d72c:	2b02      	cmp	r3, #2
 800d72e:	d90e      	bls.n	800d74e <HAL_RNG_Init+0xca>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	f003 0304 	and.w	r3, r3, #4
 800d73a:	2b04      	cmp	r3, #4
 800d73c:	d107      	bne.n	800d74e <HAL_RNG_Init+0xca>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2204      	movs	r2, #4
 800d742:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2202      	movs	r2, #2
 800d748:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d74a:	2301      	movs	r3, #1
 800d74c:	e00d      	b.n	800d76a <HAL_RNG_Init+0xe6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	f003 0304 	and.w	r3, r3, #4
 800d758:	2b04      	cmp	r3, #4
 800d75a:	d0e2      	beq.n	800d722 <HAL_RNG_Init+0x9e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2201      	movs	r2, #1
 800d760:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2200      	movs	r2, #0
 800d766:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	48021800 	.word	0x48021800
 800d778:	0801de04 	.word	0x0801de04

0800d77c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b086      	sub	sp, #24
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	607a      	str	r2, [r7, #4]
 800d788:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d010      	beq.n	800d7b2 <HAL_SAI_InitProtocol+0x36>
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	2b01      	cmp	r3, #1
 800d794:	d00d      	beq.n	800d7b2 <HAL_SAI_InitProtocol+0x36>
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	2b02      	cmp	r3, #2
 800d79a:	d00a      	beq.n	800d7b2 <HAL_SAI_InitProtocol+0x36>
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	2b03      	cmp	r3, #3
 800d7a0:	d007      	beq.n	800d7b2 <HAL_SAI_InitProtocol+0x36>
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	2b04      	cmp	r3, #4
 800d7a6:	d004      	beq.n	800d7b2 <HAL_SAI_InitProtocol+0x36>
 800d7a8:	f240 114f 	movw	r1, #335	; 0x14f
 800d7ac:	481e      	ldr	r0, [pc, #120]	; (800d828 <HAL_SAI_InitProtocol+0xac>)
 800d7ae:	f7f4 f960 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d00d      	beq.n	800d7d4 <HAL_SAI_InitProtocol+0x58>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d00a      	beq.n	800d7d4 <HAL_SAI_InitProtocol+0x58>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2b02      	cmp	r3, #2
 800d7c2:	d007      	beq.n	800d7d4 <HAL_SAI_InitProtocol+0x58>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2b03      	cmp	r3, #3
 800d7c8:	d004      	beq.n	800d7d4 <HAL_SAI_InitProtocol+0x58>
 800d7ca:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800d7ce:	4816      	ldr	r0, [pc, #88]	; (800d828 <HAL_SAI_InitProtocol+0xac>)
 800d7d0:	f7f4 f94f 	bl	8001a72 <assert_failed>

  switch (protocol)
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	2b02      	cmp	r3, #2
 800d7d8:	d904      	bls.n	800d7e4 <HAL_SAI_InitProtocol+0x68>
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	3b03      	subs	r3, #3
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d812      	bhi.n	800d808 <HAL_SAI_InitProtocol+0x8c>
 800d7e2:	e008      	b.n	800d7f6 <HAL_SAI_InitProtocol+0x7a>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	68b9      	ldr	r1, [r7, #8]
 800d7ea:	68f8      	ldr	r0, [r7, #12]
 800d7ec:	f000 ff5c 	bl	800e6a8 <SAI_InitI2S>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	75fb      	strb	r3, [r7, #23]
      break;
 800d7f4:	e00b      	b.n	800d80e <HAL_SAI_InitProtocol+0x92>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	68b9      	ldr	r1, [r7, #8]
 800d7fc:	68f8      	ldr	r0, [r7, #12]
 800d7fe:	f001 f805 	bl	800e80c <SAI_InitPCM>
 800d802:	4603      	mov	r3, r0
 800d804:	75fb      	strb	r3, [r7, #23]
      break;
 800d806:	e002      	b.n	800d80e <HAL_SAI_InitProtocol+0x92>
    default :
      status = HAL_ERROR;
 800d808:	2301      	movs	r3, #1
 800d80a:	75fb      	strb	r3, [r7, #23]
      break;
 800d80c:	bf00      	nop
  }

  if (status == HAL_OK)
 800d80e:	7dfb      	ldrb	r3, [r7, #23]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d104      	bne.n	800d81e <HAL_SAI_InitProtocol+0xa2>
  {
    status = HAL_SAI_Init(hsai);
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	f000 f809 	bl	800d82c <HAL_SAI_Init>
 800d81a:	4603      	mov	r3, r0
 800d81c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d81e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d820:	4618      	mov	r0, r3
 800d822:	3718      	adds	r7, #24
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	0801de3c 	.word	0x0801de3c

0800d82c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b08a      	sub	sp, #40	; 0x28
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d102      	bne.n	800d840 <HAL_SAI_Init+0x14>
  {
    return HAL_ERROR;
 800d83a:	2301      	movs	r3, #1
 800d83c:	f000 bcd4 	b.w	800e1e8 <HAL_SAI_Init+0x9bc>
  }

  /* check the instance */
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4a88      	ldr	r2, [pc, #544]	; (800da68 <HAL_SAI_Init+0x23c>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d027      	beq.n	800d89a <HAL_SAI_Init+0x6e>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4a87      	ldr	r2, [pc, #540]	; (800da6c <HAL_SAI_Init+0x240>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d022      	beq.n	800d89a <HAL_SAI_Init+0x6e>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4a85      	ldr	r2, [pc, #532]	; (800da70 <HAL_SAI_Init+0x244>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d01d      	beq.n	800d89a <HAL_SAI_Init+0x6e>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4a84      	ldr	r2, [pc, #528]	; (800da74 <HAL_SAI_Init+0x248>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d018      	beq.n	800d89a <HAL_SAI_Init+0x6e>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a82      	ldr	r2, [pc, #520]	; (800da78 <HAL_SAI_Init+0x24c>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d013      	beq.n	800d89a <HAL_SAI_Init+0x6e>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a81      	ldr	r2, [pc, #516]	; (800da7c <HAL_SAI_Init+0x250>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d00e      	beq.n	800d89a <HAL_SAI_Init+0x6e>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a7f      	ldr	r2, [pc, #508]	; (800da80 <HAL_SAI_Init+0x254>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d009      	beq.n	800d89a <HAL_SAI_Init+0x6e>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4a7e      	ldr	r2, [pc, #504]	; (800da84 <HAL_SAI_Init+0x258>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d004      	beq.n	800d89a <HAL_SAI_Init+0x6e>
 800d890:	f240 117f 	movw	r1, #383	; 0x17f
 800d894:	487c      	ldr	r0, [pc, #496]	; (800da88 <HAL_SAI_Init+0x25c>)
 800d896:	f7f4 f8ec 	bl	8001a72 <assert_failed>

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6a1b      	ldr	r3, [r3, #32]
 800d89e:	4a7b      	ldr	r2, [pc, #492]	; (800da8c <HAL_SAI_Init+0x260>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d034      	beq.n	800d90e <HAL_SAI_Init+0xe2>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6a1b      	ldr	r3, [r3, #32]
 800d8a8:	4a79      	ldr	r2, [pc, #484]	; (800da90 <HAL_SAI_Init+0x264>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d02f      	beq.n	800d90e <HAL_SAI_Init+0xe2>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6a1b      	ldr	r3, [r3, #32]
 800d8b2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d029      	beq.n	800d90e <HAL_SAI_Init+0xe2>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6a1b      	ldr	r3, [r3, #32]
 800d8be:	f64a 4244 	movw	r2, #44100	; 0xac44
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d023      	beq.n	800d90e <HAL_SAI_Init+0xe2>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6a1b      	ldr	r3, [r3, #32]
 800d8ca:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800d8ce:	d01e      	beq.n	800d90e <HAL_SAI_Init+0xe2>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6a1b      	ldr	r3, [r3, #32]
 800d8d4:	f245 6222 	movw	r2, #22050	; 0x5622
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d018      	beq.n	800d90e <HAL_SAI_Init+0xe2>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6a1b      	ldr	r3, [r3, #32]
 800d8e0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800d8e4:	d013      	beq.n	800d90e <HAL_SAI_Init+0xe2>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a1b      	ldr	r3, [r3, #32]
 800d8ea:	f642 3211 	movw	r2, #11025	; 0x2b11
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d00d      	beq.n	800d90e <HAL_SAI_Init+0xe2>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6a1b      	ldr	r3, [r3, #32]
 800d8f6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800d8fa:	d008      	beq.n	800d90e <HAL_SAI_Init+0xe2>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6a1b      	ldr	r3, [r3, #32]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d004      	beq.n	800d90e <HAL_SAI_Init+0xe2>
 800d904:	f44f 71c1 	mov.w	r1, #386	; 0x182
 800d908:	485f      	ldr	r0, [pc, #380]	; (800da88 <HAL_SAI_Init+0x25c>)
 800d90a:	f7f4 f8b2 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00c      	beq.n	800d930 <HAL_SAI_Init+0x104>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d91a:	2b08      	cmp	r3, #8
 800d91c:	d008      	beq.n	800d930 <HAL_SAI_Init+0x104>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d922:	2b04      	cmp	r3, #4
 800d924:	d004      	beq.n	800d930 <HAL_SAI_Init+0x104>
 800d926:	f240 1183 	movw	r1, #387	; 0x183
 800d92a:	4857      	ldr	r0, [pc, #348]	; (800da88 <HAL_SAI_Init+0x25c>)
 800d92c:	f7f4 f8a1 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d010      	beq.n	800d95a <HAL_SAI_Init+0x12e>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d00c      	beq.n	800d95a <HAL_SAI_Init+0x12e>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	2b02      	cmp	r3, #2
 800d946:	d008      	beq.n	800d95a <HAL_SAI_Init+0x12e>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	2b03      	cmp	r3, #3
 800d94e:	d004      	beq.n	800d95a <HAL_SAI_Init+0x12e>
 800d950:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800d954:	484c      	ldr	r0, [pc, #304]	; (800da88 <HAL_SAI_Init+0x25c>)
 800d956:	f7f4 f88c 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d95e:	2b40      	cmp	r3, #64	; 0x40
 800d960:	d018      	beq.n	800d994 <HAL_SAI_Init+0x168>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d966:	2b60      	cmp	r3, #96	; 0x60
 800d968:	d014      	beq.n	800d994 <HAL_SAI_Init+0x168>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d96e:	2b80      	cmp	r3, #128	; 0x80
 800d970:	d010      	beq.n	800d994 <HAL_SAI_Init+0x168>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d976:	2ba0      	cmp	r3, #160	; 0xa0
 800d978:	d00c      	beq.n	800d994 <HAL_SAI_Init+0x168>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d97e:	2bc0      	cmp	r3, #192	; 0xc0
 800d980:	d008      	beq.n	800d994 <HAL_SAI_Init+0x168>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d986:	2be0      	cmp	r3, #224	; 0xe0
 800d988:	d004      	beq.n	800d994 <HAL_SAI_Init+0x168>
 800d98a:	f240 1185 	movw	r1, #389	; 0x185
 800d98e:	483e      	ldr	r0, [pc, #248]	; (800da88 <HAL_SAI_Init+0x25c>)
 800d990:	f7f4 f86f 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d009      	beq.n	800d9b0 <HAL_SAI_Init+0x184>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9a4:	d004      	beq.n	800d9b0 <HAL_SAI_Init+0x184>
 800d9a6:	f44f 71c3 	mov.w	r1, #390	; 0x186
 800d9aa:	4837      	ldr	r0, [pc, #220]	; (800da88 <HAL_SAI_Init+0x25c>)
 800d9ac:	f7f4 f861 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d008      	beq.n	800d9ca <HAL_SAI_Init+0x19e>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d004      	beq.n	800d9ca <HAL_SAI_Init+0x19e>
 800d9c0:	f240 1187 	movw	r1, #391	; 0x187
 800d9c4:	4830      	ldr	r0, [pc, #192]	; (800da88 <HAL_SAI_Init+0x25c>)
 800d9c6:	f7f4 f854 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d018      	beq.n	800da04 <HAL_SAI_Init+0x1d8>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d014      	beq.n	800da04 <HAL_SAI_Init+0x1d8>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	2b02      	cmp	r3, #2
 800d9e0:	d010      	beq.n	800da04 <HAL_SAI_Init+0x1d8>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	2b03      	cmp	r3, #3
 800d9e8:	d00c      	beq.n	800da04 <HAL_SAI_Init+0x1d8>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	689b      	ldr	r3, [r3, #8]
 800d9ee:	2b04      	cmp	r3, #4
 800d9f0:	d008      	beq.n	800da04 <HAL_SAI_Init+0x1d8>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	689b      	ldr	r3, [r3, #8]
 800d9f6:	2b05      	cmp	r3, #5
 800d9f8:	d004      	beq.n	800da04 <HAL_SAI_Init+0x1d8>
 800d9fa:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800d9fe:	4822      	ldr	r0, [pc, #136]	; (800da88 <HAL_SAI_Init+0x25c>)
 800da00:	f7f4 f837 	bl	8001a72 <assert_failed>
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800da04:	f7f5 fdd8 	bl	80035b8 <HAL_GetREVID>
 800da08:	4603      	mov	r3, r0
 800da0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da0e:	d30d      	bcc.n	800da2c <HAL_SAI_Init+0x200>
  {
    assert_param(IS_SAI_BLOCK_MCK_OUTPUT(hsai->Init.MckOutput));
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	691b      	ldr	r3, [r3, #16]
 800da14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800da18:	d008      	beq.n	800da2c <HAL_SAI_Init+0x200>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d004      	beq.n	800da2c <HAL_SAI_Init+0x200>
 800da22:	f240 118d 	movw	r1, #397	; 0x18d
 800da26:	4818      	ldr	r0, [pc, #96]	; (800da88 <HAL_SAI_Init+0x25c>)
 800da28:	f7f4 f823 	bl	8001a72 <assert_failed>
  }
#else /* SAI_VER_V2_1 */
  assert_param(IS_SAI_BLOCK_MCK_OUTPUT(hsai->Init.MckOutput));
#endif /* SAI_VER_V2_X */
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	695b      	ldr	r3, [r3, #20]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d009      	beq.n	800da48 <HAL_SAI_Init+0x21c>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	695b      	ldr	r3, [r3, #20]
 800da38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da3c:	d004      	beq.n	800da48 <HAL_SAI_Init+0x21c>
 800da3e:	f44f 71c9 	mov.w	r1, #402	; 0x192
 800da42:	4811      	ldr	r0, [pc, #68]	; (800da88 <HAL_SAI_Init+0x25c>)
 800da44:	f7f4 f815 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	699b      	ldr	r3, [r3, #24]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d021      	beq.n	800da94 <HAL_SAI_Init+0x268>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	699b      	ldr	r3, [r3, #24]
 800da54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800da58:	d01c      	beq.n	800da94 <HAL_SAI_Init+0x268>
 800da5a:	f240 1193 	movw	r1, #403	; 0x193
 800da5e:	480a      	ldr	r0, [pc, #40]	; (800da88 <HAL_SAI_Init+0x25c>)
 800da60:	f7f4 f807 	bl	8001a72 <assert_failed>
 800da64:	e016      	b.n	800da94 <HAL_SAI_Init+0x268>
 800da66:	bf00      	nop
 800da68:	40015804 	.word	0x40015804
 800da6c:	40015824 	.word	0x40015824
 800da70:	40015c04 	.word	0x40015c04
 800da74:	40015c24 	.word	0x40015c24
 800da78:	40016004 	.word	0x40016004
 800da7c:	40016024 	.word	0x40016024
 800da80:	58005404 	.word	0x58005404
 800da84:	58005424 	.word	0x58005424
 800da88:	0801de3c 	.word	0x0801de3c
 800da8c:	0002ee00 	.word	0x0002ee00
 800da90:	00017700 	.word	0x00017700
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	69db      	ldr	r3, [r3, #28]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d014      	beq.n	800dac6 <HAL_SAI_Init+0x29a>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	69db      	ldr	r3, [r3, #28]
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d010      	beq.n	800dac6 <HAL_SAI_Init+0x29a>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	69db      	ldr	r3, [r3, #28]
 800daa8:	2b02      	cmp	r3, #2
 800daaa:	d00c      	beq.n	800dac6 <HAL_SAI_Init+0x29a>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	69db      	ldr	r3, [r3, #28]
 800dab0:	2b03      	cmp	r3, #3
 800dab2:	d008      	beq.n	800dac6 <HAL_SAI_Init+0x29a>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	69db      	ldr	r3, [r3, #28]
 800dab8:	2b04      	cmp	r3, #4
 800daba:	d004      	beq.n	800dac6 <HAL_SAI_Init+0x29a>
 800dabc:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800dac0:	4890      	ldr	r0, [pc, #576]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800dac2:	f7f3 ffd6 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dace:	d008      	beq.n	800dae2 <HAL_SAI_Init+0x2b6>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d004      	beq.n	800dae2 <HAL_SAI_Init+0x2b6>
 800dad8:	f240 1195 	movw	r1, #405	; 0x195
 800dadc:	4889      	ldr	r0, [pc, #548]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800dade:	f7f3 ffc8 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d018      	beq.n	800db1c <HAL_SAI_Init+0x2f0>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800daf2:	d013      	beq.n	800db1c <HAL_SAI_Init+0x2f0>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daf8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800dafc:	d00e      	beq.n	800db1c <HAL_SAI_Init+0x2f0>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db02:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800db06:	d009      	beq.n	800db1c <HAL_SAI_Init+0x2f0>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db0c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800db10:	d004      	beq.n	800db1c <HAL_SAI_Init+0x2f0>
 800db12:	f44f 71cb 	mov.w	r1, #406	; 0x196
 800db16:	487b      	ldr	r0, [pc, #492]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800db18:	f7f3 ffab 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db20:	2b00      	cmp	r3, #0
 800db22:	d008      	beq.n	800db36 <HAL_SAI_Init+0x30a>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db28:	2b10      	cmp	r3, #16
 800db2a:	d004      	beq.n	800db36 <HAL_SAI_Init+0x30a>
 800db2c:	f240 1197 	movw	r1, #407	; 0x197
 800db30:	4874      	ldr	r0, [pc, #464]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800db32:	f7f3 ff9e 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	68db      	ldr	r3, [r3, #12]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00c      	beq.n	800db58 <HAL_SAI_Init+0x32c>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	2b01      	cmp	r3, #1
 800db44:	d008      	beq.n	800db58 <HAL_SAI_Init+0x32c>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	68db      	ldr	r3, [r3, #12]
 800db4a:	2b02      	cmp	r3, #2
 800db4c:	d004      	beq.n	800db58 <HAL_SAI_Init+0x32c>
 800db4e:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800db52:	486c      	ldr	r0, [pc, #432]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800db54:	f7f3 ff8d 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_MCK_OVERSAMPLING(hsai->Init.MckOverSampling));
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d009      	beq.n	800db74 <HAL_SAI_Init+0x348>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800db68:	d004      	beq.n	800db74 <HAL_SAI_Init+0x348>
 800db6a:	f240 1199 	movw	r1, #409	; 0x199
 800db6e:	4865      	ldr	r0, [pc, #404]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800db70:	f7f3 ff7f 	bl	8001a72 <assert_failed>

  /* Check the SAI Block Frame parameters */
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db78:	2b07      	cmp	r3, #7
 800db7a:	d904      	bls.n	800db86 <HAL_SAI_Init+0x35a>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db84:	d904      	bls.n	800db90 <HAL_SAI_Init+0x364>
 800db86:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800db8a:	485e      	ldr	r0, [pc, #376]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800db8c:	f7f3 ff71 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db94:	2b00      	cmp	r3, #0
 800db96:	d003      	beq.n	800dba0 <HAL_SAI_Init+0x374>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db9c:	2b80      	cmp	r3, #128	; 0x80
 800db9e:	d904      	bls.n	800dbaa <HAL_SAI_Init+0x37e>
 800dba0:	f240 119d 	movw	r1, #413	; 0x19d
 800dba4:	4857      	ldr	r0, [pc, #348]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800dba6:	f7f3 ff64 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d009      	beq.n	800dbc6 <HAL_SAI_Init+0x39a>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbba:	d004      	beq.n	800dbc6 <HAL_SAI_Init+0x39a>
 800dbbc:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800dbc0:	4850      	ldr	r0, [pc, #320]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800dbc2:	f7f3 ff56 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d009      	beq.n	800dbe2 <HAL_SAI_Init+0x3b6>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dbd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dbd6:	d004      	beq.n	800dbe2 <HAL_SAI_Init+0x3b6>
 800dbd8:	f240 119f 	movw	r1, #415	; 0x19f
 800dbdc:	4849      	ldr	r0, [pc, #292]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800dbde:	f7f3 ff48 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d009      	beq.n	800dbfe <HAL_SAI_Init+0x3d2>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dbf2:	d004      	beq.n	800dbfe <HAL_SAI_Init+0x3d2>
 800dbf4:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800dbf8:	4842      	ldr	r0, [pc, #264]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800dbfa:	f7f3 ff3a 	bl	8001a72 <assert_failed>

  /* Check the SAI Block Slot parameters */
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc02:	2b18      	cmp	r3, #24
 800dc04:	d904      	bls.n	800dc10 <HAL_SAI_Init+0x3e4>
 800dc06:	f240 11a3 	movw	r1, #419	; 0x1a3
 800dc0a:	483e      	ldr	r0, [pc, #248]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800dc0c:	f7f3 ff31 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d00c      	beq.n	800dc32 <HAL_SAI_Init+0x406>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc1c:	2b40      	cmp	r3, #64	; 0x40
 800dc1e:	d008      	beq.n	800dc32 <HAL_SAI_Init+0x406>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc24:	2b80      	cmp	r3, #128	; 0x80
 800dc26:	d004      	beq.n	800dc32 <HAL_SAI_Init+0x406>
 800dc28:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800dc2c:	4835      	ldr	r0, [pc, #212]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800dc2e:	f7f3 ff20 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d003      	beq.n	800dc42 <HAL_SAI_Init+0x416>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc3e:	2b10      	cmp	r3, #16
 800dc40:	d904      	bls.n	800dc4c <HAL_SAI_Init+0x420>
 800dc42:	f240 11a5 	movw	r1, #421	; 0x1a5
 800dc46:	482f      	ldr	r0, [pc, #188]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800dc48:	f7f3 ff13 	bl	8001a72 <assert_failed>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc54:	d304      	bcc.n	800dc60 <HAL_SAI_Init+0x434>
 800dc56:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800dc5a:	482a      	ldr	r0, [pc, #168]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800dc5c:	f7f3 ff09 	bl	8001a72 <assert_failed>

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d009      	beq.n	800dc7e <HAL_SAI_Init+0x452>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d004      	beq.n	800dc7e <HAL_SAI_Init+0x452>
 800dc74:	f240 11a9 	movw	r1, #425	; 0x1a9
 800dc78:	4822      	ldr	r0, [pc, #136]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800dc7a:	f7f3 fefa 	bl	8001a72 <assert_failed>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d12f      	bne.n	800dce8 <HAL_SAI_Init+0x4bc>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d003      	beq.n	800dc98 <HAL_SAI_Init+0x46c>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc94:	2b03      	cmp	r3, #3
 800dc96:	d904      	bls.n	800dca2 <HAL_SAI_Init+0x476>
 800dc98:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800dc9c:	4819      	ldr	r0, [pc, #100]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800dc9e:	f7f3 fee8 	bl	8001a72 <assert_failed>
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d005      	beq.n	800dcb6 <HAL_SAI_Init+0x48a>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d004      	beq.n	800dcc0 <HAL_SAI_Init+0x494>
 800dcb6:	f240 11ad 	movw	r1, #429	; 0x1ad
 800dcba:	4812      	ldr	r0, [pc, #72]	; (800dd04 <HAL_SAI_Init+0x4d8>)
 800dcbc:	f7f3 fed9 	bl	8001a72 <assert_failed>
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4a10      	ldr	r2, [pc, #64]	; (800dd08 <HAL_SAI_Init+0x4dc>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d004      	beq.n	800dcd4 <HAL_SAI_Init+0x4a8>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4a0f      	ldr	r2, [pc, #60]	; (800dd0c <HAL_SAI_Init+0x4e0>)
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d107      	bne.n	800dce4 <HAL_SAI_Init+0x4b8>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d103      	bne.n	800dce4 <HAL_SAI_Init+0x4b8>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d001      	beq.n	800dce8 <HAL_SAI_Init+0x4bc>
    {
      return HAL_ERROR;
 800dce4:	2301      	movs	r3, #1
 800dce6:	e27f      	b.n	800e1e8 <HAL_SAI_Init+0x9bc>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a06      	ldr	r2, [pc, #24]	; (800dd08 <HAL_SAI_Init+0x4dc>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d004      	beq.n	800dcfc <HAL_SAI_Init+0x4d0>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	4a06      	ldr	r2, [pc, #24]	; (800dd10 <HAL_SAI_Init+0x4e4>)
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d10d      	bne.n	800dd18 <HAL_SAI_Init+0x4ec>
  {
    SaiBaseAddress = SAI1;
 800dcfc:	4b05      	ldr	r3, [pc, #20]	; (800dd14 <HAL_SAI_Init+0x4e8>)
 800dcfe:	61bb      	str	r3, [r7, #24]
 800dd00:	e033      	b.n	800dd6a <HAL_SAI_Init+0x53e>
 800dd02:	bf00      	nop
 800dd04:	0801de3c 	.word	0x0801de3c
 800dd08:	40015804 	.word	0x40015804
 800dd0c:	58005404 	.word	0x58005404
 800dd10:	40015824 	.word	0x40015824
 800dd14:	40015800 	.word	0x40015800
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4a83      	ldr	r2, [pc, #524]	; (800df2c <HAL_SAI_Init+0x700>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d004      	beq.n	800dd2c <HAL_SAI_Init+0x500>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4a82      	ldr	r2, [pc, #520]	; (800df30 <HAL_SAI_Init+0x704>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d102      	bne.n	800dd32 <HAL_SAI_Init+0x506>
  {
    SaiBaseAddress = SAI2;
 800dd2c:	4b81      	ldr	r3, [pc, #516]	; (800df34 <HAL_SAI_Init+0x708>)
 800dd2e:	61bb      	str	r3, [r7, #24]
 800dd30:	e01b      	b.n	800dd6a <HAL_SAI_Init+0x53e>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4a80      	ldr	r2, [pc, #512]	; (800df38 <HAL_SAI_Init+0x70c>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d004      	beq.n	800dd46 <HAL_SAI_Init+0x51a>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4a7e      	ldr	r2, [pc, #504]	; (800df3c <HAL_SAI_Init+0x710>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d102      	bne.n	800dd4c <HAL_SAI_Init+0x520>
  {
    SaiBaseAddress = SAI3;
 800dd46:	4b7e      	ldr	r3, [pc, #504]	; (800df40 <HAL_SAI_Init+0x714>)
 800dd48:	61bb      	str	r3, [r7, #24]
 800dd4a:	e00e      	b.n	800dd6a <HAL_SAI_Init+0x53e>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a7c      	ldr	r2, [pc, #496]	; (800df44 <HAL_SAI_Init+0x718>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d004      	beq.n	800dd60 <HAL_SAI_Init+0x534>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4a7b      	ldr	r2, [pc, #492]	; (800df48 <HAL_SAI_Init+0x71c>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d102      	bne.n	800dd66 <HAL_SAI_Init+0x53a>
  {
    SaiBaseAddress = SAI4;
 800dd60:	4b7a      	ldr	r3, [pc, #488]	; (800df4c <HAL_SAI_Init+0x720>)
 800dd62:	61bb      	str	r3, [r7, #24]
 800dd64:	e001      	b.n	800dd6a <HAL_SAI_Init+0x53e>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800dd66:	2301      	movs	r3, #1
 800dd68:	e23e      	b.n	800e1e8 <HAL_SAI_Init+0x9bc>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d106      	bne.n	800dd84 <HAL_SAI_Init+0x558>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f7f3 ffe8 	bl	8001d54 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 fdc3 	bl	800e910 <SAI_Disable>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d001      	beq.n	800dd94 <HAL_SAI_Init+0x568>
  {
    return HAL_ERROR;
 800dd90:	2301      	movs	r3, #1
 800dd92:	e229      	b.n	800e1e8 <HAL_SAI_Init+0x9bc>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2202      	movs	r2, #2
 800dd98:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	68db      	ldr	r3, [r3, #12]
 800dda0:	2b02      	cmp	r3, #2
 800dda2:	d00c      	beq.n	800ddbe <HAL_SAI_Init+0x592>
 800dda4:	2b02      	cmp	r3, #2
 800dda6:	d80d      	bhi.n	800ddc4 <HAL_SAI_Init+0x598>
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d002      	beq.n	800ddb2 <HAL_SAI_Init+0x586>
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d003      	beq.n	800ddb8 <HAL_SAI_Init+0x58c>
 800ddb0:	e008      	b.n	800ddc4 <HAL_SAI_Init+0x598>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ddb6:	e008      	b.n	800ddca <HAL_SAI_Init+0x59e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ddb8:	2310      	movs	r3, #16
 800ddba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ddbc:	e005      	b.n	800ddca <HAL_SAI_Init+0x59e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ddbe:	2320      	movs	r3, #32
 800ddc0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ddc2:	e002      	b.n	800ddca <HAL_SAI_Init+0x59e>
    default:
      tmpregisterGCR = 0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ddc8:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	2b05      	cmp	r3, #5
 800ddd0:	d831      	bhi.n	800de36 <HAL_SAI_Init+0x60a>
 800ddd2:	a201      	add	r2, pc, #4	; (adr r2, 800ddd8 <HAL_SAI_Init+0x5ac>)
 800ddd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddd8:	0800ddf1 	.word	0x0800ddf1
 800dddc:	0800ddf7 	.word	0x0800ddf7
 800dde0:	0800ddff 	.word	0x0800ddff
 800dde4:	0800de07 	.word	0x0800de07
 800dde8:	0800de17 	.word	0x0800de17
 800ddec:	0800de27 	.word	0x0800de27
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	61fb      	str	r3, [r7, #28]
      break;
 800ddf4:	e022      	b.n	800de3c <HAL_SAI_Init+0x610>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ddf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddfa:	61fb      	str	r3, [r7, #28]
      break;
 800ddfc:	e01e      	b.n	800de3c <HAL_SAI_Init+0x610>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ddfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de02:	61fb      	str	r3, [r7, #28]
      break;
 800de04:	e01a      	b.n	800de3c <HAL_SAI_Init+0x610>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800de06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de0a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800de0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0e:	f043 0301 	orr.w	r3, r3, #1
 800de12:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800de14:	e012      	b.n	800de3c <HAL_SAI_Init+0x610>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800de16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de1a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1e:	f043 0302 	orr.w	r3, r3, #2
 800de22:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800de24:	e00a      	b.n	800de3c <HAL_SAI_Init+0x610>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800de26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de2a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800de2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2e:	f043 0303 	orr.w	r3, r3, #3
 800de32:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800de34:	e002      	b.n	800de3c <HAL_SAI_Init+0x610>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800de36:	2300      	movs	r3, #0
 800de38:	61fb      	str	r3, [r7, #28]
      break;
 800de3a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de40:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6a1b      	ldr	r3, [r3, #32]
 800de46:	2b00      	cmp	r3, #0
 800de48:	f000 80b8 	beq.w	800dfbc <HAL_SAI_Init+0x790>
  {
    uint32_t freq = 0;
 800de4c:	2300      	movs	r3, #0
 800de4e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4a3e      	ldr	r2, [pc, #248]	; (800df50 <HAL_SAI_Init+0x724>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d004      	beq.n	800de64 <HAL_SAI_Init+0x638>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4a3d      	ldr	r2, [pc, #244]	; (800df54 <HAL_SAI_Init+0x728>)
 800de60:	4293      	cmp	r3, r2
 800de62:	d104      	bne.n	800de6e <HAL_SAI_Init+0x642>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800de64:	f44f 7080 	mov.w	r0, #256	; 0x100
 800de68:	f7fe f8e2 	bl	800c030 <HAL_RCCEx_GetPeriphCLKFreq>
 800de6c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	4a2e      	ldr	r2, [pc, #184]	; (800df2c <HAL_SAI_Init+0x700>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d004      	beq.n	800de82 <HAL_SAI_Init+0x656>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	4a2c      	ldr	r2, [pc, #176]	; (800df30 <HAL_SAI_Init+0x704>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d104      	bne.n	800de8c <HAL_SAI_Init+0x660>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800de82:	f44f 7000 	mov.w	r0, #512	; 0x200
 800de86:	f7fe f8d3 	bl	800c030 <HAL_RCCEx_GetPeriphCLKFreq>
 800de8a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4a29      	ldr	r2, [pc, #164]	; (800df38 <HAL_SAI_Init+0x70c>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d004      	beq.n	800dea0 <HAL_SAI_Init+0x674>
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	4a28      	ldr	r2, [pc, #160]	; (800df3c <HAL_SAI_Init+0x710>)
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d104      	bne.n	800deaa <HAL_SAI_Init+0x67e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800dea0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800dea4:	f7fe f8c4 	bl	800c030 <HAL_RCCEx_GetPeriphCLKFreq>
 800dea8:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	4a25      	ldr	r2, [pc, #148]	; (800df44 <HAL_SAI_Init+0x718>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d104      	bne.n	800debe <HAL_SAI_Init+0x692>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800deb4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800deb8:	f7fe f8ba 	bl	800c030 <HAL_RCCEx_GetPeriphCLKFreq>
 800debc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4a21      	ldr	r2, [pc, #132]	; (800df48 <HAL_SAI_Init+0x71c>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d104      	bne.n	800ded2 <HAL_SAI_Init+0x6a6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800dec8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800decc:	f7fe f8b0 	bl	800c030 <HAL_RCCEx_GetPeriphCLKFreq>
 800ded0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	699b      	ldr	r3, [r3, #24]
 800ded6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800deda:	d120      	bne.n	800df1e <HAL_SAI_Init+0x6f2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dee0:	2b04      	cmp	r3, #4
 800dee2:	d102      	bne.n	800deea <HAL_SAI_Init+0x6be>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800dee4:	2340      	movs	r3, #64	; 0x40
 800dee6:	60fb      	str	r3, [r7, #12]
 800dee8:	e00a      	b.n	800df00 <HAL_SAI_Init+0x6d4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deee:	2b08      	cmp	r3, #8
 800def0:	d103      	bne.n	800defa <HAL_SAI_Init+0x6ce>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800def2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800def6:	60fb      	str	r3, [r7, #12]
 800def8:	e002      	b.n	800df00 <HAL_SAI_Init+0x6d4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800defe:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800df00:	697a      	ldr	r2, [r7, #20]
 800df02:	4613      	mov	r3, r2
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	4413      	add	r3, r2
 800df08:	005b      	lsls	r3, r3, #1
 800df0a:	4619      	mov	r1, r3
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6a1b      	ldr	r3, [r3, #32]
 800df10:	68fa      	ldr	r2, [r7, #12]
 800df12:	fb02 f303 	mul.w	r3, r2, r3
 800df16:	fbb1 f3f3 	udiv	r3, r1, r3
 800df1a:	613b      	str	r3, [r7, #16]
 800df1c:	e02d      	b.n	800df7a <HAL_SAI_Init+0x74e>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800df26:	d117      	bne.n	800df58 <HAL_SAI_Init+0x72c>
 800df28:	2302      	movs	r3, #2
 800df2a:	e016      	b.n	800df5a <HAL_SAI_Init+0x72e>
 800df2c:	40015c04 	.word	0x40015c04
 800df30:	40015c24 	.word	0x40015c24
 800df34:	40015c00 	.word	0x40015c00
 800df38:	40016004 	.word	0x40016004
 800df3c:	40016024 	.word	0x40016024
 800df40:	40016000 	.word	0x40016000
 800df44:	58005404 	.word	0x58005404
 800df48:	58005424 	.word	0x58005424
 800df4c:	58005400 	.word	0x58005400
 800df50:	40015804 	.word	0x40015804
 800df54:	40015824 	.word	0x40015824
 800df58:	2301      	movs	r3, #1
 800df5a:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800df5c:	697a      	ldr	r2, [r7, #20]
 800df5e:	4613      	mov	r3, r2
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	4413      	add	r3, r2
 800df64:	005b      	lsls	r3, r3, #1
 800df66:	4619      	mov	r1, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6a1b      	ldr	r3, [r3, #32]
 800df6c:	68ba      	ldr	r2, [r7, #8]
 800df6e:	fb02 f303 	mul.w	r3, r2, r3
 800df72:	021b      	lsls	r3, r3, #8
 800df74:	fbb1 f3f3 	udiv	r3, r1, r3
 800df78:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	4a3d      	ldr	r2, [pc, #244]	; (800e074 <HAL_SAI_Init+0x848>)
 800df7e:	fba2 2303 	umull	r2, r3, r2, r3
 800df82:	08da      	lsrs	r2, r3, #3
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800df88:	6939      	ldr	r1, [r7, #16]
 800df8a:	4b3a      	ldr	r3, [pc, #232]	; (800e074 <HAL_SAI_Init+0x848>)
 800df8c:	fba3 2301 	umull	r2, r3, r3, r1
 800df90:	08da      	lsrs	r2, r3, #3
 800df92:	4613      	mov	r3, r2
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	4413      	add	r3, r2
 800df98:	005b      	lsls	r3, r3, #1
 800df9a:	1aca      	subs	r2, r1, r3
 800df9c:	2a08      	cmp	r2, #8
 800df9e:	d904      	bls.n	800dfaa <HAL_SAI_Init+0x77e>
    {
      hsai->Init.Mckdiv += 1U;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa4:	1c5a      	adds	r2, r3, #1
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfae:	2b04      	cmp	r3, #4
 800dfb0:	d104      	bne.n	800dfbc <HAL_SAI_Init+0x790>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb6:	085a      	lsrs	r2, r3, #1
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc0:	2b3f      	cmp	r3, #63	; 0x3f
 800dfc2:	d904      	bls.n	800dfce <HAL_SAI_Init+0x7a2>
 800dfc4:	f240 2197 	movw	r1, #663	; 0x297
 800dfc8:	482b      	ldr	r0, [pc, #172]	; (800e078 <HAL_SAI_Init+0x84c>)
 800dfca:	f7f3 fd52 	bl	8001a72 <assert_failed>

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d003      	beq.n	800dfde <HAL_SAI_Init+0x7b2>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	2b02      	cmp	r3, #2
 800dfdc:	d109      	bne.n	800dff2 <HAL_SAI_Init+0x7c6>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	d101      	bne.n	800dfea <HAL_SAI_Init+0x7be>
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	e001      	b.n	800dfee <HAL_SAI_Init+0x7c2>
 800dfea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfee:	623b      	str	r3, [r7, #32]
 800dff0:	e008      	b.n	800e004 <HAL_SAI_Init+0x7d8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dff6:	2b01      	cmp	r3, #1
 800dff8:	d102      	bne.n	800e000 <HAL_SAI_Init+0x7d4>
 800dffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dffe:	e000      	b.n	800e002 <HAL_SAI_Init+0x7d6>
 800e000:	2300      	movs	r3, #0
 800e002:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800e004:	f7f5 fad8 	bl	80035b8 <HAL_GetREVID>
 800e008:	4603      	mov	r3, r0
 800e00a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e00e:	d337      	bcc.n	800e080 <HAL_SAI_Init+0x854>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	6819      	ldr	r1, [r3, #0]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	4b18      	ldr	r3, [pc, #96]	; (800e07c <HAL_SAI_Init+0x850>)
 800e01c:	400b      	ands	r3, r1
 800e01e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	6819      	ldr	r1, [r3, #0]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	685a      	ldr	r2, [r3, #4]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e02e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e034:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e03a:	431a      	orrs	r2, r3
 800e03c:	6a3b      	ldr	r3, [r7, #32]
 800e03e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800e048:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	695b      	ldr	r3, [r3, #20]
 800e04e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e054:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e05a:	051b      	lsls	r3, r3, #20
 800e05c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e062:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	691b      	ldr	r3, [r3, #16]
 800e068:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	430a      	orrs	r2, r1
 800e070:	601a      	str	r2, [r3, #0]
 800e072:	e033      	b.n	800e0dc <HAL_SAI_Init+0x8b0>
 800e074:	cccccccd 	.word	0xcccccccd
 800e078:	0801de3c 	.word	0x0801de3c
 800e07c:	f005c010 	.word	0xf005c010
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	6819      	ldr	r1, [r3, #0]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681a      	ldr	r2, [r3, #0]
 800e08a:	4b59      	ldr	r3, [pc, #356]	; (800e1f0 <HAL_SAI_Init+0x9c4>)
 800e08c:	400b      	ands	r3, r1
 800e08e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	6819      	ldr	r1, [r3, #0]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	685a      	ldr	r2, [r3, #4]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e09e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e0a4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0aa:	431a      	orrs	r2, r3
 800e0ac:	6a3b      	ldr	r3, [r7, #32]
 800e0ae:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800e0b8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	695b      	ldr	r3, [r3, #20]
 800e0be:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e0c4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ca:	051b      	lsls	r3, r3, #20
 800e0cc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e0d2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	430a      	orrs	r2, r1
 800e0da:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	6859      	ldr	r1, [r3, #4]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	4b43      	ldr	r3, [pc, #268]	; (800e1f4 <HAL_SAI_Init+0x9c8>)
 800e0e8:	400b      	ands	r3, r1
 800e0ea:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	6859      	ldr	r1, [r3, #4]
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	69da      	ldr	r2, [r3, #28]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0fa:	431a      	orrs	r2, r3
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e100:	431a      	orrs	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	430a      	orrs	r2, r1
 800e108:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	6899      	ldr	r1, [r3, #8]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681a      	ldr	r2, [r3, #0]
 800e114:	4b38      	ldr	r3, [pc, #224]	; (800e1f8 <HAL_SAI_Init+0x9cc>)
 800e116:	400b      	ands	r3, r1
 800e118:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	6899      	ldr	r1, [r3, #8]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e124:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e12a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800e130:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800e136:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e13c:	3b01      	subs	r3, #1
 800e13e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e140:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	430a      	orrs	r2, r1
 800e148:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68d9      	ldr	r1, [r3, #12]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	f24f 0320 	movw	r3, #61472	; 0xf020
 800e158:	400b      	ands	r3, r1
 800e15a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	68d9      	ldr	r1, [r3, #12]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e16a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e170:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e172:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e178:	3b01      	subs	r3, #1
 800e17a:	021b      	lsls	r3, r3, #8
 800e17c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	430a      	orrs	r2, r1
 800e184:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4a1c      	ldr	r2, [pc, #112]	; (800e1fc <HAL_SAI_Init+0x9d0>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d004      	beq.n	800e19a <HAL_SAI_Init+0x96e>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4a1a      	ldr	r2, [pc, #104]	; (800e200 <HAL_SAI_Init+0x9d4>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d119      	bne.n	800e1ce <HAL_SAI_Init+0x9a2>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800e19a:	69bb      	ldr	r3, [r7, #24]
 800e19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e19e:	f023 0201 	bic.w	r2, r3, #1
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d10e      	bne.n	800e1ce <HAL_SAI_Init+0x9a2>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1b8:	3b01      	subs	r3, #1
 800e1ba:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e1bc:	431a      	orrs	r2, r3
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800e1c2:	69bb      	ldr	r3, [r7, #24]
 800e1c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1c6:	f043 0201 	orr.w	r2, r3, #1
 800e1ca:	69bb      	ldr	r3, [r7, #24]
 800e1cc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800e1e6:	2300      	movs	r3, #0
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3728      	adds	r7, #40	; 0x28
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	f805c010 	.word	0xf805c010
 800e1f4:	ffff1ff0 	.word	0xffff1ff0
 800e1f8:	fff88000 	.word	0xfff88000
 800e1fc:	40015804 	.word	0x40015804
 800e200:	58005404 	.word	0x58005404

0800e204 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e20c:	2300      	movs	r3, #0
 800e20e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800e216:	2b01      	cmp	r3, #1
 800e218:	d101      	bne.n	800e21e <HAL_SAI_Abort+0x1a>
 800e21a:	2302      	movs	r3, #2
 800e21c:	e07d      	b.n	800e31a <HAL_SAI_Abort+0x116>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2201      	movs	r2, #1
 800e222:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e234:	d14f      	bne.n	800e2d6 <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e244:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	2b12      	cmp	r3, #18
 800e250:	d11d      	bne.n	800e28e <HAL_SAI_Abort+0x8a>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d018      	beq.n	800e28e <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e262:	4618      	mov	r0, r3
 800e264:	f7f6 fde2 	bl	8004e2c <HAL_DMA_Abort>
 800e268:	4603      	mov	r3, r0
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d00f      	beq.n	800e28e <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e276:	2b80      	cmp	r3, #128	; 0x80
 800e278:	d009      	beq.n	800e28e <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 800e27a:	2301      	movs	r3, #1
 800e27c:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e284:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800e294:	b2db      	uxtb	r3, r3
 800e296:	2b22      	cmp	r3, #34	; 0x22
 800e298:	d11d      	bne.n	800e2d6 <HAL_SAI_Abort+0xd2>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d018      	beq.n	800e2d6 <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7f6 fdbe 	bl	8004e2c <HAL_DMA_Abort>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00f      	beq.n	800e2d6 <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2be:	2b80      	cmp	r3, #128	; 0x80
 800e2c0:	d009      	beq.n	800e2d6 <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e2cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e6:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f000 fb11 	bl	800e910 <SAI_Disable>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d001      	beq.n	800e2f8 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	685a      	ldr	r2, [r3, #4]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f042 0208 	orr.w	r2, r2, #8
 800e306:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2201      	movs	r2, #1
 800e30c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2200      	movs	r2, #0
 800e314:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 800e318:	7bfb      	ldrb	r3, [r7, #15]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3710      	adds	r7, #16
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
	...

0800e324 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b086      	sub	sp, #24
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800e332:	b2db      	uxtb	r3, r3
 800e334:	2b00      	cmp	r3, #0
 800e336:	f000 81a7 	beq.w	800e688 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	695b      	ldr	r3, [r3, #20]
 800e340:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	691b      	ldr	r3, [r3, #16]
 800e348:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	f003 0308 	and.w	r3, r3, #8
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00a      	beq.n	800e372 <HAL_SAI_IRQHandler+0x4e>
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	f003 0308 	and.w	r3, r3, #8
 800e362:	2b00      	cmp	r3, #0
 800e364:	d005      	beq.n	800e372 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	4798      	blx	r3
 800e370:	e18a      	b.n	800e688 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	f003 0301 	and.w	r3, r3, #1
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d01e      	beq.n	800e3ba <HAL_SAI_IRQHandler+0x96>
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	f003 0301 	and.w	r3, r3, #1
 800e382:	2b00      	cmp	r3, #0
 800e384:	d019      	beq.n	800e3ba <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2201      	movs	r2, #1
 800e38c:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800e394:	b2db      	uxtb	r3, r3
 800e396:	2b22      	cmp	r3, #34	; 0x22
 800e398:	d101      	bne.n	800e39e <HAL_SAI_IRQHandler+0x7a>
 800e39a:	2301      	movs	r3, #1
 800e39c:	e000      	b.n	800e3a0 <HAL_SAI_IRQHandler+0x7c>
 800e39e:	2302      	movs	r3, #2
 800e3a0:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	431a      	orrs	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 f96e 	bl	800e694 <HAL_SAI_ErrorCallback>
 800e3b8:	e166      	b.n	800e688 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	f003 0302 	and.w	r3, r3, #2
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d013      	beq.n	800e3ec <HAL_SAI_IRQHandler+0xc8>
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	f003 0302 	and.w	r3, r3, #2
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d00e      	beq.n	800e3ec <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	2202      	movs	r2, #2
 800e3d4:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	f000 8153 	beq.w	800e688 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3e8:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800e3ea:	e14d      	b.n	800e688 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	f003 0320 	and.w	r3, r3, #32
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d05b      	beq.n	800e4ae <HAL_SAI_IRQHandler+0x18a>
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	f003 0320 	and.w	r3, r3, #32
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d056      	beq.n	800e4ae <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2220      	movs	r2, #32
 800e406:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e40e:	f043 0204 	orr.w	r2, r3, #4
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d03e      	beq.n	800e4a0 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d018      	beq.n	800e45e <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e432:	4a97      	ldr	r2, [pc, #604]	; (800e690 <HAL_SAI_IRQHandler+0x36c>)
 800e434:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7f7 f813 	bl	8005468 <HAL_DMA_Abort_IT>
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d00a      	beq.n	800e45e <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e44e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 f91b 	bl	800e694 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e464:	2b00      	cmp	r3, #0
 800e466:	f000 810a 	beq.w	800e67e <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e470:	4a87      	ldr	r2, [pc, #540]	; (800e690 <HAL_SAI_IRQHandler+0x36c>)
 800e472:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7f6 fff4 	bl	8005468 <HAL_DMA_Abort_IT>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	f000 80fb 	beq.w	800e67e <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e48e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 f8fb 	bl	800e694 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800e49e:	e0ee      	b.n	800e67e <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f7ff feaf 	bl	800e204 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 f8f4 	bl	800e694 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800e4ac:	e0e7      	b.n	800e67e <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d05b      	beq.n	800e570 <HAL_SAI_IRQHandler+0x24c>
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d056      	beq.n	800e570 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	2240      	movs	r2, #64	; 0x40
 800e4c8:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e4d0:	f043 0208 	orr.w	r2, r3, #8
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d03e      	beq.n	800e562 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d018      	beq.n	800e520 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4f4:	4a66      	ldr	r2, [pc, #408]	; (800e690 <HAL_SAI_IRQHandler+0x36c>)
 800e4f6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7f6 ffb2 	bl	8005468 <HAL_DMA_Abort_IT>
 800e504:	4603      	mov	r3, r0
 800e506:	2b00      	cmp	r3, #0
 800e508:	d00a      	beq.n	800e520 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e510:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 f8ba 	bl	800e694 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e526:	2b00      	cmp	r3, #0
 800e528:	f000 80ab 	beq.w	800e682 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e532:	4a57      	ldr	r2, [pc, #348]	; (800e690 <HAL_SAI_IRQHandler+0x36c>)
 800e534:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7f6 ff93 	bl	8005468 <HAL_DMA_Abort_IT>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	f000 809c 	beq.w	800e682 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e550:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f000 f89a 	bl	800e694 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800e560:	e08f      	b.n	800e682 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f7ff fe4e 	bl	800e204 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f000 f893 	bl	800e694 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800e56e:	e088      	b.n	800e682 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	f003 0304 	and.w	r3, r3, #4
 800e576:	2b00      	cmp	r3, #0
 800e578:	d067      	beq.n	800e64a <HAL_SAI_IRQHandler+0x326>
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	f003 0304 	and.w	r3, r3, #4
 800e580:	2b00      	cmp	r3, #0
 800e582:	d062      	beq.n	800e64a <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2204      	movs	r2, #4
 800e58a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e592:	f043 0220 	orr.w	r2, r3, #32
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d03c      	beq.n	800e620 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d018      	beq.n	800e5e2 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5b6:	4a36      	ldr	r2, [pc, #216]	; (800e690 <HAL_SAI_IRQHandler+0x36c>)
 800e5b8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7f6 ff51 	bl	8005468 <HAL_DMA_Abort_IT>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d00a      	beq.n	800e5e2 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e5d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f000 f859 	bl	800e694 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d04c      	beq.n	800e686 <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5f2:	4a27      	ldr	r2, [pc, #156]	; (800e690 <HAL_SAI_IRQHandler+0x36c>)
 800e5f4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7f6 ff33 	bl	8005468 <HAL_DMA_Abort_IT>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d03e      	beq.n	800e686 <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e60e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 f83b 	bl	800e694 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800e61e:	e032      	b.n	800e686 <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	2200      	movs	r2, #0
 800e626:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f04f 32ff 	mov.w	r2, #4294967295
 800e630:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2201      	movs	r2, #1
 800e636:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2200      	movs	r2, #0
 800e63e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 f826 	bl	800e694 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800e648:	e01d      	b.n	800e686 <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	f003 0310 	and.w	r3, r3, #16
 800e650:	2b00      	cmp	r3, #0
 800e652:	d019      	beq.n	800e688 <HAL_SAI_IRQHandler+0x364>
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	f003 0310 	and.w	r3, r3, #16
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d014      	beq.n	800e688 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2210      	movs	r2, #16
 800e664:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e66c:	f043 0210 	orr.w	r2, r3, #16
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f000 f80c 	bl	800e694 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800e67c:	e004      	b.n	800e688 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800e67e:	bf00      	nop
 800e680:	e002      	b.n	800e688 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800e682:	bf00      	nop
 800e684:	e000      	b.n	800e688 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800e686:	bf00      	nop
}
 800e688:	bf00      	nop
 800e68a:	3718      	adds	r7, #24
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	0800e985 	.word	0x0800e985

0800e694 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800e69c:	bf00      	nop
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b087      	sub	sp, #28
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	607a      	str	r2, [r7, #4]
 800e6b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	685b      	ldr	r3, [r3, #4]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d003      	beq.n	800e6d6 <SAI_InitI2S+0x2e>
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	2b02      	cmp	r3, #2
 800e6d4:	d103      	bne.n	800e6de <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	651a      	str	r2, [r3, #80]	; 0x50
 800e6dc:	e002      	b.n	800e6e4 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2201      	movs	r2, #1
 800e6e2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e6ea:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6f2:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	683a      	ldr	r2, [r7, #0]
 800e6fe:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	f003 0301 	and.w	r3, r3, #1
 800e706:	2b00      	cmp	r3, #0
 800e708:	d001      	beq.n	800e70e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800e70a:	2301      	movs	r3, #1
 800e70c:	e077      	b.n	800e7fe <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d107      	bne.n	800e724 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2200      	movs	r2, #0
 800e718:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800e720:	665a      	str	r2, [r3, #100]	; 0x64
 800e722:	e006      	b.n	800e732 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e72a:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2200      	movs	r2, #0
 800e730:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2b03      	cmp	r3, #3
 800e736:	d84f      	bhi.n	800e7d8 <SAI_InitI2S+0x130>
 800e738:	a201      	add	r2, pc, #4	; (adr r2, 800e740 <SAI_InitI2S+0x98>)
 800e73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e73e:	bf00      	nop
 800e740:	0800e751 	.word	0x0800e751
 800e744:	0800e773 	.word	0x0800e773
 800e748:	0800e795 	.word	0x0800e795
 800e74c:	0800e7b7 	.word	0x0800e7b7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2280      	movs	r2, #128	; 0x80
 800e754:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	085b      	lsrs	r3, r3, #1
 800e75a:	015a      	lsls	r2, r3, #5
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	085b      	lsrs	r3, r3, #1
 800e764:	011a      	lsls	r2, r3, #4
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2240      	movs	r2, #64	; 0x40
 800e76e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e770:	e035      	b.n	800e7de <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2280      	movs	r2, #128	; 0x80
 800e776:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	085b      	lsrs	r3, r3, #1
 800e77c:	019a      	lsls	r2, r3, #6
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	085b      	lsrs	r3, r3, #1
 800e786:	015a      	lsls	r2, r3, #5
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2280      	movs	r2, #128	; 0x80
 800e790:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e792:	e024      	b.n	800e7de <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	22c0      	movs	r2, #192	; 0xc0
 800e798:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	085b      	lsrs	r3, r3, #1
 800e79e:	019a      	lsls	r2, r3, #6
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	085b      	lsrs	r3, r3, #1
 800e7a8:	015a      	lsls	r2, r3, #5
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2280      	movs	r2, #128	; 0x80
 800e7b2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e7b4:	e013      	b.n	800e7de <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	22e0      	movs	r2, #224	; 0xe0
 800e7ba:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	085b      	lsrs	r3, r3, #1
 800e7c0:	019a      	lsls	r2, r3, #6
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	085b      	lsrs	r3, r3, #1
 800e7ca:	015a      	lsls	r2, r3, #5
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2280      	movs	r2, #128	; 0x80
 800e7d4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e7d6:	e002      	b.n	800e7de <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	75fb      	strb	r3, [r7, #23]
      break;
 800e7dc:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	2b02      	cmp	r3, #2
 800e7e2:	d10b      	bne.n	800e7fc <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	d102      	bne.n	800e7f0 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2210      	movs	r2, #16
 800e7ee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2b02      	cmp	r3, #2
 800e7f4:	d102      	bne.n	800e7fc <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2208      	movs	r2, #8
 800e7fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800e7fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	371c      	adds	r7, #28
 800e802:	46bd      	mov	sp, r7
 800e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e808:	4770      	bx	lr
 800e80a:	bf00      	nop

0800e80c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b087      	sub	sp, #28
 800e810:	af00      	add	r7, sp, #0
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	607a      	str	r2, [r7, #4]
 800e818:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e81a:	2300      	movs	r3, #0
 800e81c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2200      	movs	r2, #0
 800e822:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2200      	movs	r2, #0
 800e828:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d003      	beq.n	800e83a <SAI_InitPCM+0x2e>
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	2b02      	cmp	r3, #2
 800e838:	d103      	bne.n	800e842 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2201      	movs	r2, #1
 800e83e:	651a      	str	r2, [r3, #80]	; 0x50
 800e840:	e002      	b.n	800e848 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2200      	movs	r2, #0
 800e846:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2200      	movs	r2, #0
 800e84c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e854:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800e85c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	2200      	movs	r2, #0
 800e862:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	683a      	ldr	r2, [r7, #0]
 800e868:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e870:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	2b04      	cmp	r3, #4
 800e876:	d103      	bne.n	800e880 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	2201      	movs	r2, #1
 800e87c:	659a      	str	r2, [r3, #88]	; 0x58
 800e87e:	e002      	b.n	800e886 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	220d      	movs	r2, #13
 800e884:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2b03      	cmp	r3, #3
 800e88a:	d837      	bhi.n	800e8fc <SAI_InitPCM+0xf0>
 800e88c:	a201      	add	r2, pc, #4	; (adr r2, 800e894 <SAI_InitPCM+0x88>)
 800e88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e892:	bf00      	nop
 800e894:	0800e8a5 	.word	0x0800e8a5
 800e898:	0800e8bb 	.word	0x0800e8bb
 800e89c:	0800e8d1 	.word	0x0800e8d1
 800e8a0:	0800e8e7 	.word	0x0800e8e7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	2280      	movs	r2, #128	; 0x80
 800e8a8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	011a      	lsls	r2, r3, #4
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2240      	movs	r2, #64	; 0x40
 800e8b6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e8b8:	e023      	b.n	800e902 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2280      	movs	r2, #128	; 0x80
 800e8be:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	015a      	lsls	r2, r3, #5
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2280      	movs	r2, #128	; 0x80
 800e8cc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e8ce:	e018      	b.n	800e902 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	22c0      	movs	r2, #192	; 0xc0
 800e8d4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	015a      	lsls	r2, r3, #5
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2280      	movs	r2, #128	; 0x80
 800e8e2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e8e4:	e00d      	b.n	800e902 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	22e0      	movs	r2, #224	; 0xe0
 800e8ea:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	015a      	lsls	r2, r3, #5
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2280      	movs	r2, #128	; 0x80
 800e8f8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e8fa:	e002      	b.n	800e902 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	75fb      	strb	r3, [r7, #23]
      break;
 800e900:	bf00      	nop
  }

  return status;
 800e902:	7dfb      	ldrb	r3, [r7, #23]
}
 800e904:	4618      	mov	r0, r3
 800e906:	371c      	adds	r7, #28
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e910:	b480      	push	{r7}
 800e912:	b085      	sub	sp, #20
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e918:	4b18      	ldr	r3, [pc, #96]	; (800e97c <SAI_Disable+0x6c>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4a18      	ldr	r2, [pc, #96]	; (800e980 <SAI_Disable+0x70>)
 800e91e:	fba2 2303 	umull	r2, r3, r2, r3
 800e922:	0b1b      	lsrs	r3, r3, #12
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e928:	2300      	movs	r3, #0
 800e92a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	681a      	ldr	r2, [r3, #0]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e93a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d10a      	bne.n	800e958 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e948:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800e952:	2303      	movs	r3, #3
 800e954:	72fb      	strb	r3, [r7, #11]
      break;
 800e956:	e009      	b.n	800e96c <SAI_Disable+0x5c>
    }
    count--;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	3b01      	subs	r3, #1
 800e95c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d1e7      	bne.n	800e93c <SAI_Disable+0x2c>

  return status;
 800e96c:	7afb      	ldrb	r3, [r7, #11]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3714      	adds	r7, #20
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr
 800e97a:	bf00      	nop
 800e97c:	24000000 	.word	0x24000000
 800e980:	95cbec1b 	.word	0x95cbec1b

0800e984 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e990:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e9a0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e9b2:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e9ba:	2b20      	cmp	r3, #32
 800e9bc:	d00a      	beq.n	800e9d4 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800e9be:	68f8      	ldr	r0, [r7, #12]
 800e9c0:	f7ff ffa6 	bl	800e910 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	685a      	ldr	r2, [r3, #4]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f042 0208 	orr.w	r2, r2, #8
 800e9d2:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800e9e4:	68f8      	ldr	r0, [r7, #12]
 800e9e6:	f7ff fe55 	bl	800e694 <HAL_SAI_ErrorCallback>
#endif
}
 800e9ea:	bf00      	nop
 800e9ec:	3710      	adds	r7, #16
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
	...

0800e9f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b08a      	sub	sp, #40	; 0x28
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d101      	bne.n	800ea06 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ea02:	2301      	movs	r3, #1
 800ea04:	e0cb      	b.n	800eb9e <HAL_SD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4a67      	ldr	r2, [pc, #412]	; (800eba8 <HAL_SD_Init+0x1b4>)
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d009      	beq.n	800ea24 <HAL_SD_Init+0x30>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a65      	ldr	r2, [pc, #404]	; (800ebac <HAL_SD_Init+0x1b8>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d004      	beq.n	800ea24 <HAL_SD_Init+0x30>
 800ea1a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ea1e:	4864      	ldr	r0, [pc, #400]	; (800ebb0 <HAL_SD_Init+0x1bc>)
 800ea20:	f7f3 f827 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d009      	beq.n	800ea40 <HAL_SD_Init+0x4c>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea34:	d004      	beq.n	800ea40 <HAL_SD_Init+0x4c>
 800ea36:	f240 1161 	movw	r1, #353	; 0x161
 800ea3a:	485d      	ldr	r0, [pc, #372]	; (800ebb0 <HAL_SD_Init+0x1bc>)
 800ea3c:	f7f3 f819 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	689b      	ldr	r3, [r3, #8]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d009      	beq.n	800ea5c <HAL_SD_Init+0x68>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	689b      	ldr	r3, [r3, #8]
 800ea4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea50:	d004      	beq.n	800ea5c <HAL_SD_Init+0x68>
 800ea52:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ea56:	4856      	ldr	r0, [pc, #344]	; (800ebb0 <HAL_SD_Init+0x1bc>)
 800ea58:	f7f3 f80b 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d00e      	beq.n	800ea82 <HAL_SD_Init+0x8e>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	68db      	ldr	r3, [r3, #12]
 800ea68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ea6c:	d009      	beq.n	800ea82 <HAL_SD_Init+0x8e>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	68db      	ldr	r3, [r3, #12]
 800ea72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea76:	d004      	beq.n	800ea82 <HAL_SD_Init+0x8e>
 800ea78:	f240 1163 	movw	r1, #355	; 0x163
 800ea7c:	484c      	ldr	r0, [pc, #304]	; (800ebb0 <HAL_SD_Init+0x1bc>)
 800ea7e:	f7f2 fff8 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	691b      	ldr	r3, [r3, #16]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d009      	beq.n	800ea9e <HAL_SD_Init+0xaa>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	691b      	ldr	r3, [r3, #16]
 800ea8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea92:	d004      	beq.n	800ea9e <HAL_SD_Init+0xaa>
 800ea94:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800ea98:	4845      	ldr	r0, [pc, #276]	; (800ebb0 <HAL_SD_Init+0x1bc>)
 800ea9a:	f7f2 ffea 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	695b      	ldr	r3, [r3, #20]
 800eaa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eaa6:	d304      	bcc.n	800eab2 <HAL_SD_Init+0xbe>
 800eaa8:	f240 1165 	movw	r1, #357	; 0x165
 800eaac:	4840      	ldr	r0, [pc, #256]	; (800ebb0 <HAL_SD_Init+0x1bc>)
 800eaae:	f7f2 ffe0 	bl	8001a72 <assert_failed>

  if (hsd->State == HAL_SD_STATE_RESET)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d105      	bne.n	800eaca <HAL_SD_Init+0xd6>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f7f3 fb41 	bl	800214c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2204      	movs	r2, #4
 800eace:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f000 f86e 	bl	800ebb4 <HAL_SD_InitCard>
 800ead8:	4603      	mov	r3, r0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d001      	beq.n	800eae2 <HAL_SD_Init+0xee>
  {
    return HAL_ERROR;
 800eade:	2301      	movs	r3, #1
 800eae0:	e05d      	b.n	800eb9e <HAL_SD_Init+0x1aa>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800eae2:	f107 0308 	add.w	r3, r7, #8
 800eae6:	4619      	mov	r1, r3
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f000 fde3 	bl	800f6b4 <HAL_SD_GetCardStatus>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d001      	beq.n	800eaf8 <HAL_SD_Init+0x104>
  {
    return HAL_ERROR;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	e052      	b.n	800eb9e <HAL_SD_Init+0x1aa>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800eaf8:	7e3b      	ldrb	r3, [r7, #24]
 800eafa:	b2db      	uxtb	r3, r3
 800eafc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800eafe:	7e7b      	ldrb	r3, [r7, #25]
 800eb00:	b2db      	uxtb	r3, r3
 800eb02:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb08:	2b01      	cmp	r3, #1
 800eb0a:	d10a      	bne.n	800eb22 <HAL_SD_Init+0x12e>
 800eb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d102      	bne.n	800eb18 <HAL_SD_Init+0x124>
 800eb12:	6a3b      	ldr	r3, [r7, #32]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d004      	beq.n	800eb22 <HAL_SD_Init+0x12e>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb1e:	659a      	str	r2, [r3, #88]	; 0x58
 800eb20:	e00b      	b.n	800eb3a <HAL_SD_Init+0x146>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d104      	bne.n	800eb34 <HAL_SD_Init+0x140>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eb30:	659a      	str	r2, [r3, #88]	; 0x58
 800eb32:	e002      	b.n	800eb3a <HAL_SD_Init+0x146>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2200      	movs	r2, #0
 800eb38:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	4619      	mov	r1, r3
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f000 fea1 	bl	800f888 <HAL_SD_ConfigWideBusOperation>
 800eb46:	4603      	mov	r3, r0
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d001      	beq.n	800eb50 <HAL_SD_Init+0x15c>
  {
    return HAL_ERROR;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	e026      	b.n	800eb9e <HAL_SD_Init+0x1aa>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800eb50:	f7f4 fd02 	bl	8003558 <HAL_GetTick>
 800eb54:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800eb56:	e011      	b.n	800eb7c <HAL_SD_Init+0x188>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eb58:	f7f4 fcfe 	bl	8003558 <HAL_GetTick>
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	69fb      	ldr	r3, [r7, #28]
 800eb60:	1ad3      	subs	r3, r2, r3
 800eb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb66:	d109      	bne.n	800eb7c <HAL_SD_Init+0x188>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eb6e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2201      	movs	r2, #1
 800eb74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800eb78:	2303      	movs	r3, #3
 800eb7a:	e010      	b.n	800eb9e <HAL_SD_Init+0x1aa>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 ffa7 	bl	800fad0 <HAL_SD_GetCardState>
 800eb82:	4603      	mov	r3, r0
 800eb84:	2b04      	cmp	r3, #4
 800eb86:	d1e7      	bne.n	800eb58 <HAL_SD_Init+0x164>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2200      	movs	r2, #0
 800eb92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2201      	movs	r2, #1
 800eb98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800eb9c:	2300      	movs	r3, #0
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3728      	adds	r7, #40	; 0x28
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	52007000 	.word	0x52007000
 800ebac:	48022400 	.word	0x48022400
 800ebb0:	0801de74 	.word	0x0801de74

0800ebb4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ebb4:	b590      	push	{r4, r7, lr}
 800ebb6:	b08d      	sub	sp, #52	; 0x34
 800ebb8:	af02      	add	r7, sp, #8
 800ebba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ebd0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ebd4:	f7fd fa2c 	bl	800c030 <HAL_RCCEx_GetPeriphCLKFreq>
 800ebd8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800ebda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d109      	bne.n	800ebf4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ebee:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	e06a      	b.n	800ecca <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800ebf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf6:	0a1b      	lsrs	r3, r3, #8
 800ebf8:	4a36      	ldr	r2, [pc, #216]	; (800ecd4 <HAL_SD_InitCard+0x120>)
 800ebfa:	fba2 2303 	umull	r2, r3, r2, r3
 800ebfe:	091b      	lsrs	r3, r3, #4
 800ec00:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681c      	ldr	r4, [r3, #0]
 800ec06:	466a      	mov	r2, sp
 800ec08:	f107 0318 	add.w	r3, r7, #24
 800ec0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ec10:	e882 0003 	stmia.w	r2, {r0, r1}
 800ec14:	f107 030c 	add.w	r3, r7, #12
 800ec18:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	f006 fe6c 	bl	80158f8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	4618      	mov	r0, r3
 800ec26:	f006 fef9 	bl	8015a1c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800ec2a:	69fb      	ldr	r3, [r7, #28]
 800ec2c:	005b      	lsls	r3, r3, #1
 800ec2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800ec36:	4a28      	ldr	r2, [pc, #160]	; (800ecd8 <HAL_SD_InitCard+0x124>)
 800ec38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec3e:	3301      	adds	r3, #1
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7f4 fc95 	bl	8003570 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f001 f830 	bl	800fcac <SD_PowerON>
 800ec4c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec4e:	6a3b      	ldr	r3, [r7, #32]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d00b      	beq.n	800ec6c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2201      	movs	r2, #1
 800ec58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec60:	6a3b      	ldr	r3, [r7, #32]
 800ec62:	431a      	orrs	r2, r3
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	e02e      	b.n	800ecca <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f000 ff4f 	bl	800fb10 <SD_InitCard>
 800ec72:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec74:	6a3b      	ldr	r3, [r7, #32]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d00b      	beq.n	800ec92 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec86:	6a3b      	ldr	r3, [r7, #32]
 800ec88:	431a      	orrs	r2, r3
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e01b      	b.n	800ecca <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f007 f826 	bl	8015cec <SDMMC_CmdBlockLength>
 800eca0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eca2:	6a3b      	ldr	r3, [r7, #32]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d00f      	beq.n	800ecc8 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	4a0b      	ldr	r2, [pc, #44]	; (800ecdc <HAL_SD_InitCard+0x128>)
 800ecae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecb4:	6a3b      	ldr	r3, [r7, #32]
 800ecb6:	431a      	orrs	r2, r3
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	e000      	b.n	800ecca <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 800ecc8:	2300      	movs	r3, #0
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	372c      	adds	r7, #44	; 0x2c
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd90      	pop	{r4, r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	014f8b59 	.word	0x014f8b59
 800ecd8:	00012110 	.word	0x00012110
 800ecdc:	1fe00fff 	.word	0x1fe00fff

0800ece0 <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if (hsd == NULL)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d101      	bne.n	800ecf2 <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	e020      	b.n	800ed34 <HAL_SD_DeInit+0x54>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	4a11      	ldr	r2, [pc, #68]	; (800ed3c <HAL_SD_DeInit+0x5c>)
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	d009      	beq.n	800ed10 <HAL_SD_DeInit+0x30>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4a0f      	ldr	r2, [pc, #60]	; (800ed40 <HAL_SD_DeInit+0x60>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d004      	beq.n	800ed10 <HAL_SD_DeInit+0x30>
 800ed06:	f240 2131 	movw	r1, #561	; 0x231
 800ed0a:	480e      	ldr	r0, [pc, #56]	; (800ed44 <HAL_SD_DeInit+0x64>)
 800ed0c:	f7f2 feb1 	bl	8001a72 <assert_failed>

  hsd->State = HAL_SD_STATE_BUSY;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2203      	movs	r2, #3
 800ed14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }
#endif /* USE_SD_TRANSCEIVER   */

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f001 f855 	bl	800fdc8 <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f7f3 fa98 	bl	8002254 <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2200      	movs	r2, #0
 800ed28:	635a      	str	r2, [r3, #52]	; 0x34
  hsd->State = HAL_SD_STATE_RESET;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800ed32:	2300      	movs	r3, #0
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3708      	adds	r7, #8
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	52007000 	.word	0x52007000
 800ed40:	48022400 	.word	0x48022400
 800ed44:	0801de74 	.word	0x0801de74

0800ed48 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b08c      	sub	sp, #48	; 0x30
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	60f8      	str	r0, [r7, #12]
 800ed50:	60b9      	str	r1, [r7, #8]
 800ed52:	607a      	str	r2, [r7, #4]
 800ed54:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d107      	bne.n	800ed70 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	e08d      	b.n	800ee8c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	f040 8086 	bne.w	800ee8a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	2200      	movs	r2, #0
 800ed82:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ed84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	441a      	add	r2, r3
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d907      	bls.n	800eda2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ed9e:	2301      	movs	r3, #1
 800eda0:	e074      	b.n	800ee8c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2203      	movs	r2, #3
 800eda6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2200      	movs	r2, #0
 800edb0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	68ba      	ldr	r2, [r7, #8]
 800edb6:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	025a      	lsls	r2, r3, #9
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	d002      	beq.n	800edce <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800edc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edca:	025b      	lsls	r3, r3, #9
 800edcc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800edce:	f04f 33ff 	mov.w	r3, #4294967295
 800edd2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	025b      	lsls	r3, r3, #9
 800edd8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800edda:	2390      	movs	r3, #144	; 0x90
 800eddc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800edde:	2302      	movs	r3, #2
 800ede0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ede2:	2300      	movs	r3, #0
 800ede4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ede6:	2300      	movs	r3, #0
 800ede8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	f107 0210 	add.w	r2, r7, #16
 800edf2:	4611      	mov	r1, r2
 800edf4:	4618      	mov	r0, r3
 800edf6:	f006 fedb 	bl	8015bb0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	68da      	ldr	r2, [r3, #12]
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ee08:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	68ba      	ldr	r2, [r7, #8]
 800ee10:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	2201      	movs	r2, #1
 800ee18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d90a      	bls.n	800ee36 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2282      	movs	r2, #130	; 0x82
 800ee24:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f006 ffa3 	bl	8015d78 <SDMMC_CmdReadMultiBlock>
 800ee32:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ee34:	e009      	b.n	800ee4a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2281      	movs	r2, #129	; 0x81
 800ee3a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee42:	4618      	mov	r0, r3
 800ee44:	f006 ff75 	bl	8015d32 <SDMMC_CmdReadSingleBlock>
 800ee48:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800ee4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d012      	beq.n	800ee76 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	4a0f      	ldr	r2, [pc, #60]	; (800ee94 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800ee56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee5e:	431a      	orrs	r2, r3
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2201      	movs	r2, #1
 800ee68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800ee72:	2301      	movs	r3, #1
 800ee74:	e00a      	b.n	800ee8c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ee84:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800ee86:	2300      	movs	r3, #0
 800ee88:	e000      	b.n	800ee8c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800ee8a:	2302      	movs	r3, #2
  }
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3730      	adds	r7, #48	; 0x30
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}
 800ee94:	1fe00fff 	.word	0x1fe00fff

0800ee98 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b08c      	sub	sp, #48	; 0x30
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	60b9      	str	r1, [r7, #8]
 800eea2:	607a      	str	r2, [r7, #4]
 800eea4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d107      	bne.n	800eec0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeb4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800eebc:	2301      	movs	r3, #1
 800eebe:	e08d      	b.n	800efdc <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	f040 8086 	bne.w	800efda <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2200      	movs	r2, #0
 800eed2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800eed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	441a      	add	r2, r3
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eede:	429a      	cmp	r2, r3
 800eee0:	d907      	bls.n	800eef2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eee6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800eeee:	2301      	movs	r3, #1
 800eef0:	e074      	b.n	800efdc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2203      	movs	r2, #3
 800eef6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	2200      	movs	r2, #0
 800ef00:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	68ba      	ldr	r2, [r7, #8]
 800ef06:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	025a      	lsls	r2, r3, #9
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d002      	beq.n	800ef1e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800ef18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1a:	025b      	lsls	r3, r3, #9
 800ef1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ef1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef22:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	025b      	lsls	r3, r3, #9
 800ef28:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ef2a:	2390      	movs	r3, #144	; 0x90
 800ef2c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ef32:	2300      	movs	r3, #0
 800ef34:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ef36:	2300      	movs	r3, #0
 800ef38:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f107 0210 	add.w	r2, r7, #16
 800ef42:	4611      	mov	r1, r2
 800ef44:	4618      	mov	r0, r3
 800ef46:	f006 fe33 	bl	8015bb0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	68da      	ldr	r2, [r3, #12]
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef58:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	68ba      	ldr	r2, [r7, #8]
 800ef60:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	2201      	movs	r2, #1
 800ef68:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d90a      	bls.n	800ef86 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	22a0      	movs	r2, #160	; 0xa0
 800ef74:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f006 ff41 	bl	8015e04 <SDMMC_CmdWriteMultiBlock>
 800ef82:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ef84:	e009      	b.n	800ef9a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	2290      	movs	r2, #144	; 0x90
 800ef8a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef92:	4618      	mov	r0, r3
 800ef94:	f006 ff13 	bl	8015dbe <SDMMC_CmdWriteSingleBlock>
 800ef98:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800ef9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d012      	beq.n	800efc6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4a0f      	ldr	r2, [pc, #60]	; (800efe4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800efa6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800efac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efae:	431a      	orrs	r2, r3
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2201      	movs	r2, #1
 800efb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2200      	movs	r2, #0
 800efc0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800efc2:	2301      	movs	r3, #1
 800efc4:	e00a      	b.n	800efdc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800efd4:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800efd6:	2300      	movs	r3, #0
 800efd8:	e000      	b.n	800efdc <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800efda:	2302      	movs	r3, #2
  }
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3730      	adds	r7, #48	; 0x30
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	1fe00fff 	.word	0x1fe00fff

0800efe8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eff4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800effc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f000:	2b00      	cmp	r3, #0
 800f002:	d008      	beq.n	800f016 <HAL_SD_IRQHandler+0x2e>
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	f003 0308 	and.w	r3, r3, #8
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d003      	beq.n	800f016 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f001 f946 	bl	80102a0 <SD_Read_IT>
 800f014:	e19a      	b.n	800f34c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f01c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f020:	2b00      	cmp	r3, #0
 800f022:	f000 80ac 	beq.w	800f17e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f02e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	4b59      	ldr	r3, [pc, #356]	; (800f1a0 <HAL_SD_IRQHandler+0x1b8>)
 800f03c:	400b      	ands	r3, r1
 800f03e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f04e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	68da      	ldr	r2, [r3, #12]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f05e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f003 0308 	and.w	r3, r3, #8
 800f066:	2b00      	cmp	r3, #0
 800f068:	d038      	beq.n	800f0dc <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f003 0302 	and.w	r3, r3, #2
 800f070:	2b00      	cmp	r3, #0
 800f072:	d104      	bne.n	800f07e <HAL_SD_IRQHandler+0x96>
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f003 0320 	and.w	r3, r3, #32
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d011      	beq.n	800f0a2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	4618      	mov	r0, r3
 800f084:	f006 fee2 	bl	8015e4c <SDMMC_CmdStopTransfer>
 800f088:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d008      	beq.n	800f0a2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	431a      	orrs	r2, r3
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f000 f95b 	bl	800f358 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	4a3f      	ldr	r2, [pc, #252]	; (800f1a4 <HAL_SD_IRQHandler+0x1bc>)
 800f0a8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f003 0301 	and.w	r3, r3, #1
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d104      	bne.n	800f0cc <HAL_SD_IRQHandler+0xe4>
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f003 0302 	and.w	r3, r3, #2
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d003      	beq.n	800f0d4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f007 fe99 	bl	8016e04 <HAL_SD_RxCpltCallback>
 800f0d2:	e13b      	b.n	800f34c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f007 fe8b 	bl	8016df0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800f0da:	e137      	b.n	800f34c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	f000 8132 	beq.w	800f34c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f003 0302 	and.w	r3, r3, #2
 800f106:	2b00      	cmp	r3, #0
 800f108:	d104      	bne.n	800f114 <HAL_SD_IRQHandler+0x12c>
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f003 0320 	and.w	r3, r3, #32
 800f110:	2b00      	cmp	r3, #0
 800f112:	d011      	beq.n	800f138 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4618      	mov	r0, r3
 800f11a:	f006 fe97 	bl	8015e4c <SDMMC_CmdStopTransfer>
 800f11e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d008      	beq.n	800f138 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	431a      	orrs	r2, r3
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f000 f910 	bl	800f358 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2201      	movs	r2, #1
 800f13c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2200      	movs	r2, #0
 800f144:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f003 0310 	and.w	r3, r3, #16
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d104      	bne.n	800f15a <HAL_SD_IRQHandler+0x172>
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f003 0320 	and.w	r3, r3, #32
 800f156:	2b00      	cmp	r3, #0
 800f158:	d002      	beq.n	800f160 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f007 fe48 	bl	8016df0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f003 0301 	and.w	r3, r3, #1
 800f166:	2b00      	cmp	r3, #0
 800f168:	d105      	bne.n	800f176 <HAL_SD_IRQHandler+0x18e>
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f003 0302 	and.w	r3, r3, #2
 800f170:	2b00      	cmp	r3, #0
 800f172:	f000 80eb 	beq.w	800f34c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f007 fe44 	bl	8016e04 <HAL_SD_RxCpltCallback>
}
 800f17c:	e0e6      	b.n	800f34c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d00d      	beq.n	800f1a8 <HAL_SD_IRQHandler+0x1c0>
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	f003 0308 	and.w	r3, r3, #8
 800f192:	2b00      	cmp	r3, #0
 800f194:	d008      	beq.n	800f1a8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f001 f8c8 	bl	801032c <SD_Write_IT>
 800f19c:	e0d6      	b.n	800f34c <HAL_SD_IRQHandler+0x364>
 800f19e:	bf00      	nop
 800f1a0:	ffff3ec5 	.word	0xffff3ec5
 800f1a4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1ae:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	f000 809d 	beq.w	800f2f2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1be:	f003 0302 	and.w	r3, r3, #2
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d005      	beq.n	800f1d2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1ca:	f043 0202 	orr.w	r2, r3, #2
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1d8:	f003 0308 	and.w	r3, r3, #8
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d005      	beq.n	800f1ec <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1e4:	f043 0208 	orr.w	r2, r3, #8
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1f2:	f003 0320 	and.w	r3, r3, #32
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d005      	beq.n	800f206 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1fe:	f043 0220 	orr.w	r2, r3, #32
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f20c:	f003 0310 	and.w	r3, r3, #16
 800f210:	2b00      	cmp	r3, #0
 800f212:	d005      	beq.n	800f220 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f218:	f043 0210 	orr.w	r2, r3, #16
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	4a4b      	ldr	r2, [pc, #300]	; (800f354 <HAL_SD_IRQHandler+0x36c>)
 800f226:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800f236:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	68da      	ldr	r2, [r3, #12]
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f246:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f256:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	68da      	ldr	r2, [r3, #12]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f266:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	4618      	mov	r0, r3
 800f26e:	f006 fded 	bl	8015e4c <SDMMC_CmdStopTransfer>
 800f272:	4602      	mov	r2, r0
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f278:	431a      	orrs	r2, r3
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	68da      	ldr	r2, [r3, #12]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f28c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f296:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f003 0308 	and.w	r3, r3, #8
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d00a      	beq.n	800f2b8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f000 f851 	bl	800f358 <HAL_SD_ErrorCallback>
}
 800f2b6:	e049      	b.n	800f34c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d044      	beq.n	800f34c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d040      	beq.n	800f34c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f2d8:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 f834 	bl	800f358 <HAL_SD_ErrorCallback>
}
 800f2f0:	e02c      	b.n	800f34c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d025      	beq.n	800f34c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f308:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f310:	f003 0304 	and.w	r3, r3, #4
 800f314:	2b00      	cmp	r3, #0
 800f316:	d10c      	bne.n	800f332 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	f003 0320 	and.w	r3, r3, #32
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d003      	beq.n	800f32a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f001 f86a 	bl	80103fc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800f328:	e010      	b.n	800f34c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f001 f852 	bl	80103d4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800f330:	e00c      	b.n	800f34c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	f003 0320 	and.w	r3, r3, #32
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d003      	beq.n	800f344 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f001 f853 	bl	80103e8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800f342:	e003      	b.n	800f34c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f001 f83b 	bl	80103c0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800f34a:	e7ff      	b.n	800f34c <HAL_SD_IRQHandler+0x364>
 800f34c:	bf00      	nop
 800f34e:	3710      	adds	r7, #16
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	18000f3a 	.word	0x18000f3a

0800f358 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800f358:	b480      	push	{r7}
 800f35a:	b083      	sub	sp, #12
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800f360:	bf00      	nop
 800f362:	370c      	adds	r7, #12
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr

0800f36c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f37a:	0f9b      	lsrs	r3, r3, #30
 800f37c:	b2da      	uxtb	r2, r3
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f386:	0e9b      	lsrs	r3, r3, #26
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	f003 030f 	and.w	r3, r3, #15
 800f38e:	b2da      	uxtb	r2, r3
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f398:	0e1b      	lsrs	r3, r3, #24
 800f39a:	b2db      	uxtb	r3, r3
 800f39c:	f003 0303 	and.w	r3, r3, #3
 800f3a0:	b2da      	uxtb	r2, r3
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3aa:	0c1b      	lsrs	r3, r3, #16
 800f3ac:	b2da      	uxtb	r2, r3
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3b6:	0a1b      	lsrs	r3, r3, #8
 800f3b8:	b2da      	uxtb	r2, r3
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3c2:	b2da      	uxtb	r2, r3
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f3cc:	0d1b      	lsrs	r3, r3, #20
 800f3ce:	b29a      	uxth	r2, r3
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f3d8:	0c1b      	lsrs	r3, r3, #16
 800f3da:	b2db      	uxtb	r3, r3
 800f3dc:	f003 030f 	and.w	r3, r3, #15
 800f3e0:	b2da      	uxtb	r2, r3
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f3ea:	0bdb      	lsrs	r3, r3, #15
 800f3ec:	b2db      	uxtb	r3, r3
 800f3ee:	f003 0301 	and.w	r3, r3, #1
 800f3f2:	b2da      	uxtb	r2, r3
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f3fc:	0b9b      	lsrs	r3, r3, #14
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	f003 0301 	and.w	r3, r3, #1
 800f404:	b2da      	uxtb	r2, r3
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f40e:	0b5b      	lsrs	r3, r3, #13
 800f410:	b2db      	uxtb	r3, r3
 800f412:	f003 0301 	and.w	r3, r3, #1
 800f416:	b2da      	uxtb	r2, r3
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f420:	0b1b      	lsrs	r3, r3, #12
 800f422:	b2db      	uxtb	r3, r3
 800f424:	f003 0301 	and.w	r3, r3, #1
 800f428:	b2da      	uxtb	r2, r3
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	2200      	movs	r2, #0
 800f432:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d163      	bne.n	800f504 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f440:	009a      	lsls	r2, r3, #2
 800f442:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f446:	4013      	ands	r3, r2
 800f448:	687a      	ldr	r2, [r7, #4]
 800f44a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800f44c:	0f92      	lsrs	r2, r2, #30
 800f44e:	431a      	orrs	r2, r3
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f458:	0edb      	lsrs	r3, r3, #27
 800f45a:	b2db      	uxtb	r3, r3
 800f45c:	f003 0307 	and.w	r3, r3, #7
 800f460:	b2da      	uxtb	r2, r3
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f46a:	0e1b      	lsrs	r3, r3, #24
 800f46c:	b2db      	uxtb	r3, r3
 800f46e:	f003 0307 	and.w	r3, r3, #7
 800f472:	b2da      	uxtb	r2, r3
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f47c:	0d5b      	lsrs	r3, r3, #21
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	f003 0307 	and.w	r3, r3, #7
 800f484:	b2da      	uxtb	r2, r3
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f48e:	0c9b      	lsrs	r3, r3, #18
 800f490:	b2db      	uxtb	r3, r3
 800f492:	f003 0307 	and.w	r3, r3, #7
 800f496:	b2da      	uxtb	r2, r3
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f4a0:	0bdb      	lsrs	r3, r3, #15
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	f003 0307 	and.w	r3, r3, #7
 800f4a8:	b2da      	uxtb	r2, r3
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	691b      	ldr	r3, [r3, #16]
 800f4b2:	1c5a      	adds	r2, r3, #1
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	7e1b      	ldrb	r3, [r3, #24]
 800f4bc:	b2db      	uxtb	r3, r3
 800f4be:	f003 0307 	and.w	r3, r3, #7
 800f4c2:	3302      	adds	r3, #2
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	fa02 f303 	lsl.w	r3, r2, r3
 800f4ca:	687a      	ldr	r2, [r7, #4]
 800f4cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f4ce:	fb03 f202 	mul.w	r2, r3, r2
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	7a1b      	ldrb	r3, [r3, #8]
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	f003 030f 	and.w	r3, r3, #15
 800f4e0:	2201      	movs	r2, #1
 800f4e2:	409a      	lsls	r2, r3
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800f4f0:	0a52      	lsrs	r2, r2, #9
 800f4f2:	fb03 f202 	mul.w	r2, r3, r2
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f500:	655a      	str	r2, [r3, #84]	; 0x54
 800f502:	e031      	b.n	800f568 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d11d      	bne.n	800f548 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f510:	041b      	lsls	r3, r3, #16
 800f512:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f51a:	0c1b      	lsrs	r3, r3, #16
 800f51c:	431a      	orrs	r2, r3
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	3301      	adds	r3, #1
 800f528:	029a      	lsls	r2, r3, #10
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f53c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	655a      	str	r2, [r3, #84]	; 0x54
 800f546:	e00f      	b.n	800f568 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	4a58      	ldr	r2, [pc, #352]	; (800f6b0 <HAL_SD_GetCardCSD+0x344>)
 800f54e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f554:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2201      	movs	r2, #1
 800f560:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800f564:	2301      	movs	r3, #1
 800f566:	e09d      	b.n	800f6a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f56c:	0b9b      	lsrs	r3, r3, #14
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	f003 0301 	and.w	r3, r3, #1
 800f574:	b2da      	uxtb	r2, r3
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f57e:	09db      	lsrs	r3, r3, #7
 800f580:	b2db      	uxtb	r3, r3
 800f582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f586:	b2da      	uxtb	r2, r3
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f590:	b2db      	uxtb	r3, r3
 800f592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f596:	b2da      	uxtb	r2, r3
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5a0:	0fdb      	lsrs	r3, r3, #31
 800f5a2:	b2da      	uxtb	r2, r3
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5ac:	0f5b      	lsrs	r3, r3, #29
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	f003 0303 	and.w	r3, r3, #3
 800f5b4:	b2da      	uxtb	r2, r3
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5be:	0e9b      	lsrs	r3, r3, #26
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	f003 0307 	and.w	r3, r3, #7
 800f5c6:	b2da      	uxtb	r2, r3
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5d0:	0d9b      	lsrs	r3, r3, #22
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	f003 030f 	and.w	r3, r3, #15
 800f5d8:	b2da      	uxtb	r2, r3
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5e2:	0d5b      	lsrs	r3, r3, #21
 800f5e4:	b2db      	uxtb	r3, r3
 800f5e6:	f003 0301 	and.w	r3, r3, #1
 800f5ea:	b2da      	uxtb	r2, r3
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5fe:	0c1b      	lsrs	r3, r3, #16
 800f600:	b2db      	uxtb	r3, r3
 800f602:	f003 0301 	and.w	r3, r3, #1
 800f606:	b2da      	uxtb	r2, r3
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f612:	0bdb      	lsrs	r3, r3, #15
 800f614:	b2db      	uxtb	r3, r3
 800f616:	f003 0301 	and.w	r3, r3, #1
 800f61a:	b2da      	uxtb	r2, r3
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f626:	0b9b      	lsrs	r3, r3, #14
 800f628:	b2db      	uxtb	r3, r3
 800f62a:	f003 0301 	and.w	r3, r3, #1
 800f62e:	b2da      	uxtb	r2, r3
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f63a:	0b5b      	lsrs	r3, r3, #13
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	f003 0301 	and.w	r3, r3, #1
 800f642:	b2da      	uxtb	r2, r3
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f64e:	0b1b      	lsrs	r3, r3, #12
 800f650:	b2db      	uxtb	r3, r3
 800f652:	f003 0301 	and.w	r3, r3, #1
 800f656:	b2da      	uxtb	r2, r3
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f662:	0a9b      	lsrs	r3, r3, #10
 800f664:	b2db      	uxtb	r3, r3
 800f666:	f003 0303 	and.w	r3, r3, #3
 800f66a:	b2da      	uxtb	r2, r3
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f676:	0a1b      	lsrs	r3, r3, #8
 800f678:	b2db      	uxtb	r3, r3
 800f67a:	f003 0303 	and.w	r3, r3, #3
 800f67e:	b2da      	uxtb	r2, r3
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f68a:	085b      	lsrs	r3, r3, #1
 800f68c:	b2db      	uxtb	r3, r3
 800f68e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f692:	b2da      	uxtb	r2, r3
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	2201      	movs	r2, #1
 800f69e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800f6a2:	2300      	movs	r3, #0
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	370c      	adds	r7, #12
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr
 800f6b0:	1fe00fff 	.word	0x1fe00fff

0800f6b4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b094      	sub	sp, #80	; 0x50
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f6ca:	b2db      	uxtb	r3, r3
 800f6cc:	2b03      	cmp	r3, #3
 800f6ce:	d101      	bne.n	800f6d4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	e0a7      	b.n	800f824 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800f6d4:	f107 0308 	add.w	r3, r7, #8
 800f6d8:	4619      	mov	r1, r3
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f000 fb82 	bl	800fde4 <SD_SendSDStatus>
 800f6e0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800f6e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d011      	beq.n	800f70c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	4a4f      	ldr	r2, [pc, #316]	; (800f82c <HAL_SD_GetCardStatus+0x178>)
 800f6ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f6f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6f6:	431a      	orrs	r2, r3
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2201      	movs	r2, #1
 800f700:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800f704:	2301      	movs	r3, #1
 800f706:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f70a:	e070      	b.n	800f7ee <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	099b      	lsrs	r3, r3, #6
 800f710:	b2db      	uxtb	r3, r3
 800f712:	f003 0303 	and.w	r3, r3, #3
 800f716:	b2da      	uxtb	r2, r3
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	095b      	lsrs	r3, r3, #5
 800f720:	b2db      	uxtb	r3, r3
 800f722:	f003 0301 	and.w	r3, r3, #1
 800f726:	b2da      	uxtb	r2, r3
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	0a1b      	lsrs	r3, r3, #8
 800f730:	b29b      	uxth	r3, r3
 800f732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f736:	b29a      	uxth	r2, r3
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	0e1b      	lsrs	r3, r3, #24
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	4313      	orrs	r3, r2
 800f740:	b29a      	uxth	r2, r3
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	061a      	lsls	r2, r3, #24
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	021b      	lsls	r3, r3, #8
 800f74e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f752:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	0a1b      	lsrs	r3, r3, #8
 800f758:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800f75c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	0e1b      	lsrs	r3, r3, #24
 800f762:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	b2da      	uxtb	r2, r3
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	0a1b      	lsrs	r3, r3, #8
 800f774:	b2da      	uxtb	r2, r3
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	0d1b      	lsrs	r3, r3, #20
 800f77e:	b2db      	uxtb	r3, r3
 800f780:	f003 030f 	and.w	r3, r3, #15
 800f784:	b2da      	uxtb	r2, r3
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	0c1b      	lsrs	r3, r3, #16
 800f78e:	b29b      	uxth	r3, r3
 800f790:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f794:	b29a      	uxth	r2, r3
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	b29b      	uxth	r3, r3
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	4313      	orrs	r3, r2
 800f7a0:	b29a      	uxth	r2, r3
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	0a9b      	lsrs	r3, r3, #10
 800f7aa:	b2db      	uxtb	r3, r3
 800f7ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f7b0:	b2da      	uxtb	r2, r3
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	0a1b      	lsrs	r3, r3, #8
 800f7ba:	b2db      	uxtb	r3, r3
 800f7bc:	f003 0303 	and.w	r3, r3, #3
 800f7c0:	b2da      	uxtb	r2, r3
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	091b      	lsrs	r3, r3, #4
 800f7ca:	b2db      	uxtb	r3, r3
 800f7cc:	f003 030f 	and.w	r3, r3, #15
 800f7d0:	b2da      	uxtb	r2, r3
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	f003 030f 	and.w	r3, r3, #15
 800f7de:	b2da      	uxtb	r2, r3
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800f7e4:	69bb      	ldr	r3, [r7, #24]
 800f7e6:	0e1b      	lsrs	r3, r3, #24
 800f7e8:	b2da      	uxtb	r2, r3
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f006 fa78 	bl	8015cec <SDMMC_CmdBlockLength>
 800f7fc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800f7fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00d      	beq.n	800f820 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	4a08      	ldr	r2, [pc, #32]	; (800f82c <HAL_SD_GetCardStatus+0x178>)
 800f80a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f810:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2201      	movs	r2, #1
 800f816:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800f81a:	2301      	movs	r3, #1
 800f81c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800f820:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800f824:	4618      	mov	r0, r3
 800f826:	3750      	adds	r7, #80	; 0x50
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	1fe00fff 	.word	0x1fe00fff

0800f830 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800f830:	b480      	push	{r7}
 800f832:	b083      	sub	sp, #12
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800f87a:	2300      	movs	r3, #0
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	370c      	adds	r7, #12
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr

0800f888 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800f888:	b590      	push	{r4, r7, lr}
 800f88a:	b08d      	sub	sp, #52	; 0x34
 800f88c:	af02      	add	r7, sp, #8
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800f892:	2300      	movs	r3, #0
 800f894:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800f896:	2300      	movs	r3, #0
 800f898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d00c      	beq.n	800f8bc <HAL_SD_ConfigWideBusOperation+0x34>
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8a8:	d008      	beq.n	800f8bc <HAL_SD_ConfigWideBusOperation+0x34>
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8b0:	d004      	beq.n	800f8bc <HAL_SD_ConfigWideBusOperation+0x34>
 800f8b2:	f640 1167 	movw	r1, #2407	; 0x967
 800f8b6:	4881      	ldr	r0, [pc, #516]	; (800fabc <HAL_SD_ConfigWideBusOperation+0x234>)
 800f8b8:	f7f2 f8db 	bl	8001a72 <assert_failed>

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2203      	movs	r2, #3
 800f8c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8c8:	2b03      	cmp	r3, #3
 800f8ca:	d02e      	beq.n	800f92a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8d2:	d106      	bne.n	800f8e2 <HAL_SD_ConfigWideBusOperation+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	635a      	str	r2, [r3, #52]	; 0x34
 800f8e0:	e029      	b.n	800f936 <HAL_SD_ConfigWideBusOperation+0xae>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8e8:	d10a      	bne.n	800f900 <HAL_SD_ConfigWideBusOperation+0x78>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f000 fb72 	bl	800ffd4 <SD_WideBus_Enable>
 800f8f0:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	431a      	orrs	r2, r3
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	635a      	str	r2, [r3, #52]	; 0x34
 800f8fe:	e01a      	b.n	800f936 <HAL_SD_ConfigWideBusOperation+0xae>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d10a      	bne.n	800f91c <HAL_SD_ConfigWideBusOperation+0x94>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f000 fbaf 	bl	801006a <SD_WideBus_Disable>
 800f90c:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	431a      	orrs	r2, r3
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	635a      	str	r2, [r3, #52]	; 0x34
 800f91a:	e00c      	b.n	800f936 <HAL_SD_ConfigWideBusOperation+0xae>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f920:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	635a      	str	r2, [r3, #52]	; 0x34
 800f928:	e005      	b.n	800f936 <HAL_SD_ConfigWideBusOperation+0xae>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f92e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d007      	beq.n	800f94e <HAL_SD_ConfigWideBusOperation+0xc6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	4a5f      	ldr	r2, [pc, #380]	; (800fac0 <HAL_SD_ConfigWideBusOperation+0x238>)
 800f944:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800f946:	2301      	movs	r3, #1
 800f948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f94c:	e094      	b.n	800fa78 <HAL_SD_ConfigWideBusOperation+0x1f0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800f94e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800f952:	f7fc fb6d 	bl	800c030 <HAL_RCCEx_GetPeriphCLKFreq>
 800f956:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800f958:	6a3b      	ldr	r3, [r7, #32]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	f000 8083 	beq.w	800fa66 <HAL_SD_ConfigWideBusOperation+0x1de>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	689b      	ldr	r3, [r3, #8]
 800f96a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	691b      	ldr	r3, [r3, #16]
 800f974:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	695a      	ldr	r2, [r3, #20]
 800f97a:	6a3b      	ldr	r3, [r7, #32]
 800f97c:	4951      	ldr	r1, [pc, #324]	; (800fac4 <HAL_SD_ConfigWideBusOperation+0x23c>)
 800f97e:	fba1 1303 	umull	r1, r3, r1, r3
 800f982:	0e1b      	lsrs	r3, r3, #24
 800f984:	429a      	cmp	r2, r3
 800f986:	d303      	bcc.n	800f990 <HAL_SD_ConfigWideBusOperation+0x108>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	695b      	ldr	r3, [r3, #20]
 800f98c:	61bb      	str	r3, [r7, #24]
 800f98e:	e05a      	b.n	800fa46 <HAL_SD_ConfigWideBusOperation+0x1be>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f998:	d103      	bne.n	800f9a2 <HAL_SD_ConfigWideBusOperation+0x11a>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	695b      	ldr	r3, [r3, #20]
 800f99e:	61bb      	str	r3, [r7, #24]
 800f9a0:	e051      	b.n	800fa46 <HAL_SD_ConfigWideBusOperation+0x1be>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9aa:	d126      	bne.n	800f9fa <HAL_SD_ConfigWideBusOperation+0x172>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	695b      	ldr	r3, [r3, #20]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d10e      	bne.n	800f9d2 <HAL_SD_ConfigWideBusOperation+0x14a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800f9b4:	6a3b      	ldr	r3, [r7, #32]
 800f9b6:	4a44      	ldr	r2, [pc, #272]	; (800fac8 <HAL_SD_ConfigWideBusOperation+0x240>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d906      	bls.n	800f9ca <HAL_SD_ConfigWideBusOperation+0x142>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800f9bc:	6a3b      	ldr	r3, [r7, #32]
 800f9be:	4a41      	ldr	r2, [pc, #260]	; (800fac4 <HAL_SD_ConfigWideBusOperation+0x23c>)
 800f9c0:	fba2 2303 	umull	r2, r3, r2, r3
 800f9c4:	0e5b      	lsrs	r3, r3, #25
 800f9c6:	61bb      	str	r3, [r7, #24]
 800f9c8:	e03d      	b.n	800fa46 <HAL_SD_ConfigWideBusOperation+0x1be>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	695b      	ldr	r3, [r3, #20]
 800f9ce:	61bb      	str	r3, [r7, #24]
 800f9d0:	e039      	b.n	800fa46 <HAL_SD_ConfigWideBusOperation+0x1be>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	695b      	ldr	r3, [r3, #20]
 800f9d6:	005b      	lsls	r3, r3, #1
 800f9d8:	6a3a      	ldr	r2, [r7, #32]
 800f9da:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9de:	4a3a      	ldr	r2, [pc, #232]	; (800fac8 <HAL_SD_ConfigWideBusOperation+0x240>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d906      	bls.n	800f9f2 <HAL_SD_ConfigWideBusOperation+0x16a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800f9e4:	6a3b      	ldr	r3, [r7, #32]
 800f9e6:	4a37      	ldr	r2, [pc, #220]	; (800fac4 <HAL_SD_ConfigWideBusOperation+0x23c>)
 800f9e8:	fba2 2303 	umull	r2, r3, r2, r3
 800f9ec:	0e5b      	lsrs	r3, r3, #25
 800f9ee:	61bb      	str	r3, [r7, #24]
 800f9f0:	e029      	b.n	800fa46 <HAL_SD_ConfigWideBusOperation+0x1be>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	695b      	ldr	r3, [r3, #20]
 800f9f6:	61bb      	str	r3, [r7, #24]
 800f9f8:	e025      	b.n	800fa46 <HAL_SD_ConfigWideBusOperation+0x1be>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	695b      	ldr	r3, [r3, #20]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d10e      	bne.n	800fa20 <HAL_SD_ConfigWideBusOperation+0x198>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800fa02:	6a3b      	ldr	r3, [r7, #32]
 800fa04:	4a31      	ldr	r2, [pc, #196]	; (800facc <HAL_SD_ConfigWideBusOperation+0x244>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d906      	bls.n	800fa18 <HAL_SD_ConfigWideBusOperation+0x190>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800fa0a:	6a3b      	ldr	r3, [r7, #32]
 800fa0c:	4a2d      	ldr	r2, [pc, #180]	; (800fac4 <HAL_SD_ConfigWideBusOperation+0x23c>)
 800fa0e:	fba2 2303 	umull	r2, r3, r2, r3
 800fa12:	0e1b      	lsrs	r3, r3, #24
 800fa14:	61bb      	str	r3, [r7, #24]
 800fa16:	e016      	b.n	800fa46 <HAL_SD_ConfigWideBusOperation+0x1be>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	695b      	ldr	r3, [r3, #20]
 800fa1c:	61bb      	str	r3, [r7, #24]
 800fa1e:	e012      	b.n	800fa46 <HAL_SD_ConfigWideBusOperation+0x1be>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	695b      	ldr	r3, [r3, #20]
 800fa24:	005b      	lsls	r3, r3, #1
 800fa26:	6a3a      	ldr	r2, [r7, #32]
 800fa28:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa2c:	4a27      	ldr	r2, [pc, #156]	; (800facc <HAL_SD_ConfigWideBusOperation+0x244>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d906      	bls.n	800fa40 <HAL_SD_ConfigWideBusOperation+0x1b8>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800fa32:	6a3b      	ldr	r3, [r7, #32]
 800fa34:	4a23      	ldr	r2, [pc, #140]	; (800fac4 <HAL_SD_ConfigWideBusOperation+0x23c>)
 800fa36:	fba2 2303 	umull	r2, r3, r2, r3
 800fa3a:	0e1b      	lsrs	r3, r3, #24
 800fa3c:	61bb      	str	r3, [r7, #24]
 800fa3e:	e002      	b.n	800fa46 <HAL_SD_ConfigWideBusOperation+0x1be>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	695b      	ldr	r3, [r3, #20]
 800fa44:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681c      	ldr	r4, [r3, #0]
 800fa4a:	466a      	mov	r2, sp
 800fa4c:	f107 0314 	add.w	r3, r7, #20
 800fa50:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fa54:	e882 0003 	stmia.w	r2, {r0, r1}
 800fa58:	f107 0308 	add.w	r3, r7, #8
 800fa5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f005 ff4a 	bl	80158f8 <SDMMC_Init>
 800fa64:	e008      	b.n	800fa78 <HAL_SD_ConfigWideBusOperation+0x1f0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800fa72:	2301      	movs	r3, #1
 800fa74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fa80:	4618      	mov	r0, r3
 800fa82:	f006 f933 	bl	8015cec <SDMMC_CmdBlockLength>
 800fa86:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800fa88:	69fb      	ldr	r3, [r7, #28]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d00c      	beq.n	800faa8 <HAL_SD_ConfigWideBusOperation+0x220>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	4a0b      	ldr	r2, [pc, #44]	; (800fac0 <HAL_SD_ConfigWideBusOperation+0x238>)
 800fa94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	431a      	orrs	r2, r3
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800faa2:	2301      	movs	r3, #1
 800faa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2201      	movs	r2, #1
 800faac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800fab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	372c      	adds	r7, #44	; 0x2c
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd90      	pop	{r4, r7, pc}
 800fabc:	0801de74 	.word	0x0801de74
 800fac0:	1fe00fff 	.word	0x1fe00fff
 800fac4:	55e63b89 	.word	0x55e63b89
 800fac8:	02faf080 	.word	0x02faf080
 800facc:	017d7840 	.word	0x017d7840

0800fad0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b086      	sub	sp, #24
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800fad8:	2300      	movs	r3, #0
 800fada:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800fadc:	f107 030c 	add.w	r3, r7, #12
 800fae0:	4619      	mov	r1, r3
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 fa4e 	bl	800ff84 <SD_SendStatus>
 800fae8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d005      	beq.n	800fafc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	431a      	orrs	r2, r3
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	0a5b      	lsrs	r3, r3, #9
 800fb00:	f003 030f 	and.w	r3, r3, #15
 800fb04:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800fb06:	693b      	ldr	r3, [r7, #16]
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3718      	adds	r7, #24
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b090      	sub	sp, #64	; 0x40
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800fb1c:	f7f3 fd1c 	bl	8003558 <HAL_GetTick>
 800fb20:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	4618      	mov	r0, r3
 800fb28:	f005 ff9a 	bl	8015a60 <SDMMC_GetPowerState>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d102      	bne.n	800fb38 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800fb32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800fb36:	e0b5      	b.n	800fca4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb3c:	2b03      	cmp	r3, #3
 800fb3e:	d02e      	beq.n	800fb9e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	4618      	mov	r0, r3
 800fb46:	f006 faa6 	bl	8016096 <SDMMC_CmdSendCID>
 800fb4a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800fb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d001      	beq.n	800fb56 <SD_InitCard+0x46>
    {
      return errorstate;
 800fb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb54:	e0a6      	b.n	800fca4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	2100      	movs	r1, #0
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f006 f803 	bl	8015b68 <SDMMC_GetResponse>
 800fb62:	4602      	mov	r2, r0
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2104      	movs	r1, #4
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f005 fffa 	bl	8015b68 <SDMMC_GetResponse>
 800fb74:	4602      	mov	r2, r0
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	2108      	movs	r1, #8
 800fb80:	4618      	mov	r0, r3
 800fb82:	f005 fff1 	bl	8015b68 <SDMMC_GetResponse>
 800fb86:	4602      	mov	r2, r0
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	210c      	movs	r1, #12
 800fb92:	4618      	mov	r0, r3
 800fb94:	f005 ffe8 	bl	8015b68 <SDMMC_GetResponse>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fba2:	2b03      	cmp	r3, #3
 800fba4:	d01d      	beq.n	800fbe2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800fba6:	e019      	b.n	800fbdc <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	f107 020a 	add.w	r2, r7, #10
 800fbb0:	4611      	mov	r1, r2
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f006 faae 	bl	8016114 <SDMMC_CmdSetRelAdd>
 800fbb8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800fbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d001      	beq.n	800fbc4 <SD_InitCard+0xb4>
      {
        return errorstate;
 800fbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc2:	e06f      	b.n	800fca4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800fbc4:	f7f3 fcc8 	bl	8003558 <HAL_GetTick>
 800fbc8:	4602      	mov	r2, r0
 800fbca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbcc:	1ad3      	subs	r3, r2, r3
 800fbce:	f241 3287 	movw	r2, #4999	; 0x1387
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d902      	bls.n	800fbdc <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800fbd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fbda:	e063      	b.n	800fca4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800fbdc:	897b      	ldrh	r3, [r7, #10]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d0e2      	beq.n	800fba8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbe6:	2b03      	cmp	r3, #3
 800fbe8:	d036      	beq.n	800fc58 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800fbea:	897b      	ldrh	r3, [r7, #10]
 800fbec:	461a      	mov	r2, r3
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681a      	ldr	r2, [r3, #0]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbfa:	041b      	lsls	r3, r3, #16
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	4610      	mov	r0, r2
 800fc00:	f006 fa68 	bl	80160d4 <SDMMC_CmdSendCSD>
 800fc04:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800fc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d001      	beq.n	800fc10 <SD_InitCard+0x100>
    {
      return errorstate;
 800fc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0e:	e049      	b.n	800fca4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	2100      	movs	r1, #0
 800fc16:	4618      	mov	r0, r3
 800fc18:	f005 ffa6 	bl	8015b68 <SDMMC_GetResponse>
 800fc1c:	4602      	mov	r2, r0
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	2104      	movs	r1, #4
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f005 ff9d 	bl	8015b68 <SDMMC_GetResponse>
 800fc2e:	4602      	mov	r2, r0
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	2108      	movs	r1, #8
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f005 ff94 	bl	8015b68 <SDMMC_GetResponse>
 800fc40:	4602      	mov	r2, r0
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	210c      	movs	r1, #12
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f005 ff8b 	bl	8015b68 <SDMMC_GetResponse>
 800fc52:	4602      	mov	r2, r0
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	2104      	movs	r1, #4
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f005 ff82 	bl	8015b68 <SDMMC_GetResponse>
 800fc64:	4603      	mov	r3, r0
 800fc66:	0d1a      	lsrs	r2, r3, #20
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800fc6c:	f107 030c 	add.w	r3, r7, #12
 800fc70:	4619      	mov	r1, r3
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f7ff fb7a 	bl	800f36c <HAL_SD_GetCardCSD>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d002      	beq.n	800fc84 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fc7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fc82:	e00f      	b.n	800fca4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681a      	ldr	r2, [r3, #0]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc8c:	041b      	lsls	r3, r3, #16
 800fc8e:	4619      	mov	r1, r3
 800fc90:	4610      	mov	r0, r2
 800fc92:	f006 f917 	bl	8015ec4 <SDMMC_CmdSelDesel>
 800fc96:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800fc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d001      	beq.n	800fca2 <SD_InitCard+0x192>
  {
    return errorstate;
 800fc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca0:	e000      	b.n	800fca4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800fca2:	2300      	movs	r3, #0
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3740      	adds	r7, #64	; 0x40
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b086      	sub	sp, #24
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f006 f920 	bl	8015f0a <SDMMC_CmdGoIdleState>
 800fcca:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d001      	beq.n	800fcd6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	e072      	b.n	800fdbc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f006 f933 	bl	8015f46 <SDMMC_CmdOperCond>
 800fce0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fce8:	d10d      	bne.n	800fd06 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2200      	movs	r2, #0
 800fcee:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f006 f908 	bl	8015f0a <SDMMC_CmdGoIdleState>
 800fcfa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d004      	beq.n	800fd0c <SD_PowerON+0x60>
    {
      return errorstate;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	e05a      	b.n	800fdbc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2201      	movs	r2, #1
 800fd0a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd10:	2b01      	cmp	r3, #1
 800fd12:	d137      	bne.n	800fd84 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	2100      	movs	r1, #0
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f006 f933 	bl	8015f86 <SDMMC_CmdAppCommand>
 800fd20:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d02d      	beq.n	800fd84 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fd28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fd2c:	e046      	b.n	800fdbc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	2100      	movs	r1, #0
 800fd34:	4618      	mov	r0, r3
 800fd36:	f006 f926 	bl	8015f86 <SDMMC_CmdAppCommand>
 800fd3a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d001      	beq.n	800fd46 <SD_PowerON+0x9a>
    {
      return errorstate;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	e03a      	b.n	800fdbc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	491e      	ldr	r1, [pc, #120]	; (800fdc4 <SD_PowerON+0x118>)
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f006 f93d 	bl	8015fcc <SDMMC_CmdAppOperCommand>
 800fd52:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d002      	beq.n	800fd60 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fd5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fd5e:	e02d      	b.n	800fdbc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	2100      	movs	r1, #0
 800fd66:	4618      	mov	r0, r3
 800fd68:	f005 fefe 	bl	8015b68 <SDMMC_GetResponse>
 800fd6c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	0fdb      	lsrs	r3, r3, #31
 800fd72:	2b01      	cmp	r3, #1
 800fd74:	d101      	bne.n	800fd7a <SD_PowerON+0xce>
 800fd76:	2301      	movs	r3, #1
 800fd78:	e000      	b.n	800fd7c <SD_PowerON+0xd0>
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	613b      	str	r3, [r7, #16]

    count++;
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	3301      	adds	r3, #1
 800fd82:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	d802      	bhi.n	800fd94 <SD_PowerON+0xe8>
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d0cc      	beq.n	800fd2e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	d902      	bls.n	800fda4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800fd9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fda2:	e00b      	b.n	800fdbc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2200      	movs	r2, #0
 800fda8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d002      	beq.n	800fdba <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2201      	movs	r2, #1
 800fdb8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800fdba:	2300      	movs	r3, #0
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3718      	adds	r7, #24
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	c1100000 	.word	0xc1100000

0800fdc8 <SD_PowerOFF>:
  * @brief  Turns the SDMMC output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f005 fe32 	bl	8015a3e <SDMMC_PowerState_OFF>
}
 800fdda:	bf00      	nop
 800fddc:	3708      	adds	r7, #8
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
	...

0800fde4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b08c      	sub	sp, #48	; 0x30
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800fdee:	f7f3 fbb3 	bl	8003558 <HAL_GetTick>
 800fdf2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2100      	movs	r1, #0
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f005 feb2 	bl	8015b68 <SDMMC_GetResponse>
 800fe04:	4603      	mov	r3, r0
 800fe06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fe0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fe0e:	d102      	bne.n	800fe16 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800fe10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fe14:	e0b0      	b.n	800ff78 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	2140      	movs	r1, #64	; 0x40
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f005 ff65 	bl	8015cec <SDMMC_CmdBlockLength>
 800fe22:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800fe24:	6a3b      	ldr	r3, [r7, #32]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d005      	beq.n	800fe36 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800fe32:	6a3b      	ldr	r3, [r7, #32]
 800fe34:	e0a0      	b.n	800ff78 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681a      	ldr	r2, [r3, #0]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe3e:	041b      	lsls	r3, r3, #16
 800fe40:	4619      	mov	r1, r3
 800fe42:	4610      	mov	r0, r2
 800fe44:	f006 f89f 	bl	8015f86 <SDMMC_CmdAppCommand>
 800fe48:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800fe4a:	6a3b      	ldr	r3, [r7, #32]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d005      	beq.n	800fe5c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800fe58:	6a3b      	ldr	r3, [r7, #32]
 800fe5a:	e08d      	b.n	800ff78 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fe5c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe60:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800fe62:	2340      	movs	r3, #64	; 0x40
 800fe64:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800fe66:	2360      	movs	r3, #96	; 0x60
 800fe68:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800fe6a:	2302      	movs	r3, #2
 800fe6c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800fe72:	2301      	movs	r3, #1
 800fe74:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f107 0208 	add.w	r2, r7, #8
 800fe7e:	4611      	mov	r1, r2
 800fe80:	4618      	mov	r0, r3
 800fe82:	f005 fe95 	bl	8015bb0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f006 f987 	bl	801619e <SDMMC_CmdStatusRegister>
 800fe90:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800fe92:	6a3b      	ldr	r3, [r7, #32]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d02b      	beq.n	800fef0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800fea0:	6a3b      	ldr	r3, [r7, #32]
 800fea2:	e069      	b.n	800ff78 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800feaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d013      	beq.n	800feda <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800feb2:	2300      	movs	r3, #0
 800feb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800feb6:	e00d      	b.n	800fed4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4618      	mov	r0, r3
 800febe:	f005 fd8f 	bl	80159e0 <SDMMC_ReadFIFO>
 800fec2:	4602      	mov	r2, r0
 800fec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec6:	601a      	str	r2, [r3, #0]
        pData++;
 800fec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feca:	3304      	adds	r3, #4
 800fecc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800fece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed0:	3301      	adds	r3, #1
 800fed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed6:	2b07      	cmp	r3, #7
 800fed8:	d9ee      	bls.n	800feb8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800feda:	f7f3 fb3d 	bl	8003558 <HAL_GetTick>
 800fede:	4602      	mov	r2, r0
 800fee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee2:	1ad3      	subs	r3, r2, r3
 800fee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fee8:	d102      	bne.n	800fef0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800feea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800feee:	e043      	b.n	800ff78 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fef6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d0d2      	beq.n	800fea4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff04:	f003 0308 	and.w	r3, r3, #8
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d001      	beq.n	800ff10 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ff0c:	2308      	movs	r3, #8
 800ff0e:	e033      	b.n	800ff78 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff16:	f003 0302 	and.w	r3, r3, #2
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d001      	beq.n	800ff22 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ff1e:	2302      	movs	r3, #2
 800ff20:	e02a      	b.n	800ff78 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff28:	f003 0320 	and.w	r3, r3, #32
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d017      	beq.n	800ff60 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ff30:	2320      	movs	r3, #32
 800ff32:	e021      	b.n	800ff78 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f005 fd51 	bl	80159e0 <SDMMC_ReadFIFO>
 800ff3e:	4602      	mov	r2, r0
 800ff40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff42:	601a      	str	r2, [r3, #0]
    pData++;
 800ff44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff46:	3304      	adds	r3, #4
 800ff48:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ff4a:	f7f3 fb05 	bl	8003558 <HAL_GetTick>
 800ff4e:	4602      	mov	r2, r0
 800ff50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff52:	1ad3      	subs	r3, r2, r3
 800ff54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff58:	d102      	bne.n	800ff60 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ff5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ff5e:	e00b      	b.n	800ff78 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d1e2      	bne.n	800ff34 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	4a03      	ldr	r2, [pc, #12]	; (800ff80 <SD_SendSDStatus+0x19c>)
 800ff74:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ff76:	2300      	movs	r3, #0
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3730      	adds	r7, #48	; 0x30
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	18000f3a 	.word	0x18000f3a

0800ff84 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b084      	sub	sp, #16
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d102      	bne.n	800ff9a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ff94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ff98:	e018      	b.n	800ffcc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681a      	ldr	r2, [r3, #0]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffa2:	041b      	lsls	r3, r3, #16
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	4610      	mov	r0, r2
 800ffa8:	f006 f8d6 	bl	8016158 <SDMMC_CmdSendStatus>
 800ffac:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d001      	beq.n	800ffb8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	e009      	b.n	800ffcc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	2100      	movs	r1, #0
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f005 fdd2 	bl	8015b68 <SDMMC_GetResponse>
 800ffc4:	4602      	mov	r2, r0
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ffca:	2300      	movs	r3, #0
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3710      	adds	r7, #16
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b086      	sub	sp, #24
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ffdc:	2300      	movs	r3, #0
 800ffde:	60fb      	str	r3, [r7, #12]
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2100      	movs	r1, #0
 800ffea:	4618      	mov	r0, r3
 800ffec:	f005 fdbc 	bl	8015b68 <SDMMC_GetResponse>
 800fff0:	4603      	mov	r3, r0
 800fff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fff6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fffa:	d102      	bne.n	8010002 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800fffc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010000:	e02f      	b.n	8010062 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010002:	f107 030c 	add.w	r3, r7, #12
 8010006:	4619      	mov	r1, r3
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f000 f879 	bl	8010100 <SD_FindSCR>
 801000e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d001      	beq.n	801001a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	e023      	b.n	8010062 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010020:	2b00      	cmp	r3, #0
 8010022:	d01c      	beq.n	801005e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801002c:	041b      	lsls	r3, r3, #16
 801002e:	4619      	mov	r1, r3
 8010030:	4610      	mov	r0, r2
 8010032:	f005 ffa8 	bl	8015f86 <SDMMC_CmdAppCommand>
 8010036:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d001      	beq.n	8010042 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	e00f      	b.n	8010062 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	2102      	movs	r1, #2
 8010048:	4618      	mov	r0, r3
 801004a:	f005 ffdf 	bl	801600c <SDMMC_CmdBusWidth>
 801004e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d001      	beq.n	801005a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	e003      	b.n	8010062 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801005a:	2300      	movs	r3, #0
 801005c:	e001      	b.n	8010062 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801005e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010062:	4618      	mov	r0, r3
 8010064:	3718      	adds	r7, #24
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}

0801006a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801006a:	b580      	push	{r7, lr}
 801006c:	b086      	sub	sp, #24
 801006e:	af00      	add	r7, sp, #0
 8010070:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8010072:	2300      	movs	r3, #0
 8010074:	60fb      	str	r3, [r7, #12]
 8010076:	2300      	movs	r3, #0
 8010078:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	2100      	movs	r1, #0
 8010080:	4618      	mov	r0, r3
 8010082:	f005 fd71 	bl	8015b68 <SDMMC_GetResponse>
 8010086:	4603      	mov	r3, r0
 8010088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801008c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010090:	d102      	bne.n	8010098 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010092:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010096:	e02f      	b.n	80100f8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010098:	f107 030c 	add.w	r3, r7, #12
 801009c:	4619      	mov	r1, r3
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f000 f82e 	bl	8010100 <SD_FindSCR>
 80100a4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d001      	beq.n	80100b0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	e023      	b.n	80100f8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d01c      	beq.n	80100f4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681a      	ldr	r2, [r3, #0]
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100c2:	041b      	lsls	r3, r3, #16
 80100c4:	4619      	mov	r1, r3
 80100c6:	4610      	mov	r0, r2
 80100c8:	f005 ff5d 	bl	8015f86 <SDMMC_CmdAppCommand>
 80100cc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d001      	beq.n	80100d8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	e00f      	b.n	80100f8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	2100      	movs	r1, #0
 80100de:	4618      	mov	r0, r3
 80100e0:	f005 ff94 	bl	801600c <SDMMC_CmdBusWidth>
 80100e4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d001      	beq.n	80100f0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	e003      	b.n	80100f8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80100f0:	2300      	movs	r3, #0
 80100f2:	e001      	b.n	80100f8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80100f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3718      	adds	r7, #24
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b08e      	sub	sp, #56	; 0x38
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801010a:	f7f3 fa25 	bl	8003558 <HAL_GetTick>
 801010e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8010110:	2300      	movs	r3, #0
 8010112:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8010114:	2300      	movs	r3, #0
 8010116:	60bb      	str	r3, [r7, #8]
 8010118:	2300      	movs	r3, #0
 801011a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2108      	movs	r1, #8
 8010126:	4618      	mov	r0, r3
 8010128:	f005 fde0 	bl	8015cec <SDMMC_CmdBlockLength>
 801012c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801012e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010130:	2b00      	cmp	r3, #0
 8010132:	d001      	beq.n	8010138 <SD_FindSCR+0x38>
  {
    return errorstate;
 8010134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010136:	e0ad      	b.n	8010294 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681a      	ldr	r2, [r3, #0]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010140:	041b      	lsls	r3, r3, #16
 8010142:	4619      	mov	r1, r3
 8010144:	4610      	mov	r0, r2
 8010146:	f005 ff1e 	bl	8015f86 <SDMMC_CmdAppCommand>
 801014a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801014c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801014e:	2b00      	cmp	r3, #0
 8010150:	d001      	beq.n	8010156 <SD_FindSCR+0x56>
  {
    return errorstate;
 8010152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010154:	e09e      	b.n	8010294 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010156:	f04f 33ff 	mov.w	r3, #4294967295
 801015a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 801015c:	2308      	movs	r3, #8
 801015e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8010160:	2330      	movs	r3, #48	; 0x30
 8010162:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010164:	2302      	movs	r3, #2
 8010166:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010168:	2300      	movs	r3, #0
 801016a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801016c:	2301      	movs	r3, #1
 801016e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f107 0210 	add.w	r2, r7, #16
 8010178:	4611      	mov	r1, r2
 801017a:	4618      	mov	r0, r3
 801017c:	f005 fd18 	bl	8015bb0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4618      	mov	r0, r3
 8010186:	f005 ff64 	bl	8016052 <SDMMC_CmdSendSCR>
 801018a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801018c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801018e:	2b00      	cmp	r3, #0
 8010190:	d027      	beq.n	80101e2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8010192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010194:	e07e      	b.n	8010294 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801019c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d113      	bne.n	80101cc <SD_FindSCR+0xcc>
 80101a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d110      	bne.n	80101cc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	4618      	mov	r0, r3
 80101b0:	f005 fc16 	bl	80159e0 <SDMMC_ReadFIFO>
 80101b4:	4603      	mov	r3, r0
 80101b6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	4618      	mov	r0, r3
 80101be:	f005 fc0f 	bl	80159e0 <SDMMC_ReadFIFO>
 80101c2:	4603      	mov	r3, r0
 80101c4:	60fb      	str	r3, [r7, #12]
      index++;
 80101c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101c8:	3301      	adds	r3, #1
 80101ca:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80101cc:	f7f3 f9c4 	bl	8003558 <HAL_GetTick>
 80101d0:	4602      	mov	r2, r0
 80101d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d4:	1ad3      	subs	r3, r2, r3
 80101d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101da:	d102      	bne.n	80101e2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80101dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80101e0:	e058      	b.n	8010294 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101e8:	f240 532a 	movw	r3, #1322	; 0x52a
 80101ec:	4013      	ands	r3, r2
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d0d1      	beq.n	8010196 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101f8:	f003 0308 	and.w	r3, r3, #8
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d005      	beq.n	801020c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2208      	movs	r2, #8
 8010206:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010208:	2308      	movs	r3, #8
 801020a:	e043      	b.n	8010294 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010212:	f003 0302 	and.w	r3, r3, #2
 8010216:	2b00      	cmp	r3, #0
 8010218:	d005      	beq.n	8010226 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2202      	movs	r2, #2
 8010220:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8010222:	2302      	movs	r3, #2
 8010224:	e036      	b.n	8010294 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801022c:	f003 0320 	and.w	r3, r3, #32
 8010230:	2b00      	cmp	r3, #0
 8010232:	d005      	beq.n	8010240 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	2220      	movs	r2, #32
 801023a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 801023c:	2320      	movs	r3, #32
 801023e:	e029      	b.n	8010294 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	4a15      	ldr	r2, [pc, #84]	; (801029c <SD_FindSCR+0x19c>)
 8010246:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	061a      	lsls	r2, r3, #24
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	021b      	lsls	r3, r3, #8
 8010250:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010254:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	0a1b      	lsrs	r3, r3, #8
 801025a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 801025e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	0e1b      	lsrs	r3, r3, #24
 8010264:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8010266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010268:	601a      	str	r2, [r3, #0]
    scr++;
 801026a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801026c:	3304      	adds	r3, #4
 801026e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	061a      	lsls	r2, r3, #24
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	021b      	lsls	r3, r3, #8
 8010278:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801027c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	0a1b      	lsrs	r3, r3, #8
 8010282:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8010286:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	0e1b      	lsrs	r3, r3, #24
 801028c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 801028e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010290:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8010292:	2300      	movs	r3, #0
}
 8010294:	4618      	mov	r0, r3
 8010296:	3738      	adds	r7, #56	; 0x38
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	18000f3a 	.word	0x18000f3a

080102a0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b086      	sub	sp, #24
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ac:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102b2:	2b1f      	cmp	r3, #31
 80102b4:	d936      	bls.n	8010324 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80102b6:	2300      	movs	r3, #0
 80102b8:	617b      	str	r3, [r7, #20]
 80102ba:	e027      	b.n	801030c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	4618      	mov	r0, r3
 80102c2:	f005 fb8d 	bl	80159e0 <SDMMC_ReadFIFO>
 80102c6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	b2da      	uxtb	r2, r3
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	3301      	adds	r3, #1
 80102d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	0a1b      	lsrs	r3, r3, #8
 80102da:	b2da      	uxtb	r2, r3
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	3301      	adds	r3, #1
 80102e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	0c1b      	lsrs	r3, r3, #16
 80102ea:	b2da      	uxtb	r2, r3
 80102ec:	693b      	ldr	r3, [r7, #16]
 80102ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	3301      	adds	r3, #1
 80102f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	0e1b      	lsrs	r3, r3, #24
 80102fa:	b2da      	uxtb	r2, r3
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	3301      	adds	r3, #1
 8010304:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	3301      	adds	r3, #1
 801030a:	617b      	str	r3, [r7, #20]
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	2b07      	cmp	r3, #7
 8010310:	d9d4      	bls.n	80102bc <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	693a      	ldr	r2, [r7, #16]
 8010316:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801031c:	f1a3 0220 	sub.w	r2, r3, #32
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8010324:	bf00      	nop
 8010326:	3718      	adds	r7, #24
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b086      	sub	sp, #24
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	69db      	ldr	r3, [r3, #28]
 8010338:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6a1b      	ldr	r3, [r3, #32]
 801033e:	2b1f      	cmp	r3, #31
 8010340:	d93a      	bls.n	80103b8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8010342:	2300      	movs	r3, #0
 8010344:	617b      	str	r3, [r7, #20]
 8010346:	e02b      	b.n	80103a0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	60fb      	str	r3, [r7, #12]
      tmp++;
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	3301      	adds	r3, #1
 8010352:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	021a      	lsls	r2, r3, #8
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	4313      	orrs	r3, r2
 801035e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	3301      	adds	r3, #1
 8010364:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	781b      	ldrb	r3, [r3, #0]
 801036a:	041a      	lsls	r2, r3, #16
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	4313      	orrs	r3, r2
 8010370:	60fb      	str	r3, [r7, #12]
      tmp++;
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	3301      	adds	r3, #1
 8010376:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	781b      	ldrb	r3, [r3, #0]
 801037c:	061a      	lsls	r2, r3, #24
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	4313      	orrs	r3, r2
 8010382:	60fb      	str	r3, [r7, #12]
      tmp++;
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	3301      	adds	r3, #1
 8010388:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f107 020c 	add.w	r2, r7, #12
 8010392:	4611      	mov	r1, r2
 8010394:	4618      	mov	r0, r3
 8010396:	f005 fb30 	bl	80159fa <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	3301      	adds	r3, #1
 801039e:	617b      	str	r3, [r7, #20]
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	2b07      	cmp	r3, #7
 80103a4:	d9d0      	bls.n	8010348 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	693a      	ldr	r2, [r7, #16]
 80103aa:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6a1b      	ldr	r3, [r3, #32]
 80103b0:	f1a3 0220 	sub.w	r2, r3, #32
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	621a      	str	r2, [r3, #32]
  }
}
 80103b8:	bf00      	nop
 80103ba:	3718      	adds	r7, #24
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80103c0:	b480      	push	{r7}
 80103c2:	b083      	sub	sp, #12
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80103c8:	bf00      	nop
 80103ca:	370c      	adds	r7, #12
 80103cc:	46bd      	mov	sp, r7
 80103ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d2:	4770      	bx	lr

080103d4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80103d4:	b480      	push	{r7}
 80103d6:	b083      	sub	sp, #12
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80103dc:	bf00      	nop
 80103de:	370c      	adds	r7, #12
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b083      	sub	sp, #12
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80103f0:	bf00      	nop
 80103f2:	370c      	adds	r7, #12
 80103f4:	46bd      	mov	sp, r7
 80103f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fa:	4770      	bx	lr

080103fc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80103fc:	b480      	push	{r7}
 80103fe:	b083      	sub	sp, #12
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8010404:	bf00      	nop
 8010406:	370c      	adds	r7, #12
 8010408:	46bd      	mov	sp, r7
 801040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040e:	4770      	bx	lr

08010410 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b084      	sub	sp, #16
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d101      	bne.n	8010422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801041e:	2301      	movs	r3, #1
 8010420:	e29e      	b.n	8010960 <HAL_SPI_Init+0x550>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	4a61      	ldr	r2, [pc, #388]	; (80105ac <HAL_SPI_Init+0x19c>)
 8010428:	4293      	cmp	r3, r2
 801042a:	d01c      	beq.n	8010466 <HAL_SPI_Init+0x56>
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	4a5f      	ldr	r2, [pc, #380]	; (80105b0 <HAL_SPI_Init+0x1a0>)
 8010432:	4293      	cmp	r3, r2
 8010434:	d017      	beq.n	8010466 <HAL_SPI_Init+0x56>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	4a5e      	ldr	r2, [pc, #376]	; (80105b4 <HAL_SPI_Init+0x1a4>)
 801043c:	4293      	cmp	r3, r2
 801043e:	d012      	beq.n	8010466 <HAL_SPI_Init+0x56>
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	4a5c      	ldr	r2, [pc, #368]	; (80105b8 <HAL_SPI_Init+0x1a8>)
 8010446:	4293      	cmp	r3, r2
 8010448:	d00d      	beq.n	8010466 <HAL_SPI_Init+0x56>
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	4a5b      	ldr	r2, [pc, #364]	; (80105bc <HAL_SPI_Init+0x1ac>)
 8010450:	4293      	cmp	r3, r2
 8010452:	d008      	beq.n	8010466 <HAL_SPI_Init+0x56>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4a59      	ldr	r2, [pc, #356]	; (80105c0 <HAL_SPI_Init+0x1b0>)
 801045a:	4293      	cmp	r3, r2
 801045c:	d003      	beq.n	8010466 <HAL_SPI_Init+0x56>
 801045e:	21f7      	movs	r1, #247	; 0xf7
 8010460:	4858      	ldr	r0, [pc, #352]	; (80105c4 <HAL_SPI_Init+0x1b4>)
 8010462:	f7f1 fb06 	bl	8001a72 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d008      	beq.n	8010480 <HAL_SPI_Init+0x70>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010476:	d003      	beq.n	8010480 <HAL_SPI_Init+0x70>
 8010478:	21f8      	movs	r1, #248	; 0xf8
 801047a:	4852      	ldr	r0, [pc, #328]	; (80105c4 <HAL_SPI_Init+0x1b4>)
 801047c:	f7f1 faf9 	bl	8001a72 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	689b      	ldr	r3, [r3, #8]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d012      	beq.n	80104ae <HAL_SPI_Init+0x9e>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	689b      	ldr	r3, [r3, #8]
 801048c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010490:	d00d      	beq.n	80104ae <HAL_SPI_Init+0x9e>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	689b      	ldr	r3, [r3, #8]
 8010496:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 801049a:	d008      	beq.n	80104ae <HAL_SPI_Init+0x9e>
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	689b      	ldr	r3, [r3, #8]
 80104a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80104a4:	d003      	beq.n	80104ae <HAL_SPI_Init+0x9e>
 80104a6:	21f9      	movs	r1, #249	; 0xf9
 80104a8:	4846      	ldr	r0, [pc, #280]	; (80105c4 <HAL_SPI_Init+0x1b4>)
 80104aa:	f7f1 fae2 	bl	8001a72 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	68db      	ldr	r3, [r3, #12]
 80104b2:	2b1f      	cmp	r3, #31
 80104b4:	f000 8088 	beq.w	80105c8 <HAL_SPI_Init+0x1b8>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	2b1e      	cmp	r3, #30
 80104be:	f000 8083 	beq.w	80105c8 <HAL_SPI_Init+0x1b8>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	68db      	ldr	r3, [r3, #12]
 80104c6:	2b1d      	cmp	r3, #29
 80104c8:	d07e      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	68db      	ldr	r3, [r3, #12]
 80104ce:	2b1c      	cmp	r3, #28
 80104d0:	d07a      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	68db      	ldr	r3, [r3, #12]
 80104d6:	2b1b      	cmp	r3, #27
 80104d8:	d076      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	68db      	ldr	r3, [r3, #12]
 80104de:	2b1a      	cmp	r3, #26
 80104e0:	d072      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	68db      	ldr	r3, [r3, #12]
 80104e6:	2b19      	cmp	r3, #25
 80104e8:	d06e      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	68db      	ldr	r3, [r3, #12]
 80104ee:	2b18      	cmp	r3, #24
 80104f0:	d06a      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	68db      	ldr	r3, [r3, #12]
 80104f6:	2b17      	cmp	r3, #23
 80104f8:	d066      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	68db      	ldr	r3, [r3, #12]
 80104fe:	2b16      	cmp	r3, #22
 8010500:	d062      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	68db      	ldr	r3, [r3, #12]
 8010506:	2b15      	cmp	r3, #21
 8010508:	d05e      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	2b14      	cmp	r3, #20
 8010510:	d05a      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	68db      	ldr	r3, [r3, #12]
 8010516:	2b13      	cmp	r3, #19
 8010518:	d056      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	68db      	ldr	r3, [r3, #12]
 801051e:	2b15      	cmp	r3, #21
 8010520:	d052      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	68db      	ldr	r3, [r3, #12]
 8010526:	2b12      	cmp	r3, #18
 8010528:	d04e      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	68db      	ldr	r3, [r3, #12]
 801052e:	2b11      	cmp	r3, #17
 8010530:	d04a      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	68db      	ldr	r3, [r3, #12]
 8010536:	2b10      	cmp	r3, #16
 8010538:	d046      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	68db      	ldr	r3, [r3, #12]
 801053e:	2b0f      	cmp	r3, #15
 8010540:	d042      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	68db      	ldr	r3, [r3, #12]
 8010546:	2b0e      	cmp	r3, #14
 8010548:	d03e      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	68db      	ldr	r3, [r3, #12]
 801054e:	2b0d      	cmp	r3, #13
 8010550:	d03a      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	68db      	ldr	r3, [r3, #12]
 8010556:	2b0c      	cmp	r3, #12
 8010558:	d036      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	68db      	ldr	r3, [r3, #12]
 801055e:	2b0b      	cmp	r3, #11
 8010560:	d032      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	68db      	ldr	r3, [r3, #12]
 8010566:	2b0a      	cmp	r3, #10
 8010568:	d02e      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	2b09      	cmp	r3, #9
 8010570:	d02a      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	68db      	ldr	r3, [r3, #12]
 8010576:	2b08      	cmp	r3, #8
 8010578:	d026      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	68db      	ldr	r3, [r3, #12]
 801057e:	2b07      	cmp	r3, #7
 8010580:	d022      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	68db      	ldr	r3, [r3, #12]
 8010586:	2b06      	cmp	r3, #6
 8010588:	d01e      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	68db      	ldr	r3, [r3, #12]
 801058e:	2b05      	cmp	r3, #5
 8010590:	d01a      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	2b04      	cmp	r3, #4
 8010598:	d016      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	68db      	ldr	r3, [r3, #12]
 801059e:	2b03      	cmp	r3, #3
 80105a0:	d012      	beq.n	80105c8 <HAL_SPI_Init+0x1b8>
 80105a2:	21fa      	movs	r1, #250	; 0xfa
 80105a4:	4807      	ldr	r0, [pc, #28]	; (80105c4 <HAL_SPI_Init+0x1b4>)
 80105a6:	f7f1 fa64 	bl	8001a72 <assert_failed>
 80105aa:	e00d      	b.n	80105c8 <HAL_SPI_Init+0x1b8>
 80105ac:	40013000 	.word	0x40013000
 80105b0:	40003800 	.word	0x40003800
 80105b4:	40003c00 	.word	0x40003c00
 80105b8:	40013400 	.word	0x40013400
 80105bc:	40015000 	.word	0x40015000
 80105c0:	58001400 	.word	0x58001400
 80105c4:	0801deac 	.word	0x0801deac
  assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d047      	beq.n	8010660 <HAL_SPI_Init+0x250>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105d4:	2b20      	cmp	r3, #32
 80105d6:	d043      	beq.n	8010660 <HAL_SPI_Init+0x250>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105dc:	2b40      	cmp	r3, #64	; 0x40
 80105de:	d03f      	beq.n	8010660 <HAL_SPI_Init+0x250>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105e4:	2b60      	cmp	r3, #96	; 0x60
 80105e6:	d03b      	beq.n	8010660 <HAL_SPI_Init+0x250>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105ec:	2b80      	cmp	r3, #128	; 0x80
 80105ee:	d037      	beq.n	8010660 <HAL_SPI_Init+0x250>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105f4:	2ba0      	cmp	r3, #160	; 0xa0
 80105f6:	d033      	beq.n	8010660 <HAL_SPI_Init+0x250>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105fc:	2bc0      	cmp	r3, #192	; 0xc0
 80105fe:	d02f      	beq.n	8010660 <HAL_SPI_Init+0x250>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010604:	2be0      	cmp	r3, #224	; 0xe0
 8010606:	d02b      	beq.n	8010660 <HAL_SPI_Init+0x250>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801060c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010610:	d026      	beq.n	8010660 <HAL_SPI_Init+0x250>
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010616:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 801061a:	d021      	beq.n	8010660 <HAL_SPI_Init+0x250>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010620:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8010624:	d01c      	beq.n	8010660 <HAL_SPI_Init+0x250>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801062a:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 801062e:	d017      	beq.n	8010660 <HAL_SPI_Init+0x250>
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010634:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8010638:	d012      	beq.n	8010660 <HAL_SPI_Init+0x250>
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801063e:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8010642:	d00d      	beq.n	8010660 <HAL_SPI_Init+0x250>
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010648:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 801064c:	d008      	beq.n	8010660 <HAL_SPI_Init+0x250>
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010652:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8010656:	d003      	beq.n	8010660 <HAL_SPI_Init+0x250>
 8010658:	21fb      	movs	r1, #251	; 0xfb
 801065a:	4865      	ldr	r0, [pc, #404]	; (80107f0 <HAL_SPI_Init+0x3e0>)
 801065c:	f7f1 fa09 	bl	8001a72 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	699b      	ldr	r3, [r3, #24]
 8010664:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010668:	d00c      	beq.n	8010684 <HAL_SPI_Init+0x274>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	699b      	ldr	r3, [r3, #24]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d008      	beq.n	8010684 <HAL_SPI_Init+0x274>
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	699b      	ldr	r3, [r3, #24]
 8010676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801067a:	d003      	beq.n	8010684 <HAL_SPI_Init+0x274>
 801067c:	21fc      	movs	r1, #252	; 0xfc
 801067e:	485c      	ldr	r0, [pc, #368]	; (80107f0 <HAL_SPI_Init+0x3e0>)
 8010680:	f7f1 f9f7 	bl	8001a72 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801068c:	d007      	beq.n	801069e <HAL_SPI_Init+0x28e>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010692:	2b00      	cmp	r3, #0
 8010694:	d003      	beq.n	801069e <HAL_SPI_Init+0x28e>
 8010696:	21fd      	movs	r1, #253	; 0xfd
 8010698:	4855      	ldr	r0, [pc, #340]	; (80107f0 <HAL_SPI_Init+0x3e0>)
 801069a:	f7f1 f9ea 	bl	8001a72 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	69db      	ldr	r3, [r3, #28]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d026      	beq.n	80106f4 <HAL_SPI_Init+0x2e4>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	69db      	ldr	r3, [r3, #28]
 80106aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80106ae:	d021      	beq.n	80106f4 <HAL_SPI_Init+0x2e4>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	69db      	ldr	r3, [r3, #28]
 80106b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106b8:	d01c      	beq.n	80106f4 <HAL_SPI_Init+0x2e4>
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	69db      	ldr	r3, [r3, #28]
 80106be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80106c2:	d017      	beq.n	80106f4 <HAL_SPI_Init+0x2e4>
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	69db      	ldr	r3, [r3, #28]
 80106c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80106cc:	d012      	beq.n	80106f4 <HAL_SPI_Init+0x2e4>
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	69db      	ldr	r3, [r3, #28]
 80106d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80106d6:	d00d      	beq.n	80106f4 <HAL_SPI_Init+0x2e4>
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	69db      	ldr	r3, [r3, #28]
 80106dc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80106e0:	d008      	beq.n	80106f4 <HAL_SPI_Init+0x2e4>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	69db      	ldr	r3, [r3, #28]
 80106e6:	f1b3 4fe0 	cmp.w	r3, #1879048192	; 0x70000000
 80106ea:	d003      	beq.n	80106f4 <HAL_SPI_Init+0x2e4>
 80106ec:	21fe      	movs	r1, #254	; 0xfe
 80106ee:	4840      	ldr	r0, [pc, #256]	; (80107f0 <HAL_SPI_Init+0x3e0>)
 80106f0:	f7f1 f9bf 	bl	8001a72 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6a1b      	ldr	r3, [r3, #32]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d008      	beq.n	801070e <HAL_SPI_Init+0x2fe>
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6a1b      	ldr	r3, [r3, #32]
 8010700:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010704:	d003      	beq.n	801070e <HAL_SPI_Init+0x2fe>
 8010706:	21ff      	movs	r1, #255	; 0xff
 8010708:	4839      	ldr	r0, [pc, #228]	; (80107f0 <HAL_SPI_Init+0x3e0>)
 801070a:	f7f1 f9b2 	bl	8001a72 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010712:	2b00      	cmp	r3, #0
 8010714:	d009      	beq.n	801072a <HAL_SPI_Init+0x31a>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801071a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801071e:	d004      	beq.n	801072a <HAL_SPI_Init+0x31a>
 8010720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010724:	4832      	ldr	r0, [pc, #200]	; (80107f0 <HAL_SPI_Init+0x3e0>)
 8010726:	f7f1 f9a4 	bl	8001a72 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801072e:	2b00      	cmp	r3, #0
 8010730:	d11b      	bne.n	801076a <HAL_SPI_Init+0x35a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	691b      	ldr	r3, [r3, #16]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d009      	beq.n	801074e <HAL_SPI_Init+0x33e>
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	691b      	ldr	r3, [r3, #16]
 801073e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010742:	d004      	beq.n	801074e <HAL_SPI_Init+0x33e>
 8010744:	f240 1103 	movw	r1, #259	; 0x103
 8010748:	4829      	ldr	r0, [pc, #164]	; (80107f0 <HAL_SPI_Init+0x3e0>)
 801074a:	f7f1 f992 	bl	8001a72 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	695b      	ldr	r3, [r3, #20]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d009      	beq.n	801076a <HAL_SPI_Init+0x35a>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	695b      	ldr	r3, [r3, #20]
 801075a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801075e:	d004      	beq.n	801076a <HAL_SPI_Init+0x35a>
 8010760:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010764:	4822      	ldr	r0, [pc, #136]	; (80107f0 <HAL_SPI_Init+0x3e0>)
 8010766:	f7f1 f984 	bl	8001a72 <assert_failed>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2200      	movs	r2, #0
 801076e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	4a1f      	ldr	r2, [pc, #124]	; (80107f4 <HAL_SPI_Init+0x3e4>)
 8010776:	4293      	cmp	r3, r2
 8010778:	d00f      	beq.n	801079a <HAL_SPI_Init+0x38a>
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	4a1e      	ldr	r2, [pc, #120]	; (80107f8 <HAL_SPI_Init+0x3e8>)
 8010780:	4293      	cmp	r3, r2
 8010782:	d00a      	beq.n	801079a <HAL_SPI_Init+0x38a>
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	4a1c      	ldr	r2, [pc, #112]	; (80107fc <HAL_SPI_Init+0x3ec>)
 801078a:	4293      	cmp	r3, r2
 801078c:	d005      	beq.n	801079a <HAL_SPI_Init+0x38a>
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	68db      	ldr	r3, [r3, #12]
 8010792:	2b0f      	cmp	r3, #15
 8010794:	d901      	bls.n	801079a <HAL_SPI_Init+0x38a>
  {
    return HAL_ERROR;
 8010796:	2301      	movs	r3, #1
 8010798:	e0e2      	b.n	8010960 <HAL_SPI_Init+0x550>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f000 fba6 	bl	8010eec <SPI_GetPacketSize>
 80107a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	4a13      	ldr	r2, [pc, #76]	; (80107f4 <HAL_SPI_Init+0x3e4>)
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d00c      	beq.n	80107c6 <HAL_SPI_Init+0x3b6>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	4a11      	ldr	r2, [pc, #68]	; (80107f8 <HAL_SPI_Init+0x3e8>)
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d007      	beq.n	80107c6 <HAL_SPI_Init+0x3b6>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4a10      	ldr	r2, [pc, #64]	; (80107fc <HAL_SPI_Init+0x3ec>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d002      	beq.n	80107c6 <HAL_SPI_Init+0x3b6>
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	2b08      	cmp	r3, #8
 80107c4:	d811      	bhi.n	80107ea <HAL_SPI_Init+0x3da>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80107ca:	4a0a      	ldr	r2, [pc, #40]	; (80107f4 <HAL_SPI_Init+0x3e4>)
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d009      	beq.n	80107e4 <HAL_SPI_Init+0x3d4>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	4a08      	ldr	r2, [pc, #32]	; (80107f8 <HAL_SPI_Init+0x3e8>)
 80107d6:	4293      	cmp	r3, r2
 80107d8:	d004      	beq.n	80107e4 <HAL_SPI_Init+0x3d4>
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4a07      	ldr	r2, [pc, #28]	; (80107fc <HAL_SPI_Init+0x3ec>)
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d10d      	bne.n	8010800 <HAL_SPI_Init+0x3f0>
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	2b10      	cmp	r3, #16
 80107e8:	d90a      	bls.n	8010800 <HAL_SPI_Init+0x3f0>
  {
    return HAL_ERROR;
 80107ea:	2301      	movs	r3, #1
 80107ec:	e0b8      	b.n	8010960 <HAL_SPI_Init+0x550>
 80107ee:	bf00      	nop
 80107f0:	0801deac 	.word	0x0801deac
 80107f4:	40013000 	.word	0x40013000
 80107f8:	40003800 	.word	0x40003800
 80107fc:	40003c00 	.word	0x40003c00
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010806:	b2db      	uxtb	r3, r3
 8010808:	2b00      	cmp	r3, #0
 801080a:	d106      	bne.n	801081a <HAL_SPI_Init+0x40a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2200      	movs	r2, #0
 8010810:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f7f1 fe49 	bl	80024ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2202      	movs	r2, #2
 801081e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	681a      	ldr	r2, [r3, #0]
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	f022 0201 	bic.w	r2, r2, #1
 8010830:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	689b      	ldr	r3, [r3, #8]
 8010838:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801083c:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	699b      	ldr	r3, [r3, #24]
 8010842:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010846:	d119      	bne.n	801087c <HAL_SPI_Init+0x46c>
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	685b      	ldr	r3, [r3, #4]
 801084c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010850:	d103      	bne.n	801085a <HAL_SPI_Init+0x44a>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010856:	2b00      	cmp	r3, #0
 8010858:	d008      	beq.n	801086c <HAL_SPI_Init+0x45c>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801085e:	2b00      	cmp	r3, #0
 8010860:	d10c      	bne.n	801087c <HAL_SPI_Init+0x46c>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801086a:	d107      	bne.n	801087c <HAL_SPI_Init+0x46c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	681a      	ldr	r2, [r3, #0]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801087a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	69da      	ldr	r2, [r3, #28]
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010884:	431a      	orrs	r2, r3
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	431a      	orrs	r2, r3
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801088e:	ea42 0103 	orr.w	r1, r2, r3
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	68da      	ldr	r2, [r3, #12]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	430a      	orrs	r2, r1
 801089c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108a6:	431a      	orrs	r2, r3
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108ac:	431a      	orrs	r2, r3
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	699b      	ldr	r3, [r3, #24]
 80108b2:	431a      	orrs	r2, r3
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	691b      	ldr	r3, [r3, #16]
 80108b8:	431a      	orrs	r2, r3
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	695b      	ldr	r3, [r3, #20]
 80108be:	431a      	orrs	r2, r3
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6a1b      	ldr	r3, [r3, #32]
 80108c4:	431a      	orrs	r2, r3
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	431a      	orrs	r2, r3
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108d0:	431a      	orrs	r2, r3
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	689b      	ldr	r3, [r3, #8]
 80108d6:	431a      	orrs	r2, r3
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108dc:	ea42 0103 	orr.w	r1, r2, r3
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	430a      	orrs	r2, r1
 80108ea:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d113      	bne.n	801091c <HAL_SPI_Init+0x50c>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	689b      	ldr	r3, [r3, #8]
 80108fa:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010906:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	689b      	ldr	r3, [r3, #8]
 801090e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801091a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f022 0201 	bic.w	r2, r2, #1
 801092a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	685b      	ldr	r3, [r3, #4]
 8010930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010934:	2b00      	cmp	r3, #0
 8010936:	d00a      	beq.n	801094e <HAL_SPI_Init+0x53e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	68db      	ldr	r3, [r3, #12]
 801093e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	430a      	orrs	r2, r1
 801094c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2200      	movs	r2, #0
 8010952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2201      	movs	r2, #1
 801095a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 801095e:	2300      	movs	r3, #0
}
 8010960:	4618      	mov	r0, r3
 8010962:	3710      	adds	r7, #16
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}

08010968 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b08a      	sub	sp, #40	; 0x28
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	691b      	ldr	r3, [r3, #16]
 8010976:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	695b      	ldr	r3, [r3, #20]
 801097e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8010980:	6a3a      	ldr	r2, [r7, #32]
 8010982:	69fb      	ldr	r3, [r7, #28]
 8010984:	4013      	ands	r3, r2
 8010986:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	689b      	ldr	r3, [r3, #8]
 801098e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8010990:	2300      	movs	r3, #0
 8010992:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801099a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	3330      	adds	r3, #48	; 0x30
 80109a2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80109a4:	69bb      	ldr	r3, [r7, #24]
 80109a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d113      	bne.n	80109d6 <HAL_SPI_IRQHandler+0x6e>
 80109ae:	69bb      	ldr	r3, [r7, #24]
 80109b0:	f003 0320 	and.w	r3, r3, #32
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d10e      	bne.n	80109d6 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80109b8:	69bb      	ldr	r3, [r7, #24]
 80109ba:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d009      	beq.n	80109d6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	4798      	blx	r3
    handled = 1UL;
 80109d2:	2301      	movs	r3, #1
 80109d4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80109d6:	69bb      	ldr	r3, [r7, #24]
 80109d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d10f      	bne.n	8010a00 <HAL_SPI_IRQHandler+0x98>
 80109e0:	69bb      	ldr	r3, [r7, #24]
 80109e2:	f003 0301 	and.w	r3, r3, #1
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d00a      	beq.n	8010a00 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80109ea:	69bb      	ldr	r3, [r7, #24]
 80109ec:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d105      	bne.n	8010a00 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	4798      	blx	r3
    handled = 1UL;
 80109fc:	2301      	movs	r3, #1
 80109fe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8010a00:	69bb      	ldr	r3, [r7, #24]
 8010a02:	f003 0320 	and.w	r3, r3, #32
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d10f      	bne.n	8010a2a <HAL_SPI_IRQHandler+0xc2>
 8010a0a:	69bb      	ldr	r3, [r7, #24]
 8010a0c:	f003 0302 	and.w	r3, r3, #2
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d00a      	beq.n	8010a2a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8010a14:	69bb      	ldr	r3, [r7, #24]
 8010a16:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d105      	bne.n	8010a2a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	4798      	blx	r3
    handled = 1UL;
 8010a26:	2301      	movs	r3, #1
 8010a28:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8010a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	f040 816f 	bne.w	8010d10 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8010a32:	69bb      	ldr	r3, [r7, #24]
 8010a34:	f003 0308 	and.w	r3, r3, #8
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	f000 80a0 	beq.w	8010b7e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	699a      	ldr	r2, [r3, #24]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	f042 0208 	orr.w	r2, r2, #8
 8010a4c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	699a      	ldr	r2, [r3, #24]
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f042 0210 	orr.w	r2, r2, #16
 8010a5c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	699a      	ldr	r2, [r3, #24]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a6c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	691a      	ldr	r2, [r3, #16]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	f022 0208 	bic.w	r2, r2, #8
 8010a7c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d00f      	beq.n	8010aa8 <HAL_SPI_IRQHandler+0x140>
 8010a88:	7cfb      	ldrb	r3, [r7, #19]
 8010a8a:	2b04      	cmp	r3, #4
 8010a8c:	d004      	beq.n	8010a98 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010a92:	69db      	ldr	r3, [r3, #28]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d007      	beq.n	8010aa8 <HAL_SPI_IRQHandler+0x140>
 8010a98:	7cfb      	ldrb	r3, [r7, #19]
 8010a9a:	2b03      	cmp	r3, #3
 8010a9c:	d059      	beq.n	8010b52 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010aa2:	69db      	ldr	r3, [r3, #28]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d154      	bne.n	8010b52 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	689b      	ldr	r3, [r3, #8]
 8010aae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d13d      	bne.n	8010b32 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8010ab6:	e036      	b.n	8010b26 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	68db      	ldr	r3, [r3, #12]
 8010abc:	2b0f      	cmp	r3, #15
 8010abe:	d90b      	bls.n	8010ad8 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681a      	ldr	r2, [r3, #0]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ac8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010aca:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ad0:	1d1a      	adds	r2, r3, #4
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	665a      	str	r2, [r3, #100]	; 0x64
 8010ad6:	e01d      	b.n	8010b14 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	68db      	ldr	r3, [r3, #12]
 8010adc:	2b07      	cmp	r3, #7
 8010ade:	d90b      	bls.n	8010af8 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ae4:	68fa      	ldr	r2, [r7, #12]
 8010ae6:	8812      	ldrh	r2, [r2, #0]
 8010ae8:	b292      	uxth	r2, r2
 8010aea:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010af0:	1c9a      	adds	r2, r3, #2
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	665a      	str	r2, [r3, #100]	; 0x64
 8010af6:	e00d      	b.n	8010b14 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b04:	7812      	ldrb	r2, [r2, #0]
 8010b06:	b2d2      	uxtb	r2, r2
 8010b08:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b0e:	1c5a      	adds	r2, r3, #1
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	3b01      	subs	r3, #1
 8010b1e:	b29a      	uxth	r2, r3
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010b2c:	b29b      	uxth	r3, r3
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d1c2      	bne.n	8010ab8 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f000 f93a 	bl	8010dac <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d003      	beq.n	8010b52 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f000 f90a 	bl	8010d64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8010b50:	e0e3      	b.n	8010d1a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8010b52:	7cfb      	ldrb	r3, [r7, #19]
 8010b54:	2b05      	cmp	r3, #5
 8010b56:	d103      	bne.n	8010b60 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f000 f8f9 	bl	8010d50 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8010b5e:	e0d9      	b.n	8010d14 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8010b60:	7cfb      	ldrb	r3, [r7, #19]
 8010b62:	2b04      	cmp	r3, #4
 8010b64:	d103      	bne.n	8010b6e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f000 f8e8 	bl	8010d3c <HAL_SPI_RxCpltCallback>
    return;
 8010b6c:	e0d2      	b.n	8010d14 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8010b6e:	7cfb      	ldrb	r3, [r7, #19]
 8010b70:	2b03      	cmp	r3, #3
 8010b72:	f040 80cf 	bne.w	8010d14 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f000 f8d6 	bl	8010d28 <HAL_SPI_TxCpltCallback>
    return;
 8010b7c:	e0ca      	b.n	8010d14 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8010b7e:	69fb      	ldr	r3, [r7, #28]
 8010b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d00d      	beq.n	8010ba4 <HAL_SPI_IRQHandler+0x23c>
 8010b88:	6a3b      	ldr	r3, [r7, #32]
 8010b8a:	f003 0308 	and.w	r3, r3, #8
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d008      	beq.n	8010ba4 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	699a      	ldr	r2, [r3, #24]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010ba0:	619a      	str	r2, [r3, #24]

    return;
 8010ba2:	e0ba      	b.n	8010d1a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8010ba4:	69bb      	ldr	r3, [r7, #24]
 8010ba6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	f000 80b5 	beq.w	8010d1a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8010bb0:	69bb      	ldr	r3, [r7, #24]
 8010bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d00f      	beq.n	8010bda <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010bc0:	f043 0204 	orr.w	r2, r3, #4
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	699a      	ldr	r2, [r3, #24]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010bd8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8010bda:	69bb      	ldr	r3, [r7, #24]
 8010bdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d00f      	beq.n	8010c04 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010bea:	f043 0201 	orr.w	r2, r3, #1
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	699a      	ldr	r2, [r3, #24]
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010c02:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8010c04:	69bb      	ldr	r3, [r7, #24]
 8010c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d00f      	beq.n	8010c2e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c14:	f043 0208 	orr.w	r2, r3, #8
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	699a      	ldr	r2, [r3, #24]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010c2c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8010c2e:	69bb      	ldr	r3, [r7, #24]
 8010c30:	f003 0320 	and.w	r3, r3, #32
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d00f      	beq.n	8010c58 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	699a      	ldr	r2, [r3, #24]
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	f042 0220 	orr.w	r2, r2, #32
 8010c56:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d05a      	beq.n	8010d18 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	681a      	ldr	r2, [r3, #0]
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	f022 0201 	bic.w	r2, r2, #1
 8010c70:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	6919      	ldr	r1, [r3, #16]
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	4b28      	ldr	r3, [pc, #160]	; (8010d20 <HAL_SPI_IRQHandler+0x3b8>)
 8010c7e:	400b      	ands	r3, r1
 8010c80:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010c88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010c8c:	d138      	bne.n	8010d00 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	689a      	ldr	r2, [r3, #8]
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8010c9c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d013      	beq.n	8010cce <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010caa:	4a1e      	ldr	r2, [pc, #120]	; (8010d24 <HAL_SPI_IRQHandler+0x3bc>)
 8010cac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7f4 fbd8 	bl	8005468 <HAL_DMA_Abort_IT>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d007      	beq.n	8010cce <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010cc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d020      	beq.n	8010d18 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010cda:	4a12      	ldr	r2, [pc, #72]	; (8010d24 <HAL_SPI_IRQHandler+0x3bc>)
 8010cdc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7f4 fbc0 	bl	8005468 <HAL_DMA_Abort_IT>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d014      	beq.n	8010d18 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010cf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8010cfe:	e00b      	b.n	8010d18 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2201      	movs	r2, #1
 8010d04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f000 f82b 	bl	8010d64 <HAL_SPI_ErrorCallback>
    return;
 8010d0e:	e003      	b.n	8010d18 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8010d10:	bf00      	nop
 8010d12:	e002      	b.n	8010d1a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8010d14:	bf00      	nop
 8010d16:	e000      	b.n	8010d1a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8010d18:	bf00      	nop
  }
}
 8010d1a:	3728      	adds	r7, #40	; 0x28
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	fffffc94 	.word	0xfffffc94
 8010d24:	08010d79 	.word	0x08010d79

08010d28 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8010d30:	bf00      	nop
 8010d32:	370c      	adds	r7, #12
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr

08010d3c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010d3c:	b480      	push	{r7}
 8010d3e:	b083      	sub	sp, #12
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8010d44:	bf00      	nop
 8010d46:	370c      	adds	r7, #12
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr

08010d50 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010d50:	b480      	push	{r7}
 8010d52:	b083      	sub	sp, #12
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8010d58:	bf00      	nop
 8010d5a:	370c      	adds	r7, #12
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d62:	4770      	bx	lr

08010d64 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b083      	sub	sp, #12
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010d6c:	bf00      	nop
 8010d6e:	370c      	adds	r7, #12
 8010d70:	46bd      	mov	sp, r7
 8010d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d76:	4770      	bx	lr

08010d78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b084      	sub	sp, #16
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d84:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	2200      	movs	r2, #0
 8010d8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2200      	movs	r2, #0
 8010d92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	2201      	movs	r2, #1
 8010d9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010d9e:	68f8      	ldr	r0, [r7, #12]
 8010da0:	f7ff ffe0 	bl	8010d64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010da4:	bf00      	nop
 8010da6:	3710      	adds	r7, #16
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}

08010dac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010dac:	b480      	push	{r7}
 8010dae:	b085      	sub	sp, #20
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	695b      	ldr	r3, [r3, #20]
 8010dba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	699a      	ldr	r2, [r3, #24]
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	f042 0208 	orr.w	r2, r2, #8
 8010dca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	699a      	ldr	r2, [r3, #24]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	f042 0210 	orr.w	r2, r2, #16
 8010dda:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	f022 0201 	bic.w	r2, r2, #1
 8010dea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	6919      	ldr	r1, [r3, #16]
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681a      	ldr	r2, [r3, #0]
 8010df6:	4b3c      	ldr	r3, [pc, #240]	; (8010ee8 <SPI_CloseTransfer+0x13c>)
 8010df8:	400b      	ands	r3, r1
 8010dfa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	689a      	ldr	r2, [r3, #8]
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8010e0a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010e12:	b2db      	uxtb	r3, r3
 8010e14:	2b04      	cmp	r3, #4
 8010e16:	d014      	beq.n	8010e42 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	f003 0320 	and.w	r3, r3, #32
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d00f      	beq.n	8010e42 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	699a      	ldr	r2, [r3, #24]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	f042 0220 	orr.w	r2, r2, #32
 8010e40:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010e48:	b2db      	uxtb	r3, r3
 8010e4a:	2b03      	cmp	r3, #3
 8010e4c:	d014      	beq.n	8010e78 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d00f      	beq.n	8010e78 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e5e:	f043 0204 	orr.w	r2, r3, #4
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	699a      	ldr	r2, [r3, #24]
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010e76:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d00f      	beq.n	8010ea2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e88:	f043 0201 	orr.w	r2, r3, #1
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	699a      	ldr	r2, [r3, #24]
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010ea0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d00f      	beq.n	8010ecc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010eb2:	f043 0208 	orr.w	r2, r3, #8
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	699a      	ldr	r2, [r3, #24]
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010eca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2200      	movs	r2, #0
 8010ed0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8010edc:	bf00      	nop
 8010ede:	3714      	adds	r7, #20
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee6:	4770      	bx	lr
 8010ee8:	fffffc90 	.word	0xfffffc90

08010eec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010eec:	b480      	push	{r7}
 8010eee:	b085      	sub	sp, #20
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ef8:	095b      	lsrs	r3, r3, #5
 8010efa:	3301      	adds	r3, #1
 8010efc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	68db      	ldr	r3, [r3, #12]
 8010f02:	3301      	adds	r3, #1
 8010f04:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	3307      	adds	r3, #7
 8010f0a:	08db      	lsrs	r3, r3, #3
 8010f0c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	68fa      	ldr	r2, [r7, #12]
 8010f12:	fb02 f303 	mul.w	r3, r2, r3
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3714      	adds	r7, #20
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f20:	4770      	bx	lr
	...

08010f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d101      	bne.n	8010f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010f32:	2301      	movs	r3, #1
 8010f34:	e0cd      	b.n	80110d2 <HAL_TIM_Base_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	4a68      	ldr	r2, [pc, #416]	; (80110dc <HAL_TIM_Base_Init+0x1b8>)
 8010f3c:	4293      	cmp	r3, r2
 8010f3e:	d045      	beq.n	8010fcc <HAL_TIM_Base_Init+0xa8>
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f48:	d040      	beq.n	8010fcc <HAL_TIM_Base_Init+0xa8>
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	4a64      	ldr	r2, [pc, #400]	; (80110e0 <HAL_TIM_Base_Init+0x1bc>)
 8010f50:	4293      	cmp	r3, r2
 8010f52:	d03b      	beq.n	8010fcc <HAL_TIM_Base_Init+0xa8>
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	4a62      	ldr	r2, [pc, #392]	; (80110e4 <HAL_TIM_Base_Init+0x1c0>)
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d036      	beq.n	8010fcc <HAL_TIM_Base_Init+0xa8>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	4a61      	ldr	r2, [pc, #388]	; (80110e8 <HAL_TIM_Base_Init+0x1c4>)
 8010f64:	4293      	cmp	r3, r2
 8010f66:	d031      	beq.n	8010fcc <HAL_TIM_Base_Init+0xa8>
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	4a5f      	ldr	r2, [pc, #380]	; (80110ec <HAL_TIM_Base_Init+0x1c8>)
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	d02c      	beq.n	8010fcc <HAL_TIM_Base_Init+0xa8>
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	4a5e      	ldr	r2, [pc, #376]	; (80110f0 <HAL_TIM_Base_Init+0x1cc>)
 8010f78:	4293      	cmp	r3, r2
 8010f7a:	d027      	beq.n	8010fcc <HAL_TIM_Base_Init+0xa8>
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	4a5c      	ldr	r2, [pc, #368]	; (80110f4 <HAL_TIM_Base_Init+0x1d0>)
 8010f82:	4293      	cmp	r3, r2
 8010f84:	d022      	beq.n	8010fcc <HAL_TIM_Base_Init+0xa8>
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	4a5b      	ldr	r2, [pc, #364]	; (80110f8 <HAL_TIM_Base_Init+0x1d4>)
 8010f8c:	4293      	cmp	r3, r2
 8010f8e:	d01d      	beq.n	8010fcc <HAL_TIM_Base_Init+0xa8>
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	4a59      	ldr	r2, [pc, #356]	; (80110fc <HAL_TIM_Base_Init+0x1d8>)
 8010f96:	4293      	cmp	r3, r2
 8010f98:	d018      	beq.n	8010fcc <HAL_TIM_Base_Init+0xa8>
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	4a58      	ldr	r2, [pc, #352]	; (8011100 <HAL_TIM_Base_Init+0x1dc>)
 8010fa0:	4293      	cmp	r3, r2
 8010fa2:	d013      	beq.n	8010fcc <HAL_TIM_Base_Init+0xa8>
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	4a56      	ldr	r2, [pc, #344]	; (8011104 <HAL_TIM_Base_Init+0x1e0>)
 8010faa:	4293      	cmp	r3, r2
 8010fac:	d00e      	beq.n	8010fcc <HAL_TIM_Base_Init+0xa8>
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	4a55      	ldr	r2, [pc, #340]	; (8011108 <HAL_TIM_Base_Init+0x1e4>)
 8010fb4:	4293      	cmp	r3, r2
 8010fb6:	d009      	beq.n	8010fcc <HAL_TIM_Base_Init+0xa8>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	4a53      	ldr	r2, [pc, #332]	; (801110c <HAL_TIM_Base_Init+0x1e8>)
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	d004      	beq.n	8010fcc <HAL_TIM_Base_Init+0xa8>
 8010fc2:	f44f 718b 	mov.w	r1, #278	; 0x116
 8010fc6:	4852      	ldr	r0, [pc, #328]	; (8011110 <HAL_TIM_Base_Init+0x1ec>)
 8010fc8:	f7f0 fd53 	bl	8001a72 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	689b      	ldr	r3, [r3, #8]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d014      	beq.n	8010ffe <HAL_TIM_Base_Init+0xda>
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	689b      	ldr	r3, [r3, #8]
 8010fd8:	2b10      	cmp	r3, #16
 8010fda:	d010      	beq.n	8010ffe <HAL_TIM_Base_Init+0xda>
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	689b      	ldr	r3, [r3, #8]
 8010fe0:	2b20      	cmp	r3, #32
 8010fe2:	d00c      	beq.n	8010ffe <HAL_TIM_Base_Init+0xda>
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	689b      	ldr	r3, [r3, #8]
 8010fe8:	2b40      	cmp	r3, #64	; 0x40
 8010fea:	d008      	beq.n	8010ffe <HAL_TIM_Base_Init+0xda>
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	689b      	ldr	r3, [r3, #8]
 8010ff0:	2b60      	cmp	r3, #96	; 0x60
 8010ff2:	d004      	beq.n	8010ffe <HAL_TIM_Base_Init+0xda>
 8010ff4:	f240 1117 	movw	r1, #279	; 0x117
 8010ff8:	4845      	ldr	r0, [pc, #276]	; (8011110 <HAL_TIM_Base_Init+0x1ec>)
 8010ffa:	f7f0 fd3a 	bl	8001a72 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	691b      	ldr	r3, [r3, #16]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d00e      	beq.n	8011024 <HAL_TIM_Base_Init+0x100>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	691b      	ldr	r3, [r3, #16]
 801100a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801100e:	d009      	beq.n	8011024 <HAL_TIM_Base_Init+0x100>
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	691b      	ldr	r3, [r3, #16]
 8011014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011018:	d004      	beq.n	8011024 <HAL_TIM_Base_Init+0x100>
 801101a:	f44f 718c 	mov.w	r1, #280	; 0x118
 801101e:	483c      	ldr	r0, [pc, #240]	; (8011110 <HAL_TIM_Base_Init+0x1ec>)
 8011020:	f7f0 fd27 	bl	8001a72 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	699b      	ldr	r3, [r3, #24]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d008      	beq.n	801103e <HAL_TIM_Base_Init+0x11a>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	699b      	ldr	r3, [r3, #24]
 8011030:	2b80      	cmp	r3, #128	; 0x80
 8011032:	d004      	beq.n	801103e <HAL_TIM_Base_Init+0x11a>
 8011034:	f240 1119 	movw	r1, #281	; 0x119
 8011038:	4835      	ldr	r0, [pc, #212]	; (8011110 <HAL_TIM_Base_Init+0x1ec>)
 801103a:	f7f0 fd1a 	bl	8001a72 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011044:	b2db      	uxtb	r3, r3
 8011046:	2b00      	cmp	r3, #0
 8011048:	d106      	bne.n	8011058 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2200      	movs	r2, #0
 801104e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f7f1 fea8 	bl	8002da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2202      	movs	r2, #2
 801105c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681a      	ldr	r2, [r3, #0]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	3304      	adds	r3, #4
 8011068:	4619      	mov	r1, r3
 801106a:	4610      	mov	r0, r2
 801106c:	f001 fd10 	bl	8012a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2201      	movs	r2, #1
 8011074:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2201      	movs	r2, #1
 801107c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2201      	movs	r2, #1
 8011084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2201      	movs	r2, #1
 801108c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2201      	movs	r2, #1
 8011094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2201      	movs	r2, #1
 801109c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2201      	movs	r2, #1
 80110a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2201      	movs	r2, #1
 80110ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2201      	movs	r2, #1
 80110b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2201      	movs	r2, #1
 80110bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2201      	movs	r2, #1
 80110c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2201      	movs	r2, #1
 80110cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3708      	adds	r7, #8
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	40010000 	.word	0x40010000
 80110e0:	40000400 	.word	0x40000400
 80110e4:	40000800 	.word	0x40000800
 80110e8:	40000c00 	.word	0x40000c00
 80110ec:	40001000 	.word	0x40001000
 80110f0:	40001400 	.word	0x40001400
 80110f4:	40010400 	.word	0x40010400
 80110f8:	40001800 	.word	0x40001800
 80110fc:	40001c00 	.word	0x40001c00
 8011100:	40002000 	.word	0x40002000
 8011104:	40014000 	.word	0x40014000
 8011108:	40014400 	.word	0x40014400
 801110c:	40014800 	.word	0x40014800
 8011110:	0801dee4 	.word	0x0801dee4

08011114 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b082      	sub	sp, #8
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d101      	bne.n	8011126 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011122:	2301      	movs	r3, #1
 8011124:	e0cd      	b.n	80112c2 <HAL_TIM_PWM_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4a68      	ldr	r2, [pc, #416]	; (80112cc <HAL_TIM_PWM_Init+0x1b8>)
 801112c:	4293      	cmp	r3, r2
 801112e:	d045      	beq.n	80111bc <HAL_TIM_PWM_Init+0xa8>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011138:	d040      	beq.n	80111bc <HAL_TIM_PWM_Init+0xa8>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	4a64      	ldr	r2, [pc, #400]	; (80112d0 <HAL_TIM_PWM_Init+0x1bc>)
 8011140:	4293      	cmp	r3, r2
 8011142:	d03b      	beq.n	80111bc <HAL_TIM_PWM_Init+0xa8>
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	4a62      	ldr	r2, [pc, #392]	; (80112d4 <HAL_TIM_PWM_Init+0x1c0>)
 801114a:	4293      	cmp	r3, r2
 801114c:	d036      	beq.n	80111bc <HAL_TIM_PWM_Init+0xa8>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4a61      	ldr	r2, [pc, #388]	; (80112d8 <HAL_TIM_PWM_Init+0x1c4>)
 8011154:	4293      	cmp	r3, r2
 8011156:	d031      	beq.n	80111bc <HAL_TIM_PWM_Init+0xa8>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	4a5f      	ldr	r2, [pc, #380]	; (80112dc <HAL_TIM_PWM_Init+0x1c8>)
 801115e:	4293      	cmp	r3, r2
 8011160:	d02c      	beq.n	80111bc <HAL_TIM_PWM_Init+0xa8>
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	4a5e      	ldr	r2, [pc, #376]	; (80112e0 <HAL_TIM_PWM_Init+0x1cc>)
 8011168:	4293      	cmp	r3, r2
 801116a:	d027      	beq.n	80111bc <HAL_TIM_PWM_Init+0xa8>
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	4a5c      	ldr	r2, [pc, #368]	; (80112e4 <HAL_TIM_PWM_Init+0x1d0>)
 8011172:	4293      	cmp	r3, r2
 8011174:	d022      	beq.n	80111bc <HAL_TIM_PWM_Init+0xa8>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	4a5b      	ldr	r2, [pc, #364]	; (80112e8 <HAL_TIM_PWM_Init+0x1d4>)
 801117c:	4293      	cmp	r3, r2
 801117e:	d01d      	beq.n	80111bc <HAL_TIM_PWM_Init+0xa8>
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	4a59      	ldr	r2, [pc, #356]	; (80112ec <HAL_TIM_PWM_Init+0x1d8>)
 8011186:	4293      	cmp	r3, r2
 8011188:	d018      	beq.n	80111bc <HAL_TIM_PWM_Init+0xa8>
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	4a58      	ldr	r2, [pc, #352]	; (80112f0 <HAL_TIM_PWM_Init+0x1dc>)
 8011190:	4293      	cmp	r3, r2
 8011192:	d013      	beq.n	80111bc <HAL_TIM_PWM_Init+0xa8>
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	4a56      	ldr	r2, [pc, #344]	; (80112f4 <HAL_TIM_PWM_Init+0x1e0>)
 801119a:	4293      	cmp	r3, r2
 801119c:	d00e      	beq.n	80111bc <HAL_TIM_PWM_Init+0xa8>
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	4a55      	ldr	r2, [pc, #340]	; (80112f8 <HAL_TIM_PWM_Init+0x1e4>)
 80111a4:	4293      	cmp	r3, r2
 80111a6:	d009      	beq.n	80111bc <HAL_TIM_PWM_Init+0xa8>
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	4a53      	ldr	r2, [pc, #332]	; (80112fc <HAL_TIM_PWM_Init+0x1e8>)
 80111ae:	4293      	cmp	r3, r2
 80111b0:	d004      	beq.n	80111bc <HAL_TIM_PWM_Init+0xa8>
 80111b2:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 80111b6:	4852      	ldr	r0, [pc, #328]	; (8011300 <HAL_TIM_PWM_Init+0x1ec>)
 80111b8:	f7f0 fc5b 	bl	8001a72 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	689b      	ldr	r3, [r3, #8]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d014      	beq.n	80111ee <HAL_TIM_PWM_Init+0xda>
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	689b      	ldr	r3, [r3, #8]
 80111c8:	2b10      	cmp	r3, #16
 80111ca:	d010      	beq.n	80111ee <HAL_TIM_PWM_Init+0xda>
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	689b      	ldr	r3, [r3, #8]
 80111d0:	2b20      	cmp	r3, #32
 80111d2:	d00c      	beq.n	80111ee <HAL_TIM_PWM_Init+0xda>
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	689b      	ldr	r3, [r3, #8]
 80111d8:	2b40      	cmp	r3, #64	; 0x40
 80111da:	d008      	beq.n	80111ee <HAL_TIM_PWM_Init+0xda>
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	689b      	ldr	r3, [r3, #8]
 80111e0:	2b60      	cmp	r3, #96	; 0x60
 80111e2:	d004      	beq.n	80111ee <HAL_TIM_PWM_Init+0xda>
 80111e4:	f240 5131 	movw	r1, #1329	; 0x531
 80111e8:	4845      	ldr	r0, [pc, #276]	; (8011300 <HAL_TIM_PWM_Init+0x1ec>)
 80111ea:	f7f0 fc42 	bl	8001a72 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	691b      	ldr	r3, [r3, #16]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d00e      	beq.n	8011214 <HAL_TIM_PWM_Init+0x100>
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	691b      	ldr	r3, [r3, #16]
 80111fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80111fe:	d009      	beq.n	8011214 <HAL_TIM_PWM_Init+0x100>
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	691b      	ldr	r3, [r3, #16]
 8011204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011208:	d004      	beq.n	8011214 <HAL_TIM_PWM_Init+0x100>
 801120a:	f240 5132 	movw	r1, #1330	; 0x532
 801120e:	483c      	ldr	r0, [pc, #240]	; (8011300 <HAL_TIM_PWM_Init+0x1ec>)
 8011210:	f7f0 fc2f 	bl	8001a72 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	699b      	ldr	r3, [r3, #24]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d008      	beq.n	801122e <HAL_TIM_PWM_Init+0x11a>
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	699b      	ldr	r3, [r3, #24]
 8011220:	2b80      	cmp	r3, #128	; 0x80
 8011222:	d004      	beq.n	801122e <HAL_TIM_PWM_Init+0x11a>
 8011224:	f240 5133 	movw	r1, #1331	; 0x533
 8011228:	4835      	ldr	r0, [pc, #212]	; (8011300 <HAL_TIM_PWM_Init+0x1ec>)
 801122a:	f7f0 fc22 	bl	8001a72 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011234:	b2db      	uxtb	r3, r3
 8011236:	2b00      	cmp	r3, #0
 8011238:	d106      	bne.n	8011248 <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2200      	movs	r2, #0
 801123e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f7f1 fe32 	bl	8002eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2202      	movs	r2, #2
 801124c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681a      	ldr	r2, [r3, #0]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	3304      	adds	r3, #4
 8011258:	4619      	mov	r1, r3
 801125a:	4610      	mov	r0, r2
 801125c:	f001 fc18 	bl	8012a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2201      	movs	r2, #1
 8011264:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2201      	movs	r2, #1
 801126c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2201      	movs	r2, #1
 8011274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2201      	movs	r2, #1
 801127c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2201      	movs	r2, #1
 8011284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2201      	movs	r2, #1
 801128c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2201      	movs	r2, #1
 8011294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2201      	movs	r2, #1
 801129c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2201      	movs	r2, #1
 80112a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	2201      	movs	r2, #1
 80112ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2201      	movs	r2, #1
 80112b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	2201      	movs	r2, #1
 80112bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80112c0:	2300      	movs	r3, #0
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3708      	adds	r7, #8
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}
 80112ca:	bf00      	nop
 80112cc:	40010000 	.word	0x40010000
 80112d0:	40000400 	.word	0x40000400
 80112d4:	40000800 	.word	0x40000800
 80112d8:	40000c00 	.word	0x40000c00
 80112dc:	40001000 	.word	0x40001000
 80112e0:	40001400 	.word	0x40001400
 80112e4:	40010400 	.word	0x40010400
 80112e8:	40001800 	.word	0x40001800
 80112ec:	40001c00 	.word	0x40001c00
 80112f0:	40002000 	.word	0x40002000
 80112f4:	40014000 	.word	0x40014000
 80112f8:	40014400 	.word	0x40014400
 80112fc:	40014800 	.word	0x40014800
 8011300:	0801dee4 	.word	0x0801dee4

08011304 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b086      	sub	sp, #24
 8011308:	af00      	add	r7, sp, #0
 801130a:	60f8      	str	r0, [r7, #12]
 801130c:	60b9      	str	r1, [r7, #8]
 801130e:	607a      	str	r2, [r7, #4]
 8011310:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8011312:	2300      	movs	r3, #0
 8011314:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	4a88      	ldr	r2, [pc, #544]	; (801153c <HAL_TIM_PWM_Start_DMA+0x238>)
 801131c:	4293      	cmp	r3, r2
 801131e:	d117      	bne.n	8011350 <HAL_TIM_PWM_Start_DMA+0x4c>
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	2b00      	cmp	r3, #0
 8011324:	f000 80ae 	beq.w	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	2b04      	cmp	r3, #4
 801132c:	f000 80aa 	beq.w	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	2b08      	cmp	r3, #8
 8011334:	f000 80a6 	beq.w	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	2b0c      	cmp	r3, #12
 801133c:	f000 80a2 	beq.w	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	2b10      	cmp	r3, #16
 8011344:	f000 809e 	beq.w	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	2b14      	cmp	r3, #20
 801134c:	f000 809a 	beq.w	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011358:	d10f      	bne.n	801137a <HAL_TIM_PWM_Start_DMA+0x76>
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	2b00      	cmp	r3, #0
 801135e:	f000 8091 	beq.w	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 8011362:	68bb      	ldr	r3, [r7, #8]
 8011364:	2b04      	cmp	r3, #4
 8011366:	f000 808d 	beq.w	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	2b08      	cmp	r3, #8
 801136e:	f000 8089 	beq.w	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	2b0c      	cmp	r3, #12
 8011376:	f000 8085 	beq.w	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	4a70      	ldr	r2, [pc, #448]	; (8011540 <HAL_TIM_PWM_Start_DMA+0x23c>)
 8011380:	4293      	cmp	r3, r2
 8011382:	d10b      	bne.n	801139c <HAL_TIM_PWM_Start_DMA+0x98>
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d07c      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	2b04      	cmp	r3, #4
 801138e:	d079      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	2b08      	cmp	r3, #8
 8011394:	d076      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	2b0c      	cmp	r3, #12
 801139a:	d073      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	4a68      	ldr	r2, [pc, #416]	; (8011544 <HAL_TIM_PWM_Start_DMA+0x240>)
 80113a2:	4293      	cmp	r3, r2
 80113a4:	d10b      	bne.n	80113be <HAL_TIM_PWM_Start_DMA+0xba>
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d06b      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	2b04      	cmp	r3, #4
 80113b0:	d068      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	2b08      	cmp	r3, #8
 80113b6:	d065      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	2b0c      	cmp	r3, #12
 80113bc:	d062      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	4a61      	ldr	r2, [pc, #388]	; (8011548 <HAL_TIM_PWM_Start_DMA+0x244>)
 80113c4:	4293      	cmp	r3, r2
 80113c6:	d10b      	bne.n	80113e0 <HAL_TIM_PWM_Start_DMA+0xdc>
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d05a      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	2b04      	cmp	r3, #4
 80113d2:	d057      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	2b08      	cmp	r3, #8
 80113d8:	d054      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	2b0c      	cmp	r3, #12
 80113de:	d051      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	4a59      	ldr	r2, [pc, #356]	; (801154c <HAL_TIM_PWM_Start_DMA+0x248>)
 80113e6:	4293      	cmp	r3, r2
 80113e8:	d111      	bne.n	801140e <HAL_TIM_PWM_Start_DMA+0x10a>
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d049      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	2b04      	cmp	r3, #4
 80113f4:	d046      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	2b08      	cmp	r3, #8
 80113fa:	d043      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	2b0c      	cmp	r3, #12
 8011400:	d040      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	2b10      	cmp	r3, #16
 8011406:	d03d      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	2b14      	cmp	r3, #20
 801140c:	d03a      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	4a4f      	ldr	r2, [pc, #316]	; (8011550 <HAL_TIM_PWM_Start_DMA+0x24c>)
 8011414:	4293      	cmp	r3, r2
 8011416:	d105      	bne.n	8011424 <HAL_TIM_PWM_Start_DMA+0x120>
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d032      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	2b04      	cmp	r3, #4
 8011422:	d02f      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	4a4a      	ldr	r2, [pc, #296]	; (8011554 <HAL_TIM_PWM_Start_DMA+0x250>)
 801142a:	4293      	cmp	r3, r2
 801142c:	d102      	bne.n	8011434 <HAL_TIM_PWM_Start_DMA+0x130>
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d027      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4a47      	ldr	r2, [pc, #284]	; (8011558 <HAL_TIM_PWM_Start_DMA+0x254>)
 801143a:	4293      	cmp	r3, r2
 801143c:	d102      	bne.n	8011444 <HAL_TIM_PWM_Start_DMA+0x140>
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d01f      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	4a44      	ldr	r2, [pc, #272]	; (801155c <HAL_TIM_PWM_Start_DMA+0x258>)
 801144a:	4293      	cmp	r3, r2
 801144c:	d105      	bne.n	801145a <HAL_TIM_PWM_Start_DMA+0x156>
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d017      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	2b04      	cmp	r3, #4
 8011458:	d014      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	4a40      	ldr	r2, [pc, #256]	; (8011560 <HAL_TIM_PWM_Start_DMA+0x25c>)
 8011460:	4293      	cmp	r3, r2
 8011462:	d102      	bne.n	801146a <HAL_TIM_PWM_Start_DMA+0x166>
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d00c      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	4a3d      	ldr	r2, [pc, #244]	; (8011564 <HAL_TIM_PWM_Start_DMA+0x260>)
 8011470:	4293      	cmp	r3, r2
 8011472:	d102      	bne.n	801147a <HAL_TIM_PWM_Start_DMA+0x176>
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d004      	beq.n	8011484 <HAL_TIM_PWM_Start_DMA+0x180>
 801147a:	f240 61be 	movw	r1, #1726	; 0x6be
 801147e:	483a      	ldr	r0, [pc, #232]	; (8011568 <HAL_TIM_PWM_Start_DMA+0x264>)
 8011480:	f7f0 faf7 	bl	8001a72 <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d109      	bne.n	801149e <HAL_TIM_PWM_Start_DMA+0x19a>
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011490:	b2db      	uxtb	r3, r3
 8011492:	2b02      	cmp	r3, #2
 8011494:	bf0c      	ite	eq
 8011496:	2301      	moveq	r3, #1
 8011498:	2300      	movne	r3, #0
 801149a:	b2db      	uxtb	r3, r3
 801149c:	e03c      	b.n	8011518 <HAL_TIM_PWM_Start_DMA+0x214>
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	2b04      	cmp	r3, #4
 80114a2:	d109      	bne.n	80114b8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80114aa:	b2db      	uxtb	r3, r3
 80114ac:	2b02      	cmp	r3, #2
 80114ae:	bf0c      	ite	eq
 80114b0:	2301      	moveq	r3, #1
 80114b2:	2300      	movne	r3, #0
 80114b4:	b2db      	uxtb	r3, r3
 80114b6:	e02f      	b.n	8011518 <HAL_TIM_PWM_Start_DMA+0x214>
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	2b08      	cmp	r3, #8
 80114bc:	d109      	bne.n	80114d2 <HAL_TIM_PWM_Start_DMA+0x1ce>
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80114c4:	b2db      	uxtb	r3, r3
 80114c6:	2b02      	cmp	r3, #2
 80114c8:	bf0c      	ite	eq
 80114ca:	2301      	moveq	r3, #1
 80114cc:	2300      	movne	r3, #0
 80114ce:	b2db      	uxtb	r3, r3
 80114d0:	e022      	b.n	8011518 <HAL_TIM_PWM_Start_DMA+0x214>
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	2b0c      	cmp	r3, #12
 80114d6:	d109      	bne.n	80114ec <HAL_TIM_PWM_Start_DMA+0x1e8>
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80114de:	b2db      	uxtb	r3, r3
 80114e0:	2b02      	cmp	r3, #2
 80114e2:	bf0c      	ite	eq
 80114e4:	2301      	moveq	r3, #1
 80114e6:	2300      	movne	r3, #0
 80114e8:	b2db      	uxtb	r3, r3
 80114ea:	e015      	b.n	8011518 <HAL_TIM_PWM_Start_DMA+0x214>
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	2b10      	cmp	r3, #16
 80114f0:	d109      	bne.n	8011506 <HAL_TIM_PWM_Start_DMA+0x202>
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80114f8:	b2db      	uxtb	r3, r3
 80114fa:	2b02      	cmp	r3, #2
 80114fc:	bf0c      	ite	eq
 80114fe:	2301      	moveq	r3, #1
 8011500:	2300      	movne	r3, #0
 8011502:	b2db      	uxtb	r3, r3
 8011504:	e008      	b.n	8011518 <HAL_TIM_PWM_Start_DMA+0x214>
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801150c:	b2db      	uxtb	r3, r3
 801150e:	2b02      	cmp	r3, #2
 8011510:	bf0c      	ite	eq
 8011512:	2301      	moveq	r3, #1
 8011514:	2300      	movne	r3, #0
 8011516:	b2db      	uxtb	r3, r3
 8011518:	2b00      	cmp	r3, #0
 801151a:	d001      	beq.n	8011520 <HAL_TIM_PWM_Start_DMA+0x21c>
  {
    return HAL_BUSY;
 801151c:	2302      	movs	r3, #2
 801151e:	e1c9      	b.n	80118b4 <HAL_TIM_PWM_Start_DMA+0x5b0>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d122      	bne.n	801156c <HAL_TIM_PWM_Start_DMA+0x268>
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801152c:	b2db      	uxtb	r3, r3
 801152e:	2b01      	cmp	r3, #1
 8011530:	bf0c      	ite	eq
 8011532:	2301      	moveq	r3, #1
 8011534:	2300      	movne	r3, #0
 8011536:	b2db      	uxtb	r3, r3
 8011538:	e055      	b.n	80115e6 <HAL_TIM_PWM_Start_DMA+0x2e2>
 801153a:	bf00      	nop
 801153c:	40010000 	.word	0x40010000
 8011540:	40000400 	.word	0x40000400
 8011544:	40000800 	.word	0x40000800
 8011548:	40000c00 	.word	0x40000c00
 801154c:	40010400 	.word	0x40010400
 8011550:	40001800 	.word	0x40001800
 8011554:	40001c00 	.word	0x40001c00
 8011558:	40002000 	.word	0x40002000
 801155c:	40014000 	.word	0x40014000
 8011560:	40014400 	.word	0x40014400
 8011564:	40014800 	.word	0x40014800
 8011568:	0801dee4 	.word	0x0801dee4
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	2b04      	cmp	r3, #4
 8011570:	d109      	bne.n	8011586 <HAL_TIM_PWM_Start_DMA+0x282>
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011578:	b2db      	uxtb	r3, r3
 801157a:	2b01      	cmp	r3, #1
 801157c:	bf0c      	ite	eq
 801157e:	2301      	moveq	r3, #1
 8011580:	2300      	movne	r3, #0
 8011582:	b2db      	uxtb	r3, r3
 8011584:	e02f      	b.n	80115e6 <HAL_TIM_PWM_Start_DMA+0x2e2>
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	2b08      	cmp	r3, #8
 801158a:	d109      	bne.n	80115a0 <HAL_TIM_PWM_Start_DMA+0x29c>
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011592:	b2db      	uxtb	r3, r3
 8011594:	2b01      	cmp	r3, #1
 8011596:	bf0c      	ite	eq
 8011598:	2301      	moveq	r3, #1
 801159a:	2300      	movne	r3, #0
 801159c:	b2db      	uxtb	r3, r3
 801159e:	e022      	b.n	80115e6 <HAL_TIM_PWM_Start_DMA+0x2e2>
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	2b0c      	cmp	r3, #12
 80115a4:	d109      	bne.n	80115ba <HAL_TIM_PWM_Start_DMA+0x2b6>
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80115ac:	b2db      	uxtb	r3, r3
 80115ae:	2b01      	cmp	r3, #1
 80115b0:	bf0c      	ite	eq
 80115b2:	2301      	moveq	r3, #1
 80115b4:	2300      	movne	r3, #0
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	e015      	b.n	80115e6 <HAL_TIM_PWM_Start_DMA+0x2e2>
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	2b10      	cmp	r3, #16
 80115be:	d109      	bne.n	80115d4 <HAL_TIM_PWM_Start_DMA+0x2d0>
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80115c6:	b2db      	uxtb	r3, r3
 80115c8:	2b01      	cmp	r3, #1
 80115ca:	bf0c      	ite	eq
 80115cc:	2301      	moveq	r3, #1
 80115ce:	2300      	movne	r3, #0
 80115d0:	b2db      	uxtb	r3, r3
 80115d2:	e008      	b.n	80115e6 <HAL_TIM_PWM_Start_DMA+0x2e2>
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80115da:	b2db      	uxtb	r3, r3
 80115dc:	2b01      	cmp	r3, #1
 80115de:	bf0c      	ite	eq
 80115e0:	2301      	moveq	r3, #1
 80115e2:	2300      	movne	r3, #0
 80115e4:	b2db      	uxtb	r3, r3
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d034      	beq.n	8011654 <HAL_TIM_PWM_Start_DMA+0x350>
  {
    if ((pData == NULL) && (Length > 0U))
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d104      	bne.n	80115fa <HAL_TIM_PWM_Start_DMA+0x2f6>
 80115f0:	887b      	ldrh	r3, [r7, #2]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d001      	beq.n	80115fa <HAL_TIM_PWM_Start_DMA+0x2f6>
    {
      return HAL_ERROR;
 80115f6:	2301      	movs	r3, #1
 80115f8:	e15c      	b.n	80118b4 <HAL_TIM_PWM_Start_DMA+0x5b0>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d104      	bne.n	801160a <HAL_TIM_PWM_Start_DMA+0x306>
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	2202      	movs	r2, #2
 8011604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011608:	e026      	b.n	8011658 <HAL_TIM_PWM_Start_DMA+0x354>
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	2b04      	cmp	r3, #4
 801160e:	d104      	bne.n	801161a <HAL_TIM_PWM_Start_DMA+0x316>
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	2202      	movs	r2, #2
 8011614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011618:	e01e      	b.n	8011658 <HAL_TIM_PWM_Start_DMA+0x354>
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	2b08      	cmp	r3, #8
 801161e:	d104      	bne.n	801162a <HAL_TIM_PWM_Start_DMA+0x326>
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	2202      	movs	r2, #2
 8011624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011628:	e016      	b.n	8011658 <HAL_TIM_PWM_Start_DMA+0x354>
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	2b0c      	cmp	r3, #12
 801162e:	d104      	bne.n	801163a <HAL_TIM_PWM_Start_DMA+0x336>
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	2202      	movs	r2, #2
 8011634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011638:	e00e      	b.n	8011658 <HAL_TIM_PWM_Start_DMA+0x354>
 801163a:	68bb      	ldr	r3, [r7, #8]
 801163c:	2b10      	cmp	r3, #16
 801163e:	d104      	bne.n	801164a <HAL_TIM_PWM_Start_DMA+0x346>
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	2202      	movs	r2, #2
 8011644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011648:	e006      	b.n	8011658 <HAL_TIM_PWM_Start_DMA+0x354>
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	2202      	movs	r2, #2
 801164e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011652:	e001      	b.n	8011658 <HAL_TIM_PWM_Start_DMA+0x354>
    }
  }
  else
  {
    return HAL_ERROR;
 8011654:	2301      	movs	r3, #1
 8011656:	e12d      	b.n	80118b4 <HAL_TIM_PWM_Start_DMA+0x5b0>
  }

  switch (Channel)
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	2b0c      	cmp	r3, #12
 801165c:	f200 80ae 	bhi.w	80117bc <HAL_TIM_PWM_Start_DMA+0x4b8>
 8011660:	a201      	add	r2, pc, #4	; (adr r2, 8011668 <HAL_TIM_PWM_Start_DMA+0x364>)
 8011662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011666:	bf00      	nop
 8011668:	0801169d 	.word	0x0801169d
 801166c:	080117bd 	.word	0x080117bd
 8011670:	080117bd 	.word	0x080117bd
 8011674:	080117bd 	.word	0x080117bd
 8011678:	080116e5 	.word	0x080116e5
 801167c:	080117bd 	.word	0x080117bd
 8011680:	080117bd 	.word	0x080117bd
 8011684:	080117bd 	.word	0x080117bd
 8011688:	0801172d 	.word	0x0801172d
 801168c:	080117bd 	.word	0x080117bd
 8011690:	080117bd 	.word	0x080117bd
 8011694:	080117bd 	.word	0x080117bd
 8011698:	08011775 	.word	0x08011775
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116a0:	4a86      	ldr	r2, [pc, #536]	; (80118bc <HAL_TIM_PWM_Start_DMA+0x5b8>)
 80116a2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116a8:	4a85      	ldr	r2, [pc, #532]	; (80118c0 <HAL_TIM_PWM_Start_DMA+0x5bc>)
 80116aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116b0:	4a84      	ldr	r2, [pc, #528]	; (80118c4 <HAL_TIM_PWM_Start_DMA+0x5c0>)
 80116b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80116b8:	6879      	ldr	r1, [r7, #4]
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	3334      	adds	r3, #52	; 0x34
 80116c0:	461a      	mov	r2, r3
 80116c2:	887b      	ldrh	r3, [r7, #2]
 80116c4:	f7f3 f93a 	bl	800493c <HAL_DMA_Start_IT>
 80116c8:	4603      	mov	r3, r0
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d001      	beq.n	80116d2 <HAL_TIM_PWM_Start_DMA+0x3ce>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80116ce:	2301      	movs	r3, #1
 80116d0:	e0f0      	b.n	80118b4 <HAL_TIM_PWM_Start_DMA+0x5b0>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	68da      	ldr	r2, [r3, #12]
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80116e0:	60da      	str	r2, [r3, #12]
      break;
 80116e2:	e06e      	b.n	80117c2 <HAL_TIM_PWM_Start_DMA+0x4be>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116e8:	4a74      	ldr	r2, [pc, #464]	; (80118bc <HAL_TIM_PWM_Start_DMA+0x5b8>)
 80116ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116f0:	4a73      	ldr	r2, [pc, #460]	; (80118c0 <HAL_TIM_PWM_Start_DMA+0x5bc>)
 80116f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116f8:	4a72      	ldr	r2, [pc, #456]	; (80118c4 <HAL_TIM_PWM_Start_DMA+0x5c0>)
 80116fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8011700:	6879      	ldr	r1, [r7, #4]
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	3338      	adds	r3, #56	; 0x38
 8011708:	461a      	mov	r2, r3
 801170a:	887b      	ldrh	r3, [r7, #2]
 801170c:	f7f3 f916 	bl	800493c <HAL_DMA_Start_IT>
 8011710:	4603      	mov	r3, r0
 8011712:	2b00      	cmp	r3, #0
 8011714:	d001      	beq.n	801171a <HAL_TIM_PWM_Start_DMA+0x416>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8011716:	2301      	movs	r3, #1
 8011718:	e0cc      	b.n	80118b4 <HAL_TIM_PWM_Start_DMA+0x5b0>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	68da      	ldr	r2, [r3, #12]
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011728:	60da      	str	r2, [r3, #12]
      break;
 801172a:	e04a      	b.n	80117c2 <HAL_TIM_PWM_Start_DMA+0x4be>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011730:	4a62      	ldr	r2, [pc, #392]	; (80118bc <HAL_TIM_PWM_Start_DMA+0x5b8>)
 8011732:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011738:	4a61      	ldr	r2, [pc, #388]	; (80118c0 <HAL_TIM_PWM_Start_DMA+0x5bc>)
 801173a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011740:	4a60      	ldr	r2, [pc, #384]	; (80118c4 <HAL_TIM_PWM_Start_DMA+0x5c0>)
 8011742:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011748:	6879      	ldr	r1, [r7, #4]
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	333c      	adds	r3, #60	; 0x3c
 8011750:	461a      	mov	r2, r3
 8011752:	887b      	ldrh	r3, [r7, #2]
 8011754:	f7f3 f8f2 	bl	800493c <HAL_DMA_Start_IT>
 8011758:	4603      	mov	r3, r0
 801175a:	2b00      	cmp	r3, #0
 801175c:	d001      	beq.n	8011762 <HAL_TIM_PWM_Start_DMA+0x45e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801175e:	2301      	movs	r3, #1
 8011760:	e0a8      	b.n	80118b4 <HAL_TIM_PWM_Start_DMA+0x5b0>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	68da      	ldr	r2, [r3, #12]
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011770:	60da      	str	r2, [r3, #12]
      break;
 8011772:	e026      	b.n	80117c2 <HAL_TIM_PWM_Start_DMA+0x4be>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011778:	4a50      	ldr	r2, [pc, #320]	; (80118bc <HAL_TIM_PWM_Start_DMA+0x5b8>)
 801177a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011780:	4a4f      	ldr	r2, [pc, #316]	; (80118c0 <HAL_TIM_PWM_Start_DMA+0x5bc>)
 8011782:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011788:	4a4e      	ldr	r2, [pc, #312]	; (80118c4 <HAL_TIM_PWM_Start_DMA+0x5c0>)
 801178a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011790:	6879      	ldr	r1, [r7, #4]
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	3340      	adds	r3, #64	; 0x40
 8011798:	461a      	mov	r2, r3
 801179a:	887b      	ldrh	r3, [r7, #2]
 801179c:	f7f3 f8ce 	bl	800493c <HAL_DMA_Start_IT>
 80117a0:	4603      	mov	r3, r0
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d001      	beq.n	80117aa <HAL_TIM_PWM_Start_DMA+0x4a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80117a6:	2301      	movs	r3, #1
 80117a8:	e084      	b.n	80118b4 <HAL_TIM_PWM_Start_DMA+0x5b0>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	68da      	ldr	r2, [r3, #12]
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80117b8:	60da      	str	r2, [r3, #12]
      break;
 80117ba:	e002      	b.n	80117c2 <HAL_TIM_PWM_Start_DMA+0x4be>
    }

    default:
      status = HAL_ERROR;
 80117bc:	2301      	movs	r3, #1
 80117be:	75fb      	strb	r3, [r7, #23]
      break;
 80117c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80117c2:	7dfb      	ldrb	r3, [r7, #23]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d174      	bne.n	80118b2 <HAL_TIM_PWM_Start_DMA+0x5ae>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	2201      	movs	r2, #1
 80117ce:	68b9      	ldr	r1, [r7, #8]
 80117d0:	4618      	mov	r0, r3
 80117d2:	f001 fdf5 	bl	80133c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	4a3b      	ldr	r2, [pc, #236]	; (80118c8 <HAL_TIM_PWM_Start_DMA+0x5c4>)
 80117dc:	4293      	cmp	r3, r2
 80117de:	d013      	beq.n	8011808 <HAL_TIM_PWM_Start_DMA+0x504>
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	4a39      	ldr	r2, [pc, #228]	; (80118cc <HAL_TIM_PWM_Start_DMA+0x5c8>)
 80117e6:	4293      	cmp	r3, r2
 80117e8:	d00e      	beq.n	8011808 <HAL_TIM_PWM_Start_DMA+0x504>
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	4a38      	ldr	r2, [pc, #224]	; (80118d0 <HAL_TIM_PWM_Start_DMA+0x5cc>)
 80117f0:	4293      	cmp	r3, r2
 80117f2:	d009      	beq.n	8011808 <HAL_TIM_PWM_Start_DMA+0x504>
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	4a36      	ldr	r2, [pc, #216]	; (80118d4 <HAL_TIM_PWM_Start_DMA+0x5d0>)
 80117fa:	4293      	cmp	r3, r2
 80117fc:	d004      	beq.n	8011808 <HAL_TIM_PWM_Start_DMA+0x504>
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	4a35      	ldr	r2, [pc, #212]	; (80118d8 <HAL_TIM_PWM_Start_DMA+0x5d4>)
 8011804:	4293      	cmp	r3, r2
 8011806:	d101      	bne.n	801180c <HAL_TIM_PWM_Start_DMA+0x508>
 8011808:	2301      	movs	r3, #1
 801180a:	e000      	b.n	801180e <HAL_TIM_PWM_Start_DMA+0x50a>
 801180c:	2300      	movs	r3, #0
 801180e:	2b00      	cmp	r3, #0
 8011810:	d007      	beq.n	8011822 <HAL_TIM_PWM_Start_DMA+0x51e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011820:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	4a28      	ldr	r2, [pc, #160]	; (80118c8 <HAL_TIM_PWM_Start_DMA+0x5c4>)
 8011828:	4293      	cmp	r3, r2
 801182a:	d022      	beq.n	8011872 <HAL_TIM_PWM_Start_DMA+0x56e>
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011834:	d01d      	beq.n	8011872 <HAL_TIM_PWM_Start_DMA+0x56e>
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	4a28      	ldr	r2, [pc, #160]	; (80118dc <HAL_TIM_PWM_Start_DMA+0x5d8>)
 801183c:	4293      	cmp	r3, r2
 801183e:	d018      	beq.n	8011872 <HAL_TIM_PWM_Start_DMA+0x56e>
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	4a26      	ldr	r2, [pc, #152]	; (80118e0 <HAL_TIM_PWM_Start_DMA+0x5dc>)
 8011846:	4293      	cmp	r3, r2
 8011848:	d013      	beq.n	8011872 <HAL_TIM_PWM_Start_DMA+0x56e>
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	4a25      	ldr	r2, [pc, #148]	; (80118e4 <HAL_TIM_PWM_Start_DMA+0x5e0>)
 8011850:	4293      	cmp	r3, r2
 8011852:	d00e      	beq.n	8011872 <HAL_TIM_PWM_Start_DMA+0x56e>
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	4a1c      	ldr	r2, [pc, #112]	; (80118cc <HAL_TIM_PWM_Start_DMA+0x5c8>)
 801185a:	4293      	cmp	r3, r2
 801185c:	d009      	beq.n	8011872 <HAL_TIM_PWM_Start_DMA+0x56e>
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	4a21      	ldr	r2, [pc, #132]	; (80118e8 <HAL_TIM_PWM_Start_DMA+0x5e4>)
 8011864:	4293      	cmp	r3, r2
 8011866:	d004      	beq.n	8011872 <HAL_TIM_PWM_Start_DMA+0x56e>
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	4a18      	ldr	r2, [pc, #96]	; (80118d0 <HAL_TIM_PWM_Start_DMA+0x5cc>)
 801186e:	4293      	cmp	r3, r2
 8011870:	d115      	bne.n	801189e <HAL_TIM_PWM_Start_DMA+0x59a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	689a      	ldr	r2, [r3, #8]
 8011878:	4b1c      	ldr	r3, [pc, #112]	; (80118ec <HAL_TIM_PWM_Start_DMA+0x5e8>)
 801187a:	4013      	ands	r3, r2
 801187c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801187e:	693b      	ldr	r3, [r7, #16]
 8011880:	2b06      	cmp	r3, #6
 8011882:	d015      	beq.n	80118b0 <HAL_TIM_PWM_Start_DMA+0x5ac>
 8011884:	693b      	ldr	r3, [r7, #16]
 8011886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801188a:	d011      	beq.n	80118b0 <HAL_TIM_PWM_Start_DMA+0x5ac>
      {
        __HAL_TIM_ENABLE(htim);
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	f042 0201 	orr.w	r2, r2, #1
 801189a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801189c:	e008      	b.n	80118b0 <HAL_TIM_PWM_Start_DMA+0x5ac>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	681a      	ldr	r2, [r3, #0]
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f042 0201 	orr.w	r2, r2, #1
 80118ac:	601a      	str	r2, [r3, #0]
 80118ae:	e000      	b.n	80118b2 <HAL_TIM_PWM_Start_DMA+0x5ae>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80118b0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80118b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	3718      	adds	r7, #24
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}
 80118bc:	0801297f 	.word	0x0801297f
 80118c0:	08012a27 	.word	0x08012a27
 80118c4:	080128ed 	.word	0x080128ed
 80118c8:	40010000 	.word	0x40010000
 80118cc:	40010400 	.word	0x40010400
 80118d0:	40014000 	.word	0x40014000
 80118d4:	40014400 	.word	0x40014400
 80118d8:	40014800 	.word	0x40014800
 80118dc:	40000400 	.word	0x40000400
 80118e0:	40000800 	.word	0x40000800
 80118e4:	40000c00 	.word	0x40000c00
 80118e8:	40001800 	.word	0x40001800
 80118ec:	00010007 	.word	0x00010007

080118f0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b084      	sub	sp, #16
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
 80118f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80118fa:	2300      	movs	r3, #0
 80118fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	4a86      	ldr	r2, [pc, #536]	; (8011b1c <HAL_TIM_PWM_Stop_DMA+0x22c>)
 8011904:	4293      	cmp	r3, r2
 8011906:	d117      	bne.n	8011938 <HAL_TIM_PWM_Stop_DMA+0x48>
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	2b00      	cmp	r3, #0
 801190c:	f000 80ae 	beq.w	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	2b04      	cmp	r3, #4
 8011914:	f000 80aa 	beq.w	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	2b08      	cmp	r3, #8
 801191c:	f000 80a6 	beq.w	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	2b0c      	cmp	r3, #12
 8011924:	f000 80a2 	beq.w	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	2b10      	cmp	r3, #16
 801192c:	f000 809e 	beq.w	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	2b14      	cmp	r3, #20
 8011934:	f000 809a 	beq.w	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011940:	d10f      	bne.n	8011962 <HAL_TIM_PWM_Stop_DMA+0x72>
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	2b00      	cmp	r3, #0
 8011946:	f000 8091 	beq.w	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	2b04      	cmp	r3, #4
 801194e:	f000 808d 	beq.w	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	2b08      	cmp	r3, #8
 8011956:	f000 8089 	beq.w	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	2b0c      	cmp	r3, #12
 801195e:	f000 8085 	beq.w	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	4a6e      	ldr	r2, [pc, #440]	; (8011b20 <HAL_TIM_PWM_Stop_DMA+0x230>)
 8011968:	4293      	cmp	r3, r2
 801196a:	d10b      	bne.n	8011984 <HAL_TIM_PWM_Stop_DMA+0x94>
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d07c      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	2b04      	cmp	r3, #4
 8011976:	d079      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	2b08      	cmp	r3, #8
 801197c:	d076      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	2b0c      	cmp	r3, #12
 8011982:	d073      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	4a66      	ldr	r2, [pc, #408]	; (8011b24 <HAL_TIM_PWM_Stop_DMA+0x234>)
 801198a:	4293      	cmp	r3, r2
 801198c:	d10b      	bne.n	80119a6 <HAL_TIM_PWM_Stop_DMA+0xb6>
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d06b      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	2b04      	cmp	r3, #4
 8011998:	d068      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	2b08      	cmp	r3, #8
 801199e:	d065      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	2b0c      	cmp	r3, #12
 80119a4:	d062      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	4a5f      	ldr	r2, [pc, #380]	; (8011b28 <HAL_TIM_PWM_Stop_DMA+0x238>)
 80119ac:	4293      	cmp	r3, r2
 80119ae:	d10b      	bne.n	80119c8 <HAL_TIM_PWM_Stop_DMA+0xd8>
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d05a      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	2b04      	cmp	r3, #4
 80119ba:	d057      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	2b08      	cmp	r3, #8
 80119c0:	d054      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	2b0c      	cmp	r3, #12
 80119c6:	d051      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	4a57      	ldr	r2, [pc, #348]	; (8011b2c <HAL_TIM_PWM_Stop_DMA+0x23c>)
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d111      	bne.n	80119f6 <HAL_TIM_PWM_Stop_DMA+0x106>
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d049      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	2b04      	cmp	r3, #4
 80119dc:	d046      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	2b08      	cmp	r3, #8
 80119e2:	d043      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	2b0c      	cmp	r3, #12
 80119e8:	d040      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	2b10      	cmp	r3, #16
 80119ee:	d03d      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	2b14      	cmp	r3, #20
 80119f4:	d03a      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	4a4d      	ldr	r2, [pc, #308]	; (8011b30 <HAL_TIM_PWM_Stop_DMA+0x240>)
 80119fc:	4293      	cmp	r3, r2
 80119fe:	d105      	bne.n	8011a0c <HAL_TIM_PWM_Stop_DMA+0x11c>
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d032      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	2b04      	cmp	r3, #4
 8011a0a:	d02f      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	4a48      	ldr	r2, [pc, #288]	; (8011b34 <HAL_TIM_PWM_Stop_DMA+0x244>)
 8011a12:	4293      	cmp	r3, r2
 8011a14:	d102      	bne.n	8011a1c <HAL_TIM_PWM_Stop_DMA+0x12c>
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d027      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	4a45      	ldr	r2, [pc, #276]	; (8011b38 <HAL_TIM_PWM_Stop_DMA+0x248>)
 8011a22:	4293      	cmp	r3, r2
 8011a24:	d102      	bne.n	8011a2c <HAL_TIM_PWM_Stop_DMA+0x13c>
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d01f      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	4a42      	ldr	r2, [pc, #264]	; (8011b3c <HAL_TIM_PWM_Stop_DMA+0x24c>)
 8011a32:	4293      	cmp	r3, r2
 8011a34:	d105      	bne.n	8011a42 <HAL_TIM_PWM_Stop_DMA+0x152>
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d017      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	2b04      	cmp	r3, #4
 8011a40:	d014      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	4a3e      	ldr	r2, [pc, #248]	; (8011b40 <HAL_TIM_PWM_Stop_DMA+0x250>)
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	d102      	bne.n	8011a52 <HAL_TIM_PWM_Stop_DMA+0x162>
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d00c      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	4a3b      	ldr	r2, [pc, #236]	; (8011b44 <HAL_TIM_PWM_Stop_DMA+0x254>)
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d102      	bne.n	8011a62 <HAL_TIM_PWM_Stop_DMA+0x172>
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d004      	beq.n	8011a6c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8011a62:	f240 715f 	movw	r1, #1887	; 0x75f
 8011a66:	4838      	ldr	r0, [pc, #224]	; (8011b48 <HAL_TIM_PWM_Stop_DMA+0x258>)
 8011a68:	f7f0 f803 	bl	8001a72 <assert_failed>

  switch (Channel)
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	2b0c      	cmp	r3, #12
 8011a70:	d86c      	bhi.n	8011b4c <HAL_TIM_PWM_Stop_DMA+0x25c>
 8011a72:	a201      	add	r2, pc, #4	; (adr r2, 8011a78 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8011a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a78:	08011aad 	.word	0x08011aad
 8011a7c:	08011b4d 	.word	0x08011b4d
 8011a80:	08011b4d 	.word	0x08011b4d
 8011a84:	08011b4d 	.word	0x08011b4d
 8011a88:	08011ac9 	.word	0x08011ac9
 8011a8c:	08011b4d 	.word	0x08011b4d
 8011a90:	08011b4d 	.word	0x08011b4d
 8011a94:	08011b4d 	.word	0x08011b4d
 8011a98:	08011ae5 	.word	0x08011ae5
 8011a9c:	08011b4d 	.word	0x08011b4d
 8011aa0:	08011b4d 	.word	0x08011b4d
 8011aa4:	08011b4d 	.word	0x08011b4d
 8011aa8:	08011b01 	.word	0x08011b01
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	68da      	ldr	r2, [r3, #12]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8011aba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7f3 fcd1 	bl	8005468 <HAL_DMA_Abort_IT>
      break;
 8011ac6:	e044      	b.n	8011b52 <HAL_TIM_PWM_Stop_DMA+0x262>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	68da      	ldr	r2, [r3, #12]
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011ad6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7f3 fcc3 	bl	8005468 <HAL_DMA_Abort_IT>
      break;
 8011ae2:	e036      	b.n	8011b52 <HAL_TIM_PWM_Stop_DMA+0x262>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	68da      	ldr	r2, [r3, #12]
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011af2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011af8:	4618      	mov	r0, r3
 8011afa:	f7f3 fcb5 	bl	8005468 <HAL_DMA_Abort_IT>
      break;
 8011afe:	e028      	b.n	8011b52 <HAL_TIM_PWM_Stop_DMA+0x262>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	68da      	ldr	r2, [r3, #12]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011b0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b14:	4618      	mov	r0, r3
 8011b16:	f7f3 fca7 	bl	8005468 <HAL_DMA_Abort_IT>
      break;
 8011b1a:	e01a      	b.n	8011b52 <HAL_TIM_PWM_Stop_DMA+0x262>
 8011b1c:	40010000 	.word	0x40010000
 8011b20:	40000400 	.word	0x40000400
 8011b24:	40000800 	.word	0x40000800
 8011b28:	40000c00 	.word	0x40000c00
 8011b2c:	40010400 	.word	0x40010400
 8011b30:	40001800 	.word	0x40001800
 8011b34:	40001c00 	.word	0x40001c00
 8011b38:	40002000 	.word	0x40002000
 8011b3c:	40014000 	.word	0x40014000
 8011b40:	40014400 	.word	0x40014400
 8011b44:	40014800 	.word	0x40014800
 8011b48:	0801dee4 	.word	0x0801dee4
    }

    default:
      status = HAL_ERROR;
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8011b50:	bf00      	nop
  }

  if (status == HAL_OK)
 8011b52:	7bfb      	ldrb	r3, [r7, #15]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	f040 8081 	bne.w	8011c5c <HAL_TIM_PWM_Stop_DMA+0x36c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	2200      	movs	r2, #0
 8011b60:	6839      	ldr	r1, [r7, #0]
 8011b62:	4618      	mov	r0, r3
 8011b64:	f001 fc2c 	bl	80133c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	4a3e      	ldr	r2, [pc, #248]	; (8011c68 <HAL_TIM_PWM_Stop_DMA+0x378>)
 8011b6e:	4293      	cmp	r3, r2
 8011b70:	d013      	beq.n	8011b9a <HAL_TIM_PWM_Stop_DMA+0x2aa>
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	4a3d      	ldr	r2, [pc, #244]	; (8011c6c <HAL_TIM_PWM_Stop_DMA+0x37c>)
 8011b78:	4293      	cmp	r3, r2
 8011b7a:	d00e      	beq.n	8011b9a <HAL_TIM_PWM_Stop_DMA+0x2aa>
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	4a3b      	ldr	r2, [pc, #236]	; (8011c70 <HAL_TIM_PWM_Stop_DMA+0x380>)
 8011b82:	4293      	cmp	r3, r2
 8011b84:	d009      	beq.n	8011b9a <HAL_TIM_PWM_Stop_DMA+0x2aa>
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	4a3a      	ldr	r2, [pc, #232]	; (8011c74 <HAL_TIM_PWM_Stop_DMA+0x384>)
 8011b8c:	4293      	cmp	r3, r2
 8011b8e:	d004      	beq.n	8011b9a <HAL_TIM_PWM_Stop_DMA+0x2aa>
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	4a38      	ldr	r2, [pc, #224]	; (8011c78 <HAL_TIM_PWM_Stop_DMA+0x388>)
 8011b96:	4293      	cmp	r3, r2
 8011b98:	d101      	bne.n	8011b9e <HAL_TIM_PWM_Stop_DMA+0x2ae>
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	e000      	b.n	8011ba0 <HAL_TIM_PWM_Stop_DMA+0x2b0>
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d017      	beq.n	8011bd4 <HAL_TIM_PWM_Stop_DMA+0x2e4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	6a1a      	ldr	r2, [r3, #32]
 8011baa:	f241 1311 	movw	r3, #4369	; 0x1111
 8011bae:	4013      	ands	r3, r2
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d10f      	bne.n	8011bd4 <HAL_TIM_PWM_Stop_DMA+0x2e4>
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	6a1a      	ldr	r2, [r3, #32]
 8011bba:	f240 4344 	movw	r3, #1092	; 0x444
 8011bbe:	4013      	ands	r3, r2
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d107      	bne.n	8011bd4 <HAL_TIM_PWM_Stop_DMA+0x2e4>
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011bd2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	6a1a      	ldr	r2, [r3, #32]
 8011bda:	f241 1311 	movw	r3, #4369	; 0x1111
 8011bde:	4013      	ands	r3, r2
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d10f      	bne.n	8011c04 <HAL_TIM_PWM_Stop_DMA+0x314>
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	6a1a      	ldr	r2, [r3, #32]
 8011bea:	f240 4344 	movw	r3, #1092	; 0x444
 8011bee:	4013      	ands	r3, r2
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d107      	bne.n	8011c04 <HAL_TIM_PWM_Stop_DMA+0x314>
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	f022 0201 	bic.w	r2, r2, #1
 8011c02:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d104      	bne.n	8011c14 <HAL_TIM_PWM_Stop_DMA+0x324>
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011c12:	e023      	b.n	8011c5c <HAL_TIM_PWM_Stop_DMA+0x36c>
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	2b04      	cmp	r3, #4
 8011c18:	d104      	bne.n	8011c24 <HAL_TIM_PWM_Stop_DMA+0x334>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2201      	movs	r2, #1
 8011c1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011c22:	e01b      	b.n	8011c5c <HAL_TIM_PWM_Stop_DMA+0x36c>
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	2b08      	cmp	r3, #8
 8011c28:	d104      	bne.n	8011c34 <HAL_TIM_PWM_Stop_DMA+0x344>
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	2201      	movs	r2, #1
 8011c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011c32:	e013      	b.n	8011c5c <HAL_TIM_PWM_Stop_DMA+0x36c>
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	2b0c      	cmp	r3, #12
 8011c38:	d104      	bne.n	8011c44 <HAL_TIM_PWM_Stop_DMA+0x354>
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2201      	movs	r2, #1
 8011c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011c42:	e00b      	b.n	8011c5c <HAL_TIM_PWM_Stop_DMA+0x36c>
 8011c44:	683b      	ldr	r3, [r7, #0]
 8011c46:	2b10      	cmp	r3, #16
 8011c48:	d104      	bne.n	8011c54 <HAL_TIM_PWM_Stop_DMA+0x364>
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	2201      	movs	r2, #1
 8011c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011c52:	e003      	b.n	8011c5c <HAL_TIM_PWM_Stop_DMA+0x36c>
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2201      	movs	r2, #1
 8011c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8011c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3710      	adds	r7, #16
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}
 8011c66:	bf00      	nop
 8011c68:	40010000 	.word	0x40010000
 8011c6c:	40010400 	.word	0x40010400
 8011c70:	40014000 	.word	0x40014000
 8011c74:	40014400 	.word	0x40014400
 8011c78:	40014800 	.word	0x40014800

08011c7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b086      	sub	sp, #24
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	60b9      	str	r1, [r7, #8]
 8011c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d016      	beq.n	8011cc0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	2b04      	cmp	r3, #4
 8011c96:	d013      	beq.n	8011cc0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	2b08      	cmp	r3, #8
 8011c9c:	d010      	beq.n	8011cc0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2b0c      	cmp	r3, #12
 8011ca2:	d00d      	beq.n	8011cc0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2b10      	cmp	r3, #16
 8011ca8:	d00a      	beq.n	8011cc0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2b14      	cmp	r3, #20
 8011cae:	d007      	beq.n	8011cc0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2b3c      	cmp	r3, #60	; 0x3c
 8011cb4:	d004      	beq.n	8011cc0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8011cb6:	f241 01a7 	movw	r1, #4263	; 0x10a7
 8011cba:	4895      	ldr	r0, [pc, #596]	; (8011f10 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8011cbc:	f7ef fed9 	bl	8001a72 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	2b60      	cmp	r3, #96	; 0x60
 8011cc6:	d01c      	beq.n	8011d02 <HAL_TIM_PWM_ConfigChannel+0x86>
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	2b70      	cmp	r3, #112	; 0x70
 8011cce:	d018      	beq.n	8011d02 <HAL_TIM_PWM_ConfigChannel+0x86>
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	4a8f      	ldr	r2, [pc, #572]	; (8011f14 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8011cd6:	4293      	cmp	r3, r2
 8011cd8:	d013      	beq.n	8011d02 <HAL_TIM_PWM_ConfigChannel+0x86>
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	4a8e      	ldr	r2, [pc, #568]	; (8011f18 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8011ce0:	4293      	cmp	r3, r2
 8011ce2:	d00e      	beq.n	8011d02 <HAL_TIM_PWM_ConfigChannel+0x86>
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	4a8c      	ldr	r2, [pc, #560]	; (8011f1c <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8011cea:	4293      	cmp	r3, r2
 8011cec:	d009      	beq.n	8011d02 <HAL_TIM_PWM_ConfigChannel+0x86>
 8011cee:	68bb      	ldr	r3, [r7, #8]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	4a8b      	ldr	r2, [pc, #556]	; (8011f20 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	d004      	beq.n	8011d02 <HAL_TIM_PWM_ConfigChannel+0x86>
 8011cf8:	f241 01a8 	movw	r1, #4264	; 0x10a8
 8011cfc:	4884      	ldr	r0, [pc, #528]	; (8011f10 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8011cfe:	f7ef feb8 	bl	8001a72 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	689b      	ldr	r3, [r3, #8]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d008      	beq.n	8011d1c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	689b      	ldr	r3, [r3, #8]
 8011d0e:	2b02      	cmp	r3, #2
 8011d10:	d004      	beq.n	8011d1c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8011d12:	f241 01a9 	movw	r1, #4265	; 0x10a9
 8011d16:	487e      	ldr	r0, [pc, #504]	; (8011f10 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8011d18:	f7ef feab 	bl	8001a72 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	691b      	ldr	r3, [r3, #16]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d008      	beq.n	8011d36 <HAL_TIM_PWM_ConfigChannel+0xba>
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	691b      	ldr	r3, [r3, #16]
 8011d28:	2b04      	cmp	r3, #4
 8011d2a:	d004      	beq.n	8011d36 <HAL_TIM_PWM_ConfigChannel+0xba>
 8011d2c:	f241 01aa 	movw	r1, #4266	; 0x10aa
 8011d30:	4877      	ldr	r0, [pc, #476]	; (8011f10 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8011d32:	f7ef fe9e 	bl	8001a72 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011d3c:	2b01      	cmp	r3, #1
 8011d3e:	d101      	bne.n	8011d44 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8011d40:	2302      	movs	r3, #2
 8011d42:	e1f3      	b.n	801212c <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	2201      	movs	r2, #1
 8011d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2b14      	cmp	r3, #20
 8011d50:	f200 81e4 	bhi.w	801211c <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8011d54:	a201      	add	r2, pc, #4	; (adr r2, 8011d5c <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8011d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d5a:	bf00      	nop
 8011d5c:	08011db1 	.word	0x08011db1
 8011d60:	0801211d 	.word	0x0801211d
 8011d64:	0801211d 	.word	0x0801211d
 8011d68:	0801211d 	.word	0x0801211d
 8011d6c:	08011e73 	.word	0x08011e73
 8011d70:	0801211d 	.word	0x0801211d
 8011d74:	0801211d 	.word	0x0801211d
 8011d78:	0801211d 	.word	0x0801211d
 8011d7c:	08011f51 	.word	0x08011f51
 8011d80:	0801211d 	.word	0x0801211d
 8011d84:	0801211d 	.word	0x0801211d
 8011d88:	0801211d 	.word	0x0801211d
 8011d8c:	08011fd7 	.word	0x08011fd7
 8011d90:	0801211d 	.word	0x0801211d
 8011d94:	0801211d 	.word	0x0801211d
 8011d98:	0801211d 	.word	0x0801211d
 8011d9c:	0801205f 	.word	0x0801205f
 8011da0:	0801211d 	.word	0x0801211d
 8011da4:	0801211d 	.word	0x0801211d
 8011da8:	0801211d 	.word	0x0801211d
 8011dac:	080120bd 	.word	0x080120bd
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	4a5b      	ldr	r2, [pc, #364]	; (8011f24 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8011db6:	4293      	cmp	r3, r2
 8011db8:	d03b      	beq.n	8011e32 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011dc2:	d036      	beq.n	8011e32 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	4a57      	ldr	r2, [pc, #348]	; (8011f28 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8011dca:	4293      	cmp	r3, r2
 8011dcc:	d031      	beq.n	8011e32 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	4a56      	ldr	r2, [pc, #344]	; (8011f2c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d02c      	beq.n	8011e32 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	4a54      	ldr	r2, [pc, #336]	; (8011f30 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8011dde:	4293      	cmp	r3, r2
 8011de0:	d027      	beq.n	8011e32 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	4a53      	ldr	r2, [pc, #332]	; (8011f34 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8011de8:	4293      	cmp	r3, r2
 8011dea:	d022      	beq.n	8011e32 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	4a51      	ldr	r2, [pc, #324]	; (8011f38 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8011df2:	4293      	cmp	r3, r2
 8011df4:	d01d      	beq.n	8011e32 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	4a50      	ldr	r2, [pc, #320]	; (8011f3c <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 8011dfc:	4293      	cmp	r3, r2
 8011dfe:	d018      	beq.n	8011e32 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	4a4e      	ldr	r2, [pc, #312]	; (8011f40 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 8011e06:	4293      	cmp	r3, r2
 8011e08:	d013      	beq.n	8011e32 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	4a4d      	ldr	r2, [pc, #308]	; (8011f44 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8011e10:	4293      	cmp	r3, r2
 8011e12:	d00e      	beq.n	8011e32 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	4a4b      	ldr	r2, [pc, #300]	; (8011f48 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 8011e1a:	4293      	cmp	r3, r2
 8011e1c:	d009      	beq.n	8011e32 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	4a4a      	ldr	r2, [pc, #296]	; (8011f4c <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8011e24:	4293      	cmp	r3, r2
 8011e26:	d004      	beq.n	8011e32 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8011e28:	f241 01b4 	movw	r1, #4276	; 0x10b4
 8011e2c:	4838      	ldr	r0, [pc, #224]	; (8011f10 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8011e2e:	f7ef fe20 	bl	8001a72 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	68b9      	ldr	r1, [r7, #8]
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f000 fec3 	bl	8012bc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	699a      	ldr	r2, [r3, #24]
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	f042 0208 	orr.w	r2, r2, #8
 8011e4c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	699a      	ldr	r2, [r3, #24]
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	f022 0204 	bic.w	r2, r2, #4
 8011e5c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	6999      	ldr	r1, [r3, #24]
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	691a      	ldr	r2, [r3, #16]
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	430a      	orrs	r2, r1
 8011e6e:	619a      	str	r2, [r3, #24]
      break;
 8011e70:	e157      	b.n	8012122 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	4a2b      	ldr	r2, [pc, #172]	; (8011f24 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8011e78:	4293      	cmp	r3, r2
 8011e7a:	d027      	beq.n	8011ecc <HAL_TIM_PWM_ConfigChannel+0x250>
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e84:	d022      	beq.n	8011ecc <HAL_TIM_PWM_ConfigChannel+0x250>
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	4a27      	ldr	r2, [pc, #156]	; (8011f28 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8011e8c:	4293      	cmp	r3, r2
 8011e8e:	d01d      	beq.n	8011ecc <HAL_TIM_PWM_ConfigChannel+0x250>
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	4a25      	ldr	r2, [pc, #148]	; (8011f2c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8011e96:	4293      	cmp	r3, r2
 8011e98:	d018      	beq.n	8011ecc <HAL_TIM_PWM_ConfigChannel+0x250>
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	4a24      	ldr	r2, [pc, #144]	; (8011f30 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8011ea0:	4293      	cmp	r3, r2
 8011ea2:	d013      	beq.n	8011ecc <HAL_TIM_PWM_ConfigChannel+0x250>
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	4a22      	ldr	r2, [pc, #136]	; (8011f34 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8011eaa:	4293      	cmp	r3, r2
 8011eac:	d00e      	beq.n	8011ecc <HAL_TIM_PWM_ConfigChannel+0x250>
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	4a21      	ldr	r2, [pc, #132]	; (8011f38 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8011eb4:	4293      	cmp	r3, r2
 8011eb6:	d009      	beq.n	8011ecc <HAL_TIM_PWM_ConfigChannel+0x250>
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	4a21      	ldr	r2, [pc, #132]	; (8011f44 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8011ebe:	4293      	cmp	r3, r2
 8011ec0:	d004      	beq.n	8011ecc <HAL_TIM_PWM_ConfigChannel+0x250>
 8011ec2:	f241 01c5 	movw	r1, #4293	; 0x10c5
 8011ec6:	4812      	ldr	r0, [pc, #72]	; (8011f10 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8011ec8:	f7ef fdd3 	bl	8001a72 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	68b9      	ldr	r1, [r7, #8]
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f000 ff30 	bl	8012d38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	699a      	ldr	r2, [r3, #24]
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	699a      	ldr	r2, [r3, #24]
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	6999      	ldr	r1, [r3, #24]
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	691b      	ldr	r3, [r3, #16]
 8011f02:	021a      	lsls	r2, r3, #8
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	430a      	orrs	r2, r1
 8011f0a:	619a      	str	r2, [r3, #24]
      break;
 8011f0c:	e109      	b.n	8012122 <HAL_TIM_PWM_ConfigChannel+0x4a6>
 8011f0e:	bf00      	nop
 8011f10:	0801dee4 	.word	0x0801dee4
 8011f14:	00010040 	.word	0x00010040
 8011f18:	00010050 	.word	0x00010050
 8011f1c:	00010060 	.word	0x00010060
 8011f20:	00010070 	.word	0x00010070
 8011f24:	40010000 	.word	0x40010000
 8011f28:	40000400 	.word	0x40000400
 8011f2c:	40000800 	.word	0x40000800
 8011f30:	40000c00 	.word	0x40000c00
 8011f34:	40010400 	.word	0x40010400
 8011f38:	40001800 	.word	0x40001800
 8011f3c:	40001c00 	.word	0x40001c00
 8011f40:	40002000 	.word	0x40002000
 8011f44:	40014000 	.word	0x40014000
 8011f48:	40014400 	.word	0x40014400
 8011f4c:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	4a77      	ldr	r2, [pc, #476]	; (8012134 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8011f56:	4293      	cmp	r3, r2
 8011f58:	d01d      	beq.n	8011f96 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011f62:	d018      	beq.n	8011f96 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	4a73      	ldr	r2, [pc, #460]	; (8012138 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8011f6a:	4293      	cmp	r3, r2
 8011f6c:	d013      	beq.n	8011f96 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	4a72      	ldr	r2, [pc, #456]	; (801213c <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8011f74:	4293      	cmp	r3, r2
 8011f76:	d00e      	beq.n	8011f96 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	4a70      	ldr	r2, [pc, #448]	; (8012140 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8011f7e:	4293      	cmp	r3, r2
 8011f80:	d009      	beq.n	8011f96 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	4a6f      	ldr	r2, [pc, #444]	; (8012144 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8011f88:	4293      	cmp	r3, r2
 8011f8a:	d004      	beq.n	8011f96 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8011f8c:	f241 01d6 	movw	r1, #4310	; 0x10d6
 8011f90:	486d      	ldr	r0, [pc, #436]	; (8012148 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8011f92:	f7ef fd6e 	bl	8001a72 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	68b9      	ldr	r1, [r7, #8]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f000 ff7d 	bl	8012e9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	69da      	ldr	r2, [r3, #28]
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	f042 0208 	orr.w	r2, r2, #8
 8011fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	69da      	ldr	r2, [r3, #28]
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	f022 0204 	bic.w	r2, r2, #4
 8011fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	69d9      	ldr	r1, [r3, #28]
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	691a      	ldr	r2, [r3, #16]
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	430a      	orrs	r2, r1
 8011fd2:	61da      	str	r2, [r3, #28]
      break;
 8011fd4:	e0a5      	b.n	8012122 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	4a56      	ldr	r2, [pc, #344]	; (8012134 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8011fdc:	4293      	cmp	r3, r2
 8011fde:	d01d      	beq.n	801201c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011fe8:	d018      	beq.n	801201c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	4a52      	ldr	r2, [pc, #328]	; (8012138 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8011ff0:	4293      	cmp	r3, r2
 8011ff2:	d013      	beq.n	801201c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	4a50      	ldr	r2, [pc, #320]	; (801213c <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8011ffa:	4293      	cmp	r3, r2
 8011ffc:	d00e      	beq.n	801201c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	4a4f      	ldr	r2, [pc, #316]	; (8012140 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8012004:	4293      	cmp	r3, r2
 8012006:	d009      	beq.n	801201c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	4a4d      	ldr	r2, [pc, #308]	; (8012144 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 801200e:	4293      	cmp	r3, r2
 8012010:	d004      	beq.n	801201c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8012012:	f241 01e7 	movw	r1, #4327	; 0x10e7
 8012016:	484c      	ldr	r0, [pc, #304]	; (8012148 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8012018:	f7ef fd2b 	bl	8001a72 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	68b9      	ldr	r1, [r7, #8]
 8012022:	4618      	mov	r0, r3
 8012024:	f000 ffec 	bl	8013000 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	69da      	ldr	r2, [r3, #28]
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012036:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	69da      	ldr	r2, [r3, #28]
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012046:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	69d9      	ldr	r1, [r3, #28]
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	691b      	ldr	r3, [r3, #16]
 8012052:	021a      	lsls	r2, r3, #8
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	430a      	orrs	r2, r1
 801205a:	61da      	str	r2, [r3, #28]
      break;
 801205c:	e061      	b.n	8012122 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	4a34      	ldr	r2, [pc, #208]	; (8012134 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8012064:	4293      	cmp	r3, r2
 8012066:	d009      	beq.n	801207c <HAL_TIM_PWM_ConfigChannel+0x400>
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	4a35      	ldr	r2, [pc, #212]	; (8012144 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 801206e:	4293      	cmp	r3, r2
 8012070:	d004      	beq.n	801207c <HAL_TIM_PWM_ConfigChannel+0x400>
 8012072:	f241 01f8 	movw	r1, #4344	; 0x10f8
 8012076:	4834      	ldr	r0, [pc, #208]	; (8012148 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8012078:	f7ef fcfb 	bl	8001a72 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	68b9      	ldr	r1, [r7, #8]
 8012082:	4618      	mov	r0, r3
 8012084:	f001 f834 	bl	80130f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	f042 0208 	orr.w	r2, r2, #8
 8012096:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	f022 0204 	bic.w	r2, r2, #4
 80120a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80120ae:	68bb      	ldr	r3, [r7, #8]
 80120b0:	691a      	ldr	r2, [r3, #16]
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	430a      	orrs	r2, r1
 80120b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80120ba:	e032      	b.n	8012122 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	4a1c      	ldr	r2, [pc, #112]	; (8012134 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80120c2:	4293      	cmp	r3, r2
 80120c4:	d009      	beq.n	80120da <HAL_TIM_PWM_ConfigChannel+0x45e>
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	4a1e      	ldr	r2, [pc, #120]	; (8012144 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80120cc:	4293      	cmp	r3, r2
 80120ce:	d004      	beq.n	80120da <HAL_TIM_PWM_ConfigChannel+0x45e>
 80120d0:	f241 1109 	movw	r1, #4361	; 0x1109
 80120d4:	481c      	ldr	r0, [pc, #112]	; (8012148 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80120d6:	f7ef fccc 	bl	8001a72 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	68b9      	ldr	r1, [r7, #8]
 80120e0:	4618      	mov	r0, r3
 80120e2:	f001 f869 	bl	80131b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80120f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012104:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	691b      	ldr	r3, [r3, #16]
 8012110:	021a      	lsls	r2, r3, #8
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	430a      	orrs	r2, r1
 8012118:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801211a:	e002      	b.n	8012122 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 801211c:	2301      	movs	r3, #1
 801211e:	75fb      	strb	r3, [r7, #23]
      break;
 8012120:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	2200      	movs	r2, #0
 8012126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801212a:	7dfb      	ldrb	r3, [r7, #23]
}
 801212c:	4618      	mov	r0, r3
 801212e:	3718      	adds	r7, #24
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}
 8012134:	40010000 	.word	0x40010000
 8012138:	40000400 	.word	0x40000400
 801213c:	40000800 	.word	0x40000800
 8012140:	40000c00 	.word	0x40000c00
 8012144:	40010400 	.word	0x40010400
 8012148:	0801dee4 	.word	0x0801dee4

0801214c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b084      	sub	sp, #16
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
 8012154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012156:	2300      	movs	r3, #0
 8012158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012160:	2b01      	cmp	r3, #1
 8012162:	d101      	bne.n	8012168 <HAL_TIM_ConfigClockSource+0x1c>
 8012164:	2302      	movs	r3, #2
 8012166:	e38e      	b.n	8012886 <HAL_TIM_ConfigClockSource+0x73a>
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2201      	movs	r2, #1
 801216c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2202      	movs	r2, #2
 8012174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012180:	d029      	beq.n	80121d6 <HAL_TIM_ConfigClockSource+0x8a>
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801218a:	d024      	beq.n	80121d6 <HAL_TIM_ConfigClockSource+0x8a>
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d020      	beq.n	80121d6 <HAL_TIM_ConfigClockSource+0x8a>
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	2b10      	cmp	r3, #16
 801219a:	d01c      	beq.n	80121d6 <HAL_TIM_ConfigClockSource+0x8a>
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	2b20      	cmp	r3, #32
 80121a2:	d018      	beq.n	80121d6 <HAL_TIM_ConfigClockSource+0x8a>
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	2b30      	cmp	r3, #48	; 0x30
 80121aa:	d014      	beq.n	80121d6 <HAL_TIM_ConfigClockSource+0x8a>
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	2b40      	cmp	r3, #64	; 0x40
 80121b2:	d010      	beq.n	80121d6 <HAL_TIM_ConfigClockSource+0x8a>
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	2b50      	cmp	r3, #80	; 0x50
 80121ba:	d00c      	beq.n	80121d6 <HAL_TIM_ConfigClockSource+0x8a>
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	2b60      	cmp	r3, #96	; 0x60
 80121c2:	d008      	beq.n	80121d6 <HAL_TIM_ConfigClockSource+0x8a>
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	2b70      	cmp	r3, #112	; 0x70
 80121ca:	d004      	beq.n	80121d6 <HAL_TIM_ConfigClockSource+0x8a>
 80121cc:	f241 5144 	movw	r1, #5444	; 0x1544
 80121d0:	4868      	ldr	r0, [pc, #416]	; (8012374 <HAL_TIM_ConfigClockSource+0x228>)
 80121d2:	f7ef fc4e 	bl	8001a72 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	689b      	ldr	r3, [r3, #8]
 80121dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80121de:	68ba      	ldr	r2, [r7, #8]
 80121e0:	4b65      	ldr	r3, [pc, #404]	; (8012378 <HAL_TIM_ConfigClockSource+0x22c>)
 80121e2:	4013      	ands	r3, r2
 80121e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80121ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	68ba      	ldr	r2, [r7, #8]
 80121f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	4a60      	ldr	r2, [pc, #384]	; (801237c <HAL_TIM_ConfigClockSource+0x230>)
 80121fc:	4293      	cmp	r3, r2
 80121fe:	f000 82ff 	beq.w	8012800 <HAL_TIM_ConfigClockSource+0x6b4>
 8012202:	4a5e      	ldr	r2, [pc, #376]	; (801237c <HAL_TIM_ConfigClockSource+0x230>)
 8012204:	4293      	cmp	r3, r2
 8012206:	f200 8331 	bhi.w	801286c <HAL_TIM_ConfigClockSource+0x720>
 801220a:	4a5d      	ldr	r2, [pc, #372]	; (8012380 <HAL_TIM_ConfigClockSource+0x234>)
 801220c:	4293      	cmp	r3, r2
 801220e:	f000 82f7 	beq.w	8012800 <HAL_TIM_ConfigClockSource+0x6b4>
 8012212:	4a5b      	ldr	r2, [pc, #364]	; (8012380 <HAL_TIM_ConfigClockSource+0x234>)
 8012214:	4293      	cmp	r3, r2
 8012216:	f200 8329 	bhi.w	801286c <HAL_TIM_ConfigClockSource+0x720>
 801221a:	4a5a      	ldr	r2, [pc, #360]	; (8012384 <HAL_TIM_ConfigClockSource+0x238>)
 801221c:	4293      	cmp	r3, r2
 801221e:	f000 82ef 	beq.w	8012800 <HAL_TIM_ConfigClockSource+0x6b4>
 8012222:	4a58      	ldr	r2, [pc, #352]	; (8012384 <HAL_TIM_ConfigClockSource+0x238>)
 8012224:	4293      	cmp	r3, r2
 8012226:	f200 8321 	bhi.w	801286c <HAL_TIM_ConfigClockSource+0x720>
 801222a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801222e:	f000 82e7 	beq.w	8012800 <HAL_TIM_ConfigClockSource+0x6b4>
 8012232:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8012236:	f200 8319 	bhi.w	801286c <HAL_TIM_ConfigClockSource+0x720>
 801223a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801223e:	f000 82df 	beq.w	8012800 <HAL_TIM_ConfigClockSource+0x6b4>
 8012242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012246:	f200 8311 	bhi.w	801286c <HAL_TIM_ConfigClockSource+0x720>
 801224a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801224e:	f000 812a 	beq.w	80124a6 <HAL_TIM_ConfigClockSource+0x35a>
 8012252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012256:	f200 8309 	bhi.w	801286c <HAL_TIM_ConfigClockSource+0x720>
 801225a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801225e:	d02e      	beq.n	80122be <HAL_TIM_ConfigClockSource+0x172>
 8012260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012264:	f200 8302 	bhi.w	801286c <HAL_TIM_ConfigClockSource+0x720>
 8012268:	2b70      	cmp	r3, #112	; 0x70
 801226a:	f000 80a7 	beq.w	80123bc <HAL_TIM_ConfigClockSource+0x270>
 801226e:	2b70      	cmp	r3, #112	; 0x70
 8012270:	f200 82fc 	bhi.w	801286c <HAL_TIM_ConfigClockSource+0x720>
 8012274:	2b60      	cmp	r3, #96	; 0x60
 8012276:	f000 81f3 	beq.w	8012660 <HAL_TIM_ConfigClockSource+0x514>
 801227a:	2b60      	cmp	r3, #96	; 0x60
 801227c:	f200 82f6 	bhi.w	801286c <HAL_TIM_ConfigClockSource+0x720>
 8012280:	2b50      	cmp	r3, #80	; 0x50
 8012282:	f000 818d 	beq.w	80125a0 <HAL_TIM_ConfigClockSource+0x454>
 8012286:	2b50      	cmp	r3, #80	; 0x50
 8012288:	f200 82f0 	bhi.w	801286c <HAL_TIM_ConfigClockSource+0x720>
 801228c:	2b40      	cmp	r3, #64	; 0x40
 801228e:	f000 8257 	beq.w	8012740 <HAL_TIM_ConfigClockSource+0x5f4>
 8012292:	2b40      	cmp	r3, #64	; 0x40
 8012294:	f200 82ea 	bhi.w	801286c <HAL_TIM_ConfigClockSource+0x720>
 8012298:	2b30      	cmp	r3, #48	; 0x30
 801229a:	f000 82b1 	beq.w	8012800 <HAL_TIM_ConfigClockSource+0x6b4>
 801229e:	2b30      	cmp	r3, #48	; 0x30
 80122a0:	f200 82e4 	bhi.w	801286c <HAL_TIM_ConfigClockSource+0x720>
 80122a4:	2b20      	cmp	r3, #32
 80122a6:	f000 82ab 	beq.w	8012800 <HAL_TIM_ConfigClockSource+0x6b4>
 80122aa:	2b20      	cmp	r3, #32
 80122ac:	f200 82de 	bhi.w	801286c <HAL_TIM_ConfigClockSource+0x720>
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	f000 82a5 	beq.w	8012800 <HAL_TIM_ConfigClockSource+0x6b4>
 80122b6:	2b10      	cmp	r3, #16
 80122b8:	f000 82a2 	beq.w	8012800 <HAL_TIM_ConfigClockSource+0x6b4>
 80122bc:	e2d6      	b.n	801286c <HAL_TIM_ConfigClockSource+0x720>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	4a31      	ldr	r2, [pc, #196]	; (8012388 <HAL_TIM_ConfigClockSource+0x23c>)
 80122c4:	4293      	cmp	r3, r2
 80122c6:	f000 82d4 	beq.w	8012872 <HAL_TIM_ConfigClockSource+0x726>
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80122d2:	f000 82ce 	beq.w	8012872 <HAL_TIM_ConfigClockSource+0x726>
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	4a2c      	ldr	r2, [pc, #176]	; (801238c <HAL_TIM_ConfigClockSource+0x240>)
 80122dc:	4293      	cmp	r3, r2
 80122de:	f000 82c8 	beq.w	8012872 <HAL_TIM_ConfigClockSource+0x726>
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	4a2a      	ldr	r2, [pc, #168]	; (8012390 <HAL_TIM_ConfigClockSource+0x244>)
 80122e8:	4293      	cmp	r3, r2
 80122ea:	f000 82c2 	beq.w	8012872 <HAL_TIM_ConfigClockSource+0x726>
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	4a28      	ldr	r2, [pc, #160]	; (8012394 <HAL_TIM_ConfigClockSource+0x248>)
 80122f4:	4293      	cmp	r3, r2
 80122f6:	f000 82bc 	beq.w	8012872 <HAL_TIM_ConfigClockSource+0x726>
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	4a26      	ldr	r2, [pc, #152]	; (8012398 <HAL_TIM_ConfigClockSource+0x24c>)
 8012300:	4293      	cmp	r3, r2
 8012302:	f000 82b6 	beq.w	8012872 <HAL_TIM_ConfigClockSource+0x726>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	4a24      	ldr	r2, [pc, #144]	; (801239c <HAL_TIM_ConfigClockSource+0x250>)
 801230c:	4293      	cmp	r3, r2
 801230e:	f000 82b0 	beq.w	8012872 <HAL_TIM_ConfigClockSource+0x726>
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	4a22      	ldr	r2, [pc, #136]	; (80123a0 <HAL_TIM_ConfigClockSource+0x254>)
 8012318:	4293      	cmp	r3, r2
 801231a:	f000 82aa 	beq.w	8012872 <HAL_TIM_ConfigClockSource+0x726>
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	4a20      	ldr	r2, [pc, #128]	; (80123a4 <HAL_TIM_ConfigClockSource+0x258>)
 8012324:	4293      	cmp	r3, r2
 8012326:	f000 82a4 	beq.w	8012872 <HAL_TIM_ConfigClockSource+0x726>
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	4a1e      	ldr	r2, [pc, #120]	; (80123a8 <HAL_TIM_ConfigClockSource+0x25c>)
 8012330:	4293      	cmp	r3, r2
 8012332:	f000 829e 	beq.w	8012872 <HAL_TIM_ConfigClockSource+0x726>
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	4a1c      	ldr	r2, [pc, #112]	; (80123ac <HAL_TIM_ConfigClockSource+0x260>)
 801233c:	4293      	cmp	r3, r2
 801233e:	f000 8298 	beq.w	8012872 <HAL_TIM_ConfigClockSource+0x726>
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	4a1a      	ldr	r2, [pc, #104]	; (80123b0 <HAL_TIM_ConfigClockSource+0x264>)
 8012348:	4293      	cmp	r3, r2
 801234a:	f000 8292 	beq.w	8012872 <HAL_TIM_ConfigClockSource+0x726>
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	4a18      	ldr	r2, [pc, #96]	; (80123b4 <HAL_TIM_ConfigClockSource+0x268>)
 8012354:	4293      	cmp	r3, r2
 8012356:	f000 828c 	beq.w	8012872 <HAL_TIM_ConfigClockSource+0x726>
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	4a16      	ldr	r2, [pc, #88]	; (80123b8 <HAL_TIM_ConfigClockSource+0x26c>)
 8012360:	4293      	cmp	r3, r2
 8012362:	f000 8286 	beq.w	8012872 <HAL_TIM_ConfigClockSource+0x726>
 8012366:	f241 5150 	movw	r1, #5456	; 0x1550
 801236a:	4802      	ldr	r0, [pc, #8]	; (8012374 <HAL_TIM_ConfigClockSource+0x228>)
 801236c:	f7ef fb81 	bl	8001a72 <assert_failed>
      break;
 8012370:	e27f      	b.n	8012872 <HAL_TIM_ConfigClockSource+0x726>
 8012372:	bf00      	nop
 8012374:	0801dee4 	.word	0x0801dee4
 8012378:	ffceff88 	.word	0xffceff88
 801237c:	00100040 	.word	0x00100040
 8012380:	00100030 	.word	0x00100030
 8012384:	00100020 	.word	0x00100020
 8012388:	40010000 	.word	0x40010000
 801238c:	40000400 	.word	0x40000400
 8012390:	40000800 	.word	0x40000800
 8012394:	40000c00 	.word	0x40000c00
 8012398:	40001000 	.word	0x40001000
 801239c:	40001400 	.word	0x40001400
 80123a0:	40010400 	.word	0x40010400
 80123a4:	40001800 	.word	0x40001800
 80123a8:	40001c00 	.word	0x40001c00
 80123ac:	40002000 	.word	0x40002000
 80123b0:	40014000 	.word	0x40014000
 80123b4:	40014400 	.word	0x40014400
 80123b8:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	4a71      	ldr	r2, [pc, #452]	; (8012588 <HAL_TIM_ConfigClockSource+0x43c>)
 80123c2:	4293      	cmp	r3, r2
 80123c4:	d01d      	beq.n	8012402 <HAL_TIM_ConfigClockSource+0x2b6>
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80123ce:	d018      	beq.n	8012402 <HAL_TIM_ConfigClockSource+0x2b6>
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	4a6d      	ldr	r2, [pc, #436]	; (801258c <HAL_TIM_ConfigClockSource+0x440>)
 80123d6:	4293      	cmp	r3, r2
 80123d8:	d013      	beq.n	8012402 <HAL_TIM_ConfigClockSource+0x2b6>
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	4a6c      	ldr	r2, [pc, #432]	; (8012590 <HAL_TIM_ConfigClockSource+0x444>)
 80123e0:	4293      	cmp	r3, r2
 80123e2:	d00e      	beq.n	8012402 <HAL_TIM_ConfigClockSource+0x2b6>
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	4a6a      	ldr	r2, [pc, #424]	; (8012594 <HAL_TIM_ConfigClockSource+0x448>)
 80123ea:	4293      	cmp	r3, r2
 80123ec:	d009      	beq.n	8012402 <HAL_TIM_ConfigClockSource+0x2b6>
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	4a69      	ldr	r2, [pc, #420]	; (8012598 <HAL_TIM_ConfigClockSource+0x44c>)
 80123f4:	4293      	cmp	r3, r2
 80123f6:	d004      	beq.n	8012402 <HAL_TIM_ConfigClockSource+0x2b6>
 80123f8:	f241 5157 	movw	r1, #5463	; 0x1557
 80123fc:	4867      	ldr	r0, [pc, #412]	; (801259c <HAL_TIM_ConfigClockSource+0x450>)
 80123fe:	f7ef fb38 	bl	8001a72 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	689b      	ldr	r3, [r3, #8]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d013      	beq.n	8012432 <HAL_TIM_ConfigClockSource+0x2e6>
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	689b      	ldr	r3, [r3, #8]
 801240e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012412:	d00e      	beq.n	8012432 <HAL_TIM_ConfigClockSource+0x2e6>
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	689b      	ldr	r3, [r3, #8]
 8012418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801241c:	d009      	beq.n	8012432 <HAL_TIM_ConfigClockSource+0x2e6>
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	689b      	ldr	r3, [r3, #8]
 8012422:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012426:	d004      	beq.n	8012432 <HAL_TIM_ConfigClockSource+0x2e6>
 8012428:	f241 515a 	movw	r1, #5466	; 0x155a
 801242c:	485b      	ldr	r0, [pc, #364]	; (801259c <HAL_TIM_ConfigClockSource+0x450>)
 801242e:	f7ef fb20 	bl	8001a72 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801243a:	d014      	beq.n	8012466 <HAL_TIM_ConfigClockSource+0x31a>
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	685b      	ldr	r3, [r3, #4]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d010      	beq.n	8012466 <HAL_TIM_ConfigClockSource+0x31a>
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	685b      	ldr	r3, [r3, #4]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d00c      	beq.n	8012466 <HAL_TIM_ConfigClockSource+0x31a>
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	685b      	ldr	r3, [r3, #4]
 8012450:	2b02      	cmp	r3, #2
 8012452:	d008      	beq.n	8012466 <HAL_TIM_ConfigClockSource+0x31a>
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	685b      	ldr	r3, [r3, #4]
 8012458:	2b0a      	cmp	r3, #10
 801245a:	d004      	beq.n	8012466 <HAL_TIM_ConfigClockSource+0x31a>
 801245c:	f241 515b 	movw	r1, #5467	; 0x155b
 8012460:	484e      	ldr	r0, [pc, #312]	; (801259c <HAL_TIM_ConfigClockSource+0x450>)
 8012462:	f7ef fb06 	bl	8001a72 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	68db      	ldr	r3, [r3, #12]
 801246a:	2b0f      	cmp	r3, #15
 801246c:	d904      	bls.n	8012478 <HAL_TIM_ConfigClockSource+0x32c>
 801246e:	f241 515c 	movw	r1, #5468	; 0x155c
 8012472:	484a      	ldr	r0, [pc, #296]	; (801259c <HAL_TIM_ConfigClockSource+0x450>)
 8012474:	f7ef fafd 	bl	8001a72 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6818      	ldr	r0, [r3, #0]
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	6899      	ldr	r1, [r3, #8]
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	685a      	ldr	r2, [r3, #4]
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	68db      	ldr	r3, [r3, #12]
 8012488:	f000 ff7a 	bl	8013380 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	689b      	ldr	r3, [r3, #8]
 8012492:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801249a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	68ba      	ldr	r2, [r7, #8]
 80124a2:	609a      	str	r2, [r3, #8]
      break;
 80124a4:	e1e6      	b.n	8012874 <HAL_TIM_ConfigClockSource+0x728>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4a37      	ldr	r2, [pc, #220]	; (8012588 <HAL_TIM_ConfigClockSource+0x43c>)
 80124ac:	4293      	cmp	r3, r2
 80124ae:	d01d      	beq.n	80124ec <HAL_TIM_ConfigClockSource+0x3a0>
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80124b8:	d018      	beq.n	80124ec <HAL_TIM_ConfigClockSource+0x3a0>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	4a33      	ldr	r2, [pc, #204]	; (801258c <HAL_TIM_ConfigClockSource+0x440>)
 80124c0:	4293      	cmp	r3, r2
 80124c2:	d013      	beq.n	80124ec <HAL_TIM_ConfigClockSource+0x3a0>
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	4a31      	ldr	r2, [pc, #196]	; (8012590 <HAL_TIM_ConfigClockSource+0x444>)
 80124ca:	4293      	cmp	r3, r2
 80124cc:	d00e      	beq.n	80124ec <HAL_TIM_ConfigClockSource+0x3a0>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	4a30      	ldr	r2, [pc, #192]	; (8012594 <HAL_TIM_ConfigClockSource+0x448>)
 80124d4:	4293      	cmp	r3, r2
 80124d6:	d009      	beq.n	80124ec <HAL_TIM_ConfigClockSource+0x3a0>
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	4a2e      	ldr	r2, [pc, #184]	; (8012598 <HAL_TIM_ConfigClockSource+0x44c>)
 80124de:	4293      	cmp	r3, r2
 80124e0:	d004      	beq.n	80124ec <HAL_TIM_ConfigClockSource+0x3a0>
 80124e2:	f241 516f 	movw	r1, #5487	; 0x156f
 80124e6:	482d      	ldr	r0, [pc, #180]	; (801259c <HAL_TIM_ConfigClockSource+0x450>)
 80124e8:	f7ef fac3 	bl	8001a72 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	689b      	ldr	r3, [r3, #8]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d013      	beq.n	801251c <HAL_TIM_ConfigClockSource+0x3d0>
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	689b      	ldr	r3, [r3, #8]
 80124f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80124fc:	d00e      	beq.n	801251c <HAL_TIM_ConfigClockSource+0x3d0>
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	689b      	ldr	r3, [r3, #8]
 8012502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012506:	d009      	beq.n	801251c <HAL_TIM_ConfigClockSource+0x3d0>
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	689b      	ldr	r3, [r3, #8]
 801250c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012510:	d004      	beq.n	801251c <HAL_TIM_ConfigClockSource+0x3d0>
 8012512:	f241 5172 	movw	r1, #5490	; 0x1572
 8012516:	4821      	ldr	r0, [pc, #132]	; (801259c <HAL_TIM_ConfigClockSource+0x450>)
 8012518:	f7ef faab 	bl	8001a72 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	685b      	ldr	r3, [r3, #4]
 8012520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012524:	d014      	beq.n	8012550 <HAL_TIM_ConfigClockSource+0x404>
 8012526:	683b      	ldr	r3, [r7, #0]
 8012528:	685b      	ldr	r3, [r3, #4]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d010      	beq.n	8012550 <HAL_TIM_ConfigClockSource+0x404>
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	685b      	ldr	r3, [r3, #4]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d00c      	beq.n	8012550 <HAL_TIM_ConfigClockSource+0x404>
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	2b02      	cmp	r3, #2
 801253c:	d008      	beq.n	8012550 <HAL_TIM_ConfigClockSource+0x404>
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	685b      	ldr	r3, [r3, #4]
 8012542:	2b0a      	cmp	r3, #10
 8012544:	d004      	beq.n	8012550 <HAL_TIM_ConfigClockSource+0x404>
 8012546:	f241 5173 	movw	r1, #5491	; 0x1573
 801254a:	4814      	ldr	r0, [pc, #80]	; (801259c <HAL_TIM_ConfigClockSource+0x450>)
 801254c:	f7ef fa91 	bl	8001a72 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	68db      	ldr	r3, [r3, #12]
 8012554:	2b0f      	cmp	r3, #15
 8012556:	d904      	bls.n	8012562 <HAL_TIM_ConfigClockSource+0x416>
 8012558:	f241 5174 	movw	r1, #5492	; 0x1574
 801255c:	480f      	ldr	r0, [pc, #60]	; (801259c <HAL_TIM_ConfigClockSource+0x450>)
 801255e:	f7ef fa88 	bl	8001a72 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	6818      	ldr	r0, [r3, #0]
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	6899      	ldr	r1, [r3, #8]
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	685a      	ldr	r2, [r3, #4]
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	68db      	ldr	r3, [r3, #12]
 8012572:	f000 ff05 	bl	8013380 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	689a      	ldr	r2, [r3, #8]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012584:	609a      	str	r2, [r3, #8]
      break;
 8012586:	e175      	b.n	8012874 <HAL_TIM_ConfigClockSource+0x728>
 8012588:	40010000 	.word	0x40010000
 801258c:	40000400 	.word	0x40000400
 8012590:	40000800 	.word	0x40000800
 8012594:	40000c00 	.word	0x40000c00
 8012598:	40010400 	.word	0x40010400
 801259c:	0801dee4 	.word	0x0801dee4
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	4a5e      	ldr	r2, [pc, #376]	; (8012720 <HAL_TIM_ConfigClockSource+0x5d4>)
 80125a6:	4293      	cmp	r3, r2
 80125a8:	d027      	beq.n	80125fa <HAL_TIM_ConfigClockSource+0x4ae>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80125b2:	d022      	beq.n	80125fa <HAL_TIM_ConfigClockSource+0x4ae>
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	4a5a      	ldr	r2, [pc, #360]	; (8012724 <HAL_TIM_ConfigClockSource+0x5d8>)
 80125ba:	4293      	cmp	r3, r2
 80125bc:	d01d      	beq.n	80125fa <HAL_TIM_ConfigClockSource+0x4ae>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	4a59      	ldr	r2, [pc, #356]	; (8012728 <HAL_TIM_ConfigClockSource+0x5dc>)
 80125c4:	4293      	cmp	r3, r2
 80125c6:	d018      	beq.n	80125fa <HAL_TIM_ConfigClockSource+0x4ae>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	4a57      	ldr	r2, [pc, #348]	; (801272c <HAL_TIM_ConfigClockSource+0x5e0>)
 80125ce:	4293      	cmp	r3, r2
 80125d0:	d013      	beq.n	80125fa <HAL_TIM_ConfigClockSource+0x4ae>
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	4a56      	ldr	r2, [pc, #344]	; (8012730 <HAL_TIM_ConfigClockSource+0x5e4>)
 80125d8:	4293      	cmp	r3, r2
 80125da:	d00e      	beq.n	80125fa <HAL_TIM_ConfigClockSource+0x4ae>
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	4a54      	ldr	r2, [pc, #336]	; (8012734 <HAL_TIM_ConfigClockSource+0x5e8>)
 80125e2:	4293      	cmp	r3, r2
 80125e4:	d009      	beq.n	80125fa <HAL_TIM_ConfigClockSource+0x4ae>
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	4a53      	ldr	r2, [pc, #332]	; (8012738 <HAL_TIM_ConfigClockSource+0x5ec>)
 80125ec:	4293      	cmp	r3, r2
 80125ee:	d004      	beq.n	80125fa <HAL_TIM_ConfigClockSource+0x4ae>
 80125f0:	f241 5183 	movw	r1, #5507	; 0x1583
 80125f4:	4851      	ldr	r0, [pc, #324]	; (801273c <HAL_TIM_ConfigClockSource+0x5f0>)
 80125f6:	f7ef fa3c 	bl	8001a72 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80125fa:	683b      	ldr	r3, [r7, #0]
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012602:	d014      	beq.n	801262e <HAL_TIM_ConfigClockSource+0x4e2>
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	685b      	ldr	r3, [r3, #4]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d010      	beq.n	801262e <HAL_TIM_ConfigClockSource+0x4e2>
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	685b      	ldr	r3, [r3, #4]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d00c      	beq.n	801262e <HAL_TIM_ConfigClockSource+0x4e2>
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	685b      	ldr	r3, [r3, #4]
 8012618:	2b02      	cmp	r3, #2
 801261a:	d008      	beq.n	801262e <HAL_TIM_ConfigClockSource+0x4e2>
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	685b      	ldr	r3, [r3, #4]
 8012620:	2b0a      	cmp	r3, #10
 8012622:	d004      	beq.n	801262e <HAL_TIM_ConfigClockSource+0x4e2>
 8012624:	f241 5186 	movw	r1, #5510	; 0x1586
 8012628:	4844      	ldr	r0, [pc, #272]	; (801273c <HAL_TIM_ConfigClockSource+0x5f0>)
 801262a:	f7ef fa22 	bl	8001a72 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	68db      	ldr	r3, [r3, #12]
 8012632:	2b0f      	cmp	r3, #15
 8012634:	d904      	bls.n	8012640 <HAL_TIM_ConfigClockSource+0x4f4>
 8012636:	f241 5187 	movw	r1, #5511	; 0x1587
 801263a:	4840      	ldr	r0, [pc, #256]	; (801273c <HAL_TIM_ConfigClockSource+0x5f0>)
 801263c:	f7ef fa19 	bl	8001a72 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6818      	ldr	r0, [r3, #0]
 8012644:	683b      	ldr	r3, [r7, #0]
 8012646:	6859      	ldr	r1, [r3, #4]
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	68db      	ldr	r3, [r3, #12]
 801264c:	461a      	mov	r2, r3
 801264e:	f000 fe19 	bl	8013284 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	2150      	movs	r1, #80	; 0x50
 8012658:	4618      	mov	r0, r3
 801265a:	f000 fe73 	bl	8013344 <TIM_ITRx_SetConfig>
      break;
 801265e:	e109      	b.n	8012874 <HAL_TIM_ConfigClockSource+0x728>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	4a2e      	ldr	r2, [pc, #184]	; (8012720 <HAL_TIM_ConfigClockSource+0x5d4>)
 8012666:	4293      	cmp	r3, r2
 8012668:	d027      	beq.n	80126ba <HAL_TIM_ConfigClockSource+0x56e>
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012672:	d022      	beq.n	80126ba <HAL_TIM_ConfigClockSource+0x56e>
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	4a2a      	ldr	r2, [pc, #168]	; (8012724 <HAL_TIM_ConfigClockSource+0x5d8>)
 801267a:	4293      	cmp	r3, r2
 801267c:	d01d      	beq.n	80126ba <HAL_TIM_ConfigClockSource+0x56e>
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	4a29      	ldr	r2, [pc, #164]	; (8012728 <HAL_TIM_ConfigClockSource+0x5dc>)
 8012684:	4293      	cmp	r3, r2
 8012686:	d018      	beq.n	80126ba <HAL_TIM_ConfigClockSource+0x56e>
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	4a27      	ldr	r2, [pc, #156]	; (801272c <HAL_TIM_ConfigClockSource+0x5e0>)
 801268e:	4293      	cmp	r3, r2
 8012690:	d013      	beq.n	80126ba <HAL_TIM_ConfigClockSource+0x56e>
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	4a26      	ldr	r2, [pc, #152]	; (8012730 <HAL_TIM_ConfigClockSource+0x5e4>)
 8012698:	4293      	cmp	r3, r2
 801269a:	d00e      	beq.n	80126ba <HAL_TIM_ConfigClockSource+0x56e>
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	4a24      	ldr	r2, [pc, #144]	; (8012734 <HAL_TIM_ConfigClockSource+0x5e8>)
 80126a2:	4293      	cmp	r3, r2
 80126a4:	d009      	beq.n	80126ba <HAL_TIM_ConfigClockSource+0x56e>
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	4a23      	ldr	r2, [pc, #140]	; (8012738 <HAL_TIM_ConfigClockSource+0x5ec>)
 80126ac:	4293      	cmp	r3, r2
 80126ae:	d004      	beq.n	80126ba <HAL_TIM_ConfigClockSource+0x56e>
 80126b0:	f241 5193 	movw	r1, #5523	; 0x1593
 80126b4:	4821      	ldr	r0, [pc, #132]	; (801273c <HAL_TIM_ConfigClockSource+0x5f0>)
 80126b6:	f7ef f9dc 	bl	8001a72 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80126c2:	d014      	beq.n	80126ee <HAL_TIM_ConfigClockSource+0x5a2>
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	685b      	ldr	r3, [r3, #4]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d010      	beq.n	80126ee <HAL_TIM_ConfigClockSource+0x5a2>
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	685b      	ldr	r3, [r3, #4]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d00c      	beq.n	80126ee <HAL_TIM_ConfigClockSource+0x5a2>
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	2b02      	cmp	r3, #2
 80126da:	d008      	beq.n	80126ee <HAL_TIM_ConfigClockSource+0x5a2>
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	2b0a      	cmp	r3, #10
 80126e2:	d004      	beq.n	80126ee <HAL_TIM_ConfigClockSource+0x5a2>
 80126e4:	f241 5196 	movw	r1, #5526	; 0x1596
 80126e8:	4814      	ldr	r0, [pc, #80]	; (801273c <HAL_TIM_ConfigClockSource+0x5f0>)
 80126ea:	f7ef f9c2 	bl	8001a72 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	68db      	ldr	r3, [r3, #12]
 80126f2:	2b0f      	cmp	r3, #15
 80126f4:	d904      	bls.n	8012700 <HAL_TIM_ConfigClockSource+0x5b4>
 80126f6:	f241 5197 	movw	r1, #5527	; 0x1597
 80126fa:	4810      	ldr	r0, [pc, #64]	; (801273c <HAL_TIM_ConfigClockSource+0x5f0>)
 80126fc:	f7ef f9b9 	bl	8001a72 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	6818      	ldr	r0, [r3, #0]
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	6859      	ldr	r1, [r3, #4]
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	68db      	ldr	r3, [r3, #12]
 801270c:	461a      	mov	r2, r3
 801270e:	f000 fde8 	bl	80132e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	2160      	movs	r1, #96	; 0x60
 8012718:	4618      	mov	r0, r3
 801271a:	f000 fe13 	bl	8013344 <TIM_ITRx_SetConfig>
      break;
 801271e:	e0a9      	b.n	8012874 <HAL_TIM_ConfigClockSource+0x728>
 8012720:	40010000 	.word	0x40010000
 8012724:	40000400 	.word	0x40000400
 8012728:	40000800 	.word	0x40000800
 801272c:	40000c00 	.word	0x40000c00
 8012730:	40010400 	.word	0x40010400
 8012734:	40001800 	.word	0x40001800
 8012738:	40014000 	.word	0x40014000
 801273c:	0801dee4 	.word	0x0801dee4
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	4a52      	ldr	r2, [pc, #328]	; (8012890 <HAL_TIM_ConfigClockSource+0x744>)
 8012746:	4293      	cmp	r3, r2
 8012748:	d027      	beq.n	801279a <HAL_TIM_ConfigClockSource+0x64e>
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012752:	d022      	beq.n	801279a <HAL_TIM_ConfigClockSource+0x64e>
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	4a4e      	ldr	r2, [pc, #312]	; (8012894 <HAL_TIM_ConfigClockSource+0x748>)
 801275a:	4293      	cmp	r3, r2
 801275c:	d01d      	beq.n	801279a <HAL_TIM_ConfigClockSource+0x64e>
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	4a4d      	ldr	r2, [pc, #308]	; (8012898 <HAL_TIM_ConfigClockSource+0x74c>)
 8012764:	4293      	cmp	r3, r2
 8012766:	d018      	beq.n	801279a <HAL_TIM_ConfigClockSource+0x64e>
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	4a4b      	ldr	r2, [pc, #300]	; (801289c <HAL_TIM_ConfigClockSource+0x750>)
 801276e:	4293      	cmp	r3, r2
 8012770:	d013      	beq.n	801279a <HAL_TIM_ConfigClockSource+0x64e>
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	4a4a      	ldr	r2, [pc, #296]	; (80128a0 <HAL_TIM_ConfigClockSource+0x754>)
 8012778:	4293      	cmp	r3, r2
 801277a:	d00e      	beq.n	801279a <HAL_TIM_ConfigClockSource+0x64e>
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	4a48      	ldr	r2, [pc, #288]	; (80128a4 <HAL_TIM_ConfigClockSource+0x758>)
 8012782:	4293      	cmp	r3, r2
 8012784:	d009      	beq.n	801279a <HAL_TIM_ConfigClockSource+0x64e>
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	4a47      	ldr	r2, [pc, #284]	; (80128a8 <HAL_TIM_ConfigClockSource+0x75c>)
 801278c:	4293      	cmp	r3, r2
 801278e:	d004      	beq.n	801279a <HAL_TIM_ConfigClockSource+0x64e>
 8012790:	f241 51a3 	movw	r1, #5539	; 0x15a3
 8012794:	4845      	ldr	r0, [pc, #276]	; (80128ac <HAL_TIM_ConfigClockSource+0x760>)
 8012796:	f7ef f96c 	bl	8001a72 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80127a2:	d014      	beq.n	80127ce <HAL_TIM_ConfigClockSource+0x682>
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	685b      	ldr	r3, [r3, #4]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d010      	beq.n	80127ce <HAL_TIM_ConfigClockSource+0x682>
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	685b      	ldr	r3, [r3, #4]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d00c      	beq.n	80127ce <HAL_TIM_ConfigClockSource+0x682>
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	2b02      	cmp	r3, #2
 80127ba:	d008      	beq.n	80127ce <HAL_TIM_ConfigClockSource+0x682>
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	2b0a      	cmp	r3, #10
 80127c2:	d004      	beq.n	80127ce <HAL_TIM_ConfigClockSource+0x682>
 80127c4:	f241 51a6 	movw	r1, #5542	; 0x15a6
 80127c8:	4838      	ldr	r0, [pc, #224]	; (80128ac <HAL_TIM_ConfigClockSource+0x760>)
 80127ca:	f7ef f952 	bl	8001a72 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	68db      	ldr	r3, [r3, #12]
 80127d2:	2b0f      	cmp	r3, #15
 80127d4:	d904      	bls.n	80127e0 <HAL_TIM_ConfigClockSource+0x694>
 80127d6:	f241 51a7 	movw	r1, #5543	; 0x15a7
 80127da:	4834      	ldr	r0, [pc, #208]	; (80128ac <HAL_TIM_ConfigClockSource+0x760>)
 80127dc:	f7ef f949 	bl	8001a72 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	6818      	ldr	r0, [r3, #0]
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	6859      	ldr	r1, [r3, #4]
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	68db      	ldr	r3, [r3, #12]
 80127ec:	461a      	mov	r2, r3
 80127ee:	f000 fd49 	bl	8013284 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	2140      	movs	r1, #64	; 0x40
 80127f8:	4618      	mov	r0, r3
 80127fa:	f000 fda3 	bl	8013344 <TIM_ITRx_SetConfig>
      break;
 80127fe:	e039      	b.n	8012874 <HAL_TIM_ConfigClockSource+0x728>
    case TIM_CLOCKSOURCE_ITR6:
    case TIM_CLOCKSOURCE_ITR7:
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	4a22      	ldr	r2, [pc, #136]	; (8012890 <HAL_TIM_ConfigClockSource+0x744>)
 8012806:	4293      	cmp	r3, r2
 8012808:	d027      	beq.n	801285a <HAL_TIM_ConfigClockSource+0x70e>
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012812:	d022      	beq.n	801285a <HAL_TIM_ConfigClockSource+0x70e>
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	4a1e      	ldr	r2, [pc, #120]	; (8012894 <HAL_TIM_ConfigClockSource+0x748>)
 801281a:	4293      	cmp	r3, r2
 801281c:	d01d      	beq.n	801285a <HAL_TIM_ConfigClockSource+0x70e>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	4a1d      	ldr	r2, [pc, #116]	; (8012898 <HAL_TIM_ConfigClockSource+0x74c>)
 8012824:	4293      	cmp	r3, r2
 8012826:	d018      	beq.n	801285a <HAL_TIM_ConfigClockSource+0x70e>
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	4a1b      	ldr	r2, [pc, #108]	; (801289c <HAL_TIM_ConfigClockSource+0x750>)
 801282e:	4293      	cmp	r3, r2
 8012830:	d013      	beq.n	801285a <HAL_TIM_ConfigClockSource+0x70e>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	4a1a      	ldr	r2, [pc, #104]	; (80128a0 <HAL_TIM_ConfigClockSource+0x754>)
 8012838:	4293      	cmp	r3, r2
 801283a:	d00e      	beq.n	801285a <HAL_TIM_ConfigClockSource+0x70e>
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	4a18      	ldr	r2, [pc, #96]	; (80128a4 <HAL_TIM_ConfigClockSource+0x758>)
 8012842:	4293      	cmp	r3, r2
 8012844:	d009      	beq.n	801285a <HAL_TIM_ConfigClockSource+0x70e>
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	4a17      	ldr	r2, [pc, #92]	; (80128a8 <HAL_TIM_ConfigClockSource+0x75c>)
 801284c:	4293      	cmp	r3, r2
 801284e:	d004      	beq.n	801285a <HAL_TIM_ConfigClockSource+0x70e>
 8012850:	f241 51bb 	movw	r1, #5563	; 0x15bb
 8012854:	4815      	ldr	r0, [pc, #84]	; (80128ac <HAL_TIM_ConfigClockSource+0x760>)
 8012856:	f7ef f90c 	bl	8001a72 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	681a      	ldr	r2, [r3, #0]
 801285e:	683b      	ldr	r3, [r7, #0]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	4619      	mov	r1, r3
 8012864:	4610      	mov	r0, r2
 8012866:	f000 fd6d 	bl	8013344 <TIM_ITRx_SetConfig>
      break;
 801286a:	e003      	b.n	8012874 <HAL_TIM_ConfigClockSource+0x728>
    }

    default:
      status = HAL_ERROR;
 801286c:	2301      	movs	r3, #1
 801286e:	73fb      	strb	r3, [r7, #15]
      break;
 8012870:	e000      	b.n	8012874 <HAL_TIM_ConfigClockSource+0x728>
      break;
 8012872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2201      	movs	r2, #1
 8012878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	2200      	movs	r2, #0
 8012880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012884:	7bfb      	ldrb	r3, [r7, #15]
}
 8012886:	4618      	mov	r0, r3
 8012888:	3710      	adds	r7, #16
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}
 801288e:	bf00      	nop
 8012890:	40010000 	.word	0x40010000
 8012894:	40000400 	.word	0x40000400
 8012898:	40000800 	.word	0x40000800
 801289c:	40000c00 	.word	0x40000c00
 80128a0:	40010400 	.word	0x40010400
 80128a4:	40001800 	.word	0x40001800
 80128a8:	40014000 	.word	0x40014000
 80128ac:	0801dee4 	.word	0x0801dee4

080128b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80128b0:	b480      	push	{r7}
 80128b2:	b083      	sub	sp, #12
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80128b8:	bf00      	nop
 80128ba:	370c      	adds	r7, #12
 80128bc:	46bd      	mov	sp, r7
 80128be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c2:	4770      	bx	lr

080128c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80128c4:	b480      	push	{r7}
 80128c6:	b083      	sub	sp, #12
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80128cc:	bf00      	nop
 80128ce:	370c      	adds	r7, #12
 80128d0:	46bd      	mov	sp, r7
 80128d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d6:	4770      	bx	lr

080128d8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80128d8:	b480      	push	{r7}
 80128da:	b083      	sub	sp, #12
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80128e0:	bf00      	nop
 80128e2:	370c      	adds	r7, #12
 80128e4:	46bd      	mov	sp, r7
 80128e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ea:	4770      	bx	lr

080128ec <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b084      	sub	sp, #16
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128f8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128fe:	687a      	ldr	r2, [r7, #4]
 8012900:	429a      	cmp	r2, r3
 8012902:	d107      	bne.n	8012914 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	2201      	movs	r2, #1
 8012908:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	2201      	movs	r2, #1
 801290e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012912:	e02a      	b.n	801296a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012918:	687a      	ldr	r2, [r7, #4]
 801291a:	429a      	cmp	r2, r3
 801291c:	d107      	bne.n	801292e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	2202      	movs	r2, #2
 8012922:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	2201      	movs	r2, #1
 8012928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801292c:	e01d      	b.n	801296a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012932:	687a      	ldr	r2, [r7, #4]
 8012934:	429a      	cmp	r2, r3
 8012936:	d107      	bne.n	8012948 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	2204      	movs	r2, #4
 801293c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	2201      	movs	r2, #1
 8012942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012946:	e010      	b.n	801296a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801294c:	687a      	ldr	r2, [r7, #4]
 801294e:	429a      	cmp	r2, r3
 8012950:	d107      	bne.n	8012962 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	2208      	movs	r2, #8
 8012956:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	2201      	movs	r2, #1
 801295c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012960:	e003      	b.n	801296a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	2201      	movs	r2, #1
 8012966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 801296a:	68f8      	ldr	r0, [r7, #12]
 801296c:	f7ff ffb4 	bl	80128d8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	2200      	movs	r2, #0
 8012974:	771a      	strb	r2, [r3, #28]
}
 8012976:	bf00      	nop
 8012978:	3710      	adds	r7, #16
 801297a:	46bd      	mov	sp, r7
 801297c:	bd80      	pop	{r7, pc}

0801297e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801297e:	b580      	push	{r7, lr}
 8012980:	b084      	sub	sp, #16
 8012982:	af00      	add	r7, sp, #0
 8012984:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801298a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012990:	687a      	ldr	r2, [r7, #4]
 8012992:	429a      	cmp	r2, r3
 8012994:	d10b      	bne.n	80129ae <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	2201      	movs	r2, #1
 801299a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	69db      	ldr	r3, [r3, #28]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d136      	bne.n	8012a12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	2201      	movs	r2, #1
 80129a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80129ac:	e031      	b.n	8012a12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d10b      	bne.n	80129d0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	2202      	movs	r2, #2
 80129bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	69db      	ldr	r3, [r3, #28]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d125      	bne.n	8012a12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	2201      	movs	r2, #1
 80129ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80129ce:	e020      	b.n	8012a12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129d4:	687a      	ldr	r2, [r7, #4]
 80129d6:	429a      	cmp	r2, r3
 80129d8:	d10b      	bne.n	80129f2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	2204      	movs	r2, #4
 80129de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	69db      	ldr	r3, [r3, #28]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d114      	bne.n	8012a12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	2201      	movs	r2, #1
 80129ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80129f0:	e00f      	b.n	8012a12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129f6:	687a      	ldr	r2, [r7, #4]
 80129f8:	429a      	cmp	r2, r3
 80129fa:	d10a      	bne.n	8012a12 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	2208      	movs	r2, #8
 8012a00:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	69db      	ldr	r3, [r3, #28]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d103      	bne.n	8012a12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	2201      	movs	r2, #1
 8012a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012a12:	68f8      	ldr	r0, [r7, #12]
 8012a14:	f7ff ff4c 	bl	80128b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	771a      	strb	r2, [r3, #28]
}
 8012a1e:	bf00      	nop
 8012a20:	3710      	adds	r7, #16
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}

08012a26 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012a26:	b580      	push	{r7, lr}
 8012a28:	b084      	sub	sp, #16
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a32:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a38:	687a      	ldr	r2, [r7, #4]
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	d103      	bne.n	8012a46 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	2201      	movs	r2, #1
 8012a42:	771a      	strb	r2, [r3, #28]
 8012a44:	e019      	b.n	8012a7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a4a:	687a      	ldr	r2, [r7, #4]
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d103      	bne.n	8012a58 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2202      	movs	r2, #2
 8012a54:	771a      	strb	r2, [r3, #28]
 8012a56:	e010      	b.n	8012a7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	d103      	bne.n	8012a6a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	2204      	movs	r2, #4
 8012a66:	771a      	strb	r2, [r3, #28]
 8012a68:	e007      	b.n	8012a7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a6e:	687a      	ldr	r2, [r7, #4]
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d102      	bne.n	8012a7a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	2208      	movs	r2, #8
 8012a78:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8012a7a:	68f8      	ldr	r0, [r7, #12]
 8012a7c:	f7ff ff22 	bl	80128c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	2200      	movs	r2, #0
 8012a84:	771a      	strb	r2, [r3, #28]
}
 8012a86:	bf00      	nop
 8012a88:	3710      	adds	r7, #16
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
	...

08012a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8012a90:	b480      	push	{r7}
 8012a92:	b085      	sub	sp, #20
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	4a40      	ldr	r2, [pc, #256]	; (8012ba4 <TIM_Base_SetConfig+0x114>)
 8012aa4:	4293      	cmp	r3, r2
 8012aa6:	d013      	beq.n	8012ad0 <TIM_Base_SetConfig+0x40>
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012aae:	d00f      	beq.n	8012ad0 <TIM_Base_SetConfig+0x40>
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	4a3d      	ldr	r2, [pc, #244]	; (8012ba8 <TIM_Base_SetConfig+0x118>)
 8012ab4:	4293      	cmp	r3, r2
 8012ab6:	d00b      	beq.n	8012ad0 <TIM_Base_SetConfig+0x40>
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	4a3c      	ldr	r2, [pc, #240]	; (8012bac <TIM_Base_SetConfig+0x11c>)
 8012abc:	4293      	cmp	r3, r2
 8012abe:	d007      	beq.n	8012ad0 <TIM_Base_SetConfig+0x40>
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	4a3b      	ldr	r2, [pc, #236]	; (8012bb0 <TIM_Base_SetConfig+0x120>)
 8012ac4:	4293      	cmp	r3, r2
 8012ac6:	d003      	beq.n	8012ad0 <TIM_Base_SetConfig+0x40>
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	4a3a      	ldr	r2, [pc, #232]	; (8012bb4 <TIM_Base_SetConfig+0x124>)
 8012acc:	4293      	cmp	r3, r2
 8012ace:	d108      	bne.n	8012ae2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	68fa      	ldr	r2, [r7, #12]
 8012ade:	4313      	orrs	r3, r2
 8012ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	4a2f      	ldr	r2, [pc, #188]	; (8012ba4 <TIM_Base_SetConfig+0x114>)
 8012ae6:	4293      	cmp	r3, r2
 8012ae8:	d01f      	beq.n	8012b2a <TIM_Base_SetConfig+0x9a>
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012af0:	d01b      	beq.n	8012b2a <TIM_Base_SetConfig+0x9a>
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	4a2c      	ldr	r2, [pc, #176]	; (8012ba8 <TIM_Base_SetConfig+0x118>)
 8012af6:	4293      	cmp	r3, r2
 8012af8:	d017      	beq.n	8012b2a <TIM_Base_SetConfig+0x9a>
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	4a2b      	ldr	r2, [pc, #172]	; (8012bac <TIM_Base_SetConfig+0x11c>)
 8012afe:	4293      	cmp	r3, r2
 8012b00:	d013      	beq.n	8012b2a <TIM_Base_SetConfig+0x9a>
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	4a2a      	ldr	r2, [pc, #168]	; (8012bb0 <TIM_Base_SetConfig+0x120>)
 8012b06:	4293      	cmp	r3, r2
 8012b08:	d00f      	beq.n	8012b2a <TIM_Base_SetConfig+0x9a>
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	4a29      	ldr	r2, [pc, #164]	; (8012bb4 <TIM_Base_SetConfig+0x124>)
 8012b0e:	4293      	cmp	r3, r2
 8012b10:	d00b      	beq.n	8012b2a <TIM_Base_SetConfig+0x9a>
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	4a28      	ldr	r2, [pc, #160]	; (8012bb8 <TIM_Base_SetConfig+0x128>)
 8012b16:	4293      	cmp	r3, r2
 8012b18:	d007      	beq.n	8012b2a <TIM_Base_SetConfig+0x9a>
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	4a27      	ldr	r2, [pc, #156]	; (8012bbc <TIM_Base_SetConfig+0x12c>)
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	d003      	beq.n	8012b2a <TIM_Base_SetConfig+0x9a>
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	4a26      	ldr	r2, [pc, #152]	; (8012bc0 <TIM_Base_SetConfig+0x130>)
 8012b26:	4293      	cmp	r3, r2
 8012b28:	d108      	bne.n	8012b3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012b32:	683b      	ldr	r3, [r7, #0]
 8012b34:	68db      	ldr	r3, [r3, #12]
 8012b36:	68fa      	ldr	r2, [r7, #12]
 8012b38:	4313      	orrs	r3, r2
 8012b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	695b      	ldr	r3, [r3, #20]
 8012b46:	4313      	orrs	r3, r2
 8012b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	68fa      	ldr	r2, [r7, #12]
 8012b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	689a      	ldr	r2, [r3, #8]
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	681a      	ldr	r2, [r3, #0]
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	4a10      	ldr	r2, [pc, #64]	; (8012ba4 <TIM_Base_SetConfig+0x114>)
 8012b64:	4293      	cmp	r3, r2
 8012b66:	d00f      	beq.n	8012b88 <TIM_Base_SetConfig+0xf8>
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	4a12      	ldr	r2, [pc, #72]	; (8012bb4 <TIM_Base_SetConfig+0x124>)
 8012b6c:	4293      	cmp	r3, r2
 8012b6e:	d00b      	beq.n	8012b88 <TIM_Base_SetConfig+0xf8>
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	4a11      	ldr	r2, [pc, #68]	; (8012bb8 <TIM_Base_SetConfig+0x128>)
 8012b74:	4293      	cmp	r3, r2
 8012b76:	d007      	beq.n	8012b88 <TIM_Base_SetConfig+0xf8>
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	4a10      	ldr	r2, [pc, #64]	; (8012bbc <TIM_Base_SetConfig+0x12c>)
 8012b7c:	4293      	cmp	r3, r2
 8012b7e:	d003      	beq.n	8012b88 <TIM_Base_SetConfig+0xf8>
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	4a0f      	ldr	r2, [pc, #60]	; (8012bc0 <TIM_Base_SetConfig+0x130>)
 8012b84:	4293      	cmp	r3, r2
 8012b86:	d103      	bne.n	8012b90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012b88:	683b      	ldr	r3, [r7, #0]
 8012b8a:	691a      	ldr	r2, [r3, #16]
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	2201      	movs	r2, #1
 8012b94:	615a      	str	r2, [r3, #20]
}
 8012b96:	bf00      	nop
 8012b98:	3714      	adds	r7, #20
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba0:	4770      	bx	lr
 8012ba2:	bf00      	nop
 8012ba4:	40010000 	.word	0x40010000
 8012ba8:	40000400 	.word	0x40000400
 8012bac:	40000800 	.word	0x40000800
 8012bb0:	40000c00 	.word	0x40000c00
 8012bb4:	40010400 	.word	0x40010400
 8012bb8:	40014000 	.word	0x40014000
 8012bbc:	40014400 	.word	0x40014400
 8012bc0:	40014800 	.word	0x40014800

08012bc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b086      	sub	sp, #24
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	6a1b      	ldr	r3, [r3, #32]
 8012bd2:	f023 0201 	bic.w	r2, r3, #1
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	6a1b      	ldr	r3, [r3, #32]
 8012bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	685b      	ldr	r3, [r3, #4]
 8012be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	699b      	ldr	r3, [r3, #24]
 8012bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012bec:	68fa      	ldr	r2, [r7, #12]
 8012bee:	4b4b      	ldr	r3, [pc, #300]	; (8012d1c <TIM_OC1_SetConfig+0x158>)
 8012bf0:	4013      	ands	r3, r2
 8012bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	f023 0303 	bic.w	r3, r3, #3
 8012bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	68fa      	ldr	r2, [r7, #12]
 8012c02:	4313      	orrs	r3, r2
 8012c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012c06:	697b      	ldr	r3, [r7, #20]
 8012c08:	f023 0302 	bic.w	r3, r3, #2
 8012c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	689b      	ldr	r3, [r3, #8]
 8012c12:	697a      	ldr	r2, [r7, #20]
 8012c14:	4313      	orrs	r3, r2
 8012c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	4a41      	ldr	r2, [pc, #260]	; (8012d20 <TIM_OC1_SetConfig+0x15c>)
 8012c1c:	4293      	cmp	r3, r2
 8012c1e:	d00f      	beq.n	8012c40 <TIM_OC1_SetConfig+0x7c>
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	4a40      	ldr	r2, [pc, #256]	; (8012d24 <TIM_OC1_SetConfig+0x160>)
 8012c24:	4293      	cmp	r3, r2
 8012c26:	d00b      	beq.n	8012c40 <TIM_OC1_SetConfig+0x7c>
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	4a3f      	ldr	r2, [pc, #252]	; (8012d28 <TIM_OC1_SetConfig+0x164>)
 8012c2c:	4293      	cmp	r3, r2
 8012c2e:	d007      	beq.n	8012c40 <TIM_OC1_SetConfig+0x7c>
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	4a3e      	ldr	r2, [pc, #248]	; (8012d2c <TIM_OC1_SetConfig+0x168>)
 8012c34:	4293      	cmp	r3, r2
 8012c36:	d003      	beq.n	8012c40 <TIM_OC1_SetConfig+0x7c>
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	4a3d      	ldr	r2, [pc, #244]	; (8012d30 <TIM_OC1_SetConfig+0x16c>)
 8012c3c:	4293      	cmp	r3, r2
 8012c3e:	d119      	bne.n	8012c74 <TIM_OC1_SetConfig+0xb0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	68db      	ldr	r3, [r3, #12]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d008      	beq.n	8012c5a <TIM_OC1_SetConfig+0x96>
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	68db      	ldr	r3, [r3, #12]
 8012c4c:	2b08      	cmp	r3, #8
 8012c4e:	d004      	beq.n	8012c5a <TIM_OC1_SetConfig+0x96>
 8012c50:	f641 3164 	movw	r1, #7012	; 0x1b64
 8012c54:	4837      	ldr	r0, [pc, #220]	; (8012d34 <TIM_OC1_SetConfig+0x170>)
 8012c56:	f7ee ff0c 	bl	8001a72 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	f023 0308 	bic.w	r3, r3, #8
 8012c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	68db      	ldr	r3, [r3, #12]
 8012c66:	697a      	ldr	r2, [r7, #20]
 8012c68:	4313      	orrs	r3, r2
 8012c6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	f023 0304 	bic.w	r3, r3, #4
 8012c72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	4a2a      	ldr	r2, [pc, #168]	; (8012d20 <TIM_OC1_SetConfig+0x15c>)
 8012c78:	4293      	cmp	r3, r2
 8012c7a:	d00f      	beq.n	8012c9c <TIM_OC1_SetConfig+0xd8>
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	4a29      	ldr	r2, [pc, #164]	; (8012d24 <TIM_OC1_SetConfig+0x160>)
 8012c80:	4293      	cmp	r3, r2
 8012c82:	d00b      	beq.n	8012c9c <TIM_OC1_SetConfig+0xd8>
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	4a28      	ldr	r2, [pc, #160]	; (8012d28 <TIM_OC1_SetConfig+0x164>)
 8012c88:	4293      	cmp	r3, r2
 8012c8a:	d007      	beq.n	8012c9c <TIM_OC1_SetConfig+0xd8>
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	4a27      	ldr	r2, [pc, #156]	; (8012d2c <TIM_OC1_SetConfig+0x168>)
 8012c90:	4293      	cmp	r3, r2
 8012c92:	d003      	beq.n	8012c9c <TIM_OC1_SetConfig+0xd8>
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	4a26      	ldr	r2, [pc, #152]	; (8012d30 <TIM_OC1_SetConfig+0x16c>)
 8012c98:	4293      	cmp	r3, r2
 8012c9a:	d12d      	bne.n	8012cf8 <TIM_OC1_SetConfig+0x134>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	699b      	ldr	r3, [r3, #24]
 8012ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ca4:	d008      	beq.n	8012cb8 <TIM_OC1_SetConfig+0xf4>
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	699b      	ldr	r3, [r3, #24]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d004      	beq.n	8012cb8 <TIM_OC1_SetConfig+0xf4>
 8012cae:	f641 3171 	movw	r1, #7025	; 0x1b71
 8012cb2:	4820      	ldr	r0, [pc, #128]	; (8012d34 <TIM_OC1_SetConfig+0x170>)
 8012cb4:	f7ee fedd 	bl	8001a72 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	695b      	ldr	r3, [r3, #20]
 8012cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012cc0:	d008      	beq.n	8012cd4 <TIM_OC1_SetConfig+0x110>
 8012cc2:	683b      	ldr	r3, [r7, #0]
 8012cc4:	695b      	ldr	r3, [r3, #20]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d004      	beq.n	8012cd4 <TIM_OC1_SetConfig+0x110>
 8012cca:	f641 3172 	movw	r1, #7026	; 0x1b72
 8012cce:	4819      	ldr	r0, [pc, #100]	; (8012d34 <TIM_OC1_SetConfig+0x170>)
 8012cd0:	f7ee fecf 	bl	8001a72 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012cd4:	693b      	ldr	r3, [r7, #16]
 8012cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012cda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012cdc:	693b      	ldr	r3, [r7, #16]
 8012cde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	695b      	ldr	r3, [r3, #20]
 8012ce8:	693a      	ldr	r2, [r7, #16]
 8012cea:	4313      	orrs	r3, r2
 8012cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	699b      	ldr	r3, [r3, #24]
 8012cf2:	693a      	ldr	r2, [r7, #16]
 8012cf4:	4313      	orrs	r3, r2
 8012cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	693a      	ldr	r2, [r7, #16]
 8012cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	68fa      	ldr	r2, [r7, #12]
 8012d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012d04:	683b      	ldr	r3, [r7, #0]
 8012d06:	685a      	ldr	r2, [r3, #4]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	697a      	ldr	r2, [r7, #20]
 8012d10:	621a      	str	r2, [r3, #32]
}
 8012d12:	bf00      	nop
 8012d14:	3718      	adds	r7, #24
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}
 8012d1a:	bf00      	nop
 8012d1c:	fffeff8f 	.word	0xfffeff8f
 8012d20:	40010000 	.word	0x40010000
 8012d24:	40010400 	.word	0x40010400
 8012d28:	40014000 	.word	0x40014000
 8012d2c:	40014400 	.word	0x40014400
 8012d30:	40014800 	.word	0x40014800
 8012d34:	0801dee4 	.word	0x0801dee4

08012d38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b086      	sub	sp, #24
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
 8012d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6a1b      	ldr	r3, [r3, #32]
 8012d46:	f023 0210 	bic.w	r2, r3, #16
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	6a1b      	ldr	r3, [r3, #32]
 8012d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	685b      	ldr	r3, [r3, #4]
 8012d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	699b      	ldr	r3, [r3, #24]
 8012d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012d60:	68fa      	ldr	r2, [r7, #12]
 8012d62:	4b47      	ldr	r3, [pc, #284]	; (8012e80 <TIM_OC2_SetConfig+0x148>)
 8012d64:	4013      	ands	r3, r2
 8012d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	021b      	lsls	r3, r3, #8
 8012d76:	68fa      	ldr	r2, [r7, #12]
 8012d78:	4313      	orrs	r3, r2
 8012d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012d7c:	697b      	ldr	r3, [r7, #20]
 8012d7e:	f023 0320 	bic.w	r3, r3, #32
 8012d82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	689b      	ldr	r3, [r3, #8]
 8012d88:	011b      	lsls	r3, r3, #4
 8012d8a:	697a      	ldr	r2, [r7, #20]
 8012d8c:	4313      	orrs	r3, r2
 8012d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	4a3c      	ldr	r2, [pc, #240]	; (8012e84 <TIM_OC2_SetConfig+0x14c>)
 8012d94:	4293      	cmp	r3, r2
 8012d96:	d003      	beq.n	8012da0 <TIM_OC2_SetConfig+0x68>
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	4a3b      	ldr	r2, [pc, #236]	; (8012e88 <TIM_OC2_SetConfig+0x150>)
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	d11a      	bne.n	8012dd6 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	68db      	ldr	r3, [r3, #12]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d008      	beq.n	8012dba <TIM_OC2_SetConfig+0x82>
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	68db      	ldr	r3, [r3, #12]
 8012dac:	2b08      	cmp	r3, #8
 8012dae:	d004      	beq.n	8012dba <TIM_OC2_SetConfig+0x82>
 8012db0:	f641 31af 	movw	r1, #7087	; 0x1baf
 8012db4:	4835      	ldr	r0, [pc, #212]	; (8012e8c <TIM_OC2_SetConfig+0x154>)
 8012db6:	f7ee fe5c 	bl	8001a72 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012dba:	697b      	ldr	r3, [r7, #20]
 8012dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	68db      	ldr	r3, [r3, #12]
 8012dc6:	011b      	lsls	r3, r3, #4
 8012dc8:	697a      	ldr	r2, [r7, #20]
 8012dca:	4313      	orrs	r3, r2
 8012dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012dce:	697b      	ldr	r3, [r7, #20]
 8012dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012dd4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	4a2a      	ldr	r2, [pc, #168]	; (8012e84 <TIM_OC2_SetConfig+0x14c>)
 8012dda:	4293      	cmp	r3, r2
 8012ddc:	d00f      	beq.n	8012dfe <TIM_OC2_SetConfig+0xc6>
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	4a29      	ldr	r2, [pc, #164]	; (8012e88 <TIM_OC2_SetConfig+0x150>)
 8012de2:	4293      	cmp	r3, r2
 8012de4:	d00b      	beq.n	8012dfe <TIM_OC2_SetConfig+0xc6>
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	4a29      	ldr	r2, [pc, #164]	; (8012e90 <TIM_OC2_SetConfig+0x158>)
 8012dea:	4293      	cmp	r3, r2
 8012dec:	d007      	beq.n	8012dfe <TIM_OC2_SetConfig+0xc6>
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	4a28      	ldr	r2, [pc, #160]	; (8012e94 <TIM_OC2_SetConfig+0x15c>)
 8012df2:	4293      	cmp	r3, r2
 8012df4:	d003      	beq.n	8012dfe <TIM_OC2_SetConfig+0xc6>
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	4a27      	ldr	r2, [pc, #156]	; (8012e98 <TIM_OC2_SetConfig+0x160>)
 8012dfa:	4293      	cmp	r3, r2
 8012dfc:	d12f      	bne.n	8012e5e <TIM_OC2_SetConfig+0x126>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	699b      	ldr	r3, [r3, #24]
 8012e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e06:	d008      	beq.n	8012e1a <TIM_OC2_SetConfig+0xe2>
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	699b      	ldr	r3, [r3, #24]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d004      	beq.n	8012e1a <TIM_OC2_SetConfig+0xe2>
 8012e10:	f641 31bd 	movw	r1, #7101	; 0x1bbd
 8012e14:	481d      	ldr	r0, [pc, #116]	; (8012e8c <TIM_OC2_SetConfig+0x154>)
 8012e16:	f7ee fe2c 	bl	8001a72 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	695b      	ldr	r3, [r3, #20]
 8012e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e22:	d008      	beq.n	8012e36 <TIM_OC2_SetConfig+0xfe>
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	695b      	ldr	r3, [r3, #20]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d004      	beq.n	8012e36 <TIM_OC2_SetConfig+0xfe>
 8012e2c:	f641 31be 	movw	r1, #7102	; 0x1bbe
 8012e30:	4816      	ldr	r0, [pc, #88]	; (8012e8c <TIM_OC2_SetConfig+0x154>)
 8012e32:	f7ee fe1e 	bl	8001a72 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	695b      	ldr	r3, [r3, #20]
 8012e4a:	009b      	lsls	r3, r3, #2
 8012e4c:	693a      	ldr	r2, [r7, #16]
 8012e4e:	4313      	orrs	r3, r2
 8012e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	699b      	ldr	r3, [r3, #24]
 8012e56:	009b      	lsls	r3, r3, #2
 8012e58:	693a      	ldr	r2, [r7, #16]
 8012e5a:	4313      	orrs	r3, r2
 8012e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	693a      	ldr	r2, [r7, #16]
 8012e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	68fa      	ldr	r2, [r7, #12]
 8012e68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	685a      	ldr	r2, [r3, #4]
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	697a      	ldr	r2, [r7, #20]
 8012e76:	621a      	str	r2, [r3, #32]
}
 8012e78:	bf00      	nop
 8012e7a:	3718      	adds	r7, #24
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bd80      	pop	{r7, pc}
 8012e80:	feff8fff 	.word	0xfeff8fff
 8012e84:	40010000 	.word	0x40010000
 8012e88:	40010400 	.word	0x40010400
 8012e8c:	0801dee4 	.word	0x0801dee4
 8012e90:	40014000 	.word	0x40014000
 8012e94:	40014400 	.word	0x40014400
 8012e98:	40014800 	.word	0x40014800

08012e9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b086      	sub	sp, #24
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
 8012ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	6a1b      	ldr	r3, [r3, #32]
 8012eaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	6a1b      	ldr	r3, [r3, #32]
 8012eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	685b      	ldr	r3, [r3, #4]
 8012ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	69db      	ldr	r3, [r3, #28]
 8012ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012ec4:	68fa      	ldr	r2, [r7, #12]
 8012ec6:	4b47      	ldr	r3, [pc, #284]	; (8012fe4 <TIM_OC3_SetConfig+0x148>)
 8012ec8:	4013      	ands	r3, r2
 8012eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	f023 0303 	bic.w	r3, r3, #3
 8012ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	68fa      	ldr	r2, [r7, #12]
 8012eda:	4313      	orrs	r3, r2
 8012edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012ede:	697b      	ldr	r3, [r7, #20]
 8012ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	689b      	ldr	r3, [r3, #8]
 8012eea:	021b      	lsls	r3, r3, #8
 8012eec:	697a      	ldr	r2, [r7, #20]
 8012eee:	4313      	orrs	r3, r2
 8012ef0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	4a3c      	ldr	r2, [pc, #240]	; (8012fe8 <TIM_OC3_SetConfig+0x14c>)
 8012ef6:	4293      	cmp	r3, r2
 8012ef8:	d003      	beq.n	8012f02 <TIM_OC3_SetConfig+0x66>
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	4a3b      	ldr	r2, [pc, #236]	; (8012fec <TIM_OC3_SetConfig+0x150>)
 8012efe:	4293      	cmp	r3, r2
 8012f00:	d11a      	bne.n	8012f38 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	68db      	ldr	r3, [r3, #12]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d008      	beq.n	8012f1c <TIM_OC3_SetConfig+0x80>
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	68db      	ldr	r3, [r3, #12]
 8012f0e:	2b08      	cmp	r3, #8
 8012f10:	d004      	beq.n	8012f1c <TIM_OC3_SetConfig+0x80>
 8012f12:	f641 31fa 	movw	r1, #7162	; 0x1bfa
 8012f16:	4836      	ldr	r0, [pc, #216]	; (8012ff0 <TIM_OC3_SetConfig+0x154>)
 8012f18:	f7ee fdab 	bl	8001a72 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012f1c:	697b      	ldr	r3, [r7, #20]
 8012f1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	68db      	ldr	r3, [r3, #12]
 8012f28:	021b      	lsls	r3, r3, #8
 8012f2a:	697a      	ldr	r2, [r7, #20]
 8012f2c:	4313      	orrs	r3, r2
 8012f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012f30:	697b      	ldr	r3, [r7, #20]
 8012f32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012f36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	4a2b      	ldr	r2, [pc, #172]	; (8012fe8 <TIM_OC3_SetConfig+0x14c>)
 8012f3c:	4293      	cmp	r3, r2
 8012f3e:	d00f      	beq.n	8012f60 <TIM_OC3_SetConfig+0xc4>
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	4a2a      	ldr	r2, [pc, #168]	; (8012fec <TIM_OC3_SetConfig+0x150>)
 8012f44:	4293      	cmp	r3, r2
 8012f46:	d00b      	beq.n	8012f60 <TIM_OC3_SetConfig+0xc4>
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	4a2a      	ldr	r2, [pc, #168]	; (8012ff4 <TIM_OC3_SetConfig+0x158>)
 8012f4c:	4293      	cmp	r3, r2
 8012f4e:	d007      	beq.n	8012f60 <TIM_OC3_SetConfig+0xc4>
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	4a29      	ldr	r2, [pc, #164]	; (8012ff8 <TIM_OC3_SetConfig+0x15c>)
 8012f54:	4293      	cmp	r3, r2
 8012f56:	d003      	beq.n	8012f60 <TIM_OC3_SetConfig+0xc4>
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	4a28      	ldr	r2, [pc, #160]	; (8012ffc <TIM_OC3_SetConfig+0x160>)
 8012f5c:	4293      	cmp	r3, r2
 8012f5e:	d12f      	bne.n	8012fc0 <TIM_OC3_SetConfig+0x124>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8012f60:	683b      	ldr	r3, [r7, #0]
 8012f62:	699b      	ldr	r3, [r3, #24]
 8012f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f68:	d008      	beq.n	8012f7c <TIM_OC3_SetConfig+0xe0>
 8012f6a:	683b      	ldr	r3, [r7, #0]
 8012f6c:	699b      	ldr	r3, [r3, #24]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d004      	beq.n	8012f7c <TIM_OC3_SetConfig+0xe0>
 8012f72:	f641 4107 	movw	r1, #7175	; 0x1c07
 8012f76:	481e      	ldr	r0, [pc, #120]	; (8012ff0 <TIM_OC3_SetConfig+0x154>)
 8012f78:	f7ee fd7b 	bl	8001a72 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	695b      	ldr	r3, [r3, #20]
 8012f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f84:	d008      	beq.n	8012f98 <TIM_OC3_SetConfig+0xfc>
 8012f86:	683b      	ldr	r3, [r7, #0]
 8012f88:	695b      	ldr	r3, [r3, #20]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d004      	beq.n	8012f98 <TIM_OC3_SetConfig+0xfc>
 8012f8e:	f641 4108 	movw	r1, #7176	; 0x1c08
 8012f92:	4817      	ldr	r0, [pc, #92]	; (8012ff0 <TIM_OC3_SetConfig+0x154>)
 8012f94:	f7ee fd6d 	bl	8001a72 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012f98:	693b      	ldr	r3, [r7, #16]
 8012f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012fa0:	693b      	ldr	r3, [r7, #16]
 8012fa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	695b      	ldr	r3, [r3, #20]
 8012fac:	011b      	lsls	r3, r3, #4
 8012fae:	693a      	ldr	r2, [r7, #16]
 8012fb0:	4313      	orrs	r3, r2
 8012fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	699b      	ldr	r3, [r3, #24]
 8012fb8:	011b      	lsls	r3, r3, #4
 8012fba:	693a      	ldr	r2, [r7, #16]
 8012fbc:	4313      	orrs	r3, r2
 8012fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	693a      	ldr	r2, [r7, #16]
 8012fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	68fa      	ldr	r2, [r7, #12]
 8012fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	685a      	ldr	r2, [r3, #4]
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	697a      	ldr	r2, [r7, #20]
 8012fd8:	621a      	str	r2, [r3, #32]
}
 8012fda:	bf00      	nop
 8012fdc:	3718      	adds	r7, #24
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}
 8012fe2:	bf00      	nop
 8012fe4:	fffeff8f 	.word	0xfffeff8f
 8012fe8:	40010000 	.word	0x40010000
 8012fec:	40010400 	.word	0x40010400
 8012ff0:	0801dee4 	.word	0x0801dee4
 8012ff4:	40014000 	.word	0x40014000
 8012ff8:	40014400 	.word	0x40014400
 8012ffc:	40014800 	.word	0x40014800

08013000 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b086      	sub	sp, #24
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
 8013008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	6a1b      	ldr	r3, [r3, #32]
 801300e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	6a1b      	ldr	r3, [r3, #32]
 801301a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	685b      	ldr	r3, [r3, #4]
 8013020:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	69db      	ldr	r3, [r3, #28]
 8013026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013028:	68fa      	ldr	r2, [r7, #12]
 801302a:	4b2a      	ldr	r3, [pc, #168]	; (80130d4 <TIM_OC4_SetConfig+0xd4>)
 801302c:	4013      	ands	r3, r2
 801302e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	021b      	lsls	r3, r3, #8
 801303e:	68fa      	ldr	r2, [r7, #12]
 8013040:	4313      	orrs	r3, r2
 8013042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013044:	693b      	ldr	r3, [r7, #16]
 8013046:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801304a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	689b      	ldr	r3, [r3, #8]
 8013050:	031b      	lsls	r3, r3, #12
 8013052:	693a      	ldr	r2, [r7, #16]
 8013054:	4313      	orrs	r3, r2
 8013056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	4a1f      	ldr	r2, [pc, #124]	; (80130d8 <TIM_OC4_SetConfig+0xd8>)
 801305c:	4293      	cmp	r3, r2
 801305e:	d00f      	beq.n	8013080 <TIM_OC4_SetConfig+0x80>
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	4a1e      	ldr	r2, [pc, #120]	; (80130dc <TIM_OC4_SetConfig+0xdc>)
 8013064:	4293      	cmp	r3, r2
 8013066:	d00b      	beq.n	8013080 <TIM_OC4_SetConfig+0x80>
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	4a1d      	ldr	r2, [pc, #116]	; (80130e0 <TIM_OC4_SetConfig+0xe0>)
 801306c:	4293      	cmp	r3, r2
 801306e:	d007      	beq.n	8013080 <TIM_OC4_SetConfig+0x80>
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	4a1c      	ldr	r2, [pc, #112]	; (80130e4 <TIM_OC4_SetConfig+0xe4>)
 8013074:	4293      	cmp	r3, r2
 8013076:	d003      	beq.n	8013080 <TIM_OC4_SetConfig+0x80>
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	4a1b      	ldr	r2, [pc, #108]	; (80130e8 <TIM_OC4_SetConfig+0xe8>)
 801307c:	4293      	cmp	r3, r2
 801307e:	d117      	bne.n	80130b0 <TIM_OC4_SetConfig+0xb0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8013080:	683b      	ldr	r3, [r7, #0]
 8013082:	695b      	ldr	r3, [r3, #20]
 8013084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013088:	d008      	beq.n	801309c <TIM_OC4_SetConfig+0x9c>
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	695b      	ldr	r3, [r3, #20]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d004      	beq.n	801309c <TIM_OC4_SetConfig+0x9c>
 8013092:	f641 4146 	movw	r1, #7238	; 0x1c46
 8013096:	4815      	ldr	r0, [pc, #84]	; (80130ec <TIM_OC4_SetConfig+0xec>)
 8013098:	f7ee fceb 	bl	8001a72 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80130a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	695b      	ldr	r3, [r3, #20]
 80130a8:	019b      	lsls	r3, r3, #6
 80130aa:	697a      	ldr	r2, [r7, #20]
 80130ac:	4313      	orrs	r3, r2
 80130ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	697a      	ldr	r2, [r7, #20]
 80130b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	68fa      	ldr	r2, [r7, #12]
 80130ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80130bc:	683b      	ldr	r3, [r7, #0]
 80130be:	685a      	ldr	r2, [r3, #4]
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	693a      	ldr	r2, [r7, #16]
 80130c8:	621a      	str	r2, [r3, #32]
}
 80130ca:	bf00      	nop
 80130cc:	3718      	adds	r7, #24
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}
 80130d2:	bf00      	nop
 80130d4:	feff8fff 	.word	0xfeff8fff
 80130d8:	40010000 	.word	0x40010000
 80130dc:	40010400 	.word	0x40010400
 80130e0:	40014000 	.word	0x40014000
 80130e4:	40014400 	.word	0x40014400
 80130e8:	40014800 	.word	0x40014800
 80130ec:	0801dee4 	.word	0x0801dee4

080130f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80130f0:	b480      	push	{r7}
 80130f2:	b087      	sub	sp, #28
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	6a1b      	ldr	r3, [r3, #32]
 80130fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	6a1b      	ldr	r3, [r3, #32]
 801310a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	685b      	ldr	r3, [r3, #4]
 8013110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013118:	68fa      	ldr	r2, [r7, #12]
 801311a:	4b21      	ldr	r3, [pc, #132]	; (80131a0 <TIM_OC5_SetConfig+0xb0>)
 801311c:	4013      	ands	r3, r2
 801311e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	68fa      	ldr	r2, [r7, #12]
 8013126:	4313      	orrs	r3, r2
 8013128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801312a:	693b      	ldr	r3, [r7, #16]
 801312c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013130:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	689b      	ldr	r3, [r3, #8]
 8013136:	041b      	lsls	r3, r3, #16
 8013138:	693a      	ldr	r2, [r7, #16]
 801313a:	4313      	orrs	r3, r2
 801313c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	4a18      	ldr	r2, [pc, #96]	; (80131a4 <TIM_OC5_SetConfig+0xb4>)
 8013142:	4293      	cmp	r3, r2
 8013144:	d00f      	beq.n	8013166 <TIM_OC5_SetConfig+0x76>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	4a17      	ldr	r2, [pc, #92]	; (80131a8 <TIM_OC5_SetConfig+0xb8>)
 801314a:	4293      	cmp	r3, r2
 801314c:	d00b      	beq.n	8013166 <TIM_OC5_SetConfig+0x76>
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	4a16      	ldr	r2, [pc, #88]	; (80131ac <TIM_OC5_SetConfig+0xbc>)
 8013152:	4293      	cmp	r3, r2
 8013154:	d007      	beq.n	8013166 <TIM_OC5_SetConfig+0x76>
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	4a15      	ldr	r2, [pc, #84]	; (80131b0 <TIM_OC5_SetConfig+0xc0>)
 801315a:	4293      	cmp	r3, r2
 801315c:	d003      	beq.n	8013166 <TIM_OC5_SetConfig+0x76>
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	4a14      	ldr	r2, [pc, #80]	; (80131b4 <TIM_OC5_SetConfig+0xc4>)
 8013162:	4293      	cmp	r3, r2
 8013164:	d109      	bne.n	801317a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801316c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801316e:	683b      	ldr	r3, [r7, #0]
 8013170:	695b      	ldr	r3, [r3, #20]
 8013172:	021b      	lsls	r3, r3, #8
 8013174:	697a      	ldr	r2, [r7, #20]
 8013176:	4313      	orrs	r3, r2
 8013178:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	697a      	ldr	r2, [r7, #20]
 801317e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	68fa      	ldr	r2, [r7, #12]
 8013184:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	685a      	ldr	r2, [r3, #4]
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	693a      	ldr	r2, [r7, #16]
 8013192:	621a      	str	r2, [r3, #32]
}
 8013194:	bf00      	nop
 8013196:	371c      	adds	r7, #28
 8013198:	46bd      	mov	sp, r7
 801319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319e:	4770      	bx	lr
 80131a0:	fffeff8f 	.word	0xfffeff8f
 80131a4:	40010000 	.word	0x40010000
 80131a8:	40010400 	.word	0x40010400
 80131ac:	40014000 	.word	0x40014000
 80131b0:	40014400 	.word	0x40014400
 80131b4:	40014800 	.word	0x40014800

080131b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80131b8:	b480      	push	{r7}
 80131ba:	b087      	sub	sp, #28
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
 80131c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6a1b      	ldr	r3, [r3, #32]
 80131c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	6a1b      	ldr	r3, [r3, #32]
 80131d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	685b      	ldr	r3, [r3, #4]
 80131d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80131e0:	68fa      	ldr	r2, [r7, #12]
 80131e2:	4b22      	ldr	r3, [pc, #136]	; (801326c <TIM_OC6_SetConfig+0xb4>)
 80131e4:	4013      	ands	r3, r2
 80131e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80131e8:	683b      	ldr	r3, [r7, #0]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	021b      	lsls	r3, r3, #8
 80131ee:	68fa      	ldr	r2, [r7, #12]
 80131f0:	4313      	orrs	r3, r2
 80131f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80131f4:	693b      	ldr	r3, [r7, #16]
 80131f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80131fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	689b      	ldr	r3, [r3, #8]
 8013200:	051b      	lsls	r3, r3, #20
 8013202:	693a      	ldr	r2, [r7, #16]
 8013204:	4313      	orrs	r3, r2
 8013206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	4a19      	ldr	r2, [pc, #100]	; (8013270 <TIM_OC6_SetConfig+0xb8>)
 801320c:	4293      	cmp	r3, r2
 801320e:	d00f      	beq.n	8013230 <TIM_OC6_SetConfig+0x78>
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	4a18      	ldr	r2, [pc, #96]	; (8013274 <TIM_OC6_SetConfig+0xbc>)
 8013214:	4293      	cmp	r3, r2
 8013216:	d00b      	beq.n	8013230 <TIM_OC6_SetConfig+0x78>
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	4a17      	ldr	r2, [pc, #92]	; (8013278 <TIM_OC6_SetConfig+0xc0>)
 801321c:	4293      	cmp	r3, r2
 801321e:	d007      	beq.n	8013230 <TIM_OC6_SetConfig+0x78>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	4a16      	ldr	r2, [pc, #88]	; (801327c <TIM_OC6_SetConfig+0xc4>)
 8013224:	4293      	cmp	r3, r2
 8013226:	d003      	beq.n	8013230 <TIM_OC6_SetConfig+0x78>
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	4a15      	ldr	r2, [pc, #84]	; (8013280 <TIM_OC6_SetConfig+0xc8>)
 801322c:	4293      	cmp	r3, r2
 801322e:	d109      	bne.n	8013244 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013230:	697b      	ldr	r3, [r7, #20]
 8013232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013236:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	695b      	ldr	r3, [r3, #20]
 801323c:	029b      	lsls	r3, r3, #10
 801323e:	697a      	ldr	r2, [r7, #20]
 8013240:	4313      	orrs	r3, r2
 8013242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	697a      	ldr	r2, [r7, #20]
 8013248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	68fa      	ldr	r2, [r7, #12]
 801324e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	685a      	ldr	r2, [r3, #4]
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	693a      	ldr	r2, [r7, #16]
 801325c:	621a      	str	r2, [r3, #32]
}
 801325e:	bf00      	nop
 8013260:	371c      	adds	r7, #28
 8013262:	46bd      	mov	sp, r7
 8013264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013268:	4770      	bx	lr
 801326a:	bf00      	nop
 801326c:	feff8fff 	.word	0xfeff8fff
 8013270:	40010000 	.word	0x40010000
 8013274:	40010400 	.word	0x40010400
 8013278:	40014000 	.word	0x40014000
 801327c:	40014400 	.word	0x40014400
 8013280:	40014800 	.word	0x40014800

08013284 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013284:	b480      	push	{r7}
 8013286:	b087      	sub	sp, #28
 8013288:	af00      	add	r7, sp, #0
 801328a:	60f8      	str	r0, [r7, #12]
 801328c:	60b9      	str	r1, [r7, #8]
 801328e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	6a1b      	ldr	r3, [r3, #32]
 8013294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	6a1b      	ldr	r3, [r3, #32]
 801329a:	f023 0201 	bic.w	r2, r3, #1
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	699b      	ldr	r3, [r3, #24]
 80132a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80132ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	011b      	lsls	r3, r3, #4
 80132b4:	693a      	ldr	r2, [r7, #16]
 80132b6:	4313      	orrs	r3, r2
 80132b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80132ba:	697b      	ldr	r3, [r7, #20]
 80132bc:	f023 030a 	bic.w	r3, r3, #10
 80132c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80132c2:	697a      	ldr	r2, [r7, #20]
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	4313      	orrs	r3, r2
 80132c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	693a      	ldr	r2, [r7, #16]
 80132ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	697a      	ldr	r2, [r7, #20]
 80132d4:	621a      	str	r2, [r3, #32]
}
 80132d6:	bf00      	nop
 80132d8:	371c      	adds	r7, #28
 80132da:	46bd      	mov	sp, r7
 80132dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e0:	4770      	bx	lr

080132e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80132e2:	b480      	push	{r7}
 80132e4:	b087      	sub	sp, #28
 80132e6:	af00      	add	r7, sp, #0
 80132e8:	60f8      	str	r0, [r7, #12]
 80132ea:	60b9      	str	r1, [r7, #8]
 80132ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	6a1b      	ldr	r3, [r3, #32]
 80132f2:	f023 0210 	bic.w	r2, r3, #16
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	699b      	ldr	r3, [r3, #24]
 80132fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	6a1b      	ldr	r3, [r3, #32]
 8013304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801330c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	031b      	lsls	r3, r3, #12
 8013312:	697a      	ldr	r2, [r7, #20]
 8013314:	4313      	orrs	r3, r2
 8013316:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801331e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	011b      	lsls	r3, r3, #4
 8013324:	693a      	ldr	r2, [r7, #16]
 8013326:	4313      	orrs	r3, r2
 8013328:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	697a      	ldr	r2, [r7, #20]
 801332e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	693a      	ldr	r2, [r7, #16]
 8013334:	621a      	str	r2, [r3, #32]
}
 8013336:	bf00      	nop
 8013338:	371c      	adds	r7, #28
 801333a:	46bd      	mov	sp, r7
 801333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013340:	4770      	bx	lr
	...

08013344 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013344:	b480      	push	{r7}
 8013346:	b085      	sub	sp, #20
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	689b      	ldr	r3, [r3, #8]
 8013352:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013354:	68fa      	ldr	r2, [r7, #12]
 8013356:	4b09      	ldr	r3, [pc, #36]	; (801337c <TIM_ITRx_SetConfig+0x38>)
 8013358:	4013      	ands	r3, r2
 801335a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801335c:	683a      	ldr	r2, [r7, #0]
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	4313      	orrs	r3, r2
 8013362:	f043 0307 	orr.w	r3, r3, #7
 8013366:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	68fa      	ldr	r2, [r7, #12]
 801336c:	609a      	str	r2, [r3, #8]
}
 801336e:	bf00      	nop
 8013370:	3714      	adds	r7, #20
 8013372:	46bd      	mov	sp, r7
 8013374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013378:	4770      	bx	lr
 801337a:	bf00      	nop
 801337c:	ffcfff8f 	.word	0xffcfff8f

08013380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013380:	b480      	push	{r7}
 8013382:	b087      	sub	sp, #28
 8013384:	af00      	add	r7, sp, #0
 8013386:	60f8      	str	r0, [r7, #12]
 8013388:	60b9      	str	r1, [r7, #8]
 801338a:	607a      	str	r2, [r7, #4]
 801338c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	689b      	ldr	r3, [r3, #8]
 8013392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013394:	697b      	ldr	r3, [r7, #20]
 8013396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801339a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801339c:	683b      	ldr	r3, [r7, #0]
 801339e:	021a      	lsls	r2, r3, #8
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	431a      	orrs	r2, r3
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	4313      	orrs	r3, r2
 80133a8:	697a      	ldr	r2, [r7, #20]
 80133aa:	4313      	orrs	r3, r2
 80133ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	697a      	ldr	r2, [r7, #20]
 80133b2:	609a      	str	r2, [r3, #8]
}
 80133b4:	bf00      	nop
 80133b6:	371c      	adds	r7, #28
 80133b8:	46bd      	mov	sp, r7
 80133ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133be:	4770      	bx	lr

080133c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b086      	sub	sp, #24
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	60f8      	str	r0, [r7, #12]
 80133c8:	60b9      	str	r1, [r7, #8]
 80133ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	4a35      	ldr	r2, [pc, #212]	; (80134a4 <TIM_CCxChannelCmd+0xe4>)
 80133d0:	4293      	cmp	r3, r2
 80133d2:	d030      	beq.n	8013436 <TIM_CCxChannelCmd+0x76>
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80133da:	d02c      	beq.n	8013436 <TIM_CCxChannelCmd+0x76>
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	4a32      	ldr	r2, [pc, #200]	; (80134a8 <TIM_CCxChannelCmd+0xe8>)
 80133e0:	4293      	cmp	r3, r2
 80133e2:	d028      	beq.n	8013436 <TIM_CCxChannelCmd+0x76>
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	4a31      	ldr	r2, [pc, #196]	; (80134ac <TIM_CCxChannelCmd+0xec>)
 80133e8:	4293      	cmp	r3, r2
 80133ea:	d024      	beq.n	8013436 <TIM_CCxChannelCmd+0x76>
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	4a30      	ldr	r2, [pc, #192]	; (80134b0 <TIM_CCxChannelCmd+0xf0>)
 80133f0:	4293      	cmp	r3, r2
 80133f2:	d020      	beq.n	8013436 <TIM_CCxChannelCmd+0x76>
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	4a2f      	ldr	r2, [pc, #188]	; (80134b4 <TIM_CCxChannelCmd+0xf4>)
 80133f8:	4293      	cmp	r3, r2
 80133fa:	d01c      	beq.n	8013436 <TIM_CCxChannelCmd+0x76>
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	4a2e      	ldr	r2, [pc, #184]	; (80134b8 <TIM_CCxChannelCmd+0xf8>)
 8013400:	4293      	cmp	r3, r2
 8013402:	d018      	beq.n	8013436 <TIM_CCxChannelCmd+0x76>
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	4a2d      	ldr	r2, [pc, #180]	; (80134bc <TIM_CCxChannelCmd+0xfc>)
 8013408:	4293      	cmp	r3, r2
 801340a:	d014      	beq.n	8013436 <TIM_CCxChannelCmd+0x76>
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	4a2c      	ldr	r2, [pc, #176]	; (80134c0 <TIM_CCxChannelCmd+0x100>)
 8013410:	4293      	cmp	r3, r2
 8013412:	d010      	beq.n	8013436 <TIM_CCxChannelCmd+0x76>
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	4a2b      	ldr	r2, [pc, #172]	; (80134c4 <TIM_CCxChannelCmd+0x104>)
 8013418:	4293      	cmp	r3, r2
 801341a:	d00c      	beq.n	8013436 <TIM_CCxChannelCmd+0x76>
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	4a2a      	ldr	r2, [pc, #168]	; (80134c8 <TIM_CCxChannelCmd+0x108>)
 8013420:	4293      	cmp	r3, r2
 8013422:	d008      	beq.n	8013436 <TIM_CCxChannelCmd+0x76>
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	4a29      	ldr	r2, [pc, #164]	; (80134cc <TIM_CCxChannelCmd+0x10c>)
 8013428:	4293      	cmp	r3, r2
 801342a:	d004      	beq.n	8013436 <TIM_CCxChannelCmd+0x76>
 801342c:	f641 61b5 	movw	r1, #7861	; 0x1eb5
 8013430:	4827      	ldr	r0, [pc, #156]	; (80134d0 <TIM_CCxChannelCmd+0x110>)
 8013432:	f7ee fb1e 	bl	8001a72 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8013436:	68bb      	ldr	r3, [r7, #8]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d016      	beq.n	801346a <TIM_CCxChannelCmd+0xaa>
 801343c:	68bb      	ldr	r3, [r7, #8]
 801343e:	2b04      	cmp	r3, #4
 8013440:	d013      	beq.n	801346a <TIM_CCxChannelCmd+0xaa>
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	2b08      	cmp	r3, #8
 8013446:	d010      	beq.n	801346a <TIM_CCxChannelCmd+0xaa>
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	2b0c      	cmp	r3, #12
 801344c:	d00d      	beq.n	801346a <TIM_CCxChannelCmd+0xaa>
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	2b10      	cmp	r3, #16
 8013452:	d00a      	beq.n	801346a <TIM_CCxChannelCmd+0xaa>
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	2b14      	cmp	r3, #20
 8013458:	d007      	beq.n	801346a <TIM_CCxChannelCmd+0xaa>
 801345a:	68bb      	ldr	r3, [r7, #8]
 801345c:	2b3c      	cmp	r3, #60	; 0x3c
 801345e:	d004      	beq.n	801346a <TIM_CCxChannelCmd+0xaa>
 8013460:	f641 61b6 	movw	r1, #7862	; 0x1eb6
 8013464:	481a      	ldr	r0, [pc, #104]	; (80134d0 <TIM_CCxChannelCmd+0x110>)
 8013466:	f7ee fb04 	bl	8001a72 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	f003 031f 	and.w	r3, r3, #31
 8013470:	2201      	movs	r2, #1
 8013472:	fa02 f303 	lsl.w	r3, r2, r3
 8013476:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	6a1a      	ldr	r2, [r3, #32]
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	43db      	mvns	r3, r3
 8013480:	401a      	ands	r2, r3
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	6a1a      	ldr	r2, [r3, #32]
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	f003 031f 	and.w	r3, r3, #31
 8013490:	6879      	ldr	r1, [r7, #4]
 8013492:	fa01 f303 	lsl.w	r3, r1, r3
 8013496:	431a      	orrs	r2, r3
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	621a      	str	r2, [r3, #32]
}
 801349c:	bf00      	nop
 801349e:	3718      	adds	r7, #24
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}
 80134a4:	40010000 	.word	0x40010000
 80134a8:	40000400 	.word	0x40000400
 80134ac:	40000800 	.word	0x40000800
 80134b0:	40000c00 	.word	0x40000c00
 80134b4:	40010400 	.word	0x40010400
 80134b8:	40001800 	.word	0x40001800
 80134bc:	40001c00 	.word	0x40001c00
 80134c0:	40002000 	.word	0x40002000
 80134c4:	40014000 	.word	0x40014000
 80134c8:	40014400 	.word	0x40014400
 80134cc:	40014800 	.word	0x40014800
 80134d0:	0801dee4 	.word	0x0801dee4

080134d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b084      	sub	sp, #16
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	4a37      	ldr	r2, [pc, #220]	; (80135c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80134e4:	4293      	cmp	r3, r2
 80134e6:	d031      	beq.n	801354c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80134f0:	d02c      	beq.n	801354c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	4a33      	ldr	r2, [pc, #204]	; (80135c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80134f8:	4293      	cmp	r3, r2
 80134fa:	d027      	beq.n	801354c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	4a31      	ldr	r2, [pc, #196]	; (80135c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8013502:	4293      	cmp	r3, r2
 8013504:	d022      	beq.n	801354c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	4a30      	ldr	r2, [pc, #192]	; (80135cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801350c:	4293      	cmp	r3, r2
 801350e:	d01d      	beq.n	801354c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	4a2e      	ldr	r2, [pc, #184]	; (80135d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8013516:	4293      	cmp	r3, r2
 8013518:	d018      	beq.n	801354c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	4a2d      	ldr	r2, [pc, #180]	; (80135d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013520:	4293      	cmp	r3, r2
 8013522:	d013      	beq.n	801354c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	4a2b      	ldr	r2, [pc, #172]	; (80135d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801352a:	4293      	cmp	r3, r2
 801352c:	d00e      	beq.n	801354c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	4a2a      	ldr	r2, [pc, #168]	; (80135dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013534:	4293      	cmp	r3, r2
 8013536:	d009      	beq.n	801354c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	4a28      	ldr	r2, [pc, #160]	; (80135e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801353e:	4293      	cmp	r3, r2
 8013540:	d004      	beq.n	801354c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8013542:	f240 71cd 	movw	r1, #1997	; 0x7cd
 8013546:	4827      	ldr	r0, [pc, #156]	; (80135e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013548:	f7ee fa93 	bl	8001a72 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d020      	beq.n	8013596 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8013554:	683b      	ldr	r3, [r7, #0]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	2b10      	cmp	r3, #16
 801355a:	d01c      	beq.n	8013596 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 801355c:	683b      	ldr	r3, [r7, #0]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	2b20      	cmp	r3, #32
 8013562:	d018      	beq.n	8013596 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	2b30      	cmp	r3, #48	; 0x30
 801356a:	d014      	beq.n	8013596 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	2b40      	cmp	r3, #64	; 0x40
 8013572:	d010      	beq.n	8013596 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8013574:	683b      	ldr	r3, [r7, #0]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	2b50      	cmp	r3, #80	; 0x50
 801357a:	d00c      	beq.n	8013596 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	2b60      	cmp	r3, #96	; 0x60
 8013582:	d008      	beq.n	8013596 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8013584:	683b      	ldr	r3, [r7, #0]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	2b70      	cmp	r3, #112	; 0x70
 801358a:	d004      	beq.n	8013596 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 801358c:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8013590:	4814      	ldr	r0, [pc, #80]	; (80135e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013592:	f7ee fa6e 	bl	8001a72 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	689b      	ldr	r3, [r3, #8]
 801359a:	2b80      	cmp	r3, #128	; 0x80
 801359c:	d008      	beq.n	80135b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	689b      	ldr	r3, [r3, #8]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d004      	beq.n	80135b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80135a6:	f240 71cf 	movw	r1, #1999	; 0x7cf
 80135aa:	480e      	ldr	r0, [pc, #56]	; (80135e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80135ac:	f7ee fa61 	bl	8001a72 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80135b6:	2b01      	cmp	r3, #1
 80135b8:	d116      	bne.n	80135e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 80135ba:	2302      	movs	r3, #2
 80135bc:	e0db      	b.n	8013776 <HAL_TIMEx_MasterConfigSynchronization+0x2a2>
 80135be:	bf00      	nop
 80135c0:	40010000 	.word	0x40010000
 80135c4:	40000400 	.word	0x40000400
 80135c8:	40000800 	.word	0x40000800
 80135cc:	40000c00 	.word	0x40000c00
 80135d0:	40001000 	.word	0x40001000
 80135d4:	40001400 	.word	0x40001400
 80135d8:	40010400 	.word	0x40010400
 80135dc:	40001800 	.word	0x40001800
 80135e0:	40014000 	.word	0x40014000
 80135e4:	0801df1c 	.word	0x0801df1c
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2201      	movs	r2, #1
 80135ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2202      	movs	r2, #2
 80135f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	685b      	ldr	r3, [r3, #4]
 80135fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	689b      	ldr	r3, [r3, #8]
 8013606:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	4a5c      	ldr	r2, [pc, #368]	; (8013780 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 801360e:	4293      	cmp	r3, r2
 8013610:	d004      	beq.n	801361c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	4a5b      	ldr	r2, [pc, #364]	; (8013784 <HAL_TIMEx_MasterConfigSynchronization+0x2b0>)
 8013618:	4293      	cmp	r3, r2
 801361a:	d161      	bne.n	80136e0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	685b      	ldr	r3, [r3, #4]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d054      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	685b      	ldr	r3, [r3, #4]
 8013628:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801362c:	d04f      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 801362e:	683b      	ldr	r3, [r7, #0]
 8013630:	685b      	ldr	r3, [r3, #4]
 8013632:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013636:	d04a      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	685b      	ldr	r3, [r3, #4]
 801363c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8013640:	d045      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8013642:	683b      	ldr	r3, [r7, #0]
 8013644:	685b      	ldr	r3, [r3, #4]
 8013646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801364a:	d040      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	685b      	ldr	r3, [r3, #4]
 8013650:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8013654:	d03b      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	685b      	ldr	r3, [r3, #4]
 801365a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801365e:	d036      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8013660:	683b      	ldr	r3, [r7, #0]
 8013662:	685b      	ldr	r3, [r3, #4]
 8013664:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8013668:	d031      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	685b      	ldr	r3, [r3, #4]
 801366e:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8013672:	d02c      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8013674:	683b      	ldr	r3, [r7, #0]
 8013676:	685b      	ldr	r3, [r3, #4]
 8013678:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801367c:	d027      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	685b      	ldr	r3, [r3, #4]
 8013682:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8013686:	d022      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	685b      	ldr	r3, [r3, #4]
 801368c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8013690:	d01d      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8013692:	683b      	ldr	r3, [r7, #0]
 8013694:	685b      	ldr	r3, [r3, #4]
 8013696:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 801369a:	d018      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	685b      	ldr	r3, [r3, #4]
 80136a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80136a4:	d013      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80136a6:	683b      	ldr	r3, [r7, #0]
 80136a8:	685b      	ldr	r3, [r3, #4]
 80136aa:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80136ae:	d00e      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80136b0:	683b      	ldr	r3, [r7, #0]
 80136b2:	685b      	ldr	r3, [r3, #4]
 80136b4:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80136b8:	d009      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	685b      	ldr	r3, [r3, #4]
 80136be:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 80136c2:	d004      	beq.n	80136ce <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80136c4:	f240 71e1 	movw	r1, #2017	; 0x7e1
 80136c8:	482f      	ldr	r0, [pc, #188]	; (8013788 <HAL_TIMEx_MasterConfigSynchronization+0x2b4>)
 80136ca:	f7ee f9d2 	bl	8001a72 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80136d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80136d6:	683b      	ldr	r3, [r7, #0]
 80136d8:	685b      	ldr	r3, [r3, #4]
 80136da:	68fa      	ldr	r2, [r7, #12]
 80136dc:	4313      	orrs	r3, r2
 80136de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80136e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80136e8:	683b      	ldr	r3, [r7, #0]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	68fa      	ldr	r2, [r7, #12]
 80136ee:	4313      	orrs	r3, r2
 80136f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	68fa      	ldr	r2, [r7, #12]
 80136f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	4a20      	ldr	r2, [pc, #128]	; (8013780 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8013700:	4293      	cmp	r3, r2
 8013702:	d022      	beq.n	801374a <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801370c:	d01d      	beq.n	801374a <HAL_TIMEx_MasterConfigSynchronization+0x276>
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	4a1e      	ldr	r2, [pc, #120]	; (801378c <HAL_TIMEx_MasterConfigSynchronization+0x2b8>)
 8013714:	4293      	cmp	r3, r2
 8013716:	d018      	beq.n	801374a <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	4a1c      	ldr	r2, [pc, #112]	; (8013790 <HAL_TIMEx_MasterConfigSynchronization+0x2bc>)
 801371e:	4293      	cmp	r3, r2
 8013720:	d013      	beq.n	801374a <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	4a1b      	ldr	r2, [pc, #108]	; (8013794 <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 8013728:	4293      	cmp	r3, r2
 801372a:	d00e      	beq.n	801374a <HAL_TIMEx_MasterConfigSynchronization+0x276>
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	4a14      	ldr	r2, [pc, #80]	; (8013784 <HAL_TIMEx_MasterConfigSynchronization+0x2b0>)
 8013732:	4293      	cmp	r3, r2
 8013734:	d009      	beq.n	801374a <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	4a17      	ldr	r2, [pc, #92]	; (8013798 <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 801373c:	4293      	cmp	r3, r2
 801373e:	d004      	beq.n	801374a <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	4a15      	ldr	r2, [pc, #84]	; (801379c <HAL_TIMEx_MasterConfigSynchronization+0x2c8>)
 8013746:	4293      	cmp	r3, r2
 8013748:	d10c      	bne.n	8013764 <HAL_TIMEx_MasterConfigSynchronization+0x290>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	689b      	ldr	r3, [r3, #8]
 8013756:	68ba      	ldr	r2, [r7, #8]
 8013758:	4313      	orrs	r3, r2
 801375a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	68ba      	ldr	r2, [r7, #8]
 8013762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2201      	movs	r2, #1
 8013768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	2200      	movs	r2, #0
 8013770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013774:	2300      	movs	r3, #0
}
 8013776:	4618      	mov	r0, r3
 8013778:	3710      	adds	r7, #16
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}
 801377e:	bf00      	nop
 8013780:	40010000 	.word	0x40010000
 8013784:	40010400 	.word	0x40010400
 8013788:	0801df1c 	.word	0x0801df1c
 801378c:	40000400 	.word	0x40000400
 8013790:	40000800 	.word	0x40000800
 8013794:	40000c00 	.word	0x40000c00
 8013798:	40001800 	.word	0x40001800
 801379c:	40014000 	.word	0x40014000

080137a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b082      	sub	sp, #8
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d101      	bne.n	80137b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80137ae:	2301      	movs	r3, #1
 80137b0:	e0ab      	b.n	801390a <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	699b      	ldr	r3, [r3, #24]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d032      	beq.n	8013820 <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	4a55      	ldr	r2, [pc, #340]	; (8013914 <HAL_UART_Init+0x174>)
 80137c0:	4293      	cmp	r3, r2
 80137c2:	d05f      	beq.n	8013884 <HAL_UART_Init+0xe4>
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	4a53      	ldr	r2, [pc, #332]	; (8013918 <HAL_UART_Init+0x178>)
 80137ca:	4293      	cmp	r3, r2
 80137cc:	d05a      	beq.n	8013884 <HAL_UART_Init+0xe4>
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	4a52      	ldr	r2, [pc, #328]	; (801391c <HAL_UART_Init+0x17c>)
 80137d4:	4293      	cmp	r3, r2
 80137d6:	d055      	beq.n	8013884 <HAL_UART_Init+0xe4>
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	4a50      	ldr	r2, [pc, #320]	; (8013920 <HAL_UART_Init+0x180>)
 80137de:	4293      	cmp	r3, r2
 80137e0:	d050      	beq.n	8013884 <HAL_UART_Init+0xe4>
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	4a4f      	ldr	r2, [pc, #316]	; (8013924 <HAL_UART_Init+0x184>)
 80137e8:	4293      	cmp	r3, r2
 80137ea:	d04b      	beq.n	8013884 <HAL_UART_Init+0xe4>
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	4a4d      	ldr	r2, [pc, #308]	; (8013928 <HAL_UART_Init+0x188>)
 80137f2:	4293      	cmp	r3, r2
 80137f4:	d046      	beq.n	8013884 <HAL_UART_Init+0xe4>
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	4a4c      	ldr	r2, [pc, #304]	; (801392c <HAL_UART_Init+0x18c>)
 80137fc:	4293      	cmp	r3, r2
 80137fe:	d041      	beq.n	8013884 <HAL_UART_Init+0xe4>
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	4a4a      	ldr	r2, [pc, #296]	; (8013930 <HAL_UART_Init+0x190>)
 8013806:	4293      	cmp	r3, r2
 8013808:	d03c      	beq.n	8013884 <HAL_UART_Init+0xe4>
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	4a49      	ldr	r2, [pc, #292]	; (8013934 <HAL_UART_Init+0x194>)
 8013810:	4293      	cmp	r3, r2
 8013812:	d037      	beq.n	8013884 <HAL_UART_Init+0xe4>
 8013814:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8013818:	4847      	ldr	r0, [pc, #284]	; (8013938 <HAL_UART_Init+0x198>)
 801381a:	f7ee f92a 	bl	8001a72 <assert_failed>
 801381e:	e031      	b.n	8013884 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	4a3b      	ldr	r2, [pc, #236]	; (8013914 <HAL_UART_Init+0x174>)
 8013826:	4293      	cmp	r3, r2
 8013828:	d02c      	beq.n	8013884 <HAL_UART_Init+0xe4>
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	4a3a      	ldr	r2, [pc, #232]	; (8013918 <HAL_UART_Init+0x178>)
 8013830:	4293      	cmp	r3, r2
 8013832:	d027      	beq.n	8013884 <HAL_UART_Init+0xe4>
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	4a38      	ldr	r2, [pc, #224]	; (801391c <HAL_UART_Init+0x17c>)
 801383a:	4293      	cmp	r3, r2
 801383c:	d022      	beq.n	8013884 <HAL_UART_Init+0xe4>
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	4a37      	ldr	r2, [pc, #220]	; (8013920 <HAL_UART_Init+0x180>)
 8013844:	4293      	cmp	r3, r2
 8013846:	d01d      	beq.n	8013884 <HAL_UART_Init+0xe4>
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	4a35      	ldr	r2, [pc, #212]	; (8013924 <HAL_UART_Init+0x184>)
 801384e:	4293      	cmp	r3, r2
 8013850:	d018      	beq.n	8013884 <HAL_UART_Init+0xe4>
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	4a34      	ldr	r2, [pc, #208]	; (8013928 <HAL_UART_Init+0x188>)
 8013858:	4293      	cmp	r3, r2
 801385a:	d013      	beq.n	8013884 <HAL_UART_Init+0xe4>
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	4a32      	ldr	r2, [pc, #200]	; (801392c <HAL_UART_Init+0x18c>)
 8013862:	4293      	cmp	r3, r2
 8013864:	d00e      	beq.n	8013884 <HAL_UART_Init+0xe4>
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	4a31      	ldr	r2, [pc, #196]	; (8013930 <HAL_UART_Init+0x190>)
 801386c:	4293      	cmp	r3, r2
 801386e:	d009      	beq.n	8013884 <HAL_UART_Init+0xe4>
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	4a2f      	ldr	r2, [pc, #188]	; (8013934 <HAL_UART_Init+0x194>)
 8013876:	4293      	cmp	r3, r2
 8013878:	d004      	beq.n	8013884 <HAL_UART_Init+0xe4>
 801387a:	f240 1143 	movw	r1, #323	; 0x143
 801387e:	482e      	ldr	r0, [pc, #184]	; (8013938 <HAL_UART_Init+0x198>)
 8013880:	f7ee f8f7 	bl	8001a72 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801388a:	2b00      	cmp	r3, #0
 801388c:	d106      	bne.n	801389c <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	2200      	movs	r2, #0
 8013892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013896:	6878      	ldr	r0, [r7, #4]
 8013898:	f7ef fc48 	bl	800312c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2224      	movs	r2, #36	; 0x24
 80138a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	681a      	ldr	r2, [r3, #0]
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	f022 0201 	bic.w	r2, r2, #1
 80138b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f000 fc95 	bl	80141e4 <UART_SetConfig>
 80138ba:	4603      	mov	r3, r0
 80138bc:	2b01      	cmp	r3, #1
 80138be:	d101      	bne.n	80138c4 <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 80138c0:	2301      	movs	r3, #1
 80138c2:	e022      	b.n	801390a <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d002      	beq.n	80138d2 <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	f001 facd 	bl	8014e6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	685a      	ldr	r2, [r3, #4]
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80138e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	689a      	ldr	r2, [r3, #8]
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80138f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	681a      	ldr	r2, [r3, #0]
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	f042 0201 	orr.w	r2, r2, #1
 8013900:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013902:	6878      	ldr	r0, [r7, #4]
 8013904:	f001 fc26 	bl	8015154 <UART_CheckIdleState>
 8013908:	4603      	mov	r3, r0
}
 801390a:	4618      	mov	r0, r3
 801390c:	3708      	adds	r7, #8
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}
 8013912:	bf00      	nop
 8013914:	40011000 	.word	0x40011000
 8013918:	40004400 	.word	0x40004400
 801391c:	40004800 	.word	0x40004800
 8013920:	40004c00 	.word	0x40004c00
 8013924:	40005000 	.word	0x40005000
 8013928:	40011400 	.word	0x40011400
 801392c:	40007800 	.word	0x40007800
 8013930:	40007c00 	.word	0x40007c00
 8013934:	58000c00 	.word	0x58000c00
 8013938:	0801df58 	.word	0x0801df58

0801393c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b08a      	sub	sp, #40	; 0x28
 8013940:	af02      	add	r7, sp, #8
 8013942:	60f8      	str	r0, [r7, #12]
 8013944:	60b9      	str	r1, [r7, #8]
 8013946:	603b      	str	r3, [r7, #0]
 8013948:	4613      	mov	r3, r2
 801394a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013952:	2b20      	cmp	r3, #32
 8013954:	f040 8083 	bne.w	8013a5e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d002      	beq.n	8013964 <HAL_UART_Transmit+0x28>
 801395e:	88fb      	ldrh	r3, [r7, #6]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d101      	bne.n	8013968 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8013964:	2301      	movs	r3, #1
 8013966:	e07b      	b.n	8013a60 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801396e:	2b01      	cmp	r3, #1
 8013970:	d101      	bne.n	8013976 <HAL_UART_Transmit+0x3a>
 8013972:	2302      	movs	r3, #2
 8013974:	e074      	b.n	8013a60 <HAL_UART_Transmit+0x124>
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	2201      	movs	r2, #1
 801397a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	2200      	movs	r2, #0
 8013982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	2221      	movs	r2, #33	; 0x21
 801398a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801398e:	f7ef fde3 	bl	8003558 <HAL_GetTick>
 8013992:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	88fa      	ldrh	r2, [r7, #6]
 8013998:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	88fa      	ldrh	r2, [r7, #6]
 80139a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	689b      	ldr	r3, [r3, #8]
 80139a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80139ac:	d108      	bne.n	80139c0 <HAL_UART_Transmit+0x84>
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	691b      	ldr	r3, [r3, #16]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d104      	bne.n	80139c0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80139b6:	2300      	movs	r3, #0
 80139b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80139ba:	68bb      	ldr	r3, [r7, #8]
 80139bc:	61bb      	str	r3, [r7, #24]
 80139be:	e003      	b.n	80139c8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80139c4:	2300      	movs	r3, #0
 80139c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	2200      	movs	r2, #0
 80139cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80139d0:	e02c      	b.n	8013a2c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	9300      	str	r3, [sp, #0]
 80139d6:	697b      	ldr	r3, [r7, #20]
 80139d8:	2200      	movs	r2, #0
 80139da:	2180      	movs	r1, #128	; 0x80
 80139dc:	68f8      	ldr	r0, [r7, #12]
 80139de:	f001 fc04 	bl	80151ea <UART_WaitOnFlagUntilTimeout>
 80139e2:	4603      	mov	r3, r0
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d001      	beq.n	80139ec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80139e8:	2303      	movs	r3, #3
 80139ea:	e039      	b.n	8013a60 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80139ec:	69fb      	ldr	r3, [r7, #28]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d10b      	bne.n	8013a0a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80139f2:	69bb      	ldr	r3, [r7, #24]
 80139f4:	881b      	ldrh	r3, [r3, #0]
 80139f6:	461a      	mov	r2, r3
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013a00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8013a02:	69bb      	ldr	r3, [r7, #24]
 8013a04:	3302      	adds	r3, #2
 8013a06:	61bb      	str	r3, [r7, #24]
 8013a08:	e007      	b.n	8013a1a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013a0a:	69fb      	ldr	r3, [r7, #28]
 8013a0c:	781a      	ldrb	r2, [r3, #0]
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8013a14:	69fb      	ldr	r3, [r7, #28]
 8013a16:	3301      	adds	r3, #1
 8013a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013a20:	b29b      	uxth	r3, r3
 8013a22:	3b01      	subs	r3, #1
 8013a24:	b29a      	uxth	r2, r3
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013a32:	b29b      	uxth	r3, r3
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d1cc      	bne.n	80139d2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	9300      	str	r3, [sp, #0]
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	2200      	movs	r2, #0
 8013a40:	2140      	movs	r1, #64	; 0x40
 8013a42:	68f8      	ldr	r0, [r7, #12]
 8013a44:	f001 fbd1 	bl	80151ea <UART_WaitOnFlagUntilTimeout>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d001      	beq.n	8013a52 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8013a4e:	2303      	movs	r3, #3
 8013a50:	e006      	b.n	8013a60 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	2220      	movs	r2, #32
 8013a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	e000      	b.n	8013a60 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8013a5e:	2302      	movs	r3, #2
  }
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	3720      	adds	r7, #32
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd80      	pop	{r7, pc}

08013a68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b0ba      	sub	sp, #232	; 0xe8
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	69db      	ldr	r3, [r3, #28]
 8013a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	689b      	ldr	r3, [r3, #8]
 8013a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013a8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013a92:	f640 030f 	movw	r3, #2063	; 0x80f
 8013a96:	4013      	ands	r3, r2
 8013a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8013a9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d11b      	bne.n	8013adc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013aa8:	f003 0320 	and.w	r3, r3, #32
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d015      	beq.n	8013adc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013ab4:	f003 0320 	and.w	r3, r3, #32
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d105      	bne.n	8013ac8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d009      	beq.n	8013adc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	f000 835a 	beq.w	8014186 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ad6:	6878      	ldr	r0, [r7, #4]
 8013ad8:	4798      	blx	r3
      }
      return;
 8013ada:	e354      	b.n	8014186 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013adc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	f000 811f 	beq.w	8013d24 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8013ae6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013aea:	4b8b      	ldr	r3, [pc, #556]	; (8013d18 <HAL_UART_IRQHandler+0x2b0>)
 8013aec:	4013      	ands	r3, r2
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d106      	bne.n	8013b00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8013af2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8013af6:	4b89      	ldr	r3, [pc, #548]	; (8013d1c <HAL_UART_IRQHandler+0x2b4>)
 8013af8:	4013      	ands	r3, r2
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	f000 8112 	beq.w	8013d24 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013b04:	f003 0301 	and.w	r3, r3, #1
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d011      	beq.n	8013b30 <HAL_UART_IRQHandler+0xc8>
 8013b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d00b      	beq.n	8013b30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	2201      	movs	r2, #1
 8013b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013b26:	f043 0201 	orr.w	r2, r3, #1
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013b34:	f003 0302 	and.w	r3, r3, #2
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d011      	beq.n	8013b60 <HAL_UART_IRQHandler+0xf8>
 8013b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013b40:	f003 0301 	and.w	r3, r3, #1
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d00b      	beq.n	8013b60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	2202      	movs	r2, #2
 8013b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013b56:	f043 0204 	orr.w	r2, r3, #4
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013b64:	f003 0304 	and.w	r3, r3, #4
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d011      	beq.n	8013b90 <HAL_UART_IRQHandler+0x128>
 8013b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013b70:	f003 0301 	and.w	r3, r3, #1
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d00b      	beq.n	8013b90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	2204      	movs	r2, #4
 8013b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013b86:	f043 0202 	orr.w	r2, r3, #2
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013b94:	f003 0308 	and.w	r3, r3, #8
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d017      	beq.n	8013bcc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013ba0:	f003 0320 	and.w	r3, r3, #32
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d105      	bne.n	8013bb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013ba8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013bac:	4b5a      	ldr	r3, [pc, #360]	; (8013d18 <HAL_UART_IRQHandler+0x2b0>)
 8013bae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d00b      	beq.n	8013bcc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	2208      	movs	r2, #8
 8013bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013bc2:	f043 0208 	orr.w	r2, r3, #8
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d012      	beq.n	8013bfe <HAL_UART_IRQHandler+0x196>
 8013bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013bdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d00c      	beq.n	8013bfe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013bec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013bf4:	f043 0220 	orr.w	r2, r3, #32
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	f000 82c0 	beq.w	801418a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013c0e:	f003 0320 	and.w	r3, r3, #32
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d013      	beq.n	8013c3e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013c1a:	f003 0320 	and.w	r3, r3, #32
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d105      	bne.n	8013c2e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d007      	beq.n	8013c3e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d003      	beq.n	8013c3e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013c44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	689b      	ldr	r3, [r3, #8]
 8013c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c52:	2b40      	cmp	r3, #64	; 0x40
 8013c54:	d005      	beq.n	8013c62 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013c5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d04f      	beq.n	8013d02 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013c62:	6878      	ldr	r0, [r7, #4]
 8013c64:	f001 fb8a 	bl	801537c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	689b      	ldr	r3, [r3, #8]
 8013c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c72:	2b40      	cmp	r3, #64	; 0x40
 8013c74:	d141      	bne.n	8013cfa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	3308      	adds	r3, #8
 8013c7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013c84:	e853 3f00 	ldrex	r3, [r3]
 8013c88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8013c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	3308      	adds	r3, #8
 8013c9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8013ca2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013caa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8013cae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013cb2:	e841 2300 	strex	r3, r2, [r1]
 8013cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8013cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d1d9      	bne.n	8013c76 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d013      	beq.n	8013cf2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013cce:	4a14      	ldr	r2, [pc, #80]	; (8013d20 <HAL_UART_IRQHandler+0x2b8>)
 8013cd0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7f1 fbc6 	bl	8005468 <HAL_DMA_Abort_IT>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d017      	beq.n	8013d12 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ce8:	687a      	ldr	r2, [r7, #4]
 8013cea:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8013cec:	4610      	mov	r0, r2
 8013cee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013cf0:	e00f      	b.n	8013d12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013cf2:	6878      	ldr	r0, [r7, #4]
 8013cf4:	f000 fa60 	bl	80141b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013cf8:	e00b      	b.n	8013d12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f000 fa5c 	bl	80141b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013d00:	e007      	b.n	8013d12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	f000 fa58 	bl	80141b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8013d10:	e23b      	b.n	801418a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013d12:	bf00      	nop
    return;
 8013d14:	e239      	b.n	801418a <HAL_UART_IRQHandler+0x722>
 8013d16:	bf00      	nop
 8013d18:	10000001 	.word	0x10000001
 8013d1c:	04000120 	.word	0x04000120
 8013d20:	08015449 	.word	0x08015449

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d28:	2b01      	cmp	r3, #1
 8013d2a:	f040 81ce 	bne.w	80140ca <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013d32:	f003 0310 	and.w	r3, r3, #16
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	f000 81c7 	beq.w	80140ca <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8013d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013d40:	f003 0310 	and.w	r3, r3, #16
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	f000 81c0 	beq.w	80140ca <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	2210      	movs	r2, #16
 8013d50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	689b      	ldr	r3, [r3, #8]
 8013d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d5c:	2b40      	cmp	r3, #64	; 0x40
 8013d5e:	f040 813b 	bne.w	8013fd8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	4a8b      	ldr	r2, [pc, #556]	; (8013f98 <HAL_UART_IRQHandler+0x530>)
 8013d6a:	4293      	cmp	r3, r2
 8013d6c:	d059      	beq.n	8013e22 <HAL_UART_IRQHandler+0x3ba>
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	4a89      	ldr	r2, [pc, #548]	; (8013f9c <HAL_UART_IRQHandler+0x534>)
 8013d76:	4293      	cmp	r3, r2
 8013d78:	d053      	beq.n	8013e22 <HAL_UART_IRQHandler+0x3ba>
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4a87      	ldr	r2, [pc, #540]	; (8013fa0 <HAL_UART_IRQHandler+0x538>)
 8013d82:	4293      	cmp	r3, r2
 8013d84:	d04d      	beq.n	8013e22 <HAL_UART_IRQHandler+0x3ba>
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	4a85      	ldr	r2, [pc, #532]	; (8013fa4 <HAL_UART_IRQHandler+0x53c>)
 8013d8e:	4293      	cmp	r3, r2
 8013d90:	d047      	beq.n	8013e22 <HAL_UART_IRQHandler+0x3ba>
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	4a83      	ldr	r2, [pc, #524]	; (8013fa8 <HAL_UART_IRQHandler+0x540>)
 8013d9a:	4293      	cmp	r3, r2
 8013d9c:	d041      	beq.n	8013e22 <HAL_UART_IRQHandler+0x3ba>
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	4a81      	ldr	r2, [pc, #516]	; (8013fac <HAL_UART_IRQHandler+0x544>)
 8013da6:	4293      	cmp	r3, r2
 8013da8:	d03b      	beq.n	8013e22 <HAL_UART_IRQHandler+0x3ba>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	4a7f      	ldr	r2, [pc, #508]	; (8013fb0 <HAL_UART_IRQHandler+0x548>)
 8013db2:	4293      	cmp	r3, r2
 8013db4:	d035      	beq.n	8013e22 <HAL_UART_IRQHandler+0x3ba>
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	4a7d      	ldr	r2, [pc, #500]	; (8013fb4 <HAL_UART_IRQHandler+0x54c>)
 8013dbe:	4293      	cmp	r3, r2
 8013dc0:	d02f      	beq.n	8013e22 <HAL_UART_IRQHandler+0x3ba>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	4a7b      	ldr	r2, [pc, #492]	; (8013fb8 <HAL_UART_IRQHandler+0x550>)
 8013dca:	4293      	cmp	r3, r2
 8013dcc:	d029      	beq.n	8013e22 <HAL_UART_IRQHandler+0x3ba>
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	4a79      	ldr	r2, [pc, #484]	; (8013fbc <HAL_UART_IRQHandler+0x554>)
 8013dd6:	4293      	cmp	r3, r2
 8013dd8:	d023      	beq.n	8013e22 <HAL_UART_IRQHandler+0x3ba>
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	4a77      	ldr	r2, [pc, #476]	; (8013fc0 <HAL_UART_IRQHandler+0x558>)
 8013de2:	4293      	cmp	r3, r2
 8013de4:	d01d      	beq.n	8013e22 <HAL_UART_IRQHandler+0x3ba>
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	4a75      	ldr	r2, [pc, #468]	; (8013fc4 <HAL_UART_IRQHandler+0x55c>)
 8013dee:	4293      	cmp	r3, r2
 8013df0:	d017      	beq.n	8013e22 <HAL_UART_IRQHandler+0x3ba>
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	4a73      	ldr	r2, [pc, #460]	; (8013fc8 <HAL_UART_IRQHandler+0x560>)
 8013dfa:	4293      	cmp	r3, r2
 8013dfc:	d011      	beq.n	8013e22 <HAL_UART_IRQHandler+0x3ba>
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	4a71      	ldr	r2, [pc, #452]	; (8013fcc <HAL_UART_IRQHandler+0x564>)
 8013e06:	4293      	cmp	r3, r2
 8013e08:	d00b      	beq.n	8013e22 <HAL_UART_IRQHandler+0x3ba>
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	4a6f      	ldr	r2, [pc, #444]	; (8013fd0 <HAL_UART_IRQHandler+0x568>)
 8013e12:	4293      	cmp	r3, r2
 8013e14:	d005      	beq.n	8013e22 <HAL_UART_IRQHandler+0x3ba>
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	4a6d      	ldr	r2, [pc, #436]	; (8013fd4 <HAL_UART_IRQHandler+0x56c>)
 8013e1e:	4293      	cmp	r3, r2
 8013e20:	d105      	bne.n	8013e2e <HAL_UART_IRQHandler+0x3c6>
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	685b      	ldr	r3, [r3, #4]
 8013e2a:	b29b      	uxth	r3, r3
 8013e2c:	e004      	b.n	8013e38 <HAL_UART_IRQHandler+0x3d0>
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	685b      	ldr	r3, [r3, #4]
 8013e36:	b29b      	uxth	r3, r3
 8013e38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8013e3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	f000 81a4 	beq.w	801418e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013e4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013e50:	429a      	cmp	r2, r3
 8013e52:	f080 819c 	bcs.w	801418e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013e5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013e64:	69db      	ldr	r3, [r3, #28]
 8013e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013e6a:	f000 8086 	beq.w	8013f7a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013e7a:	e853 3f00 	ldrex	r3, [r3]
 8013e7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8013e82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013e86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013e8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	461a      	mov	r2, r3
 8013e94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013e98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8013e9c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ea0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8013ea4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013ea8:	e841 2300 	strex	r3, r2, [r1]
 8013eac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8013eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d1da      	bne.n	8013e6e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	3308      	adds	r3, #8
 8013ebe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013ec2:	e853 3f00 	ldrex	r3, [r3]
 8013ec6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8013ec8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013eca:	f023 0301 	bic.w	r3, r3, #1
 8013ece:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	3308      	adds	r3, #8
 8013ed8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013edc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8013ee0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ee2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8013ee4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013ee8:	e841 2300 	strex	r3, r2, [r1]
 8013eec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8013eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d1e1      	bne.n	8013eb8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	3308      	adds	r3, #8
 8013efa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013efc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013efe:	e853 3f00 	ldrex	r3, [r3]
 8013f02:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8013f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	3308      	adds	r3, #8
 8013f14:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8013f18:	66fa      	str	r2, [r7, #108]	; 0x6c
 8013f1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013f1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013f20:	e841 2300 	strex	r3, r2, [r1]
 8013f24:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8013f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d1e3      	bne.n	8013ef4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	2220      	movs	r2, #32
 8013f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	2200      	movs	r2, #0
 8013f38:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f42:	e853 3f00 	ldrex	r3, [r3]
 8013f46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f4a:	f023 0310 	bic.w	r3, r3, #16
 8013f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	461a      	mov	r2, r3
 8013f58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013f5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8013f5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013f62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013f64:	e841 2300 	strex	r3, r2, [r1]
 8013f68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d1e4      	bne.n	8013f3a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f74:	4618      	mov	r0, r3
 8013f76:	f7f0 ff59 	bl	8004e2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013f86:	b29b      	uxth	r3, r3
 8013f88:	1ad3      	subs	r3, r2, r3
 8013f8a:	b29b      	uxth	r3, r3
 8013f8c:	4619      	mov	r1, r3
 8013f8e:	6878      	ldr	r0, [r7, #4]
 8013f90:	f000 f91c 	bl	80141cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013f94:	e0fb      	b.n	801418e <HAL_UART_IRQHandler+0x726>
 8013f96:	bf00      	nop
 8013f98:	40020010 	.word	0x40020010
 8013f9c:	40020028 	.word	0x40020028
 8013fa0:	40020040 	.word	0x40020040
 8013fa4:	40020058 	.word	0x40020058
 8013fa8:	40020070 	.word	0x40020070
 8013fac:	40020088 	.word	0x40020088
 8013fb0:	400200a0 	.word	0x400200a0
 8013fb4:	400200b8 	.word	0x400200b8
 8013fb8:	40020410 	.word	0x40020410
 8013fbc:	40020428 	.word	0x40020428
 8013fc0:	40020440 	.word	0x40020440
 8013fc4:	40020458 	.word	0x40020458
 8013fc8:	40020470 	.word	0x40020470
 8013fcc:	40020488 	.word	0x40020488
 8013fd0:	400204a0 	.word	0x400204a0
 8013fd4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013fe4:	b29b      	uxth	r3, r3
 8013fe6:	1ad3      	subs	r3, r2, r3
 8013fe8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013ff2:	b29b      	uxth	r3, r3
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	f000 80cc 	beq.w	8014192 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8013ffa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	f000 80c7 	beq.w	8014192 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801400a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801400c:	e853 3f00 	ldrex	r3, [r3]
 8014010:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014018:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	461a      	mov	r2, r3
 8014022:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014026:	647b      	str	r3, [r7, #68]	; 0x44
 8014028:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801402a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801402c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801402e:	e841 2300 	strex	r3, r2, [r1]
 8014032:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014036:	2b00      	cmp	r3, #0
 8014038:	d1e4      	bne.n	8014004 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	3308      	adds	r3, #8
 8014040:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014044:	e853 3f00 	ldrex	r3, [r3]
 8014048:	623b      	str	r3, [r7, #32]
   return(result);
 801404a:	6a3a      	ldr	r2, [r7, #32]
 801404c:	4b54      	ldr	r3, [pc, #336]	; (80141a0 <HAL_UART_IRQHandler+0x738>)
 801404e:	4013      	ands	r3, r2
 8014050:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	3308      	adds	r3, #8
 801405a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801405e:	633a      	str	r2, [r7, #48]	; 0x30
 8014060:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014066:	e841 2300 	strex	r3, r2, [r1]
 801406a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801406e:	2b00      	cmp	r3, #0
 8014070:	d1e3      	bne.n	801403a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	2220      	movs	r2, #32
 8014076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2200      	movs	r2, #0
 801407e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	2200      	movs	r2, #0
 8014084:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801408c:	693b      	ldr	r3, [r7, #16]
 801408e:	e853 3f00 	ldrex	r3, [r3]
 8014092:	60fb      	str	r3, [r7, #12]
   return(result);
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	f023 0310 	bic.w	r3, r3, #16
 801409a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	461a      	mov	r2, r3
 80140a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80140a8:	61fb      	str	r3, [r7, #28]
 80140aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140ac:	69b9      	ldr	r1, [r7, #24]
 80140ae:	69fa      	ldr	r2, [r7, #28]
 80140b0:	e841 2300 	strex	r3, r2, [r1]
 80140b4:	617b      	str	r3, [r7, #20]
   return(result);
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d1e4      	bne.n	8014086 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80140bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80140c0:	4619      	mov	r1, r3
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f000 f882 	bl	80141cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80140c8:	e063      	b.n	8014192 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80140ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80140ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d00e      	beq.n	80140f4 <HAL_UART_IRQHandler+0x68c>
 80140d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80140da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d008      	beq.n	80140f4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80140ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f001 f9ec 	bl	80154ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80140f2:	e051      	b.n	8014198 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80140f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80140f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d014      	beq.n	801412a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014108:	2b00      	cmp	r3, #0
 801410a:	d105      	bne.n	8014118 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801410c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014110:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014114:	2b00      	cmp	r3, #0
 8014116:	d008      	beq.n	801412a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801411c:	2b00      	cmp	r3, #0
 801411e:	d03a      	beq.n	8014196 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	4798      	blx	r3
    }
    return;
 8014128:	e035      	b.n	8014196 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801412a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801412e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014132:	2b00      	cmp	r3, #0
 8014134:	d009      	beq.n	801414a <HAL_UART_IRQHandler+0x6e2>
 8014136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801413e:	2b00      	cmp	r3, #0
 8014140:	d003      	beq.n	801414a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f001 f996 	bl	8015474 <UART_EndTransmit_IT>
    return;
 8014148:	e026      	b.n	8014198 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801414a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801414e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014152:	2b00      	cmp	r3, #0
 8014154:	d009      	beq.n	801416a <HAL_UART_IRQHandler+0x702>
 8014156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801415a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801415e:	2b00      	cmp	r3, #0
 8014160:	d003      	beq.n	801416a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f001 f9c5 	bl	80154f2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014168:	e016      	b.n	8014198 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801416a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801416e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014172:	2b00      	cmp	r3, #0
 8014174:	d010      	beq.n	8014198 <HAL_UART_IRQHandler+0x730>
 8014176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801417a:	2b00      	cmp	r3, #0
 801417c:	da0c      	bge.n	8014198 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801417e:	6878      	ldr	r0, [r7, #4]
 8014180:	f001 f9ad 	bl	80154de <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014184:	e008      	b.n	8014198 <HAL_UART_IRQHandler+0x730>
      return;
 8014186:	bf00      	nop
 8014188:	e006      	b.n	8014198 <HAL_UART_IRQHandler+0x730>
    return;
 801418a:	bf00      	nop
 801418c:	e004      	b.n	8014198 <HAL_UART_IRQHandler+0x730>
      return;
 801418e:	bf00      	nop
 8014190:	e002      	b.n	8014198 <HAL_UART_IRQHandler+0x730>
      return;
 8014192:	bf00      	nop
 8014194:	e000      	b.n	8014198 <HAL_UART_IRQHandler+0x730>
    return;
 8014196:	bf00      	nop
  }
}
 8014198:	37e8      	adds	r7, #232	; 0xe8
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}
 801419e:	bf00      	nop
 80141a0:	effffffe 	.word	0xeffffffe

080141a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80141a4:	b480      	push	{r7}
 80141a6:	b083      	sub	sp, #12
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80141ac:	bf00      	nop
 80141ae:	370c      	adds	r7, #12
 80141b0:	46bd      	mov	sp, r7
 80141b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b6:	4770      	bx	lr

080141b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80141b8:	b480      	push	{r7}
 80141ba:	b083      	sub	sp, #12
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80141c0:	bf00      	nop
 80141c2:	370c      	adds	r7, #12
 80141c4:	46bd      	mov	sp, r7
 80141c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ca:	4770      	bx	lr

080141cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80141cc:	b480      	push	{r7}
 80141ce:	b083      	sub	sp, #12
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
 80141d4:	460b      	mov	r3, r1
 80141d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80141d8:	bf00      	nop
 80141da:	370c      	adds	r7, #12
 80141dc:	46bd      	mov	sp, r7
 80141de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e2:	4770      	bx	lr

080141e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80141e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80141e8:	b092      	sub	sp, #72	; 0x48
 80141ea:	af00      	add	r7, sp, #0
 80141ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80141ee:	2300      	movs	r3, #0
 80141f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80141f4:	697b      	ldr	r3, [r7, #20]
 80141f6:	685b      	ldr	r3, [r3, #4]
 80141f8:	4a17      	ldr	r2, [pc, #92]	; (8014258 <UART_SetConfig+0x74>)
 80141fa:	4293      	cmp	r3, r2
 80141fc:	d904      	bls.n	8014208 <UART_SetConfig+0x24>
 80141fe:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8014202:	4816      	ldr	r0, [pc, #88]	; (801425c <UART_SetConfig+0x78>)
 8014204:	f7ed fc35 	bl	8001a72 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	689b      	ldr	r3, [r3, #8]
 801420c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014210:	d00d      	beq.n	801422e <UART_SetConfig+0x4a>
 8014212:	697b      	ldr	r3, [r7, #20]
 8014214:	689b      	ldr	r3, [r3, #8]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d009      	beq.n	801422e <UART_SetConfig+0x4a>
 801421a:	697b      	ldr	r3, [r7, #20]
 801421c:	689b      	ldr	r3, [r3, #8]
 801421e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014222:	d004      	beq.n	801422e <UART_SetConfig+0x4a>
 8014224:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8014228:	480c      	ldr	r0, [pc, #48]	; (801425c <UART_SetConfig+0x78>)
 801422a:	f7ed fc22 	bl	8001a72 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 801422e:	697b      	ldr	r3, [r7, #20]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	4a0b      	ldr	r2, [pc, #44]	; (8014260 <UART_SetConfig+0x7c>)
 8014234:	4293      	cmp	r3, r2
 8014236:	d115      	bne.n	8014264 <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	68db      	ldr	r3, [r3, #12]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d037      	beq.n	80142b0 <UART_SetConfig+0xcc>
 8014240:	697b      	ldr	r3, [r7, #20]
 8014242:	68db      	ldr	r3, [r3, #12]
 8014244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014248:	d032      	beq.n	80142b0 <UART_SetConfig+0xcc>
 801424a:	f44f 613e 	mov.w	r1, #3040	; 0xbe0
 801424e:	4803      	ldr	r0, [pc, #12]	; (801425c <UART_SetConfig+0x78>)
 8014250:	f7ed fc0f 	bl	8001a72 <assert_failed>
 8014254:	e02c      	b.n	80142b0 <UART_SetConfig+0xcc>
 8014256:	bf00      	nop
 8014258:	00bebc20 	.word	0x00bebc20
 801425c:	0801df58 	.word	0x0801df58
 8014260:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	68db      	ldr	r3, [r3, #12]
 8014268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801426c:	d012      	beq.n	8014294 <UART_SetConfig+0xb0>
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	68db      	ldr	r3, [r3, #12]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d00e      	beq.n	8014294 <UART_SetConfig+0xb0>
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	68db      	ldr	r3, [r3, #12]
 801427a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801427e:	d009      	beq.n	8014294 <UART_SetConfig+0xb0>
 8014280:	697b      	ldr	r3, [r7, #20]
 8014282:	68db      	ldr	r3, [r3, #12]
 8014284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014288:	d004      	beq.n	8014294 <UART_SetConfig+0xb0>
 801428a:	f640 31e4 	movw	r1, #3044	; 0xbe4
 801428e:	48a5      	ldr	r0, [pc, #660]	; (8014524 <UART_SetConfig+0x340>)
 8014290:	f7ed fbef 	bl	8001a72 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	6a1b      	ldr	r3, [r3, #32]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d009      	beq.n	80142b0 <UART_SetConfig+0xcc>
 801429c:	697b      	ldr	r3, [r7, #20]
 801429e:	6a1b      	ldr	r3, [r3, #32]
 80142a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80142a4:	d004      	beq.n	80142b0 <UART_SetConfig+0xcc>
 80142a6:	f640 31e5 	movw	r1, #3045	; 0xbe5
 80142aa:	489e      	ldr	r0, [pc, #632]	; (8014524 <UART_SetConfig+0x340>)
 80142ac:	f7ed fbe1 	bl	8001a72 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80142b0:	697b      	ldr	r3, [r7, #20]
 80142b2:	691b      	ldr	r3, [r3, #16]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d00e      	beq.n	80142d6 <UART_SetConfig+0xf2>
 80142b8:	697b      	ldr	r3, [r7, #20]
 80142ba:	691b      	ldr	r3, [r3, #16]
 80142bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80142c0:	d009      	beq.n	80142d6 <UART_SetConfig+0xf2>
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	691b      	ldr	r3, [r3, #16]
 80142c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80142ca:	d004      	beq.n	80142d6 <UART_SetConfig+0xf2>
 80142cc:	f640 31e8 	movw	r1, #3048	; 0xbe8
 80142d0:	4894      	ldr	r0, [pc, #592]	; (8014524 <UART_SetConfig+0x340>)
 80142d2:	f7ed fbce 	bl	8001a72 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80142d6:	697b      	ldr	r3, [r7, #20]
 80142d8:	695b      	ldr	r3, [r3, #20]
 80142da:	f023 030c 	bic.w	r3, r3, #12
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d103      	bne.n	80142ea <UART_SetConfig+0x106>
 80142e2:	697b      	ldr	r3, [r7, #20]
 80142e4:	695b      	ldr	r3, [r3, #20]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d104      	bne.n	80142f4 <UART_SetConfig+0x110>
 80142ea:	f640 31e9 	movw	r1, #3049	; 0xbe9
 80142ee:	488d      	ldr	r0, [pc, #564]	; (8014524 <UART_SetConfig+0x340>)
 80142f0:	f7ed fbbf 	bl	8001a72 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	699b      	ldr	r3, [r3, #24]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d013      	beq.n	8014324 <UART_SetConfig+0x140>
 80142fc:	697b      	ldr	r3, [r7, #20]
 80142fe:	699b      	ldr	r3, [r3, #24]
 8014300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014304:	d00e      	beq.n	8014324 <UART_SetConfig+0x140>
 8014306:	697b      	ldr	r3, [r7, #20]
 8014308:	699b      	ldr	r3, [r3, #24]
 801430a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801430e:	d009      	beq.n	8014324 <UART_SetConfig+0x140>
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	699b      	ldr	r3, [r3, #24]
 8014314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014318:	d004      	beq.n	8014324 <UART_SetConfig+0x140>
 801431a:	f640 31ea 	movw	r1, #3050	; 0xbea
 801431e:	4881      	ldr	r0, [pc, #516]	; (8014524 <UART_SetConfig+0x340>)
 8014320:	f7ed fba7 	bl	8001a72 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	69db      	ldr	r3, [r3, #28]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d009      	beq.n	8014340 <UART_SetConfig+0x15c>
 801432c:	697b      	ldr	r3, [r7, #20]
 801432e:	69db      	ldr	r3, [r3, #28]
 8014330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014334:	d004      	beq.n	8014340 <UART_SetConfig+0x15c>
 8014336:	f640 31eb 	movw	r1, #3051	; 0xbeb
 801433a:	487a      	ldr	r0, [pc, #488]	; (8014524 <UART_SetConfig+0x340>)
 801433c:	f7ed fb99 	bl	8001a72 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014344:	2b00      	cmp	r3, #0
 8014346:	d030      	beq.n	80143aa <UART_SetConfig+0x1c6>
 8014348:	697b      	ldr	r3, [r7, #20]
 801434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801434c:	2b01      	cmp	r3, #1
 801434e:	d02c      	beq.n	80143aa <UART_SetConfig+0x1c6>
 8014350:	697b      	ldr	r3, [r7, #20]
 8014352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014354:	2b02      	cmp	r3, #2
 8014356:	d028      	beq.n	80143aa <UART_SetConfig+0x1c6>
 8014358:	697b      	ldr	r3, [r7, #20]
 801435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801435c:	2b03      	cmp	r3, #3
 801435e:	d024      	beq.n	80143aa <UART_SetConfig+0x1c6>
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014364:	2b04      	cmp	r3, #4
 8014366:	d020      	beq.n	80143aa <UART_SetConfig+0x1c6>
 8014368:	697b      	ldr	r3, [r7, #20]
 801436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801436c:	2b05      	cmp	r3, #5
 801436e:	d01c      	beq.n	80143aa <UART_SetConfig+0x1c6>
 8014370:	697b      	ldr	r3, [r7, #20]
 8014372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014374:	2b06      	cmp	r3, #6
 8014376:	d018      	beq.n	80143aa <UART_SetConfig+0x1c6>
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801437c:	2b07      	cmp	r3, #7
 801437e:	d014      	beq.n	80143aa <UART_SetConfig+0x1c6>
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014384:	2b08      	cmp	r3, #8
 8014386:	d010      	beq.n	80143aa <UART_SetConfig+0x1c6>
 8014388:	697b      	ldr	r3, [r7, #20]
 801438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801438c:	2b09      	cmp	r3, #9
 801438e:	d00c      	beq.n	80143aa <UART_SetConfig+0x1c6>
 8014390:	697b      	ldr	r3, [r7, #20]
 8014392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014394:	2b0a      	cmp	r3, #10
 8014396:	d008      	beq.n	80143aa <UART_SetConfig+0x1c6>
 8014398:	697b      	ldr	r3, [r7, #20]
 801439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801439c:	2b0b      	cmp	r3, #11
 801439e:	d004      	beq.n	80143aa <UART_SetConfig+0x1c6>
 80143a0:	f640 31ec 	movw	r1, #3052	; 0xbec
 80143a4:	485f      	ldr	r0, [pc, #380]	; (8014524 <UART_SetConfig+0x340>)
 80143a6:	f7ed fb64 	bl	8001a72 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80143aa:	697b      	ldr	r3, [r7, #20]
 80143ac:	689a      	ldr	r2, [r3, #8]
 80143ae:	697b      	ldr	r3, [r7, #20]
 80143b0:	691b      	ldr	r3, [r3, #16]
 80143b2:	431a      	orrs	r2, r3
 80143b4:	697b      	ldr	r3, [r7, #20]
 80143b6:	695b      	ldr	r3, [r3, #20]
 80143b8:	431a      	orrs	r2, r3
 80143ba:	697b      	ldr	r3, [r7, #20]
 80143bc:	69db      	ldr	r3, [r3, #28]
 80143be:	4313      	orrs	r3, r2
 80143c0:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80143c2:	697b      	ldr	r3, [r7, #20]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	681a      	ldr	r2, [r3, #0]
 80143c8:	4b57      	ldr	r3, [pc, #348]	; (8014528 <UART_SetConfig+0x344>)
 80143ca:	4013      	ands	r3, r2
 80143cc:	697a      	ldr	r2, [r7, #20]
 80143ce:	6812      	ldr	r2, [r2, #0]
 80143d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80143d2:	430b      	orrs	r3, r1
 80143d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80143d6:	697b      	ldr	r3, [r7, #20]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	685b      	ldr	r3, [r3, #4]
 80143dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80143e0:	697b      	ldr	r3, [r7, #20]
 80143e2:	68da      	ldr	r2, [r3, #12]
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	430a      	orrs	r2, r1
 80143ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80143ec:	697b      	ldr	r3, [r7, #20]
 80143ee:	699b      	ldr	r3, [r3, #24]
 80143f0:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80143f2:	697b      	ldr	r3, [r7, #20]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	4a4d      	ldr	r2, [pc, #308]	; (801452c <UART_SetConfig+0x348>)
 80143f8:	4293      	cmp	r3, r2
 80143fa:	d004      	beq.n	8014406 <UART_SetConfig+0x222>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80143fc:	697b      	ldr	r3, [r7, #20]
 80143fe:	6a1b      	ldr	r3, [r3, #32]
 8014400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014402:	4313      	orrs	r3, r2
 8014404:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014406:	697b      	ldr	r3, [r7, #20]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	689a      	ldr	r2, [r3, #8]
 801440c:	4b48      	ldr	r3, [pc, #288]	; (8014530 <UART_SetConfig+0x34c>)
 801440e:	4013      	ands	r3, r2
 8014410:	697a      	ldr	r2, [r7, #20]
 8014412:	6812      	ldr	r2, [r2, #0]
 8014414:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014416:	430b      	orrs	r3, r1
 8014418:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014420:	f023 010f 	bic.w	r1, r3, #15
 8014424:	697b      	ldr	r3, [r7, #20]
 8014426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	430a      	orrs	r2, r1
 801442e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	4a3f      	ldr	r2, [pc, #252]	; (8014534 <UART_SetConfig+0x350>)
 8014436:	4293      	cmp	r3, r2
 8014438:	f040 8084 	bne.w	8014544 <UART_SetConfig+0x360>
 801443c:	4b3e      	ldr	r3, [pc, #248]	; (8014538 <UART_SetConfig+0x354>)
 801443e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014440:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014444:	2b28      	cmp	r3, #40	; 0x28
 8014446:	d879      	bhi.n	801453c <UART_SetConfig+0x358>
 8014448:	a201      	add	r2, pc, #4	; (adr r2, 8014450 <UART_SetConfig+0x26c>)
 801444a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801444e:	bf00      	nop
 8014450:	080144f5 	.word	0x080144f5
 8014454:	0801453d 	.word	0x0801453d
 8014458:	0801453d 	.word	0x0801453d
 801445c:	0801453d 	.word	0x0801453d
 8014460:	0801453d 	.word	0x0801453d
 8014464:	0801453d 	.word	0x0801453d
 8014468:	0801453d 	.word	0x0801453d
 801446c:	0801453d 	.word	0x0801453d
 8014470:	080144fd 	.word	0x080144fd
 8014474:	0801453d 	.word	0x0801453d
 8014478:	0801453d 	.word	0x0801453d
 801447c:	0801453d 	.word	0x0801453d
 8014480:	0801453d 	.word	0x0801453d
 8014484:	0801453d 	.word	0x0801453d
 8014488:	0801453d 	.word	0x0801453d
 801448c:	0801453d 	.word	0x0801453d
 8014490:	08014505 	.word	0x08014505
 8014494:	0801453d 	.word	0x0801453d
 8014498:	0801453d 	.word	0x0801453d
 801449c:	0801453d 	.word	0x0801453d
 80144a0:	0801453d 	.word	0x0801453d
 80144a4:	0801453d 	.word	0x0801453d
 80144a8:	0801453d 	.word	0x0801453d
 80144ac:	0801453d 	.word	0x0801453d
 80144b0:	0801450d 	.word	0x0801450d
 80144b4:	0801453d 	.word	0x0801453d
 80144b8:	0801453d 	.word	0x0801453d
 80144bc:	0801453d 	.word	0x0801453d
 80144c0:	0801453d 	.word	0x0801453d
 80144c4:	0801453d 	.word	0x0801453d
 80144c8:	0801453d 	.word	0x0801453d
 80144cc:	0801453d 	.word	0x0801453d
 80144d0:	08014515 	.word	0x08014515
 80144d4:	0801453d 	.word	0x0801453d
 80144d8:	0801453d 	.word	0x0801453d
 80144dc:	0801453d 	.word	0x0801453d
 80144e0:	0801453d 	.word	0x0801453d
 80144e4:	0801453d 	.word	0x0801453d
 80144e8:	0801453d 	.word	0x0801453d
 80144ec:	0801453d 	.word	0x0801453d
 80144f0:	0801451d 	.word	0x0801451d
 80144f4:	2301      	movs	r3, #1
 80144f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144fa:	e22a      	b.n	8014952 <UART_SetConfig+0x76e>
 80144fc:	2304      	movs	r3, #4
 80144fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014502:	e226      	b.n	8014952 <UART_SetConfig+0x76e>
 8014504:	2308      	movs	r3, #8
 8014506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801450a:	e222      	b.n	8014952 <UART_SetConfig+0x76e>
 801450c:	2310      	movs	r3, #16
 801450e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014512:	e21e      	b.n	8014952 <UART_SetConfig+0x76e>
 8014514:	2320      	movs	r3, #32
 8014516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801451a:	e21a      	b.n	8014952 <UART_SetConfig+0x76e>
 801451c:	2340      	movs	r3, #64	; 0x40
 801451e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014522:	e216      	b.n	8014952 <UART_SetConfig+0x76e>
 8014524:	0801df58 	.word	0x0801df58
 8014528:	cfff69f3 	.word	0xcfff69f3
 801452c:	58000c00 	.word	0x58000c00
 8014530:	11fff4ff 	.word	0x11fff4ff
 8014534:	40011000 	.word	0x40011000
 8014538:	58024400 	.word	0x58024400
 801453c:	2380      	movs	r3, #128	; 0x80
 801453e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014542:	e206      	b.n	8014952 <UART_SetConfig+0x76e>
 8014544:	697b      	ldr	r3, [r7, #20]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	4ac3      	ldr	r2, [pc, #780]	; (8014858 <UART_SetConfig+0x674>)
 801454a:	4293      	cmp	r3, r2
 801454c:	d130      	bne.n	80145b0 <UART_SetConfig+0x3cc>
 801454e:	4bc3      	ldr	r3, [pc, #780]	; (801485c <UART_SetConfig+0x678>)
 8014550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014552:	f003 0307 	and.w	r3, r3, #7
 8014556:	2b05      	cmp	r3, #5
 8014558:	d826      	bhi.n	80145a8 <UART_SetConfig+0x3c4>
 801455a:	a201      	add	r2, pc, #4	; (adr r2, 8014560 <UART_SetConfig+0x37c>)
 801455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014560:	08014579 	.word	0x08014579
 8014564:	08014581 	.word	0x08014581
 8014568:	08014589 	.word	0x08014589
 801456c:	08014591 	.word	0x08014591
 8014570:	08014599 	.word	0x08014599
 8014574:	080145a1 	.word	0x080145a1
 8014578:	2300      	movs	r3, #0
 801457a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801457e:	e1e8      	b.n	8014952 <UART_SetConfig+0x76e>
 8014580:	2304      	movs	r3, #4
 8014582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014586:	e1e4      	b.n	8014952 <UART_SetConfig+0x76e>
 8014588:	2308      	movs	r3, #8
 801458a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801458e:	e1e0      	b.n	8014952 <UART_SetConfig+0x76e>
 8014590:	2310      	movs	r3, #16
 8014592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014596:	e1dc      	b.n	8014952 <UART_SetConfig+0x76e>
 8014598:	2320      	movs	r3, #32
 801459a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801459e:	e1d8      	b.n	8014952 <UART_SetConfig+0x76e>
 80145a0:	2340      	movs	r3, #64	; 0x40
 80145a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80145a6:	e1d4      	b.n	8014952 <UART_SetConfig+0x76e>
 80145a8:	2380      	movs	r3, #128	; 0x80
 80145aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80145ae:	e1d0      	b.n	8014952 <UART_SetConfig+0x76e>
 80145b0:	697b      	ldr	r3, [r7, #20]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	4aaa      	ldr	r2, [pc, #680]	; (8014860 <UART_SetConfig+0x67c>)
 80145b6:	4293      	cmp	r3, r2
 80145b8:	d130      	bne.n	801461c <UART_SetConfig+0x438>
 80145ba:	4ba8      	ldr	r3, [pc, #672]	; (801485c <UART_SetConfig+0x678>)
 80145bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80145be:	f003 0307 	and.w	r3, r3, #7
 80145c2:	2b05      	cmp	r3, #5
 80145c4:	d826      	bhi.n	8014614 <UART_SetConfig+0x430>
 80145c6:	a201      	add	r2, pc, #4	; (adr r2, 80145cc <UART_SetConfig+0x3e8>)
 80145c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145cc:	080145e5 	.word	0x080145e5
 80145d0:	080145ed 	.word	0x080145ed
 80145d4:	080145f5 	.word	0x080145f5
 80145d8:	080145fd 	.word	0x080145fd
 80145dc:	08014605 	.word	0x08014605
 80145e0:	0801460d 	.word	0x0801460d
 80145e4:	2300      	movs	r3, #0
 80145e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80145ea:	e1b2      	b.n	8014952 <UART_SetConfig+0x76e>
 80145ec:	2304      	movs	r3, #4
 80145ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80145f2:	e1ae      	b.n	8014952 <UART_SetConfig+0x76e>
 80145f4:	2308      	movs	r3, #8
 80145f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80145fa:	e1aa      	b.n	8014952 <UART_SetConfig+0x76e>
 80145fc:	2310      	movs	r3, #16
 80145fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014602:	e1a6      	b.n	8014952 <UART_SetConfig+0x76e>
 8014604:	2320      	movs	r3, #32
 8014606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801460a:	e1a2      	b.n	8014952 <UART_SetConfig+0x76e>
 801460c:	2340      	movs	r3, #64	; 0x40
 801460e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014612:	e19e      	b.n	8014952 <UART_SetConfig+0x76e>
 8014614:	2380      	movs	r3, #128	; 0x80
 8014616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801461a:	e19a      	b.n	8014952 <UART_SetConfig+0x76e>
 801461c:	697b      	ldr	r3, [r7, #20]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	4a90      	ldr	r2, [pc, #576]	; (8014864 <UART_SetConfig+0x680>)
 8014622:	4293      	cmp	r3, r2
 8014624:	d130      	bne.n	8014688 <UART_SetConfig+0x4a4>
 8014626:	4b8d      	ldr	r3, [pc, #564]	; (801485c <UART_SetConfig+0x678>)
 8014628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801462a:	f003 0307 	and.w	r3, r3, #7
 801462e:	2b05      	cmp	r3, #5
 8014630:	d826      	bhi.n	8014680 <UART_SetConfig+0x49c>
 8014632:	a201      	add	r2, pc, #4	; (adr r2, 8014638 <UART_SetConfig+0x454>)
 8014634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014638:	08014651 	.word	0x08014651
 801463c:	08014659 	.word	0x08014659
 8014640:	08014661 	.word	0x08014661
 8014644:	08014669 	.word	0x08014669
 8014648:	08014671 	.word	0x08014671
 801464c:	08014679 	.word	0x08014679
 8014650:	2300      	movs	r3, #0
 8014652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014656:	e17c      	b.n	8014952 <UART_SetConfig+0x76e>
 8014658:	2304      	movs	r3, #4
 801465a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801465e:	e178      	b.n	8014952 <UART_SetConfig+0x76e>
 8014660:	2308      	movs	r3, #8
 8014662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014666:	e174      	b.n	8014952 <UART_SetConfig+0x76e>
 8014668:	2310      	movs	r3, #16
 801466a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801466e:	e170      	b.n	8014952 <UART_SetConfig+0x76e>
 8014670:	2320      	movs	r3, #32
 8014672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014676:	e16c      	b.n	8014952 <UART_SetConfig+0x76e>
 8014678:	2340      	movs	r3, #64	; 0x40
 801467a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801467e:	e168      	b.n	8014952 <UART_SetConfig+0x76e>
 8014680:	2380      	movs	r3, #128	; 0x80
 8014682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014686:	e164      	b.n	8014952 <UART_SetConfig+0x76e>
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	4a76      	ldr	r2, [pc, #472]	; (8014868 <UART_SetConfig+0x684>)
 801468e:	4293      	cmp	r3, r2
 8014690:	d130      	bne.n	80146f4 <UART_SetConfig+0x510>
 8014692:	4b72      	ldr	r3, [pc, #456]	; (801485c <UART_SetConfig+0x678>)
 8014694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014696:	f003 0307 	and.w	r3, r3, #7
 801469a:	2b05      	cmp	r3, #5
 801469c:	d826      	bhi.n	80146ec <UART_SetConfig+0x508>
 801469e:	a201      	add	r2, pc, #4	; (adr r2, 80146a4 <UART_SetConfig+0x4c0>)
 80146a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146a4:	080146bd 	.word	0x080146bd
 80146a8:	080146c5 	.word	0x080146c5
 80146ac:	080146cd 	.word	0x080146cd
 80146b0:	080146d5 	.word	0x080146d5
 80146b4:	080146dd 	.word	0x080146dd
 80146b8:	080146e5 	.word	0x080146e5
 80146bc:	2300      	movs	r3, #0
 80146be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146c2:	e146      	b.n	8014952 <UART_SetConfig+0x76e>
 80146c4:	2304      	movs	r3, #4
 80146c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146ca:	e142      	b.n	8014952 <UART_SetConfig+0x76e>
 80146cc:	2308      	movs	r3, #8
 80146ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146d2:	e13e      	b.n	8014952 <UART_SetConfig+0x76e>
 80146d4:	2310      	movs	r3, #16
 80146d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146da:	e13a      	b.n	8014952 <UART_SetConfig+0x76e>
 80146dc:	2320      	movs	r3, #32
 80146de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146e2:	e136      	b.n	8014952 <UART_SetConfig+0x76e>
 80146e4:	2340      	movs	r3, #64	; 0x40
 80146e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146ea:	e132      	b.n	8014952 <UART_SetConfig+0x76e>
 80146ec:	2380      	movs	r3, #128	; 0x80
 80146ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146f2:	e12e      	b.n	8014952 <UART_SetConfig+0x76e>
 80146f4:	697b      	ldr	r3, [r7, #20]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	4a5c      	ldr	r2, [pc, #368]	; (801486c <UART_SetConfig+0x688>)
 80146fa:	4293      	cmp	r3, r2
 80146fc:	d176      	bne.n	80147ec <UART_SetConfig+0x608>
 80146fe:	4b57      	ldr	r3, [pc, #348]	; (801485c <UART_SetConfig+0x678>)
 8014700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014702:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014706:	2b28      	cmp	r3, #40	; 0x28
 8014708:	d86c      	bhi.n	80147e4 <UART_SetConfig+0x600>
 801470a:	a201      	add	r2, pc, #4	; (adr r2, 8014710 <UART_SetConfig+0x52c>)
 801470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014710:	080147b5 	.word	0x080147b5
 8014714:	080147e5 	.word	0x080147e5
 8014718:	080147e5 	.word	0x080147e5
 801471c:	080147e5 	.word	0x080147e5
 8014720:	080147e5 	.word	0x080147e5
 8014724:	080147e5 	.word	0x080147e5
 8014728:	080147e5 	.word	0x080147e5
 801472c:	080147e5 	.word	0x080147e5
 8014730:	080147bd 	.word	0x080147bd
 8014734:	080147e5 	.word	0x080147e5
 8014738:	080147e5 	.word	0x080147e5
 801473c:	080147e5 	.word	0x080147e5
 8014740:	080147e5 	.word	0x080147e5
 8014744:	080147e5 	.word	0x080147e5
 8014748:	080147e5 	.word	0x080147e5
 801474c:	080147e5 	.word	0x080147e5
 8014750:	080147c5 	.word	0x080147c5
 8014754:	080147e5 	.word	0x080147e5
 8014758:	080147e5 	.word	0x080147e5
 801475c:	080147e5 	.word	0x080147e5
 8014760:	080147e5 	.word	0x080147e5
 8014764:	080147e5 	.word	0x080147e5
 8014768:	080147e5 	.word	0x080147e5
 801476c:	080147e5 	.word	0x080147e5
 8014770:	080147cd 	.word	0x080147cd
 8014774:	080147e5 	.word	0x080147e5
 8014778:	080147e5 	.word	0x080147e5
 801477c:	080147e5 	.word	0x080147e5
 8014780:	080147e5 	.word	0x080147e5
 8014784:	080147e5 	.word	0x080147e5
 8014788:	080147e5 	.word	0x080147e5
 801478c:	080147e5 	.word	0x080147e5
 8014790:	080147d5 	.word	0x080147d5
 8014794:	080147e5 	.word	0x080147e5
 8014798:	080147e5 	.word	0x080147e5
 801479c:	080147e5 	.word	0x080147e5
 80147a0:	080147e5 	.word	0x080147e5
 80147a4:	080147e5 	.word	0x080147e5
 80147a8:	080147e5 	.word	0x080147e5
 80147ac:	080147e5 	.word	0x080147e5
 80147b0:	080147dd 	.word	0x080147dd
 80147b4:	2301      	movs	r3, #1
 80147b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147ba:	e0ca      	b.n	8014952 <UART_SetConfig+0x76e>
 80147bc:	2304      	movs	r3, #4
 80147be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147c2:	e0c6      	b.n	8014952 <UART_SetConfig+0x76e>
 80147c4:	2308      	movs	r3, #8
 80147c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147ca:	e0c2      	b.n	8014952 <UART_SetConfig+0x76e>
 80147cc:	2310      	movs	r3, #16
 80147ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147d2:	e0be      	b.n	8014952 <UART_SetConfig+0x76e>
 80147d4:	2320      	movs	r3, #32
 80147d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147da:	e0ba      	b.n	8014952 <UART_SetConfig+0x76e>
 80147dc:	2340      	movs	r3, #64	; 0x40
 80147de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147e2:	e0b6      	b.n	8014952 <UART_SetConfig+0x76e>
 80147e4:	2380      	movs	r3, #128	; 0x80
 80147e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147ea:	e0b2      	b.n	8014952 <UART_SetConfig+0x76e>
 80147ec:	697b      	ldr	r3, [r7, #20]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	4a1f      	ldr	r2, [pc, #124]	; (8014870 <UART_SetConfig+0x68c>)
 80147f2:	4293      	cmp	r3, r2
 80147f4:	d13e      	bne.n	8014874 <UART_SetConfig+0x690>
 80147f6:	4b19      	ldr	r3, [pc, #100]	; (801485c <UART_SetConfig+0x678>)
 80147f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147fa:	f003 0307 	and.w	r3, r3, #7
 80147fe:	2b05      	cmp	r3, #5
 8014800:	d826      	bhi.n	8014850 <UART_SetConfig+0x66c>
 8014802:	a201      	add	r2, pc, #4	; (adr r2, 8014808 <UART_SetConfig+0x624>)
 8014804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014808:	08014821 	.word	0x08014821
 801480c:	08014829 	.word	0x08014829
 8014810:	08014831 	.word	0x08014831
 8014814:	08014839 	.word	0x08014839
 8014818:	08014841 	.word	0x08014841
 801481c:	08014849 	.word	0x08014849
 8014820:	2300      	movs	r3, #0
 8014822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014826:	e094      	b.n	8014952 <UART_SetConfig+0x76e>
 8014828:	2304      	movs	r3, #4
 801482a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801482e:	e090      	b.n	8014952 <UART_SetConfig+0x76e>
 8014830:	2308      	movs	r3, #8
 8014832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014836:	e08c      	b.n	8014952 <UART_SetConfig+0x76e>
 8014838:	2310      	movs	r3, #16
 801483a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801483e:	e088      	b.n	8014952 <UART_SetConfig+0x76e>
 8014840:	2320      	movs	r3, #32
 8014842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014846:	e084      	b.n	8014952 <UART_SetConfig+0x76e>
 8014848:	2340      	movs	r3, #64	; 0x40
 801484a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801484e:	e080      	b.n	8014952 <UART_SetConfig+0x76e>
 8014850:	2380      	movs	r3, #128	; 0x80
 8014852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014856:	e07c      	b.n	8014952 <UART_SetConfig+0x76e>
 8014858:	40004400 	.word	0x40004400
 801485c:	58024400 	.word	0x58024400
 8014860:	40004800 	.word	0x40004800
 8014864:	40004c00 	.word	0x40004c00
 8014868:	40005000 	.word	0x40005000
 801486c:	40011400 	.word	0x40011400
 8014870:	40007800 	.word	0x40007800
 8014874:	697b      	ldr	r3, [r7, #20]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	4aae      	ldr	r2, [pc, #696]	; (8014b34 <UART_SetConfig+0x950>)
 801487a:	4293      	cmp	r3, r2
 801487c:	d130      	bne.n	80148e0 <UART_SetConfig+0x6fc>
 801487e:	4bae      	ldr	r3, [pc, #696]	; (8014b38 <UART_SetConfig+0x954>)
 8014880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014882:	f003 0307 	and.w	r3, r3, #7
 8014886:	2b05      	cmp	r3, #5
 8014888:	d826      	bhi.n	80148d8 <UART_SetConfig+0x6f4>
 801488a:	a201      	add	r2, pc, #4	; (adr r2, 8014890 <UART_SetConfig+0x6ac>)
 801488c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014890:	080148a9 	.word	0x080148a9
 8014894:	080148b1 	.word	0x080148b1
 8014898:	080148b9 	.word	0x080148b9
 801489c:	080148c1 	.word	0x080148c1
 80148a0:	080148c9 	.word	0x080148c9
 80148a4:	080148d1 	.word	0x080148d1
 80148a8:	2300      	movs	r3, #0
 80148aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80148ae:	e050      	b.n	8014952 <UART_SetConfig+0x76e>
 80148b0:	2304      	movs	r3, #4
 80148b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80148b6:	e04c      	b.n	8014952 <UART_SetConfig+0x76e>
 80148b8:	2308      	movs	r3, #8
 80148ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80148be:	e048      	b.n	8014952 <UART_SetConfig+0x76e>
 80148c0:	2310      	movs	r3, #16
 80148c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80148c6:	e044      	b.n	8014952 <UART_SetConfig+0x76e>
 80148c8:	2320      	movs	r3, #32
 80148ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80148ce:	e040      	b.n	8014952 <UART_SetConfig+0x76e>
 80148d0:	2340      	movs	r3, #64	; 0x40
 80148d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80148d6:	e03c      	b.n	8014952 <UART_SetConfig+0x76e>
 80148d8:	2380      	movs	r3, #128	; 0x80
 80148da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80148de:	e038      	b.n	8014952 <UART_SetConfig+0x76e>
 80148e0:	697b      	ldr	r3, [r7, #20]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	4a95      	ldr	r2, [pc, #596]	; (8014b3c <UART_SetConfig+0x958>)
 80148e6:	4293      	cmp	r3, r2
 80148e8:	d130      	bne.n	801494c <UART_SetConfig+0x768>
 80148ea:	4b93      	ldr	r3, [pc, #588]	; (8014b38 <UART_SetConfig+0x954>)
 80148ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80148ee:	f003 0307 	and.w	r3, r3, #7
 80148f2:	2b05      	cmp	r3, #5
 80148f4:	d826      	bhi.n	8014944 <UART_SetConfig+0x760>
 80148f6:	a201      	add	r2, pc, #4	; (adr r2, 80148fc <UART_SetConfig+0x718>)
 80148f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148fc:	08014915 	.word	0x08014915
 8014900:	0801491d 	.word	0x0801491d
 8014904:	08014925 	.word	0x08014925
 8014908:	0801492d 	.word	0x0801492d
 801490c:	08014935 	.word	0x08014935
 8014910:	0801493d 	.word	0x0801493d
 8014914:	2302      	movs	r3, #2
 8014916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801491a:	e01a      	b.n	8014952 <UART_SetConfig+0x76e>
 801491c:	2304      	movs	r3, #4
 801491e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014922:	e016      	b.n	8014952 <UART_SetConfig+0x76e>
 8014924:	2308      	movs	r3, #8
 8014926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801492a:	e012      	b.n	8014952 <UART_SetConfig+0x76e>
 801492c:	2310      	movs	r3, #16
 801492e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014932:	e00e      	b.n	8014952 <UART_SetConfig+0x76e>
 8014934:	2320      	movs	r3, #32
 8014936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801493a:	e00a      	b.n	8014952 <UART_SetConfig+0x76e>
 801493c:	2340      	movs	r3, #64	; 0x40
 801493e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014942:	e006      	b.n	8014952 <UART_SetConfig+0x76e>
 8014944:	2380      	movs	r3, #128	; 0x80
 8014946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801494a:	e002      	b.n	8014952 <UART_SetConfig+0x76e>
 801494c:	2380      	movs	r3, #128	; 0x80
 801494e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014952:	697b      	ldr	r3, [r7, #20]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	4a79      	ldr	r2, [pc, #484]	; (8014b3c <UART_SetConfig+0x958>)
 8014958:	4293      	cmp	r3, r2
 801495a:	f040 80f7 	bne.w	8014b4c <UART_SetConfig+0x968>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801495e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014962:	2b20      	cmp	r3, #32
 8014964:	dc46      	bgt.n	80149f4 <UART_SetConfig+0x810>
 8014966:	2b02      	cmp	r3, #2
 8014968:	db75      	blt.n	8014a56 <UART_SetConfig+0x872>
 801496a:	3b02      	subs	r3, #2
 801496c:	2b1e      	cmp	r3, #30
 801496e:	d872      	bhi.n	8014a56 <UART_SetConfig+0x872>
 8014970:	a201      	add	r2, pc, #4	; (adr r2, 8014978 <UART_SetConfig+0x794>)
 8014972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014976:	bf00      	nop
 8014978:	080149fb 	.word	0x080149fb
 801497c:	08014a57 	.word	0x08014a57
 8014980:	08014a03 	.word	0x08014a03
 8014984:	08014a57 	.word	0x08014a57
 8014988:	08014a57 	.word	0x08014a57
 801498c:	08014a57 	.word	0x08014a57
 8014990:	08014a13 	.word	0x08014a13
 8014994:	08014a57 	.word	0x08014a57
 8014998:	08014a57 	.word	0x08014a57
 801499c:	08014a57 	.word	0x08014a57
 80149a0:	08014a57 	.word	0x08014a57
 80149a4:	08014a57 	.word	0x08014a57
 80149a8:	08014a57 	.word	0x08014a57
 80149ac:	08014a57 	.word	0x08014a57
 80149b0:	08014a23 	.word	0x08014a23
 80149b4:	08014a57 	.word	0x08014a57
 80149b8:	08014a57 	.word	0x08014a57
 80149bc:	08014a57 	.word	0x08014a57
 80149c0:	08014a57 	.word	0x08014a57
 80149c4:	08014a57 	.word	0x08014a57
 80149c8:	08014a57 	.word	0x08014a57
 80149cc:	08014a57 	.word	0x08014a57
 80149d0:	08014a57 	.word	0x08014a57
 80149d4:	08014a57 	.word	0x08014a57
 80149d8:	08014a57 	.word	0x08014a57
 80149dc:	08014a57 	.word	0x08014a57
 80149e0:	08014a57 	.word	0x08014a57
 80149e4:	08014a57 	.word	0x08014a57
 80149e8:	08014a57 	.word	0x08014a57
 80149ec:	08014a57 	.word	0x08014a57
 80149f0:	08014a49 	.word	0x08014a49
 80149f4:	2b40      	cmp	r3, #64	; 0x40
 80149f6:	d02a      	beq.n	8014a4e <UART_SetConfig+0x86a>
 80149f8:	e02d      	b.n	8014a56 <UART_SetConfig+0x872>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80149fa:	f7f7 ffeb 	bl	800c9d4 <HAL_RCCEx_GetD3PCLK1Freq>
 80149fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014a00:	e02f      	b.n	8014a62 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014a06:	4618      	mov	r0, r3
 8014a08:	f7f7 fffa 	bl	800ca00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014a10:	e027      	b.n	8014a62 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014a12:	f107 0318 	add.w	r3, r7, #24
 8014a16:	4618      	mov	r0, r3
 8014a18:	f7f8 f946 	bl	800cca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014a1c:	69fb      	ldr	r3, [r7, #28]
 8014a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014a20:	e01f      	b.n	8014a62 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014a22:	4b45      	ldr	r3, [pc, #276]	; (8014b38 <UART_SetConfig+0x954>)
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	f003 0320 	and.w	r3, r3, #32
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d009      	beq.n	8014a42 <UART_SetConfig+0x85e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014a2e:	4b42      	ldr	r3, [pc, #264]	; (8014b38 <UART_SetConfig+0x954>)
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	08db      	lsrs	r3, r3, #3
 8014a34:	f003 0303 	and.w	r3, r3, #3
 8014a38:	4a41      	ldr	r2, [pc, #260]	; (8014b40 <UART_SetConfig+0x95c>)
 8014a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8014a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014a40:	e00f      	b.n	8014a62 <UART_SetConfig+0x87e>
          pclk = (uint32_t) HSI_VALUE;
 8014a42:	4b3f      	ldr	r3, [pc, #252]	; (8014b40 <UART_SetConfig+0x95c>)
 8014a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014a46:	e00c      	b.n	8014a62 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014a48:	4b3e      	ldr	r3, [pc, #248]	; (8014b44 <UART_SetConfig+0x960>)
 8014a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014a4c:	e009      	b.n	8014a62 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014a54:	e005      	b.n	8014a62 <UART_SetConfig+0x87e>
      default:
        pclk = 0U;
 8014a56:	2300      	movs	r3, #0
 8014a58:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014a5a:	2301      	movs	r3, #1
 8014a5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014a60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	f000 81e3 	beq.w	8014e30 <UART_SetConfig+0xc4c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8014a6a:	697b      	ldr	r3, [r7, #20]
 8014a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a6e:	4a36      	ldr	r2, [pc, #216]	; (8014b48 <UART_SetConfig+0x964>)
 8014a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a74:	461a      	mov	r2, r3
 8014a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a78:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a7c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	685a      	ldr	r2, [r3, #4]
 8014a82:	4613      	mov	r3, r2
 8014a84:	005b      	lsls	r3, r3, #1
 8014a86:	4413      	add	r3, r2
 8014a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	d305      	bcc.n	8014a9a <UART_SetConfig+0x8b6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8014a8e:	697b      	ldr	r3, [r7, #20]
 8014a90:	685b      	ldr	r3, [r3, #4]
 8014a92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d903      	bls.n	8014aa2 <UART_SetConfig+0x8be>
      {
        ret = HAL_ERROR;
 8014a9a:	2301      	movs	r3, #1
 8014a9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014aa0:	e1c6      	b.n	8014e30 <UART_SetConfig+0xc4c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	60bb      	str	r3, [r7, #8]
 8014aa8:	60fa      	str	r2, [r7, #12]
 8014aaa:	697b      	ldr	r3, [r7, #20]
 8014aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aae:	4a26      	ldr	r2, [pc, #152]	; (8014b48 <UART_SetConfig+0x964>)
 8014ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014ab4:	b29b      	uxth	r3, r3
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	603b      	str	r3, [r7, #0]
 8014aba:	607a      	str	r2, [r7, #4]
 8014abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014ac0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014ac4:	f7eb fc5c 	bl	8000380 <__aeabi_uldivmod>
 8014ac8:	4602      	mov	r2, r0
 8014aca:	460b      	mov	r3, r1
 8014acc:	4610      	mov	r0, r2
 8014ace:	4619      	mov	r1, r3
 8014ad0:	f04f 0200 	mov.w	r2, #0
 8014ad4:	f04f 0300 	mov.w	r3, #0
 8014ad8:	020b      	lsls	r3, r1, #8
 8014ada:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8014ade:	0202      	lsls	r2, r0, #8
 8014ae0:	6979      	ldr	r1, [r7, #20]
 8014ae2:	6849      	ldr	r1, [r1, #4]
 8014ae4:	0849      	lsrs	r1, r1, #1
 8014ae6:	2000      	movs	r0, #0
 8014ae8:	460c      	mov	r4, r1
 8014aea:	4605      	mov	r5, r0
 8014aec:	eb12 0804 	adds.w	r8, r2, r4
 8014af0:	eb43 0905 	adc.w	r9, r3, r5
 8014af4:	697b      	ldr	r3, [r7, #20]
 8014af6:	685b      	ldr	r3, [r3, #4]
 8014af8:	2200      	movs	r2, #0
 8014afa:	469a      	mov	sl, r3
 8014afc:	4693      	mov	fp, r2
 8014afe:	4652      	mov	r2, sl
 8014b00:	465b      	mov	r3, fp
 8014b02:	4640      	mov	r0, r8
 8014b04:	4649      	mov	r1, r9
 8014b06:	f7eb fc3b 	bl	8000380 <__aeabi_uldivmod>
 8014b0a:	4602      	mov	r2, r0
 8014b0c:	460b      	mov	r3, r1
 8014b0e:	4613      	mov	r3, r2
 8014b10:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014b18:	d308      	bcc.n	8014b2c <UART_SetConfig+0x948>
 8014b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014b20:	d204      	bcs.n	8014b2c <UART_SetConfig+0x948>
        {
          huart->Instance->BRR = usartdiv;
 8014b22:	697b      	ldr	r3, [r7, #20]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b28:	60da      	str	r2, [r3, #12]
 8014b2a:	e181      	b.n	8014e30 <UART_SetConfig+0xc4c>
        }
        else
        {
          ret = HAL_ERROR;
 8014b2c:	2301      	movs	r3, #1
 8014b2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014b32:	e17d      	b.n	8014e30 <UART_SetConfig+0xc4c>
 8014b34:	40007c00 	.word	0x40007c00
 8014b38:	58024400 	.word	0x58024400
 8014b3c:	58000c00 	.word	0x58000c00
 8014b40:	03d09000 	.word	0x03d09000
 8014b44:	003d0900 	.word	0x003d0900
 8014b48:	0801e078 	.word	0x0801e078
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014b4c:	697b      	ldr	r3, [r7, #20]
 8014b4e:	69db      	ldr	r3, [r3, #28]
 8014b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014b54:	f040 80be 	bne.w	8014cd4 <UART_SetConfig+0xaf0>
  {
    switch (clocksource)
 8014b58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014b5c:	2b20      	cmp	r3, #32
 8014b5e:	dc49      	bgt.n	8014bf4 <UART_SetConfig+0xa10>
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	db7c      	blt.n	8014c5e <UART_SetConfig+0xa7a>
 8014b64:	2b20      	cmp	r3, #32
 8014b66:	d87a      	bhi.n	8014c5e <UART_SetConfig+0xa7a>
 8014b68:	a201      	add	r2, pc, #4	; (adr r2, 8014b70 <UART_SetConfig+0x98c>)
 8014b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b6e:	bf00      	nop
 8014b70:	08014bfb 	.word	0x08014bfb
 8014b74:	08014c03 	.word	0x08014c03
 8014b78:	08014c5f 	.word	0x08014c5f
 8014b7c:	08014c5f 	.word	0x08014c5f
 8014b80:	08014c0b 	.word	0x08014c0b
 8014b84:	08014c5f 	.word	0x08014c5f
 8014b88:	08014c5f 	.word	0x08014c5f
 8014b8c:	08014c5f 	.word	0x08014c5f
 8014b90:	08014c1b 	.word	0x08014c1b
 8014b94:	08014c5f 	.word	0x08014c5f
 8014b98:	08014c5f 	.word	0x08014c5f
 8014b9c:	08014c5f 	.word	0x08014c5f
 8014ba0:	08014c5f 	.word	0x08014c5f
 8014ba4:	08014c5f 	.word	0x08014c5f
 8014ba8:	08014c5f 	.word	0x08014c5f
 8014bac:	08014c5f 	.word	0x08014c5f
 8014bb0:	08014c2b 	.word	0x08014c2b
 8014bb4:	08014c5f 	.word	0x08014c5f
 8014bb8:	08014c5f 	.word	0x08014c5f
 8014bbc:	08014c5f 	.word	0x08014c5f
 8014bc0:	08014c5f 	.word	0x08014c5f
 8014bc4:	08014c5f 	.word	0x08014c5f
 8014bc8:	08014c5f 	.word	0x08014c5f
 8014bcc:	08014c5f 	.word	0x08014c5f
 8014bd0:	08014c5f 	.word	0x08014c5f
 8014bd4:	08014c5f 	.word	0x08014c5f
 8014bd8:	08014c5f 	.word	0x08014c5f
 8014bdc:	08014c5f 	.word	0x08014c5f
 8014be0:	08014c5f 	.word	0x08014c5f
 8014be4:	08014c5f 	.word	0x08014c5f
 8014be8:	08014c5f 	.word	0x08014c5f
 8014bec:	08014c5f 	.word	0x08014c5f
 8014bf0:	08014c51 	.word	0x08014c51
 8014bf4:	2b40      	cmp	r3, #64	; 0x40
 8014bf6:	d02e      	beq.n	8014c56 <UART_SetConfig+0xa72>
 8014bf8:	e031      	b.n	8014c5e <UART_SetConfig+0xa7a>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014bfa:	f7f5 ffe1 	bl	800abc0 <HAL_RCC_GetPCLK1Freq>
 8014bfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014c00:	e033      	b.n	8014c6a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014c02:	f7f5 fff3 	bl	800abec <HAL_RCC_GetPCLK2Freq>
 8014c06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014c08:	e02f      	b.n	8014c6a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f7f7 fef6 	bl	800ca00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014c18:	e027      	b.n	8014c6a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014c1a:	f107 0318 	add.w	r3, r7, #24
 8014c1e:	4618      	mov	r0, r3
 8014c20:	f7f8 f842 	bl	800cca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014c24:	69fb      	ldr	r3, [r7, #28]
 8014c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014c28:	e01f      	b.n	8014c6a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014c2a:	4b8c      	ldr	r3, [pc, #560]	; (8014e5c <UART_SetConfig+0xc78>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	f003 0320 	and.w	r3, r3, #32
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d009      	beq.n	8014c4a <UART_SetConfig+0xa66>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014c36:	4b89      	ldr	r3, [pc, #548]	; (8014e5c <UART_SetConfig+0xc78>)
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	08db      	lsrs	r3, r3, #3
 8014c3c:	f003 0303 	and.w	r3, r3, #3
 8014c40:	4a87      	ldr	r2, [pc, #540]	; (8014e60 <UART_SetConfig+0xc7c>)
 8014c42:	fa22 f303 	lsr.w	r3, r2, r3
 8014c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014c48:	e00f      	b.n	8014c6a <UART_SetConfig+0xa86>
          pclk = (uint32_t) HSI_VALUE;
 8014c4a:	4b85      	ldr	r3, [pc, #532]	; (8014e60 <UART_SetConfig+0xc7c>)
 8014c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014c4e:	e00c      	b.n	8014c6a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014c50:	4b84      	ldr	r3, [pc, #528]	; (8014e64 <UART_SetConfig+0xc80>)
 8014c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014c54:	e009      	b.n	8014c6a <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014c5c:	e005      	b.n	8014c6a <UART_SetConfig+0xa86>
      default:
        pclk = 0U;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014c62:	2301      	movs	r3, #1
 8014c64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014c68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	f000 80df 	beq.w	8014e30 <UART_SetConfig+0xc4c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c76:	4a7c      	ldr	r2, [pc, #496]	; (8014e68 <UART_SetConfig+0xc84>)
 8014c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014c7c:	461a      	mov	r2, r3
 8014c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8014c84:	005a      	lsls	r2, r3, #1
 8014c86:	697b      	ldr	r3, [r7, #20]
 8014c88:	685b      	ldr	r3, [r3, #4]
 8014c8a:	085b      	lsrs	r3, r3, #1
 8014c8c:	441a      	add	r2, r3
 8014c8e:	697b      	ldr	r3, [r7, #20]
 8014c90:	685b      	ldr	r3, [r3, #4]
 8014c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8014c96:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c9a:	2b0f      	cmp	r3, #15
 8014c9c:	d916      	bls.n	8014ccc <UART_SetConfig+0xae8>
 8014c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014ca4:	d212      	bcs.n	8014ccc <UART_SetConfig+0xae8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ca8:	b29b      	uxth	r3, r3
 8014caa:	f023 030f 	bic.w	r3, r3, #15
 8014cae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cb2:	085b      	lsrs	r3, r3, #1
 8014cb4:	b29b      	uxth	r3, r3
 8014cb6:	f003 0307 	and.w	r3, r3, #7
 8014cba:	b29a      	uxth	r2, r3
 8014cbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014cbe:	4313      	orrs	r3, r2
 8014cc0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8014cc2:	697b      	ldr	r3, [r7, #20]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014cc8:	60da      	str	r2, [r3, #12]
 8014cca:	e0b1      	b.n	8014e30 <UART_SetConfig+0xc4c>
      }
      else
      {
        ret = HAL_ERROR;
 8014ccc:	2301      	movs	r3, #1
 8014cce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014cd2:	e0ad      	b.n	8014e30 <UART_SetConfig+0xc4c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8014cd4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014cd8:	2b20      	cmp	r3, #32
 8014cda:	dc49      	bgt.n	8014d70 <UART_SetConfig+0xb8c>
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	db7c      	blt.n	8014dda <UART_SetConfig+0xbf6>
 8014ce0:	2b20      	cmp	r3, #32
 8014ce2:	d87a      	bhi.n	8014dda <UART_SetConfig+0xbf6>
 8014ce4:	a201      	add	r2, pc, #4	; (adr r2, 8014cec <UART_SetConfig+0xb08>)
 8014ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cea:	bf00      	nop
 8014cec:	08014d77 	.word	0x08014d77
 8014cf0:	08014d7f 	.word	0x08014d7f
 8014cf4:	08014ddb 	.word	0x08014ddb
 8014cf8:	08014ddb 	.word	0x08014ddb
 8014cfc:	08014d87 	.word	0x08014d87
 8014d00:	08014ddb 	.word	0x08014ddb
 8014d04:	08014ddb 	.word	0x08014ddb
 8014d08:	08014ddb 	.word	0x08014ddb
 8014d0c:	08014d97 	.word	0x08014d97
 8014d10:	08014ddb 	.word	0x08014ddb
 8014d14:	08014ddb 	.word	0x08014ddb
 8014d18:	08014ddb 	.word	0x08014ddb
 8014d1c:	08014ddb 	.word	0x08014ddb
 8014d20:	08014ddb 	.word	0x08014ddb
 8014d24:	08014ddb 	.word	0x08014ddb
 8014d28:	08014ddb 	.word	0x08014ddb
 8014d2c:	08014da7 	.word	0x08014da7
 8014d30:	08014ddb 	.word	0x08014ddb
 8014d34:	08014ddb 	.word	0x08014ddb
 8014d38:	08014ddb 	.word	0x08014ddb
 8014d3c:	08014ddb 	.word	0x08014ddb
 8014d40:	08014ddb 	.word	0x08014ddb
 8014d44:	08014ddb 	.word	0x08014ddb
 8014d48:	08014ddb 	.word	0x08014ddb
 8014d4c:	08014ddb 	.word	0x08014ddb
 8014d50:	08014ddb 	.word	0x08014ddb
 8014d54:	08014ddb 	.word	0x08014ddb
 8014d58:	08014ddb 	.word	0x08014ddb
 8014d5c:	08014ddb 	.word	0x08014ddb
 8014d60:	08014ddb 	.word	0x08014ddb
 8014d64:	08014ddb 	.word	0x08014ddb
 8014d68:	08014ddb 	.word	0x08014ddb
 8014d6c:	08014dcd 	.word	0x08014dcd
 8014d70:	2b40      	cmp	r3, #64	; 0x40
 8014d72:	d02e      	beq.n	8014dd2 <UART_SetConfig+0xbee>
 8014d74:	e031      	b.n	8014dda <UART_SetConfig+0xbf6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014d76:	f7f5 ff23 	bl	800abc0 <HAL_RCC_GetPCLK1Freq>
 8014d7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014d7c:	e033      	b.n	8014de6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014d7e:	f7f5 ff35 	bl	800abec <HAL_RCC_GetPCLK2Freq>
 8014d82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014d84:	e02f      	b.n	8014de6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f7f7 fe38 	bl	800ca00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014d94:	e027      	b.n	8014de6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014d96:	f107 0318 	add.w	r3, r7, #24
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	f7f7 ff84 	bl	800cca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014da0:	69fb      	ldr	r3, [r7, #28]
 8014da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014da4:	e01f      	b.n	8014de6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014da6:	4b2d      	ldr	r3, [pc, #180]	; (8014e5c <UART_SetConfig+0xc78>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	f003 0320 	and.w	r3, r3, #32
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d009      	beq.n	8014dc6 <UART_SetConfig+0xbe2>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014db2:	4b2a      	ldr	r3, [pc, #168]	; (8014e5c <UART_SetConfig+0xc78>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	08db      	lsrs	r3, r3, #3
 8014db8:	f003 0303 	and.w	r3, r3, #3
 8014dbc:	4a28      	ldr	r2, [pc, #160]	; (8014e60 <UART_SetConfig+0xc7c>)
 8014dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8014dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014dc4:	e00f      	b.n	8014de6 <UART_SetConfig+0xc02>
          pclk = (uint32_t) HSI_VALUE;
 8014dc6:	4b26      	ldr	r3, [pc, #152]	; (8014e60 <UART_SetConfig+0xc7c>)
 8014dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014dca:	e00c      	b.n	8014de6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014dcc:	4b25      	ldr	r3, [pc, #148]	; (8014e64 <UART_SetConfig+0xc80>)
 8014dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014dd0:	e009      	b.n	8014de6 <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014dd8:	e005      	b.n	8014de6 <UART_SetConfig+0xc02>
      default:
        pclk = 0U;
 8014dda:	2300      	movs	r3, #0
 8014ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014dde:	2301      	movs	r3, #1
 8014de0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014de4:	bf00      	nop
    }

    if (pclk != 0U)
 8014de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d021      	beq.n	8014e30 <UART_SetConfig+0xc4c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014dec:	697b      	ldr	r3, [r7, #20]
 8014dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014df0:	4a1d      	ldr	r2, [pc, #116]	; (8014e68 <UART_SetConfig+0xc84>)
 8014df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014df6:	461a      	mov	r2, r3
 8014df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014dfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8014dfe:	697b      	ldr	r3, [r7, #20]
 8014e00:	685b      	ldr	r3, [r3, #4]
 8014e02:	085b      	lsrs	r3, r3, #1
 8014e04:	441a      	add	r2, r3
 8014e06:	697b      	ldr	r3, [r7, #20]
 8014e08:	685b      	ldr	r3, [r3, #4]
 8014e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e0e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e12:	2b0f      	cmp	r3, #15
 8014e14:	d909      	bls.n	8014e2a <UART_SetConfig+0xc46>
 8014e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e1c:	d205      	bcs.n	8014e2a <UART_SetConfig+0xc46>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e20:	b29a      	uxth	r2, r3
 8014e22:	697b      	ldr	r3, [r7, #20]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	60da      	str	r2, [r3, #12]
 8014e28:	e002      	b.n	8014e30 <UART_SetConfig+0xc4c>
      }
      else
      {
        ret = HAL_ERROR;
 8014e2a:	2301      	movs	r3, #1
 8014e2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014e30:	697b      	ldr	r3, [r7, #20]
 8014e32:	2201      	movs	r2, #1
 8014e34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	2201      	movs	r2, #1
 8014e3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014e40:	697b      	ldr	r3, [r7, #20]
 8014e42:	2200      	movs	r2, #0
 8014e44:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	2200      	movs	r2, #0
 8014e4a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8014e4c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3748      	adds	r7, #72	; 0x48
 8014e54:	46bd      	mov	sp, r7
 8014e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014e5a:	bf00      	nop
 8014e5c:	58024400 	.word	0x58024400
 8014e60:	03d09000 	.word	0x03d09000
 8014e64:	003d0900 	.word	0x003d0900
 8014e68:	0801e078 	.word	0x0801e078

08014e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b082      	sub	sp, #8
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e78:	2bff      	cmp	r3, #255	; 0xff
 8014e7a:	d904      	bls.n	8014e86 <UART_AdvFeatureConfig+0x1a>
 8014e7c:	f640 41da 	movw	r1, #3290	; 0xcda
 8014e80:	4893      	ldr	r0, [pc, #588]	; (80150d0 <UART_AdvFeatureConfig+0x264>)
 8014e82:	f7ec fdf6 	bl	8001a72 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e8a:	f003 0301 	and.w	r3, r3, #1
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d018      	beq.n	8014ec4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d009      	beq.n	8014eae <UART_AdvFeatureConfig+0x42>
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014ea2:	d004      	beq.n	8014eae <UART_AdvFeatureConfig+0x42>
 8014ea4:	f640 41df 	movw	r1, #3295	; 0xcdf
 8014ea8:	4889      	ldr	r0, [pc, #548]	; (80150d0 <UART_AdvFeatureConfig+0x264>)
 8014eaa:	f7ec fde2 	bl	8001a72 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	685b      	ldr	r3, [r3, #4]
 8014eb4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	430a      	orrs	r2, r1
 8014ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ec8:	f003 0302 	and.w	r3, r3, #2
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d018      	beq.n	8014f02 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d009      	beq.n	8014eec <UART_AdvFeatureConfig+0x80>
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014ee0:	d004      	beq.n	8014eec <UART_AdvFeatureConfig+0x80>
 8014ee2:	f640 41e6 	movw	r1, #3302	; 0xce6
 8014ee6:	487a      	ldr	r0, [pc, #488]	; (80150d0 <UART_AdvFeatureConfig+0x264>)
 8014ee8:	f7ec fdc3 	bl	8001a72 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	685b      	ldr	r3, [r3, #4]
 8014ef2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	430a      	orrs	r2, r1
 8014f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f06:	f003 0304 	and.w	r3, r3, #4
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d018      	beq.n	8014f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d009      	beq.n	8014f2a <UART_AdvFeatureConfig+0xbe>
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8014f1e:	d004      	beq.n	8014f2a <UART_AdvFeatureConfig+0xbe>
 8014f20:	f640 41ed 	movw	r1, #3309	; 0xced
 8014f24:	486a      	ldr	r0, [pc, #424]	; (80150d0 <UART_AdvFeatureConfig+0x264>)
 8014f26:	f7ec fda4 	bl	8001a72 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	685b      	ldr	r3, [r3, #4]
 8014f30:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	430a      	orrs	r2, r1
 8014f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f44:	f003 0308 	and.w	r3, r3, #8
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d018      	beq.n	8014f7e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d009      	beq.n	8014f68 <UART_AdvFeatureConfig+0xfc>
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014f5c:	d004      	beq.n	8014f68 <UART_AdvFeatureConfig+0xfc>
 8014f5e:	f640 41f4 	movw	r1, #3316	; 0xcf4
 8014f62:	485b      	ldr	r0, [pc, #364]	; (80150d0 <UART_AdvFeatureConfig+0x264>)
 8014f64:	f7ec fd85 	bl	8001a72 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	685b      	ldr	r3, [r3, #4]
 8014f6e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	430a      	orrs	r2, r1
 8014f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f82:	f003 0310 	and.w	r3, r3, #16
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d018      	beq.n	8014fbc <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d009      	beq.n	8014fa6 <UART_AdvFeatureConfig+0x13a>
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014f9a:	d004      	beq.n	8014fa6 <UART_AdvFeatureConfig+0x13a>
 8014f9c:	f640 41fb 	movw	r1, #3323	; 0xcfb
 8014fa0:	484b      	ldr	r0, [pc, #300]	; (80150d0 <UART_AdvFeatureConfig+0x264>)
 8014fa2:	f7ec fd66 	bl	8001a72 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	689b      	ldr	r3, [r3, #8]
 8014fac:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	430a      	orrs	r2, r1
 8014fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fc0:	f003 0320 	and.w	r3, r3, #32
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d018      	beq.n	8014ffa <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d009      	beq.n	8014fe4 <UART_AdvFeatureConfig+0x178>
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014fd8:	d004      	beq.n	8014fe4 <UART_AdvFeatureConfig+0x178>
 8014fda:	f640 5102 	movw	r1, #3330	; 0xd02
 8014fde:	483c      	ldr	r0, [pc, #240]	; (80150d0 <UART_AdvFeatureConfig+0x264>)
 8014fe0:	f7ec fd47 	bl	8001a72 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	689b      	ldr	r3, [r3, #8]
 8014fea:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	430a      	orrs	r2, r1
 8014ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015002:	2b00      	cmp	r3, #0
 8015004:	f000 8081 	beq.w	801510a <UART_AdvFeatureConfig+0x29e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	4a31      	ldr	r2, [pc, #196]	; (80150d4 <UART_AdvFeatureConfig+0x268>)
 801500e:	4293      	cmp	r3, r2
 8015010:	d027      	beq.n	8015062 <UART_AdvFeatureConfig+0x1f6>
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	4a30      	ldr	r2, [pc, #192]	; (80150d8 <UART_AdvFeatureConfig+0x26c>)
 8015018:	4293      	cmp	r3, r2
 801501a:	d022      	beq.n	8015062 <UART_AdvFeatureConfig+0x1f6>
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	4a2e      	ldr	r2, [pc, #184]	; (80150dc <UART_AdvFeatureConfig+0x270>)
 8015022:	4293      	cmp	r3, r2
 8015024:	d01d      	beq.n	8015062 <UART_AdvFeatureConfig+0x1f6>
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	4a2d      	ldr	r2, [pc, #180]	; (80150e0 <UART_AdvFeatureConfig+0x274>)
 801502c:	4293      	cmp	r3, r2
 801502e:	d018      	beq.n	8015062 <UART_AdvFeatureConfig+0x1f6>
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	4a2b      	ldr	r2, [pc, #172]	; (80150e4 <UART_AdvFeatureConfig+0x278>)
 8015036:	4293      	cmp	r3, r2
 8015038:	d013      	beq.n	8015062 <UART_AdvFeatureConfig+0x1f6>
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	4a2a      	ldr	r2, [pc, #168]	; (80150e8 <UART_AdvFeatureConfig+0x27c>)
 8015040:	4293      	cmp	r3, r2
 8015042:	d00e      	beq.n	8015062 <UART_AdvFeatureConfig+0x1f6>
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	4a28      	ldr	r2, [pc, #160]	; (80150ec <UART_AdvFeatureConfig+0x280>)
 801504a:	4293      	cmp	r3, r2
 801504c:	d009      	beq.n	8015062 <UART_AdvFeatureConfig+0x1f6>
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	4a27      	ldr	r2, [pc, #156]	; (80150f0 <UART_AdvFeatureConfig+0x284>)
 8015054:	4293      	cmp	r3, r2
 8015056:	d004      	beq.n	8015062 <UART_AdvFeatureConfig+0x1f6>
 8015058:	f640 5109 	movw	r1, #3337	; 0xd09
 801505c:	481c      	ldr	r0, [pc, #112]	; (80150d0 <UART_AdvFeatureConfig+0x264>)
 801505e:	f7ec fd08 	bl	8001a72 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015066:	2b00      	cmp	r3, #0
 8015068:	d009      	beq.n	801507e <UART_AdvFeatureConfig+0x212>
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801506e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015072:	d004      	beq.n	801507e <UART_AdvFeatureConfig+0x212>
 8015074:	f640 510a 	movw	r1, #3338	; 0xd0a
 8015078:	4815      	ldr	r0, [pc, #84]	; (80150d0 <UART_AdvFeatureConfig+0x264>)
 801507a:	f7ec fcfa 	bl	8001a72 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	685b      	ldr	r3, [r3, #4]
 8015084:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	430a      	orrs	r2, r1
 8015092:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801509c:	d135      	bne.n	801510a <UART_AdvFeatureConfig+0x29e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d026      	beq.n	80150f4 <UART_AdvFeatureConfig+0x288>
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80150aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80150ae:	d021      	beq.n	80150f4 <UART_AdvFeatureConfig+0x288>
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80150b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80150b8:	d01c      	beq.n	80150f4 <UART_AdvFeatureConfig+0x288>
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80150be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80150c2:	d017      	beq.n	80150f4 <UART_AdvFeatureConfig+0x288>
 80150c4:	f640 510f 	movw	r1, #3343	; 0xd0f
 80150c8:	4801      	ldr	r0, [pc, #4]	; (80150d0 <UART_AdvFeatureConfig+0x264>)
 80150ca:	f7ec fcd2 	bl	8001a72 <assert_failed>
 80150ce:	e011      	b.n	80150f4 <UART_AdvFeatureConfig+0x288>
 80150d0:	0801df58 	.word	0x0801df58
 80150d4:	40011000 	.word	0x40011000
 80150d8:	40004400 	.word	0x40004400
 80150dc:	40004800 	.word	0x40004800
 80150e0:	40004c00 	.word	0x40004c00
 80150e4:	40005000 	.word	0x40005000
 80150e8:	40011400 	.word	0x40011400
 80150ec:	40007800 	.word	0x40007800
 80150f0:	40007c00 	.word	0x40007c00
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	685b      	ldr	r3, [r3, #4]
 80150fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	430a      	orrs	r2, r1
 8015108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801510e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015112:	2b00      	cmp	r3, #0
 8015114:	d018      	beq.n	8015148 <UART_AdvFeatureConfig+0x2dc>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801511a:	2b00      	cmp	r3, #0
 801511c:	d009      	beq.n	8015132 <UART_AdvFeatureConfig+0x2c6>
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015122:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8015126:	d004      	beq.n	8015132 <UART_AdvFeatureConfig+0x2c6>
 8015128:	f640 5117 	movw	r1, #3351	; 0xd17
 801512c:	4808      	ldr	r0, [pc, #32]	; (8015150 <UART_AdvFeatureConfig+0x2e4>)
 801512e:	f7ec fca0 	bl	8001a72 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	685b      	ldr	r3, [r3, #4]
 8015138:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	430a      	orrs	r2, r1
 8015146:	605a      	str	r2, [r3, #4]
  }
}
 8015148:	bf00      	nop
 801514a:	3708      	adds	r7, #8
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}
 8015150:	0801df58 	.word	0x0801df58

08015154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b086      	sub	sp, #24
 8015158:	af02      	add	r7, sp, #8
 801515a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	2200      	movs	r2, #0
 8015160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015164:	f7ee f9f8 	bl	8003558 <HAL_GetTick>
 8015168:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	f003 0308 	and.w	r3, r3, #8
 8015174:	2b08      	cmp	r3, #8
 8015176:	d10e      	bne.n	8015196 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015178:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801517c:	9300      	str	r3, [sp, #0]
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	2200      	movs	r2, #0
 8015182:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015186:	6878      	ldr	r0, [r7, #4]
 8015188:	f000 f82f 	bl	80151ea <UART_WaitOnFlagUntilTimeout>
 801518c:	4603      	mov	r3, r0
 801518e:	2b00      	cmp	r3, #0
 8015190:	d001      	beq.n	8015196 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015192:	2303      	movs	r3, #3
 8015194:	e025      	b.n	80151e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	f003 0304 	and.w	r3, r3, #4
 80151a0:	2b04      	cmp	r3, #4
 80151a2:	d10e      	bne.n	80151c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80151a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80151a8:	9300      	str	r3, [sp, #0]
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	2200      	movs	r2, #0
 80151ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	f000 f819 	bl	80151ea <UART_WaitOnFlagUntilTimeout>
 80151b8:	4603      	mov	r3, r0
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d001      	beq.n	80151c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80151be:	2303      	movs	r3, #3
 80151c0:	e00f      	b.n	80151e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	2220      	movs	r2, #32
 80151c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	2220      	movs	r2, #32
 80151ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	2200      	movs	r2, #0
 80151d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	2200      	movs	r2, #0
 80151dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80151e0:	2300      	movs	r3, #0
}
 80151e2:	4618      	mov	r0, r3
 80151e4:	3710      	adds	r7, #16
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}

080151ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80151ea:	b580      	push	{r7, lr}
 80151ec:	b09c      	sub	sp, #112	; 0x70
 80151ee:	af00      	add	r7, sp, #0
 80151f0:	60f8      	str	r0, [r7, #12]
 80151f2:	60b9      	str	r1, [r7, #8]
 80151f4:	603b      	str	r3, [r7, #0]
 80151f6:	4613      	mov	r3, r2
 80151f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80151fa:	e0a9      	b.n	8015350 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80151fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80151fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015202:	f000 80a5 	beq.w	8015350 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015206:	f7ee f9a7 	bl	8003558 <HAL_GetTick>
 801520a:	4602      	mov	r2, r0
 801520c:	683b      	ldr	r3, [r7, #0]
 801520e:	1ad3      	subs	r3, r2, r3
 8015210:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015212:	429a      	cmp	r2, r3
 8015214:	d302      	bcc.n	801521c <UART_WaitOnFlagUntilTimeout+0x32>
 8015216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015218:	2b00      	cmp	r3, #0
 801521a:	d140      	bne.n	801529e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015224:	e853 3f00 	ldrex	r3, [r3]
 8015228:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801522a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801522c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8015230:	667b      	str	r3, [r7, #100]	; 0x64
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	461a      	mov	r2, r3
 8015238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801523a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801523c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801523e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015240:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015242:	e841 2300 	strex	r3, r2, [r1]
 8015246:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801524a:	2b00      	cmp	r3, #0
 801524c:	d1e6      	bne.n	801521c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	3308      	adds	r3, #8
 8015254:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015258:	e853 3f00 	ldrex	r3, [r3]
 801525c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801525e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015260:	f023 0301 	bic.w	r3, r3, #1
 8015264:	663b      	str	r3, [r7, #96]	; 0x60
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	3308      	adds	r3, #8
 801526c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801526e:	64ba      	str	r2, [r7, #72]	; 0x48
 8015270:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015272:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015276:	e841 2300 	strex	r3, r2, [r1]
 801527a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801527c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801527e:	2b00      	cmp	r3, #0
 8015280:	d1e5      	bne.n	801524e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	2220      	movs	r2, #32
 8015286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	2220      	movs	r2, #32
 801528e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	2200      	movs	r2, #0
 8015296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801529a:	2303      	movs	r3, #3
 801529c:	e069      	b.n	8015372 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	f003 0304 	and.w	r3, r3, #4
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d051      	beq.n	8015350 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	69db      	ldr	r3, [r3, #28]
 80152b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80152b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80152ba:	d149      	bne.n	8015350 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80152c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80152cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152ce:	e853 3f00 	ldrex	r3, [r3]
 80152d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80152d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80152da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	461a      	mov	r2, r3
 80152e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80152e4:	637b      	str	r3, [r7, #52]	; 0x34
 80152e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80152ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80152ec:	e841 2300 	strex	r3, r2, [r1]
 80152f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80152f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d1e6      	bne.n	80152c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	3308      	adds	r3, #8
 80152fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015300:	697b      	ldr	r3, [r7, #20]
 8015302:	e853 3f00 	ldrex	r3, [r3]
 8015306:	613b      	str	r3, [r7, #16]
   return(result);
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	f023 0301 	bic.w	r3, r3, #1
 801530e:	66bb      	str	r3, [r7, #104]	; 0x68
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	3308      	adds	r3, #8
 8015316:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015318:	623a      	str	r2, [r7, #32]
 801531a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801531c:	69f9      	ldr	r1, [r7, #28]
 801531e:	6a3a      	ldr	r2, [r7, #32]
 8015320:	e841 2300 	strex	r3, r2, [r1]
 8015324:	61bb      	str	r3, [r7, #24]
   return(result);
 8015326:	69bb      	ldr	r3, [r7, #24]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d1e5      	bne.n	80152f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	2220      	movs	r2, #32
 8015330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	2220      	movs	r2, #32
 8015338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	2220      	movs	r2, #32
 8015340:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	2200      	movs	r2, #0
 8015348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801534c:	2303      	movs	r3, #3
 801534e:	e010      	b.n	8015372 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	69da      	ldr	r2, [r3, #28]
 8015356:	68bb      	ldr	r3, [r7, #8]
 8015358:	4013      	ands	r3, r2
 801535a:	68ba      	ldr	r2, [r7, #8]
 801535c:	429a      	cmp	r2, r3
 801535e:	bf0c      	ite	eq
 8015360:	2301      	moveq	r3, #1
 8015362:	2300      	movne	r3, #0
 8015364:	b2db      	uxtb	r3, r3
 8015366:	461a      	mov	r2, r3
 8015368:	79fb      	ldrb	r3, [r7, #7]
 801536a:	429a      	cmp	r2, r3
 801536c:	f43f af46 	beq.w	80151fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015370:	2300      	movs	r3, #0
}
 8015372:	4618      	mov	r0, r3
 8015374:	3770      	adds	r7, #112	; 0x70
 8015376:	46bd      	mov	sp, r7
 8015378:	bd80      	pop	{r7, pc}
	...

0801537c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801537c:	b480      	push	{r7}
 801537e:	b095      	sub	sp, #84	; 0x54
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801538a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801538c:	e853 3f00 	ldrex	r3, [r3]
 8015390:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015394:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015398:	64fb      	str	r3, [r7, #76]	; 0x4c
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	461a      	mov	r2, r3
 80153a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80153a2:	643b      	str	r3, [r7, #64]	; 0x40
 80153a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80153a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80153aa:	e841 2300 	strex	r3, r2, [r1]
 80153ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80153b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d1e6      	bne.n	8015384 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	3308      	adds	r3, #8
 80153bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153be:	6a3b      	ldr	r3, [r7, #32]
 80153c0:	e853 3f00 	ldrex	r3, [r3]
 80153c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80153c6:	69fa      	ldr	r2, [r7, #28]
 80153c8:	4b1e      	ldr	r3, [pc, #120]	; (8015444 <UART_EndRxTransfer+0xc8>)
 80153ca:	4013      	ands	r3, r2
 80153cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	3308      	adds	r3, #8
 80153d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80153d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80153d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80153dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80153de:	e841 2300 	strex	r3, r2, [r1]
 80153e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80153e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d1e5      	bne.n	80153b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153ee:	2b01      	cmp	r3, #1
 80153f0:	d118      	bne.n	8015424 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	e853 3f00 	ldrex	r3, [r3]
 80153fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8015400:	68bb      	ldr	r3, [r7, #8]
 8015402:	f023 0310 	bic.w	r3, r3, #16
 8015406:	647b      	str	r3, [r7, #68]	; 0x44
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	461a      	mov	r2, r3
 801540e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015410:	61bb      	str	r3, [r7, #24]
 8015412:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015414:	6979      	ldr	r1, [r7, #20]
 8015416:	69ba      	ldr	r2, [r7, #24]
 8015418:	e841 2300 	strex	r3, r2, [r1]
 801541c:	613b      	str	r3, [r7, #16]
   return(result);
 801541e:	693b      	ldr	r3, [r7, #16]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d1e6      	bne.n	80153f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	2220      	movs	r2, #32
 8015428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	2200      	movs	r2, #0
 8015430:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	2200      	movs	r2, #0
 8015436:	671a      	str	r2, [r3, #112]	; 0x70
}
 8015438:	bf00      	nop
 801543a:	3754      	adds	r7, #84	; 0x54
 801543c:	46bd      	mov	sp, r7
 801543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015442:	4770      	bx	lr
 8015444:	effffffe 	.word	0xeffffffe

08015448 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b084      	sub	sp, #16
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015454:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	2200      	movs	r2, #0
 801545a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	2200      	movs	r2, #0
 8015462:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015466:	68f8      	ldr	r0, [r7, #12]
 8015468:	f7fe fea6 	bl	80141b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801546c:	bf00      	nop
 801546e:	3710      	adds	r7, #16
 8015470:	46bd      	mov	sp, r7
 8015472:	bd80      	pop	{r7, pc}

08015474 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b088      	sub	sp, #32
 8015478:	af00      	add	r7, sp, #0
 801547a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	e853 3f00 	ldrex	r3, [r3]
 8015488:	60bb      	str	r3, [r7, #8]
   return(result);
 801548a:	68bb      	ldr	r3, [r7, #8]
 801548c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015490:	61fb      	str	r3, [r7, #28]
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	461a      	mov	r2, r3
 8015498:	69fb      	ldr	r3, [r7, #28]
 801549a:	61bb      	str	r3, [r7, #24]
 801549c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801549e:	6979      	ldr	r1, [r7, #20]
 80154a0:	69ba      	ldr	r2, [r7, #24]
 80154a2:	e841 2300 	strex	r3, r2, [r1]
 80154a6:	613b      	str	r3, [r7, #16]
   return(result);
 80154a8:	693b      	ldr	r3, [r7, #16]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d1e6      	bne.n	801547c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	2220      	movs	r2, #32
 80154b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	2200      	movs	r2, #0
 80154ba:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f7fe fe71 	bl	80141a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80154c2:	bf00      	nop
 80154c4:	3720      	adds	r7, #32
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bd80      	pop	{r7, pc}

080154ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80154ca:	b480      	push	{r7}
 80154cc:	b083      	sub	sp, #12
 80154ce:	af00      	add	r7, sp, #0
 80154d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80154d2:	bf00      	nop
 80154d4:	370c      	adds	r7, #12
 80154d6:	46bd      	mov	sp, r7
 80154d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154dc:	4770      	bx	lr

080154de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80154de:	b480      	push	{r7}
 80154e0:	b083      	sub	sp, #12
 80154e2:	af00      	add	r7, sp, #0
 80154e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80154e6:	bf00      	nop
 80154e8:	370c      	adds	r7, #12
 80154ea:	46bd      	mov	sp, r7
 80154ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f0:	4770      	bx	lr

080154f2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80154f2:	b480      	push	{r7}
 80154f4:	b083      	sub	sp, #12
 80154f6:	af00      	add	r7, sp, #0
 80154f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80154fa:	bf00      	nop
 80154fc:	370c      	adds	r7, #12
 80154fe:	46bd      	mov	sp, r7
 8015500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015504:	4770      	bx	lr
	...

08015508 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b084      	sub	sp, #16
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	4a2e      	ldr	r2, [pc, #184]	; (80155d0 <HAL_UARTEx_DisableFifoMode+0xc8>)
 8015516:	4293      	cmp	r3, r2
 8015518:	d027      	beq.n	801556a <HAL_UARTEx_DisableFifoMode+0x62>
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	4a2d      	ldr	r2, [pc, #180]	; (80155d4 <HAL_UARTEx_DisableFifoMode+0xcc>)
 8015520:	4293      	cmp	r3, r2
 8015522:	d022      	beq.n	801556a <HAL_UARTEx_DisableFifoMode+0x62>
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	4a2b      	ldr	r2, [pc, #172]	; (80155d8 <HAL_UARTEx_DisableFifoMode+0xd0>)
 801552a:	4293      	cmp	r3, r2
 801552c:	d01d      	beq.n	801556a <HAL_UARTEx_DisableFifoMode+0x62>
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	4a2a      	ldr	r2, [pc, #168]	; (80155dc <HAL_UARTEx_DisableFifoMode+0xd4>)
 8015534:	4293      	cmp	r3, r2
 8015536:	d018      	beq.n	801556a <HAL_UARTEx_DisableFifoMode+0x62>
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	4a28      	ldr	r2, [pc, #160]	; (80155e0 <HAL_UARTEx_DisableFifoMode+0xd8>)
 801553e:	4293      	cmp	r3, r2
 8015540:	d013      	beq.n	801556a <HAL_UARTEx_DisableFifoMode+0x62>
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	4a27      	ldr	r2, [pc, #156]	; (80155e4 <HAL_UARTEx_DisableFifoMode+0xdc>)
 8015548:	4293      	cmp	r3, r2
 801554a:	d00e      	beq.n	801556a <HAL_UARTEx_DisableFifoMode+0x62>
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	4a25      	ldr	r2, [pc, #148]	; (80155e8 <HAL_UARTEx_DisableFifoMode+0xe0>)
 8015552:	4293      	cmp	r3, r2
 8015554:	d009      	beq.n	801556a <HAL_UARTEx_DisableFifoMode+0x62>
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	4a24      	ldr	r2, [pc, #144]	; (80155ec <HAL_UARTEx_DisableFifoMode+0xe4>)
 801555c:	4293      	cmp	r3, r2
 801555e:	d004      	beq.n	801556a <HAL_UARTEx_DisableFifoMode+0x62>
 8015560:	f44f 710d 	mov.w	r1, #564	; 0x234
 8015564:	4822      	ldr	r0, [pc, #136]	; (80155f0 <HAL_UARTEx_DisableFifoMode+0xe8>)
 8015566:	f7ec fa84 	bl	8001a72 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015570:	2b01      	cmp	r3, #1
 8015572:	d101      	bne.n	8015578 <HAL_UARTEx_DisableFifoMode+0x70>
 8015574:	2302      	movs	r3, #2
 8015576:	e027      	b.n	80155c8 <HAL_UARTEx_DisableFifoMode+0xc0>
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	2201      	movs	r2, #1
 801557c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	2224      	movs	r2, #36	; 0x24
 8015584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	681a      	ldr	r2, [r3, #0]
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	f022 0201 	bic.w	r2, r2, #1
 801559e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80155a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	2200      	movs	r2, #0
 80155ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	68fa      	ldr	r2, [r7, #12]
 80155b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	2220      	movs	r2, #32
 80155ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	2200      	movs	r2, #0
 80155c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80155c6:	2300      	movs	r3, #0
}
 80155c8:	4618      	mov	r0, r3
 80155ca:	3710      	adds	r7, #16
 80155cc:	46bd      	mov	sp, r7
 80155ce:	bd80      	pop	{r7, pc}
 80155d0:	40011000 	.word	0x40011000
 80155d4:	40004400 	.word	0x40004400
 80155d8:	40004800 	.word	0x40004800
 80155dc:	40004c00 	.word	0x40004c00
 80155e0:	40005000 	.word	0x40005000
 80155e4:	40011400 	.word	0x40011400
 80155e8:	40007800 	.word	0x40007800
 80155ec:	40007c00 	.word	0x40007c00
 80155f0:	0801df94 	.word	0x0801df94

080155f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b084      	sub	sp, #16
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
 80155fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	4a40      	ldr	r2, [pc, #256]	; (8015704 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 8015604:	4293      	cmp	r3, r2
 8015606:	d027      	beq.n	8015658 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	4a3e      	ldr	r2, [pc, #248]	; (8015708 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 801560e:	4293      	cmp	r3, r2
 8015610:	d022      	beq.n	8015658 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	4a3d      	ldr	r2, [pc, #244]	; (801570c <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 8015618:	4293      	cmp	r3, r2
 801561a:	d01d      	beq.n	8015658 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	4a3b      	ldr	r2, [pc, #236]	; (8015710 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 8015622:	4293      	cmp	r3, r2
 8015624:	d018      	beq.n	8015658 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	4a3a      	ldr	r2, [pc, #232]	; (8015714 <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 801562c:	4293      	cmp	r3, r2
 801562e:	d013      	beq.n	8015658 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	4a38      	ldr	r2, [pc, #224]	; (8015718 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 8015636:	4293      	cmp	r3, r2
 8015638:	d00e      	beq.n	8015658 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	4a37      	ldr	r2, [pc, #220]	; (801571c <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 8015640:	4293      	cmp	r3, r2
 8015642:	d009      	beq.n	8015658 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	4a35      	ldr	r2, [pc, #212]	; (8015720 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 801564a:	4293      	cmp	r3, r2
 801564c:	d004      	beq.n	8015658 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 801564e:	f240 2162 	movw	r1, #610	; 0x262
 8015652:	4834      	ldr	r0, [pc, #208]	; (8015724 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 8015654:	f7ec fa0d 	bl	8001a72 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d018      	beq.n	8015690 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 801565e:	683b      	ldr	r3, [r7, #0]
 8015660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015664:	d014      	beq.n	8015690 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8015666:	683b      	ldr	r3, [r7, #0]
 8015668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801566c:	d010      	beq.n	8015690 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 801566e:	683b      	ldr	r3, [r7, #0]
 8015670:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8015674:	d00c      	beq.n	8015690 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8015676:	683b      	ldr	r3, [r7, #0]
 8015678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801567c:	d008      	beq.n	8015690 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 801567e:	683b      	ldr	r3, [r7, #0]
 8015680:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8015684:	d004      	beq.n	8015690 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8015686:	f240 2163 	movw	r1, #611	; 0x263
 801568a:	4826      	ldr	r0, [pc, #152]	; (8015724 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 801568c:	f7ec f9f1 	bl	8001a72 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015696:	2b01      	cmp	r3, #1
 8015698:	d101      	bne.n	801569e <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 801569a:	2302      	movs	r3, #2
 801569c:	e02d      	b.n	80156fa <HAL_UARTEx_SetTxFifoThreshold+0x106>
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	2201      	movs	r2, #1
 80156a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	2224      	movs	r2, #36	; 0x24
 80156aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	681a      	ldr	r2, [r3, #0]
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	f022 0201 	bic.w	r2, r2, #1
 80156c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	689b      	ldr	r3, [r3, #8]
 80156cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	683a      	ldr	r2, [r7, #0]
 80156d6:	430a      	orrs	r2, r1
 80156d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f000 f8be 	bl	801585c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	68fa      	ldr	r2, [r7, #12]
 80156e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2220      	movs	r2, #32
 80156ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2200      	movs	r2, #0
 80156f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80156f8:	2300      	movs	r3, #0
}
 80156fa:	4618      	mov	r0, r3
 80156fc:	3710      	adds	r7, #16
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd80      	pop	{r7, pc}
 8015702:	bf00      	nop
 8015704:	40011000 	.word	0x40011000
 8015708:	40004400 	.word	0x40004400
 801570c:	40004800 	.word	0x40004800
 8015710:	40004c00 	.word	0x40004c00
 8015714:	40005000 	.word	0x40005000
 8015718:	40011400 	.word	0x40011400
 801571c:	40007800 	.word	0x40007800
 8015720:	40007c00 	.word	0x40007c00
 8015724:	0801df94 	.word	0x0801df94

08015728 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b084      	sub	sp, #16
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
 8015730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	4a40      	ldr	r2, [pc, #256]	; (8015838 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 8015738:	4293      	cmp	r3, r2
 801573a:	d027      	beq.n	801578c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	4a3e      	ldr	r2, [pc, #248]	; (801583c <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 8015742:	4293      	cmp	r3, r2
 8015744:	d022      	beq.n	801578c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	4a3d      	ldr	r2, [pc, #244]	; (8015840 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 801574c:	4293      	cmp	r3, r2
 801574e:	d01d      	beq.n	801578c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	4a3b      	ldr	r2, [pc, #236]	; (8015844 <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 8015756:	4293      	cmp	r3, r2
 8015758:	d018      	beq.n	801578c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	4a3a      	ldr	r2, [pc, #232]	; (8015848 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 8015760:	4293      	cmp	r3, r2
 8015762:	d013      	beq.n	801578c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	4a38      	ldr	r2, [pc, #224]	; (801584c <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 801576a:	4293      	cmp	r3, r2
 801576c:	d00e      	beq.n	801578c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	4a37      	ldr	r2, [pc, #220]	; (8015850 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 8015774:	4293      	cmp	r3, r2
 8015776:	d009      	beq.n	801578c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	4a35      	ldr	r2, [pc, #212]	; (8015854 <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 801577e:	4293      	cmp	r3, r2
 8015780:	d004      	beq.n	801578c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8015782:	f240 2193 	movw	r1, #659	; 0x293
 8015786:	4834      	ldr	r0, [pc, #208]	; (8015858 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 8015788:	f7ec f973 	bl	8001a72 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 801578c:	683b      	ldr	r3, [r7, #0]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d018      	beq.n	80157c4 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015798:	d014      	beq.n	80157c4 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80157a0:	d010      	beq.n	80157c4 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80157a8:	d00c      	beq.n	80157c4 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 80157aa:	683b      	ldr	r3, [r7, #0]
 80157ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80157b0:	d008      	beq.n	80157c4 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 80157b2:	683b      	ldr	r3, [r7, #0]
 80157b4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80157b8:	d004      	beq.n	80157c4 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 80157ba:	f44f 7125 	mov.w	r1, #660	; 0x294
 80157be:	4826      	ldr	r0, [pc, #152]	; (8015858 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 80157c0:	f7ec f957 	bl	8001a72 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80157ca:	2b01      	cmp	r3, #1
 80157cc:	d101      	bne.n	80157d2 <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 80157ce:	2302      	movs	r3, #2
 80157d0:	e02d      	b.n	801582e <HAL_UARTEx_SetRxFifoThreshold+0x106>
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	2201      	movs	r2, #1
 80157d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	2224      	movs	r2, #36	; 0x24
 80157de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	681a      	ldr	r2, [r3, #0]
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	f022 0201 	bic.w	r2, r2, #1
 80157f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	689b      	ldr	r3, [r3, #8]
 8015800:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	683a      	ldr	r2, [r7, #0]
 801580a:	430a      	orrs	r2, r1
 801580c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801580e:	6878      	ldr	r0, [r7, #4]
 8015810:	f000 f824 	bl	801585c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	68fa      	ldr	r2, [r7, #12]
 801581a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	2220      	movs	r2, #32
 8015820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	2200      	movs	r2, #0
 8015828:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801582c:	2300      	movs	r3, #0
}
 801582e:	4618      	mov	r0, r3
 8015830:	3710      	adds	r7, #16
 8015832:	46bd      	mov	sp, r7
 8015834:	bd80      	pop	{r7, pc}
 8015836:	bf00      	nop
 8015838:	40011000 	.word	0x40011000
 801583c:	40004400 	.word	0x40004400
 8015840:	40004800 	.word	0x40004800
 8015844:	40004c00 	.word	0x40004c00
 8015848:	40005000 	.word	0x40005000
 801584c:	40011400 	.word	0x40011400
 8015850:	40007800 	.word	0x40007800
 8015854:	40007c00 	.word	0x40007c00
 8015858:	0801df94 	.word	0x0801df94

0801585c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801585c:	b480      	push	{r7}
 801585e:	b085      	sub	sp, #20
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015868:	2b00      	cmp	r3, #0
 801586a:	d108      	bne.n	801587e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	2201      	movs	r2, #1
 8015870:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	2201      	movs	r2, #1
 8015878:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801587c:	e031      	b.n	80158e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801587e:	2310      	movs	r3, #16
 8015880:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8015882:	2310      	movs	r3, #16
 8015884:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	689b      	ldr	r3, [r3, #8]
 801588c:	0e5b      	lsrs	r3, r3, #25
 801588e:	b2db      	uxtb	r3, r3
 8015890:	f003 0307 	and.w	r3, r3, #7
 8015894:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	689b      	ldr	r3, [r3, #8]
 801589c:	0f5b      	lsrs	r3, r3, #29
 801589e:	b2db      	uxtb	r3, r3
 80158a0:	f003 0307 	and.w	r3, r3, #7
 80158a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80158a6:	7bbb      	ldrb	r3, [r7, #14]
 80158a8:	7b3a      	ldrb	r2, [r7, #12]
 80158aa:	4911      	ldr	r1, [pc, #68]	; (80158f0 <UARTEx_SetNbDataToProcess+0x94>)
 80158ac:	5c8a      	ldrb	r2, [r1, r2]
 80158ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80158b2:	7b3a      	ldrb	r2, [r7, #12]
 80158b4:	490f      	ldr	r1, [pc, #60]	; (80158f4 <UARTEx_SetNbDataToProcess+0x98>)
 80158b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80158b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80158bc:	b29a      	uxth	r2, r3
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80158c4:	7bfb      	ldrb	r3, [r7, #15]
 80158c6:	7b7a      	ldrb	r2, [r7, #13]
 80158c8:	4909      	ldr	r1, [pc, #36]	; (80158f0 <UARTEx_SetNbDataToProcess+0x94>)
 80158ca:	5c8a      	ldrb	r2, [r1, r2]
 80158cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80158d0:	7b7a      	ldrb	r2, [r7, #13]
 80158d2:	4908      	ldr	r1, [pc, #32]	; (80158f4 <UARTEx_SetNbDataToProcess+0x98>)
 80158d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80158d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80158da:	b29a      	uxth	r2, r3
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80158e2:	bf00      	nop
 80158e4:	3714      	adds	r7, #20
 80158e6:	46bd      	mov	sp, r7
 80158e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ec:	4770      	bx	lr
 80158ee:	bf00      	nop
 80158f0:	0801e090 	.word	0x0801e090
 80158f4:	0801e098 	.word	0x0801e098

080158f8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80158f8:	b084      	sub	sp, #16
 80158fa:	b580      	push	{r7, lr}
 80158fc:	b084      	sub	sp, #16
 80158fe:	af00      	add	r7, sp, #0
 8015900:	6078      	str	r0, [r7, #4]
 8015902:	f107 001c 	add.w	r0, r7, #28
 8015906:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801590a:	2300      	movs	r3, #0
 801590c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	4a2f      	ldr	r2, [pc, #188]	; (80159d0 <SDMMC_Init+0xd8>)
 8015912:	4293      	cmp	r3, r2
 8015914:	d007      	beq.n	8015926 <SDMMC_Init+0x2e>
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	4a2e      	ldr	r2, [pc, #184]	; (80159d4 <SDMMC_Init+0xdc>)
 801591a:	4293      	cmp	r3, r2
 801591c:	d003      	beq.n	8015926 <SDMMC_Init+0x2e>
 801591e:	21cd      	movs	r1, #205	; 0xcd
 8015920:	482d      	ldr	r0, [pc, #180]	; (80159d8 <SDMMC_Init+0xe0>)
 8015922:	f7ec f8a6 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge));
 8015926:	69fb      	ldr	r3, [r7, #28]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d007      	beq.n	801593c <SDMMC_Init+0x44>
 801592c:	69fb      	ldr	r3, [r7, #28]
 801592e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015932:	d003      	beq.n	801593c <SDMMC_Init+0x44>
 8015934:	21ce      	movs	r1, #206	; 0xce
 8015936:	4828      	ldr	r0, [pc, #160]	; (80159d8 <SDMMC_Init+0xe0>)
 8015938:	f7ec f89b 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 801593c:	6a3b      	ldr	r3, [r7, #32]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d007      	beq.n	8015952 <SDMMC_Init+0x5a>
 8015942:	6a3b      	ldr	r3, [r7, #32]
 8015944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015948:	d003      	beq.n	8015952 <SDMMC_Init+0x5a>
 801594a:	21cf      	movs	r1, #207	; 0xcf
 801594c:	4822      	ldr	r0, [pc, #136]	; (80159d8 <SDMMC_Init+0xe0>)
 801594e:	f7ec f890 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 8015952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015954:	2b00      	cmp	r3, #0
 8015956:	d00b      	beq.n	8015970 <SDMMC_Init+0x78>
 8015958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801595a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801595e:	d007      	beq.n	8015970 <SDMMC_Init+0x78>
 8015960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015966:	d003      	beq.n	8015970 <SDMMC_Init+0x78>
 8015968:	21d0      	movs	r1, #208	; 0xd0
 801596a:	481b      	ldr	r0, [pc, #108]	; (80159d8 <SDMMC_Init+0xe0>)
 801596c:	f7ec f881 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 8015970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015972:	2b00      	cmp	r3, #0
 8015974:	d007      	beq.n	8015986 <SDMMC_Init+0x8e>
 8015976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015978:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801597c:	d003      	beq.n	8015986 <SDMMC_Init+0x8e>
 801597e:	21d1      	movs	r1, #209	; 0xd1
 8015980:	4815      	ldr	r0, [pc, #84]	; (80159d8 <SDMMC_Init+0xe0>)
 8015982:	f7ec f876 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 8015986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801598c:	d303      	bcc.n	8015996 <SDMMC_Init+0x9e>
 801598e:	21d2      	movs	r1, #210	; 0xd2
 8015990:	4811      	ldr	r0, [pc, #68]	; (80159d8 <SDMMC_Init+0xe0>)
 8015992:	f7ec f86e 	bl	8001a72 <assert_failed>

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8015996:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8015998:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801599a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 801599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 801599e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80159a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80159a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80159a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80159a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80159a8:	68fa      	ldr	r2, [r7, #12]
 80159aa:	4313      	orrs	r3, r2
 80159ac:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	685a      	ldr	r2, [r3, #4]
 80159b2:	4b0a      	ldr	r3, [pc, #40]	; (80159dc <SDMMC_Init+0xe4>)
 80159b4:	4013      	ands	r3, r2
 80159b6:	68fa      	ldr	r2, [r7, #12]
 80159b8:	431a      	orrs	r2, r3
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80159be:	2300      	movs	r3, #0
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3710      	adds	r7, #16
 80159c4:	46bd      	mov	sp, r7
 80159c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80159ca:	b004      	add	sp, #16
 80159cc:	4770      	bx	lr
 80159ce:	bf00      	nop
 80159d0:	52007000 	.word	0x52007000
 80159d4:	48022400 	.word	0x48022400
 80159d8:	0801dfd0 	.word	0x0801dfd0
 80159dc:	ffc02c00 	.word	0xffc02c00

080159e0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80159e0:	b480      	push	{r7}
 80159e2:	b083      	sub	sp, #12
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80159ee:	4618      	mov	r0, r3
 80159f0:	370c      	adds	r7, #12
 80159f2:	46bd      	mov	sp, r7
 80159f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f8:	4770      	bx	lr

080159fa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80159fa:	b480      	push	{r7}
 80159fc:	b083      	sub	sp, #12
 80159fe:	af00      	add	r7, sp, #0
 8015a00:	6078      	str	r0, [r7, #4]
 8015a02:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8015a04:	683b      	ldr	r3, [r7, #0]
 8015a06:	681a      	ldr	r2, [r3, #0]
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015a0e:	2300      	movs	r3, #0
}
 8015a10:	4618      	mov	r0, r3
 8015a12:	370c      	adds	r7, #12
 8015a14:	46bd      	mov	sp, r7
 8015a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1a:	4770      	bx	lr

08015a1c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8015a1c:	b480      	push	{r7}
 8015a1e:	b083      	sub	sp, #12
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	f043 0203 	orr.w	r2, r3, #3
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8015a30:	2300      	movs	r3, #0
}
 8015a32:	4618      	mov	r0, r3
 8015a34:	370c      	adds	r7, #12
 8015a36:	46bd      	mov	sp, r7
 8015a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3c:	4770      	bx	lr

08015a3e <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 8015a3e:	b480      	push	{r7}
 8015a40:	b083      	sub	sp, #12
 8015a42:	af00      	add	r7, sp, #0
 8015a44:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	f023 0203 	bic.w	r2, r3, #3
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8015a52:	2300      	movs	r3, #0
}
 8015a54:	4618      	mov	r0, r3
 8015a56:	370c      	adds	r7, #12
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5e:	4770      	bx	lr

08015a60 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8015a60:	b480      	push	{r7}
 8015a62:	b083      	sub	sp, #12
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	f003 0303 	and.w	r3, r3, #3
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	370c      	adds	r7, #12
 8015a74:	46bd      	mov	sp, r7
 8015a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7a:	4770      	bx	lr

08015a7c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b084      	sub	sp, #16
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
 8015a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8015a86:	2300      	movs	r3, #0
 8015a88:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	685b      	ldr	r3, [r3, #4]
 8015a8e:	2b3f      	cmp	r3, #63	; 0x3f
 8015a90:	d904      	bls.n	8015a9c <SDMMC_SendCommand+0x20>
 8015a92:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8015a96:	482b      	ldr	r0, [pc, #172]	; (8015b44 <SDMMC_SendCommand+0xc8>)
 8015a98:	f7eb ffeb 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 8015a9c:	683b      	ldr	r3, [r7, #0]
 8015a9e:	689b      	ldr	r3, [r3, #8]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d00e      	beq.n	8015ac2 <SDMMC_SendCommand+0x46>
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	689b      	ldr	r3, [r3, #8]
 8015aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015aac:	d009      	beq.n	8015ac2 <SDMMC_SendCommand+0x46>
 8015aae:	683b      	ldr	r3, [r7, #0]
 8015ab0:	689b      	ldr	r3, [r3, #8]
 8015ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015ab6:	d004      	beq.n	8015ac2 <SDMMC_SendCommand+0x46>
 8015ab8:	f240 1165 	movw	r1, #357	; 0x165
 8015abc:	4821      	ldr	r0, [pc, #132]	; (8015b44 <SDMMC_SendCommand+0xc8>)
 8015abe:	f7eb ffd8 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	68db      	ldr	r3, [r3, #12]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d00e      	beq.n	8015ae8 <SDMMC_SendCommand+0x6c>
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	68db      	ldr	r3, [r3, #12]
 8015ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015ad2:	d009      	beq.n	8015ae8 <SDMMC_SendCommand+0x6c>
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	68db      	ldr	r3, [r3, #12]
 8015ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015adc:	d004      	beq.n	8015ae8 <SDMMC_SendCommand+0x6c>
 8015ade:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8015ae2:	4818      	ldr	r0, [pc, #96]	; (8015b44 <SDMMC_SendCommand+0xc8>)
 8015ae4:	f7eb ffc5 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 8015ae8:	683b      	ldr	r3, [r7, #0]
 8015aea:	691b      	ldr	r3, [r3, #16]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d009      	beq.n	8015b04 <SDMMC_SendCommand+0x88>
 8015af0:	683b      	ldr	r3, [r7, #0]
 8015af2:	691b      	ldr	r3, [r3, #16]
 8015af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015af8:	d004      	beq.n	8015b04 <SDMMC_SendCommand+0x88>
 8015afa:	f240 1167 	movw	r1, #359	; 0x167
 8015afe:	4811      	ldr	r0, [pc, #68]	; (8015b44 <SDMMC_SendCommand+0xc8>)
 8015b00:	f7eb ffb7 	bl	8001a72 <assert_failed>

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	681a      	ldr	r2, [r3, #0]
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8015b10:	683b      	ldr	r3, [r7, #0]
 8015b12:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8015b14:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8015b16:	683b      	ldr	r3, [r7, #0]
 8015b18:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8015b1a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8015b1c:	683b      	ldr	r3, [r7, #0]
 8015b1e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8015b20:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8015b22:	68fa      	ldr	r2, [r7, #12]
 8015b24:	4313      	orrs	r3, r2
 8015b26:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	68da      	ldr	r2, [r3, #12]
 8015b2c:	4b06      	ldr	r3, [pc, #24]	; (8015b48 <SDMMC_SendCommand+0xcc>)
 8015b2e:	4013      	ands	r3, r2
 8015b30:	68fa      	ldr	r2, [r7, #12]
 8015b32:	431a      	orrs	r2, r3
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8015b38:	2300      	movs	r3, #0
}
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	3710      	adds	r7, #16
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bd80      	pop	{r7, pc}
 8015b42:	bf00      	nop
 8015b44:	0801dfd0 	.word	0x0801dfd0
 8015b48:	fffee0c0 	.word	0xfffee0c0

08015b4c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8015b4c:	b480      	push	{r7}
 8015b4e:	b083      	sub	sp, #12
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	691b      	ldr	r3, [r3, #16]
 8015b58:	b2db      	uxtb	r3, r3
}
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	370c      	adds	r7, #12
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b64:	4770      	bx	lr
	...

08015b68 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b084      	sub	sp, #16
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
 8015b70:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
 8015b72:	683b      	ldr	r3, [r7, #0]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d00d      	beq.n	8015b94 <SDMMC_GetResponse+0x2c>
 8015b78:	683b      	ldr	r3, [r7, #0]
 8015b7a:	2b04      	cmp	r3, #4
 8015b7c:	d00a      	beq.n	8015b94 <SDMMC_GetResponse+0x2c>
 8015b7e:	683b      	ldr	r3, [r7, #0]
 8015b80:	2b08      	cmp	r3, #8
 8015b82:	d007      	beq.n	8015b94 <SDMMC_GetResponse+0x2c>
 8015b84:	683b      	ldr	r3, [r7, #0]
 8015b86:	2b0c      	cmp	r3, #12
 8015b88:	d004      	beq.n	8015b94 <SDMMC_GetResponse+0x2c>
 8015b8a:	f240 1193 	movw	r1, #403	; 0x193
 8015b8e:	4807      	ldr	r0, [pc, #28]	; (8015bac <SDMMC_GetResponse+0x44>)
 8015b90:	f7eb ff6f 	bl	8001a72 <assert_failed>

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	3314      	adds	r3, #20
 8015b98:	461a      	mov	r2, r3
 8015b9a:	683b      	ldr	r3, [r7, #0]
 8015b9c:	4413      	add	r3, r2
 8015b9e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	681b      	ldr	r3, [r3, #0]
}
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	3710      	adds	r7, #16
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}
 8015bac:	0801dfd0 	.word	0x0801dfd0

08015bb0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b084      	sub	sp, #16
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
 8015bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8015bba:	2300      	movs	r3, #0
 8015bbc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 8015bbe:	683b      	ldr	r3, [r7, #0]
 8015bc0:	685b      	ldr	r3, [r3, #4]
 8015bc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015bc6:	d304      	bcc.n	8015bd2 <SDMMC_ConfigData+0x22>
 8015bc8:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8015bcc:	4846      	ldr	r0, [pc, #280]	; (8015ce8 <SDMMC_ConfigData+0x138>)
 8015bce:	f7eb ff50 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	689b      	ldr	r3, [r3, #8]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d03c      	beq.n	8015c54 <SDMMC_ConfigData+0xa4>
 8015bda:	683b      	ldr	r3, [r7, #0]
 8015bdc:	689b      	ldr	r3, [r3, #8]
 8015bde:	2b10      	cmp	r3, #16
 8015be0:	d038      	beq.n	8015c54 <SDMMC_ConfigData+0xa4>
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	689b      	ldr	r3, [r3, #8]
 8015be6:	2b20      	cmp	r3, #32
 8015be8:	d034      	beq.n	8015c54 <SDMMC_ConfigData+0xa4>
 8015bea:	683b      	ldr	r3, [r7, #0]
 8015bec:	689b      	ldr	r3, [r3, #8]
 8015bee:	2b30      	cmp	r3, #48	; 0x30
 8015bf0:	d030      	beq.n	8015c54 <SDMMC_ConfigData+0xa4>
 8015bf2:	683b      	ldr	r3, [r7, #0]
 8015bf4:	689b      	ldr	r3, [r3, #8]
 8015bf6:	2b40      	cmp	r3, #64	; 0x40
 8015bf8:	d02c      	beq.n	8015c54 <SDMMC_ConfigData+0xa4>
 8015bfa:	683b      	ldr	r3, [r7, #0]
 8015bfc:	689b      	ldr	r3, [r3, #8]
 8015bfe:	2b50      	cmp	r3, #80	; 0x50
 8015c00:	d028      	beq.n	8015c54 <SDMMC_ConfigData+0xa4>
 8015c02:	683b      	ldr	r3, [r7, #0]
 8015c04:	689b      	ldr	r3, [r3, #8]
 8015c06:	2b60      	cmp	r3, #96	; 0x60
 8015c08:	d024      	beq.n	8015c54 <SDMMC_ConfigData+0xa4>
 8015c0a:	683b      	ldr	r3, [r7, #0]
 8015c0c:	689b      	ldr	r3, [r3, #8]
 8015c0e:	2b70      	cmp	r3, #112	; 0x70
 8015c10:	d020      	beq.n	8015c54 <SDMMC_ConfigData+0xa4>
 8015c12:	683b      	ldr	r3, [r7, #0]
 8015c14:	689b      	ldr	r3, [r3, #8]
 8015c16:	2b80      	cmp	r3, #128	; 0x80
 8015c18:	d01c      	beq.n	8015c54 <SDMMC_ConfigData+0xa4>
 8015c1a:	683b      	ldr	r3, [r7, #0]
 8015c1c:	689b      	ldr	r3, [r3, #8]
 8015c1e:	2b90      	cmp	r3, #144	; 0x90
 8015c20:	d018      	beq.n	8015c54 <SDMMC_ConfigData+0xa4>
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	689b      	ldr	r3, [r3, #8]
 8015c26:	2ba0      	cmp	r3, #160	; 0xa0
 8015c28:	d014      	beq.n	8015c54 <SDMMC_ConfigData+0xa4>
 8015c2a:	683b      	ldr	r3, [r7, #0]
 8015c2c:	689b      	ldr	r3, [r3, #8]
 8015c2e:	2bb0      	cmp	r3, #176	; 0xb0
 8015c30:	d010      	beq.n	8015c54 <SDMMC_ConfigData+0xa4>
 8015c32:	683b      	ldr	r3, [r7, #0]
 8015c34:	689b      	ldr	r3, [r3, #8]
 8015c36:	2bc0      	cmp	r3, #192	; 0xc0
 8015c38:	d00c      	beq.n	8015c54 <SDMMC_ConfigData+0xa4>
 8015c3a:	683b      	ldr	r3, [r7, #0]
 8015c3c:	689b      	ldr	r3, [r3, #8]
 8015c3e:	2bd0      	cmp	r3, #208	; 0xd0
 8015c40:	d008      	beq.n	8015c54 <SDMMC_ConfigData+0xa4>
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	689b      	ldr	r3, [r3, #8]
 8015c46:	2be0      	cmp	r3, #224	; 0xe0
 8015c48:	d004      	beq.n	8015c54 <SDMMC_ConfigData+0xa4>
 8015c4a:	f240 11a9 	movw	r1, #425	; 0x1a9
 8015c4e:	4826      	ldr	r0, [pc, #152]	; (8015ce8 <SDMMC_ConfigData+0x138>)
 8015c50:	f7eb ff0f 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 8015c54:	683b      	ldr	r3, [r7, #0]
 8015c56:	68db      	ldr	r3, [r3, #12]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d008      	beq.n	8015c6e <SDMMC_ConfigData+0xbe>
 8015c5c:	683b      	ldr	r3, [r7, #0]
 8015c5e:	68db      	ldr	r3, [r3, #12]
 8015c60:	2b02      	cmp	r3, #2
 8015c62:	d004      	beq.n	8015c6e <SDMMC_ConfigData+0xbe>
 8015c64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015c68:	481f      	ldr	r0, [pc, #124]	; (8015ce8 <SDMMC_ConfigData+0x138>)
 8015c6a:	f7eb ff02 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 8015c6e:	683b      	ldr	r3, [r7, #0]
 8015c70:	691b      	ldr	r3, [r3, #16]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d008      	beq.n	8015c88 <SDMMC_ConfigData+0xd8>
 8015c76:	683b      	ldr	r3, [r7, #0]
 8015c78:	691b      	ldr	r3, [r3, #16]
 8015c7a:	2b08      	cmp	r3, #8
 8015c7c:	d004      	beq.n	8015c88 <SDMMC_ConfigData+0xd8>
 8015c7e:	f240 11ab 	movw	r1, #427	; 0x1ab
 8015c82:	4819      	ldr	r0, [pc, #100]	; (8015ce8 <SDMMC_ConfigData+0x138>)
 8015c84:	f7eb fef5 	bl	8001a72 <assert_failed>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 8015c88:	683b      	ldr	r3, [r7, #0]
 8015c8a:	695b      	ldr	r3, [r3, #20]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d008      	beq.n	8015ca2 <SDMMC_ConfigData+0xf2>
 8015c90:	683b      	ldr	r3, [r7, #0]
 8015c92:	695b      	ldr	r3, [r3, #20]
 8015c94:	2b01      	cmp	r3, #1
 8015c96:	d004      	beq.n	8015ca2 <SDMMC_ConfigData+0xf2>
 8015c98:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8015c9c:	4812      	ldr	r0, [pc, #72]	; (8015ce8 <SDMMC_ConfigData+0x138>)
 8015c9e:	f7eb fee8 	bl	8001a72 <assert_failed>

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8015ca2:	683b      	ldr	r3, [r7, #0]
 8015ca4:	681a      	ldr	r2, [r3, #0]
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	685a      	ldr	r2, [r3, #4]
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8015cb2:	683b      	ldr	r3, [r7, #0]
 8015cb4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8015cb6:	683b      	ldr	r3, [r7, #0]
 8015cb8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8015cba:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8015cbc:	683b      	ldr	r3, [r7, #0]
 8015cbe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8015cc0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8015cc2:	683b      	ldr	r3, [r7, #0]
 8015cc4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8015cc6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8015cc8:	68fa      	ldr	r2, [r7, #12]
 8015cca:	4313      	orrs	r3, r2
 8015ccc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	431a      	orrs	r2, r3
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8015cde:	2300      	movs	r3, #0

}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	3710      	adds	r7, #16
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd80      	pop	{r7, pc}
 8015ce8:	0801dfd0 	.word	0x0801dfd0

08015cec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b088      	sub	sp, #32
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
 8015cf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8015cf6:	683b      	ldr	r3, [r7, #0]
 8015cf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8015cfa:	2310      	movs	r3, #16
 8015cfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015d02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015d04:	2300      	movs	r3, #0
 8015d06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015d0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015d0e:	f107 0308 	add.w	r3, r7, #8
 8015d12:	4619      	mov	r1, r3
 8015d14:	6878      	ldr	r0, [r7, #4]
 8015d16:	f7ff feb1 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8015d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8015d1e:	2110      	movs	r1, #16
 8015d20:	6878      	ldr	r0, [r7, #4]
 8015d22:	f000 fa5f 	bl	80161e4 <SDMMC_GetCmdResp1>
 8015d26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015d28:	69fb      	ldr	r3, [r7, #28]
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	3720      	adds	r7, #32
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}

08015d32 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8015d32:	b580      	push	{r7, lr}
 8015d34:	b088      	sub	sp, #32
 8015d36:	af00      	add	r7, sp, #0
 8015d38:	6078      	str	r0, [r7, #4]
 8015d3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8015d3c:	683b      	ldr	r3, [r7, #0]
 8015d3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8015d40:	2311      	movs	r3, #17
 8015d42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015d48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015d52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015d54:	f107 0308 	add.w	r3, r7, #8
 8015d58:	4619      	mov	r1, r3
 8015d5a:	6878      	ldr	r0, [r7, #4]
 8015d5c:	f7ff fe8e 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8015d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8015d64:	2111      	movs	r1, #17
 8015d66:	6878      	ldr	r0, [r7, #4]
 8015d68:	f000 fa3c 	bl	80161e4 <SDMMC_GetCmdResp1>
 8015d6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015d6e:	69fb      	ldr	r3, [r7, #28]
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	3720      	adds	r7, #32
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}

08015d78 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b088      	sub	sp, #32
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
 8015d80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8015d82:	683b      	ldr	r3, [r7, #0]
 8015d84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8015d86:	2312      	movs	r3, #18
 8015d88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015d8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015d90:	2300      	movs	r3, #0
 8015d92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015d98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015d9a:	f107 0308 	add.w	r3, r7, #8
 8015d9e:	4619      	mov	r1, r3
 8015da0:	6878      	ldr	r0, [r7, #4]
 8015da2:	f7ff fe6b 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8015da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8015daa:	2112      	movs	r1, #18
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f000 fa19 	bl	80161e4 <SDMMC_GetCmdResp1>
 8015db2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015db4:	69fb      	ldr	r3, [r7, #28]
}
 8015db6:	4618      	mov	r0, r3
 8015db8:	3720      	adds	r7, #32
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}

08015dbe <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8015dbe:	b580      	push	{r7, lr}
 8015dc0:	b088      	sub	sp, #32
 8015dc2:	af00      	add	r7, sp, #0
 8015dc4:	6078      	str	r0, [r7, #4]
 8015dc6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8015dcc:	2318      	movs	r3, #24
 8015dce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015dd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015dde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015de0:	f107 0308 	add.w	r3, r7, #8
 8015de4:	4619      	mov	r1, r3
 8015de6:	6878      	ldr	r0, [r7, #4]
 8015de8:	f7ff fe48 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8015dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8015df0:	2118      	movs	r1, #24
 8015df2:	6878      	ldr	r0, [r7, #4]
 8015df4:	f000 f9f6 	bl	80161e4 <SDMMC_GetCmdResp1>
 8015df8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015dfa:	69fb      	ldr	r3, [r7, #28]
}
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	3720      	adds	r7, #32
 8015e00:	46bd      	mov	sp, r7
 8015e02:	bd80      	pop	{r7, pc}

08015e04 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b088      	sub	sp, #32
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
 8015e0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8015e12:	2319      	movs	r3, #25
 8015e14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015e1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015e24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015e26:	f107 0308 	add.w	r3, r7, #8
 8015e2a:	4619      	mov	r1, r3
 8015e2c:	6878      	ldr	r0, [r7, #4]
 8015e2e:	f7ff fe25 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8015e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8015e36:	2119      	movs	r1, #25
 8015e38:	6878      	ldr	r0, [r7, #4]
 8015e3a:	f000 f9d3 	bl	80161e4 <SDMMC_GetCmdResp1>
 8015e3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015e40:	69fb      	ldr	r3, [r7, #28]
}
 8015e42:	4618      	mov	r0, r3
 8015e44:	3720      	adds	r7, #32
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd80      	pop	{r7, pc}
	...

08015e4c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b088      	sub	sp, #32
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8015e54:	2300      	movs	r3, #0
 8015e56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8015e58:	230c      	movs	r3, #12
 8015e5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015e60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015e62:	2300      	movs	r3, #0
 8015e64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015e6a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	68db      	ldr	r3, [r3, #12]
 8015e70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	68db      	ldr	r3, [r3, #12]
 8015e7c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015e84:	f107 0308 	add.w	r3, r7, #8
 8015e88:	4619      	mov	r1, r3
 8015e8a:	6878      	ldr	r0, [r7, #4]
 8015e8c:	f7ff fdf6 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8015e90:	4a0b      	ldr	r2, [pc, #44]	; (8015ec0 <SDMMC_CmdStopTransfer+0x74>)
 8015e92:	210c      	movs	r1, #12
 8015e94:	6878      	ldr	r0, [r7, #4]
 8015e96:	f000 f9a5 	bl	80161e4 <SDMMC_GetCmdResp1>
 8015e9a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	68db      	ldr	r3, [r3, #12]
 8015ea0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8015ea8:	69fb      	ldr	r3, [r7, #28]
 8015eaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015eae:	d101      	bne.n	8015eb4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8015eb4:	69fb      	ldr	r3, [r7, #28]
}
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3720      	adds	r7, #32
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	bd80      	pop	{r7, pc}
 8015ebe:	bf00      	nop
 8015ec0:	05f5e100 	.word	0x05f5e100

08015ec4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b088      	sub	sp, #32
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8015ece:	683b      	ldr	r3, [r7, #0]
 8015ed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8015ed2:	2307      	movs	r3, #7
 8015ed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015eda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015edc:	2300      	movs	r3, #0
 8015ede:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015ee4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015ee6:	f107 0308 	add.w	r3, r7, #8
 8015eea:	4619      	mov	r1, r3
 8015eec:	6878      	ldr	r0, [r7, #4]
 8015eee:	f7ff fdc5 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8015ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8015ef6:	2107      	movs	r1, #7
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f000 f973 	bl	80161e4 <SDMMC_GetCmdResp1>
 8015efe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015f00:	69fb      	ldr	r3, [r7, #28]
}
 8015f02:	4618      	mov	r0, r3
 8015f04:	3720      	adds	r7, #32
 8015f06:	46bd      	mov	sp, r7
 8015f08:	bd80      	pop	{r7, pc}

08015f0a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8015f0a:	b580      	push	{r7, lr}
 8015f0c:	b088      	sub	sp, #32
 8015f0e:	af00      	add	r7, sp, #0
 8015f10:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8015f12:	2300      	movs	r3, #0
 8015f14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8015f16:	2300      	movs	r3, #0
 8015f18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015f1e:	2300      	movs	r3, #0
 8015f20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015f26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015f28:	f107 0308 	add.w	r3, r7, #8
 8015f2c:	4619      	mov	r1, r3
 8015f2e:	6878      	ldr	r0, [r7, #4]
 8015f30:	f7ff fda4 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	f000 fb97 	bl	8016668 <SDMMC_GetCmdError>
 8015f3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015f3c:	69fb      	ldr	r3, [r7, #28]
}
 8015f3e:	4618      	mov	r0, r3
 8015f40:	3720      	adds	r7, #32
 8015f42:	46bd      	mov	sp, r7
 8015f44:	bd80      	pop	{r7, pc}

08015f46 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8015f46:	b580      	push	{r7, lr}
 8015f48:	b088      	sub	sp, #32
 8015f4a:	af00      	add	r7, sp, #0
 8015f4c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8015f4e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8015f52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8015f54:	2308      	movs	r3, #8
 8015f56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015f5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015f5e:	2300      	movs	r3, #0
 8015f60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015f66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015f68:	f107 0308 	add.w	r3, r7, #8
 8015f6c:	4619      	mov	r1, r3
 8015f6e:	6878      	ldr	r0, [r7, #4]
 8015f70:	f7ff fd84 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f000 fb29 	bl	80165cc <SDMMC_GetCmdResp7>
 8015f7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015f7c:	69fb      	ldr	r3, [r7, #28]
}
 8015f7e:	4618      	mov	r0, r3
 8015f80:	3720      	adds	r7, #32
 8015f82:	46bd      	mov	sp, r7
 8015f84:	bd80      	pop	{r7, pc}

08015f86 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8015f86:	b580      	push	{r7, lr}
 8015f88:	b088      	sub	sp, #32
 8015f8a:	af00      	add	r7, sp, #0
 8015f8c:	6078      	str	r0, [r7, #4]
 8015f8e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8015f94:	2337      	movs	r3, #55	; 0x37
 8015f96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015f9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015fa6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015fa8:	f107 0308 	add.w	r3, r7, #8
 8015fac:	4619      	mov	r1, r3
 8015fae:	6878      	ldr	r0, [r7, #4]
 8015fb0:	f7ff fd64 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8015fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8015fb8:	2137      	movs	r1, #55	; 0x37
 8015fba:	6878      	ldr	r0, [r7, #4]
 8015fbc:	f000 f912 	bl	80161e4 <SDMMC_GetCmdResp1>
 8015fc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015fc2:	69fb      	ldr	r3, [r7, #28]
}
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	3720      	adds	r7, #32
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd80      	pop	{r7, pc}

08015fcc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b088      	sub	sp, #32
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]
 8015fd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8015fd6:	683b      	ldr	r3, [r7, #0]
 8015fd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8015fda:	2329      	movs	r3, #41	; 0x29
 8015fdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015fe2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015fec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015fee:	f107 0308 	add.w	r3, r7, #8
 8015ff2:	4619      	mov	r1, r3
 8015ff4:	6878      	ldr	r0, [r7, #4]
 8015ff6:	f7ff fd41 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8015ffa:	6878      	ldr	r0, [r7, #4]
 8015ffc:	f000 fa2e 	bl	801645c <SDMMC_GetCmdResp3>
 8016000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8016002:	69fb      	ldr	r3, [r7, #28]
}
 8016004:	4618      	mov	r0, r3
 8016006:	3720      	adds	r7, #32
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}

0801600c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b088      	sub	sp, #32
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
 8016014:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8016016:	683b      	ldr	r3, [r7, #0]
 8016018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801601a:	2306      	movs	r3, #6
 801601c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801601e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8016024:	2300      	movs	r3, #0
 8016026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801602c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801602e:	f107 0308 	add.w	r3, r7, #8
 8016032:	4619      	mov	r1, r3
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f7ff fd21 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801603a:	f241 3288 	movw	r2, #5000	; 0x1388
 801603e:	2106      	movs	r1, #6
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f000 f8cf 	bl	80161e4 <SDMMC_GetCmdResp1>
 8016046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8016048:	69fb      	ldr	r3, [r7, #28]
}
 801604a:	4618      	mov	r0, r3
 801604c:	3720      	adds	r7, #32
 801604e:	46bd      	mov	sp, r7
 8016050:	bd80      	pop	{r7, pc}

08016052 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8016052:	b580      	push	{r7, lr}
 8016054:	b088      	sub	sp, #32
 8016056:	af00      	add	r7, sp, #0
 8016058:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801605a:	2300      	movs	r3, #0
 801605c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801605e:	2333      	movs	r3, #51	; 0x33
 8016060:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8016062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8016068:	2300      	movs	r3, #0
 801606a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801606c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016070:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8016072:	f107 0308 	add.w	r3, r7, #8
 8016076:	4619      	mov	r1, r3
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f7ff fcff 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801607e:	f241 3288 	movw	r2, #5000	; 0x1388
 8016082:	2133      	movs	r1, #51	; 0x33
 8016084:	6878      	ldr	r0, [r7, #4]
 8016086:	f000 f8ad 	bl	80161e4 <SDMMC_GetCmdResp1>
 801608a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801608c:	69fb      	ldr	r3, [r7, #28]
}
 801608e:	4618      	mov	r0, r3
 8016090:	3720      	adds	r7, #32
 8016092:	46bd      	mov	sp, r7
 8016094:	bd80      	pop	{r7, pc}

08016096 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8016096:	b580      	push	{r7, lr}
 8016098:	b088      	sub	sp, #32
 801609a:	af00      	add	r7, sp, #0
 801609c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801609e:	2300      	movs	r3, #0
 80160a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80160a2:	2302      	movs	r3, #2
 80160a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80160a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80160aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80160ac:	2300      	movs	r3, #0
 80160ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80160b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80160b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80160b6:	f107 0308 	add.w	r3, r7, #8
 80160ba:	4619      	mov	r1, r3
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f7ff fcdd 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80160c2:	6878      	ldr	r0, [r7, #4]
 80160c4:	f000 f980 	bl	80163c8 <SDMMC_GetCmdResp2>
 80160c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80160ca:	69fb      	ldr	r3, [r7, #28]
}
 80160cc:	4618      	mov	r0, r3
 80160ce:	3720      	adds	r7, #32
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd80      	pop	{r7, pc}

080160d4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b088      	sub	sp, #32
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
 80160dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80160de:	683b      	ldr	r3, [r7, #0]
 80160e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80160e2:	2309      	movs	r3, #9
 80160e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80160e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80160ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80160ec:	2300      	movs	r3, #0
 80160ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80160f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80160f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80160f6:	f107 0308 	add.w	r3, r7, #8
 80160fa:	4619      	mov	r1, r3
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	f7ff fcbd 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8016102:	6878      	ldr	r0, [r7, #4]
 8016104:	f000 f960 	bl	80163c8 <SDMMC_GetCmdResp2>
 8016108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801610a:	69fb      	ldr	r3, [r7, #28]
}
 801610c:	4618      	mov	r0, r3
 801610e:	3720      	adds	r7, #32
 8016110:	46bd      	mov	sp, r7
 8016112:	bd80      	pop	{r7, pc}

08016114 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b088      	sub	sp, #32
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
 801611c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801611e:	2300      	movs	r3, #0
 8016120:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8016122:	2303      	movs	r3, #3
 8016124:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8016126:	f44f 7380 	mov.w	r3, #256	; 0x100
 801612a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801612c:	2300      	movs	r3, #0
 801612e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016134:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8016136:	f107 0308 	add.w	r3, r7, #8
 801613a:	4619      	mov	r1, r3
 801613c:	6878      	ldr	r0, [r7, #4]
 801613e:	f7ff fc9d 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8016142:	683a      	ldr	r2, [r7, #0]
 8016144:	2103      	movs	r1, #3
 8016146:	6878      	ldr	r0, [r7, #4]
 8016148:	f000 f9c8 	bl	80164dc <SDMMC_GetCmdResp6>
 801614c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801614e:	69fb      	ldr	r3, [r7, #28]
}
 8016150:	4618      	mov	r0, r3
 8016152:	3720      	adds	r7, #32
 8016154:	46bd      	mov	sp, r7
 8016156:	bd80      	pop	{r7, pc}

08016158 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8016158:	b580      	push	{r7, lr}
 801615a:	b088      	sub	sp, #32
 801615c:	af00      	add	r7, sp, #0
 801615e:	6078      	str	r0, [r7, #4]
 8016160:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8016162:	683b      	ldr	r3, [r7, #0]
 8016164:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8016166:	230d      	movs	r3, #13
 8016168:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801616a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801616e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8016170:	2300      	movs	r3, #0
 8016172:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016178:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801617a:	f107 0308 	add.w	r3, r7, #8
 801617e:	4619      	mov	r1, r3
 8016180:	6878      	ldr	r0, [r7, #4]
 8016182:	f7ff fc7b 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8016186:	f241 3288 	movw	r2, #5000	; 0x1388
 801618a:	210d      	movs	r1, #13
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f000 f829 	bl	80161e4 <SDMMC_GetCmdResp1>
 8016192:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8016194:	69fb      	ldr	r3, [r7, #28]
}
 8016196:	4618      	mov	r0, r3
 8016198:	3720      	adds	r7, #32
 801619a:	46bd      	mov	sp, r7
 801619c:	bd80      	pop	{r7, pc}

0801619e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801619e:	b580      	push	{r7, lr}
 80161a0:	b088      	sub	sp, #32
 80161a2:	af00      	add	r7, sp, #0
 80161a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80161a6:	2300      	movs	r3, #0
 80161a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80161aa:	230d      	movs	r3, #13
 80161ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80161ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80161b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80161b4:	2300      	movs	r3, #0
 80161b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80161b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80161bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80161be:	f107 0308 	add.w	r3, r7, #8
 80161c2:	4619      	mov	r1, r3
 80161c4:	6878      	ldr	r0, [r7, #4]
 80161c6:	f7ff fc59 	bl	8015a7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80161ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80161ce:	210d      	movs	r1, #13
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f000 f807 	bl	80161e4 <SDMMC_GetCmdResp1>
 80161d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80161d8:	69fb      	ldr	r3, [r7, #28]
}
 80161da:	4618      	mov	r0, r3
 80161dc:	3720      	adds	r7, #32
 80161de:	46bd      	mov	sp, r7
 80161e0:	bd80      	pop	{r7, pc}
	...

080161e4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b088      	sub	sp, #32
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	60f8      	str	r0, [r7, #12]
 80161ec:	460b      	mov	r3, r1
 80161ee:	607a      	str	r2, [r7, #4]
 80161f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80161f2:	4b70      	ldr	r3, [pc, #448]	; (80163b4 <SDMMC_GetCmdResp1+0x1d0>)
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	4a70      	ldr	r2, [pc, #448]	; (80163b8 <SDMMC_GetCmdResp1+0x1d4>)
 80161f8:	fba2 2303 	umull	r2, r3, r2, r3
 80161fc:	0a5a      	lsrs	r2, r3, #9
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	fb02 f303 	mul.w	r3, r2, r3
 8016204:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8016206:	69fb      	ldr	r3, [r7, #28]
 8016208:	1e5a      	subs	r2, r3, #1
 801620a:	61fa      	str	r2, [r7, #28]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d102      	bne.n	8016216 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8016210:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016214:	e0c9      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801621a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801621c:	69ba      	ldr	r2, [r7, #24]
 801621e:	4b67      	ldr	r3, [pc, #412]	; (80163bc <SDMMC_GetCmdResp1+0x1d8>)
 8016220:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8016222:	2b00      	cmp	r3, #0
 8016224:	d0ef      	beq.n	8016206 <SDMMC_GetCmdResp1+0x22>
 8016226:	69bb      	ldr	r3, [r7, #24]
 8016228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801622c:	2b00      	cmp	r3, #0
 801622e:	d1ea      	bne.n	8016206 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016234:	f003 0304 	and.w	r3, r3, #4
 8016238:	2b00      	cmp	r3, #0
 801623a:	d004      	beq.n	8016246 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	2204      	movs	r2, #4
 8016240:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016242:	2304      	movs	r3, #4
 8016244:	e0b1      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801624a:	f003 0301 	and.w	r3, r3, #1
 801624e:	2b00      	cmp	r3, #0
 8016250:	d004      	beq.n	801625c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	2201      	movs	r2, #1
 8016256:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016258:	2301      	movs	r3, #1
 801625a:	e0a6      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	4a58      	ldr	r2, [pc, #352]	; (80163c0 <SDMMC_GetCmdResp1+0x1dc>)
 8016260:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016262:	68f8      	ldr	r0, [r7, #12]
 8016264:	f7ff fc72 	bl	8015b4c <SDMMC_GetCommandResponse>
 8016268:	4603      	mov	r3, r0
 801626a:	461a      	mov	r2, r3
 801626c:	7afb      	ldrb	r3, [r7, #11]
 801626e:	4293      	cmp	r3, r2
 8016270:	d001      	beq.n	8016276 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016272:	2301      	movs	r3, #1
 8016274:	e099      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8016276:	2100      	movs	r1, #0
 8016278:	68f8      	ldr	r0, [r7, #12]
 801627a:	f7ff fc75 	bl	8015b68 <SDMMC_GetResponse>
 801627e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8016280:	697a      	ldr	r2, [r7, #20]
 8016282:	4b50      	ldr	r3, [pc, #320]	; (80163c4 <SDMMC_GetCmdResp1+0x1e0>)
 8016284:	4013      	ands	r3, r2
 8016286:	2b00      	cmp	r3, #0
 8016288:	d101      	bne.n	801628e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801628a:	2300      	movs	r3, #0
 801628c:	e08d      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801628e:	697b      	ldr	r3, [r7, #20]
 8016290:	2b00      	cmp	r3, #0
 8016292:	da02      	bge.n	801629a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8016294:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016298:	e087      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d001      	beq.n	80162a8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80162a4:	2340      	movs	r3, #64	; 0x40
 80162a6:	e080      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80162a8:	697b      	ldr	r3, [r7, #20]
 80162aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d001      	beq.n	80162b6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80162b2:	2380      	movs	r3, #128	; 0x80
 80162b4:	e079      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d002      	beq.n	80162c6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80162c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80162c4:	e071      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80162c6:	697b      	ldr	r3, [r7, #20]
 80162c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d002      	beq.n	80162d6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80162d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80162d4:	e069      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80162d6:	697b      	ldr	r3, [r7, #20]
 80162d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d002      	beq.n	80162e6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80162e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80162e4:	e061      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80162e6:	697b      	ldr	r3, [r7, #20]
 80162e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d002      	beq.n	80162f6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80162f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80162f4:	e059      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80162f6:	697b      	ldr	r3, [r7, #20]
 80162f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d002      	beq.n	8016306 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8016300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016304:	e051      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8016306:	697b      	ldr	r3, [r7, #20]
 8016308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801630c:	2b00      	cmp	r3, #0
 801630e:	d002      	beq.n	8016316 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8016310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016314:	e049      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8016316:	697b      	ldr	r3, [r7, #20]
 8016318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801631c:	2b00      	cmp	r3, #0
 801631e:	d002      	beq.n	8016326 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8016320:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8016324:	e041      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8016326:	697b      	ldr	r3, [r7, #20]
 8016328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801632c:	2b00      	cmp	r3, #0
 801632e:	d002      	beq.n	8016336 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8016330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016334:	e039      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8016336:	697b      	ldr	r3, [r7, #20]
 8016338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801633c:	2b00      	cmp	r3, #0
 801633e:	d002      	beq.n	8016346 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8016340:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016344:	e031      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8016346:	697b      	ldr	r3, [r7, #20]
 8016348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801634c:	2b00      	cmp	r3, #0
 801634e:	d002      	beq.n	8016356 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8016350:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016354:	e029      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8016356:	697b      	ldr	r3, [r7, #20]
 8016358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801635c:	2b00      	cmp	r3, #0
 801635e:	d002      	beq.n	8016366 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8016360:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016364:	e021      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8016366:	697b      	ldr	r3, [r7, #20]
 8016368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801636c:	2b00      	cmp	r3, #0
 801636e:	d002      	beq.n	8016376 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8016370:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8016374:	e019      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8016376:	697b      	ldr	r3, [r7, #20]
 8016378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801637c:	2b00      	cmp	r3, #0
 801637e:	d002      	beq.n	8016386 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8016380:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8016384:	e011      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8016386:	697b      	ldr	r3, [r7, #20]
 8016388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801638c:	2b00      	cmp	r3, #0
 801638e:	d002      	beq.n	8016396 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8016390:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016394:	e009      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8016396:	697b      	ldr	r3, [r7, #20]
 8016398:	f003 0308 	and.w	r3, r3, #8
 801639c:	2b00      	cmp	r3, #0
 801639e:	d002      	beq.n	80163a6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80163a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80163a4:	e001      	b.n	80163aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80163a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80163aa:	4618      	mov	r0, r3
 80163ac:	3720      	adds	r7, #32
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bd80      	pop	{r7, pc}
 80163b2:	bf00      	nop
 80163b4:	24000000 	.word	0x24000000
 80163b8:	10624dd3 	.word	0x10624dd3
 80163bc:	00200045 	.word	0x00200045
 80163c0:	002000c5 	.word	0x002000c5
 80163c4:	fdffe008 	.word	0xfdffe008

080163c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80163c8:	b480      	push	{r7}
 80163ca:	b085      	sub	sp, #20
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80163d0:	4b1f      	ldr	r3, [pc, #124]	; (8016450 <SDMMC_GetCmdResp2+0x88>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	4a1f      	ldr	r2, [pc, #124]	; (8016454 <SDMMC_GetCmdResp2+0x8c>)
 80163d6:	fba2 2303 	umull	r2, r3, r2, r3
 80163da:	0a5b      	lsrs	r3, r3, #9
 80163dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80163e0:	fb02 f303 	mul.w	r3, r2, r3
 80163e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	1e5a      	subs	r2, r3, #1
 80163ea:	60fa      	str	r2, [r7, #12]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d102      	bne.n	80163f6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80163f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80163f4:	e026      	b.n	8016444 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80163fa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80163fc:	68bb      	ldr	r3, [r7, #8]
 80163fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8016402:	2b00      	cmp	r3, #0
 8016404:	d0ef      	beq.n	80163e6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8016406:	68bb      	ldr	r3, [r7, #8]
 8016408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801640c:	2b00      	cmp	r3, #0
 801640e:	d1ea      	bne.n	80163e6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016414:	f003 0304 	and.w	r3, r3, #4
 8016418:	2b00      	cmp	r3, #0
 801641a:	d004      	beq.n	8016426 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	2204      	movs	r2, #4
 8016420:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016422:	2304      	movs	r3, #4
 8016424:	e00e      	b.n	8016444 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801642a:	f003 0301 	and.w	r3, r3, #1
 801642e:	2b00      	cmp	r3, #0
 8016430:	d004      	beq.n	801643c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	2201      	movs	r2, #1
 8016436:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016438:	2301      	movs	r3, #1
 801643a:	e003      	b.n	8016444 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	4a06      	ldr	r2, [pc, #24]	; (8016458 <SDMMC_GetCmdResp2+0x90>)
 8016440:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8016442:	2300      	movs	r3, #0
}
 8016444:	4618      	mov	r0, r3
 8016446:	3714      	adds	r7, #20
 8016448:	46bd      	mov	sp, r7
 801644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644e:	4770      	bx	lr
 8016450:	24000000 	.word	0x24000000
 8016454:	10624dd3 	.word	0x10624dd3
 8016458:	002000c5 	.word	0x002000c5

0801645c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801645c:	b480      	push	{r7}
 801645e:	b085      	sub	sp, #20
 8016460:	af00      	add	r7, sp, #0
 8016462:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8016464:	4b1a      	ldr	r3, [pc, #104]	; (80164d0 <SDMMC_GetCmdResp3+0x74>)
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	4a1a      	ldr	r2, [pc, #104]	; (80164d4 <SDMMC_GetCmdResp3+0x78>)
 801646a:	fba2 2303 	umull	r2, r3, r2, r3
 801646e:	0a5b      	lsrs	r3, r3, #9
 8016470:	f241 3288 	movw	r2, #5000	; 0x1388
 8016474:	fb02 f303 	mul.w	r3, r2, r3
 8016478:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	1e5a      	subs	r2, r3, #1
 801647e:	60fa      	str	r2, [r7, #12]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d102      	bne.n	801648a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8016484:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016488:	e01b      	b.n	80164c2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801648e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016490:	68bb      	ldr	r3, [r7, #8]
 8016492:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8016496:	2b00      	cmp	r3, #0
 8016498:	d0ef      	beq.n	801647a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801649a:	68bb      	ldr	r3, [r7, #8]
 801649c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d1ea      	bne.n	801647a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164a8:	f003 0304 	and.w	r3, r3, #4
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d004      	beq.n	80164ba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	2204      	movs	r2, #4
 80164b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80164b6:	2304      	movs	r3, #4
 80164b8:	e003      	b.n	80164c2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	4a06      	ldr	r2, [pc, #24]	; (80164d8 <SDMMC_GetCmdResp3+0x7c>)
 80164be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80164c0:	2300      	movs	r3, #0
}
 80164c2:	4618      	mov	r0, r3
 80164c4:	3714      	adds	r7, #20
 80164c6:	46bd      	mov	sp, r7
 80164c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164cc:	4770      	bx	lr
 80164ce:	bf00      	nop
 80164d0:	24000000 	.word	0x24000000
 80164d4:	10624dd3 	.word	0x10624dd3
 80164d8:	002000c5 	.word	0x002000c5

080164dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	b088      	sub	sp, #32
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	60f8      	str	r0, [r7, #12]
 80164e4:	460b      	mov	r3, r1
 80164e6:	607a      	str	r2, [r7, #4]
 80164e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80164ea:	4b35      	ldr	r3, [pc, #212]	; (80165c0 <SDMMC_GetCmdResp6+0xe4>)
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	4a35      	ldr	r2, [pc, #212]	; (80165c4 <SDMMC_GetCmdResp6+0xe8>)
 80164f0:	fba2 2303 	umull	r2, r3, r2, r3
 80164f4:	0a5b      	lsrs	r3, r3, #9
 80164f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80164fa:	fb02 f303 	mul.w	r3, r2, r3
 80164fe:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8016500:	69fb      	ldr	r3, [r7, #28]
 8016502:	1e5a      	subs	r2, r3, #1
 8016504:	61fa      	str	r2, [r7, #28]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d102      	bne.n	8016510 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801650a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801650e:	e052      	b.n	80165b6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016514:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016516:	69bb      	ldr	r3, [r7, #24]
 8016518:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801651c:	2b00      	cmp	r3, #0
 801651e:	d0ef      	beq.n	8016500 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8016520:	69bb      	ldr	r3, [r7, #24]
 8016522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016526:	2b00      	cmp	r3, #0
 8016528:	d1ea      	bne.n	8016500 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801652e:	f003 0304 	and.w	r3, r3, #4
 8016532:	2b00      	cmp	r3, #0
 8016534:	d004      	beq.n	8016540 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	2204      	movs	r2, #4
 801653a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801653c:	2304      	movs	r3, #4
 801653e:	e03a      	b.n	80165b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016544:	f003 0301 	and.w	r3, r3, #1
 8016548:	2b00      	cmp	r3, #0
 801654a:	d004      	beq.n	8016556 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	2201      	movs	r2, #1
 8016550:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016552:	2301      	movs	r3, #1
 8016554:	e02f      	b.n	80165b6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016556:	68f8      	ldr	r0, [r7, #12]
 8016558:	f7ff faf8 	bl	8015b4c <SDMMC_GetCommandResponse>
 801655c:	4603      	mov	r3, r0
 801655e:	461a      	mov	r2, r3
 8016560:	7afb      	ldrb	r3, [r7, #11]
 8016562:	4293      	cmp	r3, r2
 8016564:	d001      	beq.n	801656a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016566:	2301      	movs	r3, #1
 8016568:	e025      	b.n	80165b6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	4a16      	ldr	r2, [pc, #88]	; (80165c8 <SDMMC_GetCmdResp6+0xec>)
 801656e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8016570:	2100      	movs	r1, #0
 8016572:	68f8      	ldr	r0, [r7, #12]
 8016574:	f7ff faf8 	bl	8015b68 <SDMMC_GetResponse>
 8016578:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801657a:	697b      	ldr	r3, [r7, #20]
 801657c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8016580:	2b00      	cmp	r3, #0
 8016582:	d106      	bne.n	8016592 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8016584:	697b      	ldr	r3, [r7, #20]
 8016586:	0c1b      	lsrs	r3, r3, #16
 8016588:	b29a      	uxth	r2, r3
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801658e:	2300      	movs	r3, #0
 8016590:	e011      	b.n	80165b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8016592:	697b      	ldr	r3, [r7, #20]
 8016594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016598:	2b00      	cmp	r3, #0
 801659a:	d002      	beq.n	80165a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801659c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80165a0:	e009      	b.n	80165b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80165a2:	697b      	ldr	r3, [r7, #20]
 80165a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d002      	beq.n	80165b2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80165ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80165b0:	e001      	b.n	80165b6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80165b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	3720      	adds	r7, #32
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bd80      	pop	{r7, pc}
 80165be:	bf00      	nop
 80165c0:	24000000 	.word	0x24000000
 80165c4:	10624dd3 	.word	0x10624dd3
 80165c8:	002000c5 	.word	0x002000c5

080165cc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80165cc:	b480      	push	{r7}
 80165ce:	b085      	sub	sp, #20
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80165d4:	4b22      	ldr	r3, [pc, #136]	; (8016660 <SDMMC_GetCmdResp7+0x94>)
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	4a22      	ldr	r2, [pc, #136]	; (8016664 <SDMMC_GetCmdResp7+0x98>)
 80165da:	fba2 2303 	umull	r2, r3, r2, r3
 80165de:	0a5b      	lsrs	r3, r3, #9
 80165e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80165e4:	fb02 f303 	mul.w	r3, r2, r3
 80165e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	1e5a      	subs	r2, r3, #1
 80165ee:	60fa      	str	r2, [r7, #12]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d102      	bne.n	80165fa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80165f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80165f8:	e02c      	b.n	8016654 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165fe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016600:	68bb      	ldr	r3, [r7, #8]
 8016602:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8016606:	2b00      	cmp	r3, #0
 8016608:	d0ef      	beq.n	80165ea <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801660a:	68bb      	ldr	r3, [r7, #8]
 801660c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016610:	2b00      	cmp	r3, #0
 8016612:	d1ea      	bne.n	80165ea <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016618:	f003 0304 	and.w	r3, r3, #4
 801661c:	2b00      	cmp	r3, #0
 801661e:	d004      	beq.n	801662a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	2204      	movs	r2, #4
 8016624:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016626:	2304      	movs	r3, #4
 8016628:	e014      	b.n	8016654 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801662e:	f003 0301 	and.w	r3, r3, #1
 8016632:	2b00      	cmp	r3, #0
 8016634:	d004      	beq.n	8016640 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	2201      	movs	r2, #1
 801663a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801663c:	2301      	movs	r3, #1
 801663e:	e009      	b.n	8016654 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016648:	2b00      	cmp	r3, #0
 801664a:	d002      	beq.n	8016652 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	2240      	movs	r2, #64	; 0x40
 8016650:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8016652:	2300      	movs	r3, #0

}
 8016654:	4618      	mov	r0, r3
 8016656:	3714      	adds	r7, #20
 8016658:	46bd      	mov	sp, r7
 801665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665e:	4770      	bx	lr
 8016660:	24000000 	.word	0x24000000
 8016664:	10624dd3 	.word	0x10624dd3

08016668 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8016668:	b480      	push	{r7}
 801666a:	b085      	sub	sp, #20
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8016670:	4b11      	ldr	r3, [pc, #68]	; (80166b8 <SDMMC_GetCmdError+0x50>)
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	4a11      	ldr	r2, [pc, #68]	; (80166bc <SDMMC_GetCmdError+0x54>)
 8016676:	fba2 2303 	umull	r2, r3, r2, r3
 801667a:	0a5b      	lsrs	r3, r3, #9
 801667c:	f241 3288 	movw	r2, #5000	; 0x1388
 8016680:	fb02 f303 	mul.w	r3, r2, r3
 8016684:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	1e5a      	subs	r2, r3, #1
 801668a:	60fa      	str	r2, [r7, #12]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d102      	bne.n	8016696 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8016690:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016694:	e009      	b.n	80166aa <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801669a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d0f1      	beq.n	8016686 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	4a06      	ldr	r2, [pc, #24]	; (80166c0 <SDMMC_GetCmdError+0x58>)
 80166a6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80166a8:	2300      	movs	r3, #0
}
 80166aa:	4618      	mov	r0, r3
 80166ac:	3714      	adds	r7, #20
 80166ae:	46bd      	mov	sp, r7
 80166b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b4:	4770      	bx	lr
 80166b6:	bf00      	nop
 80166b8:	24000000 	.word	0x24000000
 80166bc:	10624dd3 	.word	0x10624dd3
 80166c0:	002000c5 	.word	0x002000c5

080166c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80166c4:	b084      	sub	sp, #16
 80166c6:	b580      	push	{r7, lr}
 80166c8:	b084      	sub	sp, #16
 80166ca:	af00      	add	r7, sp, #0
 80166cc:	6078      	str	r0, [r7, #4]
 80166ce:	f107 001c 	add.w	r0, r7, #28
 80166d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80166d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166d8:	2b01      	cmp	r3, #1
 80166da:	d120      	bne.n	801671e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	68da      	ldr	r2, [r3, #12]
 80166ec:	4b2a      	ldr	r3, [pc, #168]	; (8016798 <USB_CoreInit+0xd4>)
 80166ee:	4013      	ands	r3, r2
 80166f0:	687a      	ldr	r2, [r7, #4]
 80166f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	68db      	ldr	r3, [r3, #12]
 80166f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8016700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016702:	2b01      	cmp	r3, #1
 8016704:	d105      	bne.n	8016712 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	68db      	ldr	r3, [r3, #12]
 801670a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8016712:	6878      	ldr	r0, [r7, #4]
 8016714:	f000 faa8 	bl	8016c68 <USB_CoreReset>
 8016718:	4603      	mov	r3, r0
 801671a:	73fb      	strb	r3, [r7, #15]
 801671c:	e01a      	b.n	8016754 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	68db      	ldr	r3, [r3, #12]
 8016722:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801672a:	6878      	ldr	r0, [r7, #4]
 801672c:	f000 fa9c 	bl	8016c68 <USB_CoreReset>
 8016730:	4603      	mov	r3, r0
 8016732:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8016734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016736:	2b00      	cmp	r3, #0
 8016738:	d106      	bne.n	8016748 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801673e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	639a      	str	r2, [r3, #56]	; 0x38
 8016746:	e005      	b.n	8016754 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801674c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8016754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016756:	2b01      	cmp	r3, #1
 8016758:	d116      	bne.n	8016788 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801675e:	b29a      	uxth	r2, r3
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016768:	4b0c      	ldr	r3, [pc, #48]	; (801679c <USB_CoreInit+0xd8>)
 801676a:	4313      	orrs	r3, r2
 801676c:	687a      	ldr	r2, [r7, #4]
 801676e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	689b      	ldr	r3, [r3, #8]
 8016774:	f043 0206 	orr.w	r2, r3, #6
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	689b      	ldr	r3, [r3, #8]
 8016780:	f043 0220 	orr.w	r2, r3, #32
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8016788:	7bfb      	ldrb	r3, [r7, #15]
}
 801678a:	4618      	mov	r0, r3
 801678c:	3710      	adds	r7, #16
 801678e:	46bd      	mov	sp, r7
 8016790:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016794:	b004      	add	sp, #16
 8016796:	4770      	bx	lr
 8016798:	ffbdffbf 	.word	0xffbdffbf
 801679c:	03ee0000 	.word	0x03ee0000

080167a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80167a0:	b480      	push	{r7}
 80167a2:	b083      	sub	sp, #12
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	689b      	ldr	r3, [r3, #8]
 80167ac:	f023 0201 	bic.w	r2, r3, #1
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80167b4:	2300      	movs	r3, #0
}
 80167b6:	4618      	mov	r0, r3
 80167b8:	370c      	adds	r7, #12
 80167ba:	46bd      	mov	sp, r7
 80167bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c0:	4770      	bx	lr

080167c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80167c2:	b580      	push	{r7, lr}
 80167c4:	b084      	sub	sp, #16
 80167c6:	af00      	add	r7, sp, #0
 80167c8:	6078      	str	r0, [r7, #4]
 80167ca:	460b      	mov	r3, r1
 80167cc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80167ce:	2300      	movs	r3, #0
 80167d0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	68db      	ldr	r3, [r3, #12]
 80167d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80167de:	78fb      	ldrb	r3, [r7, #3]
 80167e0:	2b01      	cmp	r3, #1
 80167e2:	d115      	bne.n	8016810 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	68db      	ldr	r3, [r3, #12]
 80167e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80167f0:	2001      	movs	r0, #1
 80167f2:	f7ec febd 	bl	8003570 <HAL_Delay>
      ms++;
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	3301      	adds	r3, #1
 80167fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80167fc:	6878      	ldr	r0, [r7, #4]
 80167fe:	f000 fa25 	bl	8016c4c <USB_GetMode>
 8016802:	4603      	mov	r3, r0
 8016804:	2b01      	cmp	r3, #1
 8016806:	d01e      	beq.n	8016846 <USB_SetCurrentMode+0x84>
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	2b31      	cmp	r3, #49	; 0x31
 801680c:	d9f0      	bls.n	80167f0 <USB_SetCurrentMode+0x2e>
 801680e:	e01a      	b.n	8016846 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8016810:	78fb      	ldrb	r3, [r7, #3]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d115      	bne.n	8016842 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	68db      	ldr	r3, [r3, #12]
 801681a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8016822:	2001      	movs	r0, #1
 8016824:	f7ec fea4 	bl	8003570 <HAL_Delay>
      ms++;
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	3301      	adds	r3, #1
 801682c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801682e:	6878      	ldr	r0, [r7, #4]
 8016830:	f000 fa0c 	bl	8016c4c <USB_GetMode>
 8016834:	4603      	mov	r3, r0
 8016836:	2b00      	cmp	r3, #0
 8016838:	d005      	beq.n	8016846 <USB_SetCurrentMode+0x84>
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	2b31      	cmp	r3, #49	; 0x31
 801683e:	d9f0      	bls.n	8016822 <USB_SetCurrentMode+0x60>
 8016840:	e001      	b.n	8016846 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8016842:	2301      	movs	r3, #1
 8016844:	e005      	b.n	8016852 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	2b32      	cmp	r3, #50	; 0x32
 801684a:	d101      	bne.n	8016850 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801684c:	2301      	movs	r3, #1
 801684e:	e000      	b.n	8016852 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8016850:	2300      	movs	r3, #0
}
 8016852:	4618      	mov	r0, r3
 8016854:	3710      	adds	r7, #16
 8016856:	46bd      	mov	sp, r7
 8016858:	bd80      	pop	{r7, pc}
	...

0801685c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801685c:	b084      	sub	sp, #16
 801685e:	b580      	push	{r7, lr}
 8016860:	b086      	sub	sp, #24
 8016862:	af00      	add	r7, sp, #0
 8016864:	6078      	str	r0, [r7, #4]
 8016866:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801686a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801686e:	2300      	movs	r3, #0
 8016870:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8016876:	2300      	movs	r3, #0
 8016878:	613b      	str	r3, [r7, #16]
 801687a:	e009      	b.n	8016890 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801687c:	687a      	ldr	r2, [r7, #4]
 801687e:	693b      	ldr	r3, [r7, #16]
 8016880:	3340      	adds	r3, #64	; 0x40
 8016882:	009b      	lsls	r3, r3, #2
 8016884:	4413      	add	r3, r2
 8016886:	2200      	movs	r2, #0
 8016888:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801688a:	693b      	ldr	r3, [r7, #16]
 801688c:	3301      	adds	r3, #1
 801688e:	613b      	str	r3, [r7, #16]
 8016890:	693b      	ldr	r3, [r7, #16]
 8016892:	2b0e      	cmp	r3, #14
 8016894:	d9f2      	bls.n	801687c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8016896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016898:	2b00      	cmp	r3, #0
 801689a:	d11c      	bne.n	80168d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80168a2:	685b      	ldr	r3, [r3, #4]
 80168a4:	68fa      	ldr	r2, [r7, #12]
 80168a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80168aa:	f043 0302 	orr.w	r3, r3, #2
 80168ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	601a      	str	r2, [r3, #0]
 80168d4:	e005      	b.n	80168e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80168e8:	461a      	mov	r2, r3
 80168ea:	2300      	movs	r3, #0
 80168ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80168f4:	4619      	mov	r1, r3
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80168fc:	461a      	mov	r2, r3
 80168fe:	680b      	ldr	r3, [r1, #0]
 8016900:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8016902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016904:	2b01      	cmp	r3, #1
 8016906:	d10c      	bne.n	8016922 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8016908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801690a:	2b00      	cmp	r3, #0
 801690c:	d104      	bne.n	8016918 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801690e:	2100      	movs	r1, #0
 8016910:	6878      	ldr	r0, [r7, #4]
 8016912:	f000 f961 	bl	8016bd8 <USB_SetDevSpeed>
 8016916:	e008      	b.n	801692a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8016918:	2101      	movs	r1, #1
 801691a:	6878      	ldr	r0, [r7, #4]
 801691c:	f000 f95c 	bl	8016bd8 <USB_SetDevSpeed>
 8016920:	e003      	b.n	801692a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8016922:	2103      	movs	r1, #3
 8016924:	6878      	ldr	r0, [r7, #4]
 8016926:	f000 f957 	bl	8016bd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801692a:	2110      	movs	r1, #16
 801692c:	6878      	ldr	r0, [r7, #4]
 801692e:	f000 f8f3 	bl	8016b18 <USB_FlushTxFifo>
 8016932:	4603      	mov	r3, r0
 8016934:	2b00      	cmp	r3, #0
 8016936:	d001      	beq.n	801693c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8016938:	2301      	movs	r3, #1
 801693a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801693c:	6878      	ldr	r0, [r7, #4]
 801693e:	f000 f91d 	bl	8016b7c <USB_FlushRxFifo>
 8016942:	4603      	mov	r3, r0
 8016944:	2b00      	cmp	r3, #0
 8016946:	d001      	beq.n	801694c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8016948:	2301      	movs	r3, #1
 801694a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801694c:	68fb      	ldr	r3, [r7, #12]
 801694e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016952:	461a      	mov	r2, r3
 8016954:	2300      	movs	r3, #0
 8016956:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801695e:	461a      	mov	r2, r3
 8016960:	2300      	movs	r3, #0
 8016962:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801696a:	461a      	mov	r2, r3
 801696c:	2300      	movs	r3, #0
 801696e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016970:	2300      	movs	r3, #0
 8016972:	613b      	str	r3, [r7, #16]
 8016974:	e043      	b.n	80169fe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016976:	693b      	ldr	r3, [r7, #16]
 8016978:	015a      	lsls	r2, r3, #5
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	4413      	add	r3, r2
 801697e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801698c:	d118      	bne.n	80169c0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801698e:	693b      	ldr	r3, [r7, #16]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d10a      	bne.n	80169aa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8016994:	693b      	ldr	r3, [r7, #16]
 8016996:	015a      	lsls	r2, r3, #5
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	4413      	add	r3, r2
 801699c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80169a0:	461a      	mov	r2, r3
 80169a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80169a6:	6013      	str	r3, [r2, #0]
 80169a8:	e013      	b.n	80169d2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80169aa:	693b      	ldr	r3, [r7, #16]
 80169ac:	015a      	lsls	r2, r3, #5
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	4413      	add	r3, r2
 80169b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80169b6:	461a      	mov	r2, r3
 80169b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80169bc:	6013      	str	r3, [r2, #0]
 80169be:	e008      	b.n	80169d2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80169c0:	693b      	ldr	r3, [r7, #16]
 80169c2:	015a      	lsls	r2, r3, #5
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	4413      	add	r3, r2
 80169c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80169cc:	461a      	mov	r2, r3
 80169ce:	2300      	movs	r3, #0
 80169d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80169d2:	693b      	ldr	r3, [r7, #16]
 80169d4:	015a      	lsls	r2, r3, #5
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	4413      	add	r3, r2
 80169da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80169de:	461a      	mov	r2, r3
 80169e0:	2300      	movs	r3, #0
 80169e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80169e4:	693b      	ldr	r3, [r7, #16]
 80169e6:	015a      	lsls	r2, r3, #5
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	4413      	add	r3, r2
 80169ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80169f0:	461a      	mov	r2, r3
 80169f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80169f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80169f8:	693b      	ldr	r3, [r7, #16]
 80169fa:	3301      	adds	r3, #1
 80169fc:	613b      	str	r3, [r7, #16]
 80169fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a00:	693a      	ldr	r2, [r7, #16]
 8016a02:	429a      	cmp	r2, r3
 8016a04:	d3b7      	bcc.n	8016976 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016a06:	2300      	movs	r3, #0
 8016a08:	613b      	str	r3, [r7, #16]
 8016a0a:	e043      	b.n	8016a94 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016a0c:	693b      	ldr	r3, [r7, #16]
 8016a0e:	015a      	lsls	r2, r3, #5
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	4413      	add	r3, r2
 8016a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016a22:	d118      	bne.n	8016a56 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8016a24:	693b      	ldr	r3, [r7, #16]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d10a      	bne.n	8016a40 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8016a2a:	693b      	ldr	r3, [r7, #16]
 8016a2c:	015a      	lsls	r2, r3, #5
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	4413      	add	r3, r2
 8016a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016a36:	461a      	mov	r2, r3
 8016a38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8016a3c:	6013      	str	r3, [r2, #0]
 8016a3e:	e013      	b.n	8016a68 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8016a40:	693b      	ldr	r3, [r7, #16]
 8016a42:	015a      	lsls	r2, r3, #5
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	4413      	add	r3, r2
 8016a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016a4c:	461a      	mov	r2, r3
 8016a4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8016a52:	6013      	str	r3, [r2, #0]
 8016a54:	e008      	b.n	8016a68 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8016a56:	693b      	ldr	r3, [r7, #16]
 8016a58:	015a      	lsls	r2, r3, #5
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	4413      	add	r3, r2
 8016a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016a62:	461a      	mov	r2, r3
 8016a64:	2300      	movs	r3, #0
 8016a66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8016a68:	693b      	ldr	r3, [r7, #16]
 8016a6a:	015a      	lsls	r2, r3, #5
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	4413      	add	r3, r2
 8016a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016a74:	461a      	mov	r2, r3
 8016a76:	2300      	movs	r3, #0
 8016a78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8016a7a:	693b      	ldr	r3, [r7, #16]
 8016a7c:	015a      	lsls	r2, r3, #5
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	4413      	add	r3, r2
 8016a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016a86:	461a      	mov	r2, r3
 8016a88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8016a8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016a8e:	693b      	ldr	r3, [r7, #16]
 8016a90:	3301      	adds	r3, #1
 8016a92:	613b      	str	r3, [r7, #16]
 8016a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a96:	693a      	ldr	r2, [r7, #16]
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	d3b7      	bcc.n	8016a0c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016aa2:	691b      	ldr	r3, [r3, #16]
 8016aa4:	68fa      	ldr	r2, [r7, #12]
 8016aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016aaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016aae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	2200      	movs	r2, #0
 8016ab4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8016abc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8016abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d105      	bne.n	8016ad0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	699b      	ldr	r3, [r3, #24]
 8016ac8:	f043 0210 	orr.w	r2, r3, #16
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	699a      	ldr	r2, [r3, #24]
 8016ad4:	4b0e      	ldr	r3, [pc, #56]	; (8016b10 <USB_DevInit+0x2b4>)
 8016ad6:	4313      	orrs	r3, r2
 8016ad8:	687a      	ldr	r2, [r7, #4]
 8016ada:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8016adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d005      	beq.n	8016aee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	699b      	ldr	r3, [r3, #24]
 8016ae6:	f043 0208 	orr.w	r2, r3, #8
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8016aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016af0:	2b01      	cmp	r3, #1
 8016af2:	d105      	bne.n	8016b00 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	699a      	ldr	r2, [r3, #24]
 8016af8:	4b06      	ldr	r3, [pc, #24]	; (8016b14 <USB_DevInit+0x2b8>)
 8016afa:	4313      	orrs	r3, r2
 8016afc:	687a      	ldr	r2, [r7, #4]
 8016afe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8016b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b02:	4618      	mov	r0, r3
 8016b04:	3718      	adds	r7, #24
 8016b06:	46bd      	mov	sp, r7
 8016b08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016b0c:	b004      	add	sp, #16
 8016b0e:	4770      	bx	lr
 8016b10:	803c3800 	.word	0x803c3800
 8016b14:	40000004 	.word	0x40000004

08016b18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8016b18:	b480      	push	{r7}
 8016b1a:	b085      	sub	sp, #20
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
 8016b20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8016b22:	2300      	movs	r3, #0
 8016b24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	3301      	adds	r3, #1
 8016b2a:	60fb      	str	r3, [r7, #12]
 8016b2c:	4a12      	ldr	r2, [pc, #72]	; (8016b78 <USB_FlushTxFifo+0x60>)
 8016b2e:	4293      	cmp	r3, r2
 8016b30:	d901      	bls.n	8016b36 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8016b32:	2303      	movs	r3, #3
 8016b34:	e01a      	b.n	8016b6c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	691b      	ldr	r3, [r3, #16]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	daf3      	bge.n	8016b26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8016b3e:	2300      	movs	r3, #0
 8016b40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8016b42:	683b      	ldr	r3, [r7, #0]
 8016b44:	019b      	lsls	r3, r3, #6
 8016b46:	f043 0220 	orr.w	r2, r3, #32
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	3301      	adds	r3, #1
 8016b52:	60fb      	str	r3, [r7, #12]
 8016b54:	4a08      	ldr	r2, [pc, #32]	; (8016b78 <USB_FlushTxFifo+0x60>)
 8016b56:	4293      	cmp	r3, r2
 8016b58:	d901      	bls.n	8016b5e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8016b5a:	2303      	movs	r3, #3
 8016b5c:	e006      	b.n	8016b6c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	691b      	ldr	r3, [r3, #16]
 8016b62:	f003 0320 	and.w	r3, r3, #32
 8016b66:	2b20      	cmp	r3, #32
 8016b68:	d0f1      	beq.n	8016b4e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8016b6a:	2300      	movs	r3, #0
}
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	3714      	adds	r7, #20
 8016b70:	46bd      	mov	sp, r7
 8016b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b76:	4770      	bx	lr
 8016b78:	00030d40 	.word	0x00030d40

08016b7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8016b7c:	b480      	push	{r7}
 8016b7e:	b085      	sub	sp, #20
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016b84:	2300      	movs	r3, #0
 8016b86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	3301      	adds	r3, #1
 8016b8c:	60fb      	str	r3, [r7, #12]
 8016b8e:	4a11      	ldr	r2, [pc, #68]	; (8016bd4 <USB_FlushRxFifo+0x58>)
 8016b90:	4293      	cmp	r3, r2
 8016b92:	d901      	bls.n	8016b98 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8016b94:	2303      	movs	r3, #3
 8016b96:	e017      	b.n	8016bc8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	691b      	ldr	r3, [r3, #16]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	daf3      	bge.n	8016b88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	2210      	movs	r2, #16
 8016ba8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	3301      	adds	r3, #1
 8016bae:	60fb      	str	r3, [r7, #12]
 8016bb0:	4a08      	ldr	r2, [pc, #32]	; (8016bd4 <USB_FlushRxFifo+0x58>)
 8016bb2:	4293      	cmp	r3, r2
 8016bb4:	d901      	bls.n	8016bba <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8016bb6:	2303      	movs	r3, #3
 8016bb8:	e006      	b.n	8016bc8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	691b      	ldr	r3, [r3, #16]
 8016bbe:	f003 0310 	and.w	r3, r3, #16
 8016bc2:	2b10      	cmp	r3, #16
 8016bc4:	d0f1      	beq.n	8016baa <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8016bc6:	2300      	movs	r3, #0
}
 8016bc8:	4618      	mov	r0, r3
 8016bca:	3714      	adds	r7, #20
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd2:	4770      	bx	lr
 8016bd4:	00030d40 	.word	0x00030d40

08016bd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8016bd8:	b480      	push	{r7}
 8016bda:	b085      	sub	sp, #20
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
 8016be0:	460b      	mov	r3, r1
 8016be2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016bee:	681a      	ldr	r2, [r3, #0]
 8016bf0:	78fb      	ldrb	r3, [r7, #3]
 8016bf2:	68f9      	ldr	r1, [r7, #12]
 8016bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016bf8:	4313      	orrs	r3, r2
 8016bfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8016bfc:	2300      	movs	r3, #0
}
 8016bfe:	4618      	mov	r0, r3
 8016c00:	3714      	adds	r7, #20
 8016c02:	46bd      	mov	sp, r7
 8016c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c08:	4770      	bx	lr

08016c0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016c0a:	b480      	push	{r7}
 8016c0c:	b085      	sub	sp, #20
 8016c0e:	af00      	add	r7, sp, #0
 8016c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	68fa      	ldr	r2, [r7, #12]
 8016c20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016c24:	f023 0303 	bic.w	r3, r3, #3
 8016c28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c30:	685b      	ldr	r3, [r3, #4]
 8016c32:	68fa      	ldr	r2, [r7, #12]
 8016c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016c38:	f043 0302 	orr.w	r3, r3, #2
 8016c3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016c3e:	2300      	movs	r3, #0
}
 8016c40:	4618      	mov	r0, r3
 8016c42:	3714      	adds	r7, #20
 8016c44:	46bd      	mov	sp, r7
 8016c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c4a:	4770      	bx	lr

08016c4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8016c4c:	b480      	push	{r7}
 8016c4e:	b083      	sub	sp, #12
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	695b      	ldr	r3, [r3, #20]
 8016c58:	f003 0301 	and.w	r3, r3, #1
}
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	370c      	adds	r7, #12
 8016c60:	46bd      	mov	sp, r7
 8016c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c66:	4770      	bx	lr

08016c68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8016c68:	b480      	push	{r7}
 8016c6a:	b085      	sub	sp, #20
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016c70:	2300      	movs	r3, #0
 8016c72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	3301      	adds	r3, #1
 8016c78:	60fb      	str	r3, [r7, #12]
 8016c7a:	4a13      	ldr	r2, [pc, #76]	; (8016cc8 <USB_CoreReset+0x60>)
 8016c7c:	4293      	cmp	r3, r2
 8016c7e:	d901      	bls.n	8016c84 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8016c80:	2303      	movs	r3, #3
 8016c82:	e01a      	b.n	8016cba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	691b      	ldr	r3, [r3, #16]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	daf3      	bge.n	8016c74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	691b      	ldr	r3, [r3, #16]
 8016c94:	f043 0201 	orr.w	r2, r3, #1
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	3301      	adds	r3, #1
 8016ca0:	60fb      	str	r3, [r7, #12]
 8016ca2:	4a09      	ldr	r2, [pc, #36]	; (8016cc8 <USB_CoreReset+0x60>)
 8016ca4:	4293      	cmp	r3, r2
 8016ca6:	d901      	bls.n	8016cac <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8016ca8:	2303      	movs	r3, #3
 8016caa:	e006      	b.n	8016cba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	691b      	ldr	r3, [r3, #16]
 8016cb0:	f003 0301 	and.w	r3, r3, #1
 8016cb4:	2b01      	cmp	r3, #1
 8016cb6:	d0f1      	beq.n	8016c9c <USB_CoreReset+0x34>

  return HAL_OK;
 8016cb8:	2300      	movs	r3, #0
}
 8016cba:	4618      	mov	r0, r3
 8016cbc:	3714      	adds	r7, #20
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc4:	4770      	bx	lr
 8016cc6:	bf00      	nop
 8016cc8:	00030d40 	.word	0x00030d40

08016ccc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8016cd0:	4904      	ldr	r1, [pc, #16]	; (8016ce4 <MX_FATFS_Init+0x18>)
 8016cd2:	4805      	ldr	r0, [pc, #20]	; (8016ce8 <MX_FATFS_Init+0x1c>)
 8016cd4:	f005 f838 	bl	801bd48 <FATFS_LinkDriver>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	461a      	mov	r2, r3
 8016cdc:	4b03      	ldr	r3, [pc, #12]	; (8016cec <MX_FATFS_Init+0x20>)
 8016cde:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8016ce0:	bf00      	nop
 8016ce2:	bd80      	pop	{r7, pc}
 8016ce4:	240010cc 	.word	0x240010cc
 8016ce8:	0801e0a0 	.word	0x0801e0a0
 8016cec:	240010c8 	.word	0x240010c8

08016cf0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8016cf0:	b480      	push	{r7}
 8016cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8016cf4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfe:	4770      	bx	lr

08016d00 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8016d00:	b580      	push	{r7, lr}
 8016d02:	b082      	sub	sp, #8
 8016d04:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8016d06:	2300      	movs	r3, #0
 8016d08:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8016d0a:	f000 f885 	bl	8016e18 <BSP_SD_IsDetected>
 8016d0e:	4603      	mov	r3, r0
 8016d10:	2b01      	cmp	r3, #1
 8016d12:	d001      	beq.n	8016d18 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8016d14:	2302      	movs	r3, #2
 8016d16:	e012      	b.n	8016d3e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8016d18:	480b      	ldr	r0, [pc, #44]	; (8016d48 <BSP_SD_Init+0x48>)
 8016d1a:	f7f7 fe6b 	bl	800e9f4 <HAL_SD_Init>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8016d22:	79fb      	ldrb	r3, [r7, #7]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d109      	bne.n	8016d3c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8016d28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8016d2c:	4806      	ldr	r0, [pc, #24]	; (8016d48 <BSP_SD_Init+0x48>)
 8016d2e:	f7f8 fdab 	bl	800f888 <HAL_SD_ConfigWideBusOperation>
 8016d32:	4603      	mov	r3, r0
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d001      	beq.n	8016d3c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8016d38:	2301      	movs	r3, #1
 8016d3a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8016d3c:	79fb      	ldrb	r3, [r7, #7]
}
 8016d3e:	4618      	mov	r0, r3
 8016d40:	3708      	adds	r7, #8
 8016d42:	46bd      	mov	sp, r7
 8016d44:	bd80      	pop	{r7, pc}
 8016d46:	bf00      	nop
 8016d48:	240007c0 	.word	0x240007c0

08016d4c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b086      	sub	sp, #24
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	60f8      	str	r0, [r7, #12]
 8016d54:	60b9      	str	r1, [r7, #8]
 8016d56:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8016d58:	2300      	movs	r3, #0
 8016d5a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	68ba      	ldr	r2, [r7, #8]
 8016d60:	68f9      	ldr	r1, [r7, #12]
 8016d62:	4806      	ldr	r0, [pc, #24]	; (8016d7c <BSP_SD_ReadBlocks_DMA+0x30>)
 8016d64:	f7f7 fff0 	bl	800ed48 <HAL_SD_ReadBlocks_DMA>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d001      	beq.n	8016d72 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8016d6e:	2301      	movs	r3, #1
 8016d70:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8016d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d74:	4618      	mov	r0, r3
 8016d76:	3718      	adds	r7, #24
 8016d78:	46bd      	mov	sp, r7
 8016d7a:	bd80      	pop	{r7, pc}
 8016d7c:	240007c0 	.word	0x240007c0

08016d80 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b086      	sub	sp, #24
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	60f8      	str	r0, [r7, #12]
 8016d88:	60b9      	str	r1, [r7, #8]
 8016d8a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	68ba      	ldr	r2, [r7, #8]
 8016d94:	68f9      	ldr	r1, [r7, #12]
 8016d96:	4806      	ldr	r0, [pc, #24]	; (8016db0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8016d98:	f7f8 f87e 	bl	800ee98 <HAL_SD_WriteBlocks_DMA>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d001      	beq.n	8016da6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8016da2:	2301      	movs	r3, #1
 8016da4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8016da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016da8:	4618      	mov	r0, r3
 8016daa:	3718      	adds	r7, #24
 8016dac:	46bd      	mov	sp, r7
 8016dae:	bd80      	pop	{r7, pc}
 8016db0:	240007c0 	.word	0x240007c0

08016db4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8016db4:	b580      	push	{r7, lr}
 8016db6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8016db8:	4805      	ldr	r0, [pc, #20]	; (8016dd0 <BSP_SD_GetCardState+0x1c>)
 8016dba:	f7f8 fe89 	bl	800fad0 <HAL_SD_GetCardState>
 8016dbe:	4603      	mov	r3, r0
 8016dc0:	2b04      	cmp	r3, #4
 8016dc2:	bf14      	ite	ne
 8016dc4:	2301      	movne	r3, #1
 8016dc6:	2300      	moveq	r3, #0
 8016dc8:	b2db      	uxtb	r3, r3
}
 8016dca:	4618      	mov	r0, r3
 8016dcc:	bd80      	pop	{r7, pc}
 8016dce:	bf00      	nop
 8016dd0:	240007c0 	.word	0x240007c0

08016dd4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b082      	sub	sp, #8
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8016ddc:	6879      	ldr	r1, [r7, #4]
 8016dde:	4803      	ldr	r0, [pc, #12]	; (8016dec <BSP_SD_GetCardInfo+0x18>)
 8016de0:	f7f8 fd26 	bl	800f830 <HAL_SD_GetCardInfo>
}
 8016de4:	bf00      	nop
 8016de6:	3708      	adds	r7, #8
 8016de8:	46bd      	mov	sp, r7
 8016dea:	bd80      	pop	{r7, pc}
 8016dec:	240007c0 	.word	0x240007c0

08016df0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b082      	sub	sp, #8
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8016df8:	f000 f9a0 	bl	801713c <BSP_SD_WriteCpltCallback>
}
 8016dfc:	bf00      	nop
 8016dfe:	3708      	adds	r7, #8
 8016e00:	46bd      	mov	sp, r7
 8016e02:	bd80      	pop	{r7, pc}

08016e04 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b082      	sub	sp, #8
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8016e0c:	f000 f9a2 	bl	8017154 <BSP_SD_ReadCpltCallback>
}
 8016e10:	bf00      	nop
 8016e12:	3708      	adds	r7, #8
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}

08016e18 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b082      	sub	sp, #8
 8016e1c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8016e1e:	2301      	movs	r3, #1
 8016e20:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8016e22:	f000 f80b 	bl	8016e3c <BSP_PlatformIsDetected>
 8016e26:	4603      	mov	r3, r0
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d101      	bne.n	8016e30 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8016e30:	79fb      	ldrb	r3, [r7, #7]
 8016e32:	b2db      	uxtb	r3, r3
}
 8016e34:	4618      	mov	r0, r3
 8016e36:	3708      	adds	r7, #8
 8016e38:	46bd      	mov	sp, r7
 8016e3a:	bd80      	pop	{r7, pc}

08016e3c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b082      	sub	sp, #8
 8016e40:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8016e42:	2301      	movs	r3, #1
 8016e44:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8016e46:	2110      	movs	r1, #16
 8016e48:	4806      	ldr	r0, [pc, #24]	; (8016e64 <BSP_PlatformIsDetected+0x28>)
 8016e4a:	f7f1 fb99 	bl	8008580 <HAL_GPIO_ReadPin>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d001      	beq.n	8016e58 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8016e54:	2300      	movs	r3, #0
 8016e56:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8016e58:	79fb      	ldrb	r3, [r7, #7]
}
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	3708      	adds	r7, #8
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	bd80      	pop	{r7, pc}
 8016e62:	bf00      	nop
 8016e64:	58020c00 	.word	0x58020c00

08016e68 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b084      	sub	sp, #16
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8016e70:	f7ec fb72 	bl	8003558 <HAL_GetTick>
 8016e74:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8016e76:	e006      	b.n	8016e86 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8016e78:	f7ff ff9c 	bl	8016db4 <BSP_SD_GetCardState>
 8016e7c:	4603      	mov	r3, r0
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d101      	bne.n	8016e86 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8016e82:	2300      	movs	r3, #0
 8016e84:	e009      	b.n	8016e9a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8016e86:	f7ec fb67 	bl	8003558 <HAL_GetTick>
 8016e8a:	4602      	mov	r2, r0
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	1ad3      	subs	r3, r2, r3
 8016e90:	687a      	ldr	r2, [r7, #4]
 8016e92:	429a      	cmp	r2, r3
 8016e94:	d8f0      	bhi.n	8016e78 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8016e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	3710      	adds	r7, #16
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	bd80      	pop	{r7, pc}
	...

08016ea4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8016ea4:	b580      	push	{r7, lr}
 8016ea6:	b082      	sub	sp, #8
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	4603      	mov	r3, r0
 8016eac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8016eae:	4b0b      	ldr	r3, [pc, #44]	; (8016edc <SD_CheckStatus+0x38>)
 8016eb0:	2201      	movs	r2, #1
 8016eb2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8016eb4:	f7ff ff7e 	bl	8016db4 <BSP_SD_GetCardState>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d107      	bne.n	8016ece <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8016ebe:	4b07      	ldr	r3, [pc, #28]	; (8016edc <SD_CheckStatus+0x38>)
 8016ec0:	781b      	ldrb	r3, [r3, #0]
 8016ec2:	b2db      	uxtb	r3, r3
 8016ec4:	f023 0301 	bic.w	r3, r3, #1
 8016ec8:	b2da      	uxtb	r2, r3
 8016eca:	4b04      	ldr	r3, [pc, #16]	; (8016edc <SD_CheckStatus+0x38>)
 8016ecc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8016ece:	4b03      	ldr	r3, [pc, #12]	; (8016edc <SD_CheckStatus+0x38>)
 8016ed0:	781b      	ldrb	r3, [r3, #0]
 8016ed2:	b2db      	uxtb	r3, r3
}
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	3708      	adds	r7, #8
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	bd80      	pop	{r7, pc}
 8016edc:	2400000d 	.word	0x2400000d

08016ee0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b082      	sub	sp, #8
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8016eea:	f7ff ff09 	bl	8016d00 <BSP_SD_Init>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d107      	bne.n	8016f04 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8016ef4:	79fb      	ldrb	r3, [r7, #7]
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f7ff ffd4 	bl	8016ea4 <SD_CheckStatus>
 8016efc:	4603      	mov	r3, r0
 8016efe:	461a      	mov	r2, r3
 8016f00:	4b04      	ldr	r3, [pc, #16]	; (8016f14 <SD_initialize+0x34>)
 8016f02:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8016f04:	4b03      	ldr	r3, [pc, #12]	; (8016f14 <SD_initialize+0x34>)
 8016f06:	781b      	ldrb	r3, [r3, #0]
 8016f08:	b2db      	uxtb	r3, r3
}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	3708      	adds	r7, #8
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	bd80      	pop	{r7, pc}
 8016f12:	bf00      	nop
 8016f14:	2400000d 	.word	0x2400000d

08016f18 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b082      	sub	sp, #8
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	4603      	mov	r3, r0
 8016f20:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8016f22:	79fb      	ldrb	r3, [r7, #7]
 8016f24:	4618      	mov	r0, r3
 8016f26:	f7ff ffbd 	bl	8016ea4 <SD_CheckStatus>
 8016f2a:	4603      	mov	r3, r0
}
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	3708      	adds	r7, #8
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bd80      	pop	{r7, pc}

08016f34 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b086      	sub	sp, #24
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	60b9      	str	r1, [r7, #8]
 8016f3c:	607a      	str	r2, [r7, #4]
 8016f3e:	603b      	str	r3, [r7, #0]
 8016f40:	4603      	mov	r3, r0
 8016f42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8016f44:	2301      	movs	r3, #1
 8016f46:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8016f48:	f247 5030 	movw	r0, #30000	; 0x7530
 8016f4c:	f7ff ff8c 	bl	8016e68 <SD_CheckStatusWithTimeout>
 8016f50:	4603      	mov	r3, r0
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	da01      	bge.n	8016f5a <SD_read+0x26>
  {
    return res;
 8016f56:	7dfb      	ldrb	r3, [r7, #23]
 8016f58:	e03b      	b.n	8016fd2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8016f5a:	683a      	ldr	r2, [r7, #0]
 8016f5c:	6879      	ldr	r1, [r7, #4]
 8016f5e:	68b8      	ldr	r0, [r7, #8]
 8016f60:	f7ff fef4 	bl	8016d4c <BSP_SD_ReadBlocks_DMA>
 8016f64:	4603      	mov	r3, r0
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d132      	bne.n	8016fd0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8016f6a:	4b1c      	ldr	r3, [pc, #112]	; (8016fdc <SD_read+0xa8>)
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8016f70:	f7ec faf2 	bl	8003558 <HAL_GetTick>
 8016f74:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8016f76:	bf00      	nop
 8016f78:	4b18      	ldr	r3, [pc, #96]	; (8016fdc <SD_read+0xa8>)
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d108      	bne.n	8016f92 <SD_read+0x5e>
 8016f80:	f7ec faea 	bl	8003558 <HAL_GetTick>
 8016f84:	4602      	mov	r2, r0
 8016f86:	693b      	ldr	r3, [r7, #16]
 8016f88:	1ad3      	subs	r3, r2, r3
 8016f8a:	f247 522f 	movw	r2, #29999	; 0x752f
 8016f8e:	4293      	cmp	r3, r2
 8016f90:	d9f2      	bls.n	8016f78 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8016f92:	4b12      	ldr	r3, [pc, #72]	; (8016fdc <SD_read+0xa8>)
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d102      	bne.n	8016fa0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8016f9a:	2301      	movs	r3, #1
 8016f9c:	75fb      	strb	r3, [r7, #23]
 8016f9e:	e017      	b.n	8016fd0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8016fa0:	4b0e      	ldr	r3, [pc, #56]	; (8016fdc <SD_read+0xa8>)
 8016fa2:	2200      	movs	r2, #0
 8016fa4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8016fa6:	f7ec fad7 	bl	8003558 <HAL_GetTick>
 8016faa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8016fac:	e007      	b.n	8016fbe <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8016fae:	f7ff ff01 	bl	8016db4 <BSP_SD_GetCardState>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d102      	bne.n	8016fbe <SD_read+0x8a>
          {
            res = RES_OK;
 8016fb8:	2300      	movs	r3, #0
 8016fba:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8016fbc:	e008      	b.n	8016fd0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8016fbe:	f7ec facb 	bl	8003558 <HAL_GetTick>
 8016fc2:	4602      	mov	r2, r0
 8016fc4:	693b      	ldr	r3, [r7, #16]
 8016fc6:	1ad3      	subs	r3, r2, r3
 8016fc8:	f247 522f 	movw	r2, #29999	; 0x752f
 8016fcc:	4293      	cmp	r3, r2
 8016fce:	d9ee      	bls.n	8016fae <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8016fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	3718      	adds	r7, #24
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	bd80      	pop	{r7, pc}
 8016fda:	bf00      	nop
 8016fdc:	2400130c 	.word	0x2400130c

08016fe0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	b086      	sub	sp, #24
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	60b9      	str	r1, [r7, #8]
 8016fe8:	607a      	str	r2, [r7, #4]
 8016fea:	603b      	str	r3, [r7, #0]
 8016fec:	4603      	mov	r3, r0
 8016fee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8016ff4:	4b24      	ldr	r3, [pc, #144]	; (8017088 <SD_write+0xa8>)
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8016ffa:	f247 5030 	movw	r0, #30000	; 0x7530
 8016ffe:	f7ff ff33 	bl	8016e68 <SD_CheckStatusWithTimeout>
 8017002:	4603      	mov	r3, r0
 8017004:	2b00      	cmp	r3, #0
 8017006:	da01      	bge.n	801700c <SD_write+0x2c>
  {
    return res;
 8017008:	7dfb      	ldrb	r3, [r7, #23]
 801700a:	e038      	b.n	801707e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801700c:	683a      	ldr	r2, [r7, #0]
 801700e:	6879      	ldr	r1, [r7, #4]
 8017010:	68b8      	ldr	r0, [r7, #8]
 8017012:	f7ff feb5 	bl	8016d80 <BSP_SD_WriteBlocks_DMA>
 8017016:	4603      	mov	r3, r0
 8017018:	2b00      	cmp	r3, #0
 801701a:	d12f      	bne.n	801707c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801701c:	f7ec fa9c 	bl	8003558 <HAL_GetTick>
 8017020:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8017022:	bf00      	nop
 8017024:	4b18      	ldr	r3, [pc, #96]	; (8017088 <SD_write+0xa8>)
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d108      	bne.n	801703e <SD_write+0x5e>
 801702c:	f7ec fa94 	bl	8003558 <HAL_GetTick>
 8017030:	4602      	mov	r2, r0
 8017032:	693b      	ldr	r3, [r7, #16]
 8017034:	1ad3      	subs	r3, r2, r3
 8017036:	f247 522f 	movw	r2, #29999	; 0x752f
 801703a:	4293      	cmp	r3, r2
 801703c:	d9f2      	bls.n	8017024 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801703e:	4b12      	ldr	r3, [pc, #72]	; (8017088 <SD_write+0xa8>)
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d102      	bne.n	801704c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8017046:	2301      	movs	r3, #1
 8017048:	75fb      	strb	r3, [r7, #23]
 801704a:	e017      	b.n	801707c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801704c:	4b0e      	ldr	r3, [pc, #56]	; (8017088 <SD_write+0xa8>)
 801704e:	2200      	movs	r2, #0
 8017050:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8017052:	f7ec fa81 	bl	8003558 <HAL_GetTick>
 8017056:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8017058:	e007      	b.n	801706a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801705a:	f7ff feab 	bl	8016db4 <BSP_SD_GetCardState>
 801705e:	4603      	mov	r3, r0
 8017060:	2b00      	cmp	r3, #0
 8017062:	d102      	bne.n	801706a <SD_write+0x8a>
          {
            res = RES_OK;
 8017064:	2300      	movs	r3, #0
 8017066:	75fb      	strb	r3, [r7, #23]
            break;
 8017068:	e008      	b.n	801707c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801706a:	f7ec fa75 	bl	8003558 <HAL_GetTick>
 801706e:	4602      	mov	r2, r0
 8017070:	693b      	ldr	r3, [r7, #16]
 8017072:	1ad3      	subs	r3, r2, r3
 8017074:	f247 522f 	movw	r2, #29999	; 0x752f
 8017078:	4293      	cmp	r3, r2
 801707a:	d9ee      	bls.n	801705a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801707c:	7dfb      	ldrb	r3, [r7, #23]
}
 801707e:	4618      	mov	r0, r3
 8017080:	3718      	adds	r7, #24
 8017082:	46bd      	mov	sp, r7
 8017084:	bd80      	pop	{r7, pc}
 8017086:	bf00      	nop
 8017088:	24001308 	.word	0x24001308

0801708c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801708c:	b580      	push	{r7, lr}
 801708e:	b08c      	sub	sp, #48	; 0x30
 8017090:	af00      	add	r7, sp, #0
 8017092:	4603      	mov	r3, r0
 8017094:	603a      	str	r2, [r7, #0]
 8017096:	71fb      	strb	r3, [r7, #7]
 8017098:	460b      	mov	r3, r1
 801709a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801709c:	2301      	movs	r3, #1
 801709e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80170a2:	4b25      	ldr	r3, [pc, #148]	; (8017138 <SD_ioctl+0xac>)
 80170a4:	781b      	ldrb	r3, [r3, #0]
 80170a6:	b2db      	uxtb	r3, r3
 80170a8:	f003 0301 	and.w	r3, r3, #1
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d001      	beq.n	80170b4 <SD_ioctl+0x28>
 80170b0:	2303      	movs	r3, #3
 80170b2:	e03c      	b.n	801712e <SD_ioctl+0xa2>

  switch (cmd)
 80170b4:	79bb      	ldrb	r3, [r7, #6]
 80170b6:	2b03      	cmp	r3, #3
 80170b8:	d834      	bhi.n	8017124 <SD_ioctl+0x98>
 80170ba:	a201      	add	r2, pc, #4	; (adr r2, 80170c0 <SD_ioctl+0x34>)
 80170bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170c0:	080170d1 	.word	0x080170d1
 80170c4:	080170d9 	.word	0x080170d9
 80170c8:	080170f1 	.word	0x080170f1
 80170cc:	0801710b 	.word	0x0801710b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80170d0:	2300      	movs	r3, #0
 80170d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80170d6:	e028      	b.n	801712a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80170d8:	f107 0308 	add.w	r3, r7, #8
 80170dc:	4618      	mov	r0, r3
 80170de:	f7ff fe79 	bl	8016dd4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80170e2:	6a3a      	ldr	r2, [r7, #32]
 80170e4:	683b      	ldr	r3, [r7, #0]
 80170e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80170e8:	2300      	movs	r3, #0
 80170ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80170ee:	e01c      	b.n	801712a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80170f0:	f107 0308 	add.w	r3, r7, #8
 80170f4:	4618      	mov	r0, r3
 80170f6:	f7ff fe6d 	bl	8016dd4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80170fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170fc:	b29a      	uxth	r2, r3
 80170fe:	683b      	ldr	r3, [r7, #0]
 8017100:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8017102:	2300      	movs	r3, #0
 8017104:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8017108:	e00f      	b.n	801712a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801710a:	f107 0308 	add.w	r3, r7, #8
 801710e:	4618      	mov	r0, r3
 8017110:	f7ff fe60 	bl	8016dd4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8017114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017116:	0a5a      	lsrs	r2, r3, #9
 8017118:	683b      	ldr	r3, [r7, #0]
 801711a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801711c:	2300      	movs	r3, #0
 801711e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8017122:	e002      	b.n	801712a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8017124:	2304      	movs	r3, #4
 8017126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801712a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801712e:	4618      	mov	r0, r3
 8017130:	3730      	adds	r7, #48	; 0x30
 8017132:	46bd      	mov	sp, r7
 8017134:	bd80      	pop	{r7, pc}
 8017136:	bf00      	nop
 8017138:	2400000d 	.word	0x2400000d

0801713c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801713c:	b480      	push	{r7}
 801713e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8017140:	4b03      	ldr	r3, [pc, #12]	; (8017150 <BSP_SD_WriteCpltCallback+0x14>)
 8017142:	2201      	movs	r2, #1
 8017144:	601a      	str	r2, [r3, #0]
}
 8017146:	bf00      	nop
 8017148:	46bd      	mov	sp, r7
 801714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714e:	4770      	bx	lr
 8017150:	24001308 	.word	0x24001308

08017154 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8017154:	b480      	push	{r7}
 8017156:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8017158:	4b03      	ldr	r3, [pc, #12]	; (8017168 <BSP_SD_ReadCpltCallback+0x14>)
 801715a:	2201      	movs	r2, #1
 801715c:	601a      	str	r2, [r3, #0]
}
 801715e:	bf00      	nop
 8017160:	46bd      	mov	sp, r7
 8017162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017166:	4770      	bx	lr
 8017168:	2400130c 	.word	0x2400130c

0801716c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801716c:	b580      	push	{r7, lr}
 801716e:	b084      	sub	sp, #16
 8017170:	af00      	add	r7, sp, #0
 8017172:	4603      	mov	r3, r0
 8017174:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8017176:	79fb      	ldrb	r3, [r7, #7]
 8017178:	4a08      	ldr	r2, [pc, #32]	; (801719c <disk_status+0x30>)
 801717a:	009b      	lsls	r3, r3, #2
 801717c:	4413      	add	r3, r2
 801717e:	685b      	ldr	r3, [r3, #4]
 8017180:	685b      	ldr	r3, [r3, #4]
 8017182:	79fa      	ldrb	r2, [r7, #7]
 8017184:	4905      	ldr	r1, [pc, #20]	; (801719c <disk_status+0x30>)
 8017186:	440a      	add	r2, r1
 8017188:	7a12      	ldrb	r2, [r2, #8]
 801718a:	4610      	mov	r0, r2
 801718c:	4798      	blx	r3
 801718e:	4603      	mov	r3, r0
 8017190:	73fb      	strb	r3, [r7, #15]
  return stat;
 8017192:	7bfb      	ldrb	r3, [r7, #15]
}
 8017194:	4618      	mov	r0, r3
 8017196:	3710      	adds	r7, #16
 8017198:	46bd      	mov	sp, r7
 801719a:	bd80      	pop	{r7, pc}
 801719c:	240017f8 	.word	0x240017f8

080171a0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b084      	sub	sp, #16
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	4603      	mov	r3, r0
 80171a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80171aa:	2300      	movs	r3, #0
 80171ac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80171ae:	79fb      	ldrb	r3, [r7, #7]
 80171b0:	4a0d      	ldr	r2, [pc, #52]	; (80171e8 <disk_initialize+0x48>)
 80171b2:	5cd3      	ldrb	r3, [r2, r3]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d111      	bne.n	80171dc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80171b8:	79fb      	ldrb	r3, [r7, #7]
 80171ba:	4a0b      	ldr	r2, [pc, #44]	; (80171e8 <disk_initialize+0x48>)
 80171bc:	2101      	movs	r1, #1
 80171be:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80171c0:	79fb      	ldrb	r3, [r7, #7]
 80171c2:	4a09      	ldr	r2, [pc, #36]	; (80171e8 <disk_initialize+0x48>)
 80171c4:	009b      	lsls	r3, r3, #2
 80171c6:	4413      	add	r3, r2
 80171c8:	685b      	ldr	r3, [r3, #4]
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	79fa      	ldrb	r2, [r7, #7]
 80171ce:	4906      	ldr	r1, [pc, #24]	; (80171e8 <disk_initialize+0x48>)
 80171d0:	440a      	add	r2, r1
 80171d2:	7a12      	ldrb	r2, [r2, #8]
 80171d4:	4610      	mov	r0, r2
 80171d6:	4798      	blx	r3
 80171d8:	4603      	mov	r3, r0
 80171da:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80171dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80171de:	4618      	mov	r0, r3
 80171e0:	3710      	adds	r7, #16
 80171e2:	46bd      	mov	sp, r7
 80171e4:	bd80      	pop	{r7, pc}
 80171e6:	bf00      	nop
 80171e8:	240017f8 	.word	0x240017f8

080171ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80171ec:	b590      	push	{r4, r7, lr}
 80171ee:	b087      	sub	sp, #28
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	60b9      	str	r1, [r7, #8]
 80171f4:	607a      	str	r2, [r7, #4]
 80171f6:	603b      	str	r3, [r7, #0]
 80171f8:	4603      	mov	r3, r0
 80171fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80171fc:	7bfb      	ldrb	r3, [r7, #15]
 80171fe:	4a0a      	ldr	r2, [pc, #40]	; (8017228 <disk_read+0x3c>)
 8017200:	009b      	lsls	r3, r3, #2
 8017202:	4413      	add	r3, r2
 8017204:	685b      	ldr	r3, [r3, #4]
 8017206:	689c      	ldr	r4, [r3, #8]
 8017208:	7bfb      	ldrb	r3, [r7, #15]
 801720a:	4a07      	ldr	r2, [pc, #28]	; (8017228 <disk_read+0x3c>)
 801720c:	4413      	add	r3, r2
 801720e:	7a18      	ldrb	r0, [r3, #8]
 8017210:	683b      	ldr	r3, [r7, #0]
 8017212:	687a      	ldr	r2, [r7, #4]
 8017214:	68b9      	ldr	r1, [r7, #8]
 8017216:	47a0      	blx	r4
 8017218:	4603      	mov	r3, r0
 801721a:	75fb      	strb	r3, [r7, #23]
  return res;
 801721c:	7dfb      	ldrb	r3, [r7, #23]
}
 801721e:	4618      	mov	r0, r3
 8017220:	371c      	adds	r7, #28
 8017222:	46bd      	mov	sp, r7
 8017224:	bd90      	pop	{r4, r7, pc}
 8017226:	bf00      	nop
 8017228:	240017f8 	.word	0x240017f8

0801722c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801722c:	b590      	push	{r4, r7, lr}
 801722e:	b087      	sub	sp, #28
 8017230:	af00      	add	r7, sp, #0
 8017232:	60b9      	str	r1, [r7, #8]
 8017234:	607a      	str	r2, [r7, #4]
 8017236:	603b      	str	r3, [r7, #0]
 8017238:	4603      	mov	r3, r0
 801723a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801723c:	7bfb      	ldrb	r3, [r7, #15]
 801723e:	4a0a      	ldr	r2, [pc, #40]	; (8017268 <disk_write+0x3c>)
 8017240:	009b      	lsls	r3, r3, #2
 8017242:	4413      	add	r3, r2
 8017244:	685b      	ldr	r3, [r3, #4]
 8017246:	68dc      	ldr	r4, [r3, #12]
 8017248:	7bfb      	ldrb	r3, [r7, #15]
 801724a:	4a07      	ldr	r2, [pc, #28]	; (8017268 <disk_write+0x3c>)
 801724c:	4413      	add	r3, r2
 801724e:	7a18      	ldrb	r0, [r3, #8]
 8017250:	683b      	ldr	r3, [r7, #0]
 8017252:	687a      	ldr	r2, [r7, #4]
 8017254:	68b9      	ldr	r1, [r7, #8]
 8017256:	47a0      	blx	r4
 8017258:	4603      	mov	r3, r0
 801725a:	75fb      	strb	r3, [r7, #23]
  return res;
 801725c:	7dfb      	ldrb	r3, [r7, #23]
}
 801725e:	4618      	mov	r0, r3
 8017260:	371c      	adds	r7, #28
 8017262:	46bd      	mov	sp, r7
 8017264:	bd90      	pop	{r4, r7, pc}
 8017266:	bf00      	nop
 8017268:	240017f8 	.word	0x240017f8

0801726c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b084      	sub	sp, #16
 8017270:	af00      	add	r7, sp, #0
 8017272:	4603      	mov	r3, r0
 8017274:	603a      	str	r2, [r7, #0]
 8017276:	71fb      	strb	r3, [r7, #7]
 8017278:	460b      	mov	r3, r1
 801727a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801727c:	79fb      	ldrb	r3, [r7, #7]
 801727e:	4a09      	ldr	r2, [pc, #36]	; (80172a4 <disk_ioctl+0x38>)
 8017280:	009b      	lsls	r3, r3, #2
 8017282:	4413      	add	r3, r2
 8017284:	685b      	ldr	r3, [r3, #4]
 8017286:	691b      	ldr	r3, [r3, #16]
 8017288:	79fa      	ldrb	r2, [r7, #7]
 801728a:	4906      	ldr	r1, [pc, #24]	; (80172a4 <disk_ioctl+0x38>)
 801728c:	440a      	add	r2, r1
 801728e:	7a10      	ldrb	r0, [r2, #8]
 8017290:	79b9      	ldrb	r1, [r7, #6]
 8017292:	683a      	ldr	r2, [r7, #0]
 8017294:	4798      	blx	r3
 8017296:	4603      	mov	r3, r0
 8017298:	73fb      	strb	r3, [r7, #15]
  return res;
 801729a:	7bfb      	ldrb	r3, [r7, #15]
}
 801729c:	4618      	mov	r0, r3
 801729e:	3710      	adds	r7, #16
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}
 80172a4:	240017f8 	.word	0x240017f8

080172a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80172a8:	b480      	push	{r7}
 80172aa:	b085      	sub	sp, #20
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	3301      	adds	r3, #1
 80172b4:	781b      	ldrb	r3, [r3, #0]
 80172b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80172b8:	89fb      	ldrh	r3, [r7, #14]
 80172ba:	021b      	lsls	r3, r3, #8
 80172bc:	b21a      	sxth	r2, r3
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	781b      	ldrb	r3, [r3, #0]
 80172c2:	b21b      	sxth	r3, r3
 80172c4:	4313      	orrs	r3, r2
 80172c6:	b21b      	sxth	r3, r3
 80172c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80172ca:	89fb      	ldrh	r3, [r7, #14]
}
 80172cc:	4618      	mov	r0, r3
 80172ce:	3714      	adds	r7, #20
 80172d0:	46bd      	mov	sp, r7
 80172d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d6:	4770      	bx	lr

080172d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80172d8:	b480      	push	{r7}
 80172da:	b085      	sub	sp, #20
 80172dc:	af00      	add	r7, sp, #0
 80172de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	3303      	adds	r3, #3
 80172e4:	781b      	ldrb	r3, [r3, #0]
 80172e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	021b      	lsls	r3, r3, #8
 80172ec:	687a      	ldr	r2, [r7, #4]
 80172ee:	3202      	adds	r2, #2
 80172f0:	7812      	ldrb	r2, [r2, #0]
 80172f2:	4313      	orrs	r3, r2
 80172f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	021b      	lsls	r3, r3, #8
 80172fa:	687a      	ldr	r2, [r7, #4]
 80172fc:	3201      	adds	r2, #1
 80172fe:	7812      	ldrb	r2, [r2, #0]
 8017300:	4313      	orrs	r3, r2
 8017302:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	021b      	lsls	r3, r3, #8
 8017308:	687a      	ldr	r2, [r7, #4]
 801730a:	7812      	ldrb	r2, [r2, #0]
 801730c:	4313      	orrs	r3, r2
 801730e:	60fb      	str	r3, [r7, #12]
	return rv;
 8017310:	68fb      	ldr	r3, [r7, #12]
}
 8017312:	4618      	mov	r0, r3
 8017314:	3714      	adds	r7, #20
 8017316:	46bd      	mov	sp, r7
 8017318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801731c:	4770      	bx	lr

0801731e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 801731e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8017322:	b09d      	sub	sp, #116	; 0x74
 8017324:	af00      	add	r7, sp, #0
 8017326:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 8017328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801732a:	3307      	adds	r3, #7
 801732c:	781b      	ldrb	r3, [r3, #0]
 801732e:	b2db      	uxtb	r3, r3
 8017330:	2200      	movs	r2, #0
 8017332:	469a      	mov	sl, r3
 8017334:	4693      	mov	fp, r2
 8017336:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 801733a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801733e:	f04f 0000 	mov.w	r0, #0
 8017342:	f04f 0100 	mov.w	r1, #0
 8017346:	0219      	lsls	r1, r3, #8
 8017348:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801734c:	0210      	lsls	r0, r2, #8
 801734e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017350:	3306      	adds	r3, #6
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	b2db      	uxtb	r3, r3
 8017356:	2200      	movs	r2, #0
 8017358:	461c      	mov	r4, r3
 801735a:	4615      	mov	r5, r2
 801735c:	ea40 0804 	orr.w	r8, r0, r4
 8017360:	ea41 0905 	orr.w	r9, r1, r5
 8017364:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 8017368:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801736c:	f04f 0000 	mov.w	r0, #0
 8017370:	f04f 0100 	mov.w	r1, #0
 8017374:	0219      	lsls	r1, r3, #8
 8017376:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801737a:	0210      	lsls	r0, r2, #8
 801737c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801737e:	3305      	adds	r3, #5
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	b2db      	uxtb	r3, r3
 8017384:	2200      	movs	r2, #0
 8017386:	65bb      	str	r3, [r7, #88]	; 0x58
 8017388:	65fa      	str	r2, [r7, #92]	; 0x5c
 801738a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801738e:	4623      	mov	r3, r4
 8017390:	4303      	orrs	r3, r0
 8017392:	62bb      	str	r3, [r7, #40]	; 0x28
 8017394:	462b      	mov	r3, r5
 8017396:	430b      	orrs	r3, r1
 8017398:	62fb      	str	r3, [r7, #44]	; 0x2c
 801739a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801739e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 80173a2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80173a6:	f04f 0000 	mov.w	r0, #0
 80173aa:	f04f 0100 	mov.w	r1, #0
 80173ae:	0219      	lsls	r1, r3, #8
 80173b0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80173b4:	0210      	lsls	r0, r2, #8
 80173b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80173b8:	3304      	adds	r3, #4
 80173ba:	781b      	ldrb	r3, [r3, #0]
 80173bc:	b2db      	uxtb	r3, r3
 80173be:	2200      	movs	r2, #0
 80173c0:	653b      	str	r3, [r7, #80]	; 0x50
 80173c2:	657a      	str	r2, [r7, #84]	; 0x54
 80173c4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80173c8:	4623      	mov	r3, r4
 80173ca:	4303      	orrs	r3, r0
 80173cc:	623b      	str	r3, [r7, #32]
 80173ce:	462b      	mov	r3, r5
 80173d0:	430b      	orrs	r3, r1
 80173d2:	627b      	str	r3, [r7, #36]	; 0x24
 80173d4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80173d8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 80173dc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80173e0:	f04f 0000 	mov.w	r0, #0
 80173e4:	f04f 0100 	mov.w	r1, #0
 80173e8:	0219      	lsls	r1, r3, #8
 80173ea:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80173ee:	0210      	lsls	r0, r2, #8
 80173f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80173f2:	3303      	adds	r3, #3
 80173f4:	781b      	ldrb	r3, [r3, #0]
 80173f6:	b2db      	uxtb	r3, r3
 80173f8:	2200      	movs	r2, #0
 80173fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80173fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80173fe:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8017402:	4623      	mov	r3, r4
 8017404:	4303      	orrs	r3, r0
 8017406:	61bb      	str	r3, [r7, #24]
 8017408:	462b      	mov	r3, r5
 801740a:	430b      	orrs	r3, r1
 801740c:	61fb      	str	r3, [r7, #28]
 801740e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8017412:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 8017416:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801741a:	f04f 0000 	mov.w	r0, #0
 801741e:	f04f 0100 	mov.w	r1, #0
 8017422:	0219      	lsls	r1, r3, #8
 8017424:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8017428:	0210      	lsls	r0, r2, #8
 801742a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801742c:	3302      	adds	r3, #2
 801742e:	781b      	ldrb	r3, [r3, #0]
 8017430:	b2db      	uxtb	r3, r3
 8017432:	2200      	movs	r2, #0
 8017434:	643b      	str	r3, [r7, #64]	; 0x40
 8017436:	647a      	str	r2, [r7, #68]	; 0x44
 8017438:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 801743c:	4623      	mov	r3, r4
 801743e:	4303      	orrs	r3, r0
 8017440:	613b      	str	r3, [r7, #16]
 8017442:	462b      	mov	r3, r5
 8017444:	430b      	orrs	r3, r1
 8017446:	617b      	str	r3, [r7, #20]
 8017448:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801744c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 8017450:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8017454:	f04f 0200 	mov.w	r2, #0
 8017458:	f04f 0300 	mov.w	r3, #0
 801745c:	020b      	lsls	r3, r1, #8
 801745e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8017462:	0202      	lsls	r2, r0, #8
 8017464:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8017466:	3101      	adds	r1, #1
 8017468:	7809      	ldrb	r1, [r1, #0]
 801746a:	b2c9      	uxtb	r1, r1
 801746c:	2000      	movs	r0, #0
 801746e:	63b9      	str	r1, [r7, #56]	; 0x38
 8017470:	63f8      	str	r0, [r7, #60]	; 0x3c
 8017472:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8017476:	4621      	mov	r1, r4
 8017478:	4311      	orrs	r1, r2
 801747a:	60b9      	str	r1, [r7, #8]
 801747c:	4629      	mov	r1, r5
 801747e:	4319      	orrs	r1, r3
 8017480:	60f9      	str	r1, [r7, #12]
 8017482:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8017486:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 801748a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801748e:	f04f 0200 	mov.w	r2, #0
 8017492:	f04f 0300 	mov.w	r3, #0
 8017496:	020b      	lsls	r3, r1, #8
 8017498:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801749c:	0202      	lsls	r2, r0, #8
 801749e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80174a0:	7809      	ldrb	r1, [r1, #0]
 80174a2:	b2c9      	uxtb	r1, r1
 80174a4:	2000      	movs	r0, #0
 80174a6:	6339      	str	r1, [r7, #48]	; 0x30
 80174a8:	6378      	str	r0, [r7, #52]	; 0x34
 80174aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80174ae:	4621      	mov	r1, r4
 80174b0:	4311      	orrs	r1, r2
 80174b2:	6039      	str	r1, [r7, #0]
 80174b4:	4629      	mov	r1, r5
 80174b6:	4319      	orrs	r1, r3
 80174b8:	6079      	str	r1, [r7, #4]
 80174ba:	e9d7 3400 	ldrd	r3, r4, [r7]
 80174be:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 80174c2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 80174c6:	4610      	mov	r0, r2
 80174c8:	4619      	mov	r1, r3
 80174ca:	3774      	adds	r7, #116	; 0x74
 80174cc:	46bd      	mov	sp, r7
 80174ce:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80174d2:	4770      	bx	lr

080174d4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80174d4:	b480      	push	{r7}
 80174d6:	b083      	sub	sp, #12
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
 80174dc:	460b      	mov	r3, r1
 80174de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	1c5a      	adds	r2, r3, #1
 80174e4:	607a      	str	r2, [r7, #4]
 80174e6:	887a      	ldrh	r2, [r7, #2]
 80174e8:	b2d2      	uxtb	r2, r2
 80174ea:	701a      	strb	r2, [r3, #0]
 80174ec:	887b      	ldrh	r3, [r7, #2]
 80174ee:	0a1b      	lsrs	r3, r3, #8
 80174f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	1c5a      	adds	r2, r3, #1
 80174f6:	607a      	str	r2, [r7, #4]
 80174f8:	887a      	ldrh	r2, [r7, #2]
 80174fa:	b2d2      	uxtb	r2, r2
 80174fc:	701a      	strb	r2, [r3, #0]
}
 80174fe:	bf00      	nop
 8017500:	370c      	adds	r7, #12
 8017502:	46bd      	mov	sp, r7
 8017504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017508:	4770      	bx	lr

0801750a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801750a:	b480      	push	{r7}
 801750c:	b083      	sub	sp, #12
 801750e:	af00      	add	r7, sp, #0
 8017510:	6078      	str	r0, [r7, #4]
 8017512:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	1c5a      	adds	r2, r3, #1
 8017518:	607a      	str	r2, [r7, #4]
 801751a:	683a      	ldr	r2, [r7, #0]
 801751c:	b2d2      	uxtb	r2, r2
 801751e:	701a      	strb	r2, [r3, #0]
 8017520:	683b      	ldr	r3, [r7, #0]
 8017522:	0a1b      	lsrs	r3, r3, #8
 8017524:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	1c5a      	adds	r2, r3, #1
 801752a:	607a      	str	r2, [r7, #4]
 801752c:	683a      	ldr	r2, [r7, #0]
 801752e:	b2d2      	uxtb	r2, r2
 8017530:	701a      	strb	r2, [r3, #0]
 8017532:	683b      	ldr	r3, [r7, #0]
 8017534:	0a1b      	lsrs	r3, r3, #8
 8017536:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	1c5a      	adds	r2, r3, #1
 801753c:	607a      	str	r2, [r7, #4]
 801753e:	683a      	ldr	r2, [r7, #0]
 8017540:	b2d2      	uxtb	r2, r2
 8017542:	701a      	strb	r2, [r3, #0]
 8017544:	683b      	ldr	r3, [r7, #0]
 8017546:	0a1b      	lsrs	r3, r3, #8
 8017548:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	1c5a      	adds	r2, r3, #1
 801754e:	607a      	str	r2, [r7, #4]
 8017550:	683a      	ldr	r2, [r7, #0]
 8017552:	b2d2      	uxtb	r2, r2
 8017554:	701a      	strb	r2, [r3, #0]
}
 8017556:	bf00      	nop
 8017558:	370c      	adds	r7, #12
 801755a:	46bd      	mov	sp, r7
 801755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017560:	4770      	bx	lr

08017562 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8017562:	b480      	push	{r7}
 8017564:	b085      	sub	sp, #20
 8017566:	af00      	add	r7, sp, #0
 8017568:	60f8      	str	r0, [r7, #12]
 801756a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	1c5a      	adds	r2, r3, #1
 8017572:	60fa      	str	r2, [r7, #12]
 8017574:	783a      	ldrb	r2, [r7, #0]
 8017576:	701a      	strb	r2, [r3, #0]
 8017578:	e9d7 0100 	ldrd	r0, r1, [r7]
 801757c:	f04f 0200 	mov.w	r2, #0
 8017580:	f04f 0300 	mov.w	r3, #0
 8017584:	0a02      	lsrs	r2, r0, #8
 8017586:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801758a:	0a0b      	lsrs	r3, r1, #8
 801758c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	1c5a      	adds	r2, r3, #1
 8017594:	60fa      	str	r2, [r7, #12]
 8017596:	783a      	ldrb	r2, [r7, #0]
 8017598:	701a      	strb	r2, [r3, #0]
 801759a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801759e:	f04f 0200 	mov.w	r2, #0
 80175a2:	f04f 0300 	mov.w	r3, #0
 80175a6:	0a02      	lsrs	r2, r0, #8
 80175a8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80175ac:	0a0b      	lsrs	r3, r1, #8
 80175ae:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	1c5a      	adds	r2, r3, #1
 80175b6:	60fa      	str	r2, [r7, #12]
 80175b8:	783a      	ldrb	r2, [r7, #0]
 80175ba:	701a      	strb	r2, [r3, #0]
 80175bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80175c0:	f04f 0200 	mov.w	r2, #0
 80175c4:	f04f 0300 	mov.w	r3, #0
 80175c8:	0a02      	lsrs	r2, r0, #8
 80175ca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80175ce:	0a0b      	lsrs	r3, r1, #8
 80175d0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	1c5a      	adds	r2, r3, #1
 80175d8:	60fa      	str	r2, [r7, #12]
 80175da:	783a      	ldrb	r2, [r7, #0]
 80175dc:	701a      	strb	r2, [r3, #0]
 80175de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80175e2:	f04f 0200 	mov.w	r2, #0
 80175e6:	f04f 0300 	mov.w	r3, #0
 80175ea:	0a02      	lsrs	r2, r0, #8
 80175ec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80175f0:	0a0b      	lsrs	r3, r1, #8
 80175f2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	1c5a      	adds	r2, r3, #1
 80175fa:	60fa      	str	r2, [r7, #12]
 80175fc:	783a      	ldrb	r2, [r7, #0]
 80175fe:	701a      	strb	r2, [r3, #0]
 8017600:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017604:	f04f 0200 	mov.w	r2, #0
 8017608:	f04f 0300 	mov.w	r3, #0
 801760c:	0a02      	lsrs	r2, r0, #8
 801760e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8017612:	0a0b      	lsrs	r3, r1, #8
 8017614:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	1c5a      	adds	r2, r3, #1
 801761c:	60fa      	str	r2, [r7, #12]
 801761e:	783a      	ldrb	r2, [r7, #0]
 8017620:	701a      	strb	r2, [r3, #0]
 8017622:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017626:	f04f 0200 	mov.w	r2, #0
 801762a:	f04f 0300 	mov.w	r3, #0
 801762e:	0a02      	lsrs	r2, r0, #8
 8017630:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8017634:	0a0b      	lsrs	r3, r1, #8
 8017636:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	1c5a      	adds	r2, r3, #1
 801763e:	60fa      	str	r2, [r7, #12]
 8017640:	783a      	ldrb	r2, [r7, #0]
 8017642:	701a      	strb	r2, [r3, #0]
 8017644:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017648:	f04f 0200 	mov.w	r2, #0
 801764c:	f04f 0300 	mov.w	r3, #0
 8017650:	0a02      	lsrs	r2, r0, #8
 8017652:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8017656:	0a0b      	lsrs	r3, r1, #8
 8017658:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	1c5a      	adds	r2, r3, #1
 8017660:	60fa      	str	r2, [r7, #12]
 8017662:	783a      	ldrb	r2, [r7, #0]
 8017664:	701a      	strb	r2, [r3, #0]
}
 8017666:	bf00      	nop
 8017668:	3714      	adds	r7, #20
 801766a:	46bd      	mov	sp, r7
 801766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017670:	4770      	bx	lr

08017672 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017672:	b480      	push	{r7}
 8017674:	b087      	sub	sp, #28
 8017676:	af00      	add	r7, sp, #0
 8017678:	60f8      	str	r0, [r7, #12]
 801767a:	60b9      	str	r1, [r7, #8]
 801767c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8017682:	68bb      	ldr	r3, [r7, #8]
 8017684:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d00d      	beq.n	80176a8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801768c:	693a      	ldr	r2, [r7, #16]
 801768e:	1c53      	adds	r3, r2, #1
 8017690:	613b      	str	r3, [r7, #16]
 8017692:	697b      	ldr	r3, [r7, #20]
 8017694:	1c59      	adds	r1, r3, #1
 8017696:	6179      	str	r1, [r7, #20]
 8017698:	7812      	ldrb	r2, [r2, #0]
 801769a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	3b01      	subs	r3, #1
 80176a0:	607b      	str	r3, [r7, #4]
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d1f1      	bne.n	801768c <mem_cpy+0x1a>
	}
}
 80176a8:	bf00      	nop
 80176aa:	371c      	adds	r7, #28
 80176ac:	46bd      	mov	sp, r7
 80176ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b2:	4770      	bx	lr

080176b4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80176b4:	b480      	push	{r7}
 80176b6:	b087      	sub	sp, #28
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	60f8      	str	r0, [r7, #12]
 80176bc:	60b9      	str	r1, [r7, #8]
 80176be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80176c4:	697b      	ldr	r3, [r7, #20]
 80176c6:	1c5a      	adds	r2, r3, #1
 80176c8:	617a      	str	r2, [r7, #20]
 80176ca:	68ba      	ldr	r2, [r7, #8]
 80176cc:	b2d2      	uxtb	r2, r2
 80176ce:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	3b01      	subs	r3, #1
 80176d4:	607b      	str	r3, [r7, #4]
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d1f3      	bne.n	80176c4 <mem_set+0x10>
}
 80176dc:	bf00      	nop
 80176de:	bf00      	nop
 80176e0:	371c      	adds	r7, #28
 80176e2:	46bd      	mov	sp, r7
 80176e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e8:	4770      	bx	lr

080176ea <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80176ea:	b480      	push	{r7}
 80176ec:	b089      	sub	sp, #36	; 0x24
 80176ee:	af00      	add	r7, sp, #0
 80176f0:	60f8      	str	r0, [r7, #12]
 80176f2:	60b9      	str	r1, [r7, #8]
 80176f4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	61fb      	str	r3, [r7, #28]
 80176fa:	68bb      	ldr	r3, [r7, #8]
 80176fc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80176fe:	2300      	movs	r3, #0
 8017700:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8017702:	69fb      	ldr	r3, [r7, #28]
 8017704:	1c5a      	adds	r2, r3, #1
 8017706:	61fa      	str	r2, [r7, #28]
 8017708:	781b      	ldrb	r3, [r3, #0]
 801770a:	4619      	mov	r1, r3
 801770c:	69bb      	ldr	r3, [r7, #24]
 801770e:	1c5a      	adds	r2, r3, #1
 8017710:	61ba      	str	r2, [r7, #24]
 8017712:	781b      	ldrb	r3, [r3, #0]
 8017714:	1acb      	subs	r3, r1, r3
 8017716:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	3b01      	subs	r3, #1
 801771c:	607b      	str	r3, [r7, #4]
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d002      	beq.n	801772a <mem_cmp+0x40>
 8017724:	697b      	ldr	r3, [r7, #20]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d0eb      	beq.n	8017702 <mem_cmp+0x18>

	return r;
 801772a:	697b      	ldr	r3, [r7, #20]
}
 801772c:	4618      	mov	r0, r3
 801772e:	3724      	adds	r7, #36	; 0x24
 8017730:	46bd      	mov	sp, r7
 8017732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017736:	4770      	bx	lr

08017738 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8017738:	b480      	push	{r7}
 801773a:	b083      	sub	sp, #12
 801773c:	af00      	add	r7, sp, #0
 801773e:	6078      	str	r0, [r7, #4]
 8017740:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8017742:	e002      	b.n	801774a <chk_chr+0x12>
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	3301      	adds	r3, #1
 8017748:	607b      	str	r3, [r7, #4]
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	781b      	ldrb	r3, [r3, #0]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d005      	beq.n	801775e <chk_chr+0x26>
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	781b      	ldrb	r3, [r3, #0]
 8017756:	461a      	mov	r2, r3
 8017758:	683b      	ldr	r3, [r7, #0]
 801775a:	4293      	cmp	r3, r2
 801775c:	d1f2      	bne.n	8017744 <chk_chr+0xc>
	return *str;
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	781b      	ldrb	r3, [r3, #0]
}
 8017762:	4618      	mov	r0, r3
 8017764:	370c      	adds	r7, #12
 8017766:	46bd      	mov	sp, r7
 8017768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801776c:	4770      	bx	lr
	...

08017770 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017770:	b480      	push	{r7}
 8017772:	b085      	sub	sp, #20
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
 8017778:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801777a:	2300      	movs	r3, #0
 801777c:	60bb      	str	r3, [r7, #8]
 801777e:	68bb      	ldr	r3, [r7, #8]
 8017780:	60fb      	str	r3, [r7, #12]
 8017782:	e029      	b.n	80177d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8017784:	4a27      	ldr	r2, [pc, #156]	; (8017824 <chk_lock+0xb4>)
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	011b      	lsls	r3, r3, #4
 801778a:	4413      	add	r3, r2
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d01d      	beq.n	80177ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017792:	4a24      	ldr	r2, [pc, #144]	; (8017824 <chk_lock+0xb4>)
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	011b      	lsls	r3, r3, #4
 8017798:	4413      	add	r3, r2
 801779a:	681a      	ldr	r2, [r3, #0]
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	429a      	cmp	r2, r3
 80177a2:	d116      	bne.n	80177d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80177a4:	4a1f      	ldr	r2, [pc, #124]	; (8017824 <chk_lock+0xb4>)
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	011b      	lsls	r3, r3, #4
 80177aa:	4413      	add	r3, r2
 80177ac:	3304      	adds	r3, #4
 80177ae:	681a      	ldr	r2, [r3, #0]
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80177b4:	429a      	cmp	r2, r3
 80177b6:	d10c      	bne.n	80177d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80177b8:	4a1a      	ldr	r2, [pc, #104]	; (8017824 <chk_lock+0xb4>)
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	011b      	lsls	r3, r3, #4
 80177be:	4413      	add	r3, r2
 80177c0:	3308      	adds	r3, #8
 80177c2:	681a      	ldr	r2, [r3, #0]
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 80177c8:	429a      	cmp	r2, r3
 80177ca:	d102      	bne.n	80177d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80177cc:	e007      	b.n	80177de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80177ce:	2301      	movs	r3, #1
 80177d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	3301      	adds	r3, #1
 80177d6:	60fb      	str	r3, [r7, #12]
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	2b07      	cmp	r3, #7
 80177dc:	d9d2      	bls.n	8017784 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	2b08      	cmp	r3, #8
 80177e2:	d109      	bne.n	80177f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80177e4:	68bb      	ldr	r3, [r7, #8]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d102      	bne.n	80177f0 <chk_lock+0x80>
 80177ea:	683b      	ldr	r3, [r7, #0]
 80177ec:	2b02      	cmp	r3, #2
 80177ee:	d101      	bne.n	80177f4 <chk_lock+0x84>
 80177f0:	2300      	movs	r3, #0
 80177f2:	e010      	b.n	8017816 <chk_lock+0xa6>
 80177f4:	2312      	movs	r3, #18
 80177f6:	e00e      	b.n	8017816 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80177f8:	683b      	ldr	r3, [r7, #0]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d108      	bne.n	8017810 <chk_lock+0xa0>
 80177fe:	4a09      	ldr	r2, [pc, #36]	; (8017824 <chk_lock+0xb4>)
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	011b      	lsls	r3, r3, #4
 8017804:	4413      	add	r3, r2
 8017806:	330c      	adds	r3, #12
 8017808:	881b      	ldrh	r3, [r3, #0]
 801780a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801780e:	d101      	bne.n	8017814 <chk_lock+0xa4>
 8017810:	2310      	movs	r3, #16
 8017812:	e000      	b.n	8017816 <chk_lock+0xa6>
 8017814:	2300      	movs	r3, #0
}
 8017816:	4618      	mov	r0, r3
 8017818:	3714      	adds	r7, #20
 801781a:	46bd      	mov	sp, r7
 801781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017820:	4770      	bx	lr
 8017822:	bf00      	nop
 8017824:	24001318 	.word	0x24001318

08017828 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8017828:	b480      	push	{r7}
 801782a:	b083      	sub	sp, #12
 801782c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801782e:	2300      	movs	r3, #0
 8017830:	607b      	str	r3, [r7, #4]
 8017832:	e002      	b.n	801783a <enq_lock+0x12>
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	3301      	adds	r3, #1
 8017838:	607b      	str	r3, [r7, #4]
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	2b07      	cmp	r3, #7
 801783e:	d806      	bhi.n	801784e <enq_lock+0x26>
 8017840:	4a09      	ldr	r2, [pc, #36]	; (8017868 <enq_lock+0x40>)
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	011b      	lsls	r3, r3, #4
 8017846:	4413      	add	r3, r2
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d1f2      	bne.n	8017834 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	2b08      	cmp	r3, #8
 8017852:	bf14      	ite	ne
 8017854:	2301      	movne	r3, #1
 8017856:	2300      	moveq	r3, #0
 8017858:	b2db      	uxtb	r3, r3
}
 801785a:	4618      	mov	r0, r3
 801785c:	370c      	adds	r7, #12
 801785e:	46bd      	mov	sp, r7
 8017860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017864:	4770      	bx	lr
 8017866:	bf00      	nop
 8017868:	24001318 	.word	0x24001318

0801786c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801786c:	b480      	push	{r7}
 801786e:	b085      	sub	sp, #20
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
 8017874:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017876:	2300      	movs	r3, #0
 8017878:	60fb      	str	r3, [r7, #12]
 801787a:	e01f      	b.n	80178bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801787c:	4a41      	ldr	r2, [pc, #260]	; (8017984 <inc_lock+0x118>)
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	011b      	lsls	r3, r3, #4
 8017882:	4413      	add	r3, r2
 8017884:	681a      	ldr	r2, [r3, #0]
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	429a      	cmp	r2, r3
 801788c:	d113      	bne.n	80178b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801788e:	4a3d      	ldr	r2, [pc, #244]	; (8017984 <inc_lock+0x118>)
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	011b      	lsls	r3, r3, #4
 8017894:	4413      	add	r3, r2
 8017896:	3304      	adds	r3, #4
 8017898:	681a      	ldr	r2, [r3, #0]
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801789e:	429a      	cmp	r2, r3
 80178a0:	d109      	bne.n	80178b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80178a2:	4a38      	ldr	r2, [pc, #224]	; (8017984 <inc_lock+0x118>)
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	011b      	lsls	r3, r3, #4
 80178a8:	4413      	add	r3, r2
 80178aa:	3308      	adds	r3, #8
 80178ac:	681a      	ldr	r2, [r3, #0]
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 80178b2:	429a      	cmp	r2, r3
 80178b4:	d006      	beq.n	80178c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	3301      	adds	r3, #1
 80178ba:	60fb      	str	r3, [r7, #12]
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	2b07      	cmp	r3, #7
 80178c0:	d9dc      	bls.n	801787c <inc_lock+0x10>
 80178c2:	e000      	b.n	80178c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80178c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	2b08      	cmp	r3, #8
 80178ca:	d132      	bne.n	8017932 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80178cc:	2300      	movs	r3, #0
 80178ce:	60fb      	str	r3, [r7, #12]
 80178d0:	e002      	b.n	80178d8 <inc_lock+0x6c>
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	3301      	adds	r3, #1
 80178d6:	60fb      	str	r3, [r7, #12]
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	2b07      	cmp	r3, #7
 80178dc:	d806      	bhi.n	80178ec <inc_lock+0x80>
 80178de:	4a29      	ldr	r2, [pc, #164]	; (8017984 <inc_lock+0x118>)
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	011b      	lsls	r3, r3, #4
 80178e4:	4413      	add	r3, r2
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d1f2      	bne.n	80178d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	2b08      	cmp	r3, #8
 80178f0:	d101      	bne.n	80178f6 <inc_lock+0x8a>
 80178f2:	2300      	movs	r3, #0
 80178f4:	e040      	b.n	8017978 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	681a      	ldr	r2, [r3, #0]
 80178fa:	4922      	ldr	r1, [pc, #136]	; (8017984 <inc_lock+0x118>)
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	011b      	lsls	r3, r3, #4
 8017900:	440b      	add	r3, r1
 8017902:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	689a      	ldr	r2, [r3, #8]
 8017908:	491e      	ldr	r1, [pc, #120]	; (8017984 <inc_lock+0x118>)
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	011b      	lsls	r3, r3, #4
 801790e:	440b      	add	r3, r1
 8017910:	3304      	adds	r3, #4
 8017912:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017918:	491a      	ldr	r1, [pc, #104]	; (8017984 <inc_lock+0x118>)
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	011b      	lsls	r3, r3, #4
 801791e:	440b      	add	r3, r1
 8017920:	3308      	adds	r3, #8
 8017922:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017924:	4a17      	ldr	r2, [pc, #92]	; (8017984 <inc_lock+0x118>)
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	011b      	lsls	r3, r3, #4
 801792a:	4413      	add	r3, r2
 801792c:	330c      	adds	r3, #12
 801792e:	2200      	movs	r2, #0
 8017930:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017932:	683b      	ldr	r3, [r7, #0]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d009      	beq.n	801794c <inc_lock+0xe0>
 8017938:	4a12      	ldr	r2, [pc, #72]	; (8017984 <inc_lock+0x118>)
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	011b      	lsls	r3, r3, #4
 801793e:	4413      	add	r3, r2
 8017940:	330c      	adds	r3, #12
 8017942:	881b      	ldrh	r3, [r3, #0]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d001      	beq.n	801794c <inc_lock+0xe0>
 8017948:	2300      	movs	r3, #0
 801794a:	e015      	b.n	8017978 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801794c:	683b      	ldr	r3, [r7, #0]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d108      	bne.n	8017964 <inc_lock+0xf8>
 8017952:	4a0c      	ldr	r2, [pc, #48]	; (8017984 <inc_lock+0x118>)
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	011b      	lsls	r3, r3, #4
 8017958:	4413      	add	r3, r2
 801795a:	330c      	adds	r3, #12
 801795c:	881b      	ldrh	r3, [r3, #0]
 801795e:	3301      	adds	r3, #1
 8017960:	b29a      	uxth	r2, r3
 8017962:	e001      	b.n	8017968 <inc_lock+0xfc>
 8017964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017968:	4906      	ldr	r1, [pc, #24]	; (8017984 <inc_lock+0x118>)
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	011b      	lsls	r3, r3, #4
 801796e:	440b      	add	r3, r1
 8017970:	330c      	adds	r3, #12
 8017972:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	3301      	adds	r3, #1
}
 8017978:	4618      	mov	r0, r3
 801797a:	3714      	adds	r7, #20
 801797c:	46bd      	mov	sp, r7
 801797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017982:	4770      	bx	lr
 8017984:	24001318 	.word	0x24001318

08017988 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017988:	b480      	push	{r7}
 801798a:	b085      	sub	sp, #20
 801798c:	af00      	add	r7, sp, #0
 801798e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	3b01      	subs	r3, #1
 8017994:	607b      	str	r3, [r7, #4]
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	2b07      	cmp	r3, #7
 801799a:	d825      	bhi.n	80179e8 <dec_lock+0x60>
		n = Files[i].ctr;
 801799c:	4a17      	ldr	r2, [pc, #92]	; (80179fc <dec_lock+0x74>)
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	011b      	lsls	r3, r3, #4
 80179a2:	4413      	add	r3, r2
 80179a4:	330c      	adds	r3, #12
 80179a6:	881b      	ldrh	r3, [r3, #0]
 80179a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80179aa:	89fb      	ldrh	r3, [r7, #14]
 80179ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80179b0:	d101      	bne.n	80179b6 <dec_lock+0x2e>
 80179b2:	2300      	movs	r3, #0
 80179b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80179b6:	89fb      	ldrh	r3, [r7, #14]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d002      	beq.n	80179c2 <dec_lock+0x3a>
 80179bc:	89fb      	ldrh	r3, [r7, #14]
 80179be:	3b01      	subs	r3, #1
 80179c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80179c2:	4a0e      	ldr	r2, [pc, #56]	; (80179fc <dec_lock+0x74>)
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	011b      	lsls	r3, r3, #4
 80179c8:	4413      	add	r3, r2
 80179ca:	330c      	adds	r3, #12
 80179cc:	89fa      	ldrh	r2, [r7, #14]
 80179ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80179d0:	89fb      	ldrh	r3, [r7, #14]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d105      	bne.n	80179e2 <dec_lock+0x5a>
 80179d6:	4a09      	ldr	r2, [pc, #36]	; (80179fc <dec_lock+0x74>)
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	011b      	lsls	r3, r3, #4
 80179dc:	4413      	add	r3, r2
 80179de:	2200      	movs	r2, #0
 80179e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80179e2:	2300      	movs	r3, #0
 80179e4:	737b      	strb	r3, [r7, #13]
 80179e6:	e001      	b.n	80179ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80179e8:	2302      	movs	r3, #2
 80179ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80179ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80179ee:	4618      	mov	r0, r3
 80179f0:	3714      	adds	r7, #20
 80179f2:	46bd      	mov	sp, r7
 80179f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f8:	4770      	bx	lr
 80179fa:	bf00      	nop
 80179fc:	24001318 	.word	0x24001318

08017a00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017a00:	b480      	push	{r7}
 8017a02:	b085      	sub	sp, #20
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017a08:	2300      	movs	r3, #0
 8017a0a:	60fb      	str	r3, [r7, #12]
 8017a0c:	e010      	b.n	8017a30 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017a0e:	4a0d      	ldr	r2, [pc, #52]	; (8017a44 <clear_lock+0x44>)
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	011b      	lsls	r3, r3, #4
 8017a14:	4413      	add	r3, r2
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	687a      	ldr	r2, [r7, #4]
 8017a1a:	429a      	cmp	r2, r3
 8017a1c:	d105      	bne.n	8017a2a <clear_lock+0x2a>
 8017a1e:	4a09      	ldr	r2, [pc, #36]	; (8017a44 <clear_lock+0x44>)
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	011b      	lsls	r3, r3, #4
 8017a24:	4413      	add	r3, r2
 8017a26:	2200      	movs	r2, #0
 8017a28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	3301      	adds	r3, #1
 8017a2e:	60fb      	str	r3, [r7, #12]
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	2b07      	cmp	r3, #7
 8017a34:	d9eb      	bls.n	8017a0e <clear_lock+0xe>
	}
}
 8017a36:	bf00      	nop
 8017a38:	bf00      	nop
 8017a3a:	3714      	adds	r7, #20
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a42:	4770      	bx	lr
 8017a44:	24001318 	.word	0x24001318

08017a48 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017a48:	b580      	push	{r7, lr}
 8017a4a:	b086      	sub	sp, #24
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017a50:	2300      	movs	r3, #0
 8017a52:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	78db      	ldrb	r3, [r3, #3]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d034      	beq.n	8017ac6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017a60:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	7858      	ldrb	r0, [r3, #1]
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017a6c:	2301      	movs	r3, #1
 8017a6e:	697a      	ldr	r2, [r7, #20]
 8017a70:	f7ff fbdc 	bl	801722c <disk_write>
 8017a74:	4603      	mov	r3, r0
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d002      	beq.n	8017a80 <sync_window+0x38>
			res = FR_DISK_ERR;
 8017a7a:	2301      	movs	r3, #1
 8017a7c:	73fb      	strb	r3, [r7, #15]
 8017a7e:	e022      	b.n	8017ac6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2200      	movs	r2, #0
 8017a84:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a8a:	697a      	ldr	r2, [r7, #20]
 8017a8c:	1ad2      	subs	r2, r2, r3
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	6a1b      	ldr	r3, [r3, #32]
 8017a92:	429a      	cmp	r2, r3
 8017a94:	d217      	bcs.n	8017ac6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	789b      	ldrb	r3, [r3, #2]
 8017a9a:	613b      	str	r3, [r7, #16]
 8017a9c:	e010      	b.n	8017ac0 <sync_window+0x78>
					wsect += fs->fsize;
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	6a1b      	ldr	r3, [r3, #32]
 8017aa2:	697a      	ldr	r2, [r7, #20]
 8017aa4:	4413      	add	r3, r2
 8017aa6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	7858      	ldrb	r0, [r3, #1]
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017ab2:	2301      	movs	r3, #1
 8017ab4:	697a      	ldr	r2, [r7, #20]
 8017ab6:	f7ff fbb9 	bl	801722c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017aba:	693b      	ldr	r3, [r7, #16]
 8017abc:	3b01      	subs	r3, #1
 8017abe:	613b      	str	r3, [r7, #16]
 8017ac0:	693b      	ldr	r3, [r7, #16]
 8017ac2:	2b01      	cmp	r3, #1
 8017ac4:	d8eb      	bhi.n	8017a9e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ac8:	4618      	mov	r0, r3
 8017aca:	3718      	adds	r7, #24
 8017acc:	46bd      	mov	sp, r7
 8017ace:	bd80      	pop	{r7, pc}

08017ad0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017ad0:	b580      	push	{r7, lr}
 8017ad2:	b084      	sub	sp, #16
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	6078      	str	r0, [r7, #4]
 8017ad8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017ada:	2300      	movs	r3, #0
 8017adc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ae2:	683a      	ldr	r2, [r7, #0]
 8017ae4:	429a      	cmp	r2, r3
 8017ae6:	d01b      	beq.n	8017b20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017ae8:	6878      	ldr	r0, [r7, #4]
 8017aea:	f7ff ffad 	bl	8017a48 <sync_window>
 8017aee:	4603      	mov	r3, r0
 8017af0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017af2:	7bfb      	ldrb	r3, [r7, #15]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d113      	bne.n	8017b20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	7858      	ldrb	r0, [r3, #1]
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017b02:	2301      	movs	r3, #1
 8017b04:	683a      	ldr	r2, [r7, #0]
 8017b06:	f7ff fb71 	bl	80171ec <disk_read>
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d004      	beq.n	8017b1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017b10:	f04f 33ff 	mov.w	r3, #4294967295
 8017b14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017b16:	2301      	movs	r3, #1
 8017b18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	683a      	ldr	r2, [r7, #0]
 8017b1e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8017b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b22:	4618      	mov	r0, r3
 8017b24:	3710      	adds	r7, #16
 8017b26:	46bd      	mov	sp, r7
 8017b28:	bd80      	pop	{r7, pc}
	...

08017b2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017b2c:	b580      	push	{r7, lr}
 8017b2e:	b084      	sub	sp, #16
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017b34:	6878      	ldr	r0, [r7, #4]
 8017b36:	f7ff ff87 	bl	8017a48 <sync_window>
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017b3e:	7bfb      	ldrb	r3, [r7, #15]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d158      	bne.n	8017bf6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	781b      	ldrb	r3, [r3, #0]
 8017b48:	2b03      	cmp	r3, #3
 8017b4a:	d148      	bne.n	8017bde <sync_fs+0xb2>
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	791b      	ldrb	r3, [r3, #4]
 8017b50:	2b01      	cmp	r3, #1
 8017b52:	d144      	bne.n	8017bde <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	3338      	adds	r3, #56	; 0x38
 8017b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b5c:	2100      	movs	r1, #0
 8017b5e:	4618      	mov	r0, r3
 8017b60:	f7ff fda8 	bl	80176b4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	3338      	adds	r3, #56	; 0x38
 8017b68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017b6c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017b70:	4618      	mov	r0, r3
 8017b72:	f7ff fcaf 	bl	80174d4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	3338      	adds	r3, #56	; 0x38
 8017b7a:	4921      	ldr	r1, [pc, #132]	; (8017c00 <sync_fs+0xd4>)
 8017b7c:	4618      	mov	r0, r3
 8017b7e:	f7ff fcc4 	bl	801750a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	3338      	adds	r3, #56	; 0x38
 8017b86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017b8a:	491e      	ldr	r1, [pc, #120]	; (8017c04 <sync_fs+0xd8>)
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	f7ff fcbc 	bl	801750a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	3338      	adds	r3, #56	; 0x38
 8017b96:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	699b      	ldr	r3, [r3, #24]
 8017b9e:	4619      	mov	r1, r3
 8017ba0:	4610      	mov	r0, r2
 8017ba2:	f7ff fcb2 	bl	801750a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	3338      	adds	r3, #56	; 0x38
 8017baa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	695b      	ldr	r3, [r3, #20]
 8017bb2:	4619      	mov	r1, r3
 8017bb4:	4610      	mov	r0, r2
 8017bb6:	f7ff fca8 	bl	801750a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bbe:	1c5a      	adds	r2, r3, #1
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	7858      	ldrb	r0, [r3, #1]
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017bd2:	2301      	movs	r3, #1
 8017bd4:	f7ff fb2a 	bl	801722c <disk_write>
			fs->fsi_flag = 0;
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	2200      	movs	r2, #0
 8017bdc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	785b      	ldrb	r3, [r3, #1]
 8017be2:	2200      	movs	r2, #0
 8017be4:	2100      	movs	r1, #0
 8017be6:	4618      	mov	r0, r3
 8017be8:	f7ff fb40 	bl	801726c <disk_ioctl>
 8017bec:	4603      	mov	r3, r0
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d001      	beq.n	8017bf6 <sync_fs+0xca>
 8017bf2:	2301      	movs	r3, #1
 8017bf4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	3710      	adds	r7, #16
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd80      	pop	{r7, pc}
 8017c00:	41615252 	.word	0x41615252
 8017c04:	61417272 	.word	0x61417272

08017c08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017c08:	b480      	push	{r7}
 8017c0a:	b083      	sub	sp, #12
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]
 8017c10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8017c12:	683b      	ldr	r3, [r7, #0]
 8017c14:	3b02      	subs	r3, #2
 8017c16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	69db      	ldr	r3, [r3, #28]
 8017c1c:	3b02      	subs	r3, #2
 8017c1e:	683a      	ldr	r2, [r7, #0]
 8017c20:	429a      	cmp	r2, r3
 8017c22:	d301      	bcc.n	8017c28 <clust2sect+0x20>
 8017c24:	2300      	movs	r3, #0
 8017c26:	e008      	b.n	8017c3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	895b      	ldrh	r3, [r3, #10]
 8017c2c:	461a      	mov	r2, r3
 8017c2e:	683b      	ldr	r3, [r7, #0]
 8017c30:	fb03 f202 	mul.w	r2, r3, r2
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c38:	4413      	add	r3, r2
}
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	370c      	adds	r7, #12
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c44:	4770      	bx	lr
	...

08017c48 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017c48:	b580      	push	{r7, lr}
 8017c4a:	b088      	sub	sp, #32
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	6078      	str	r0, [r7, #4]
 8017c50:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017c52:	6879      	ldr	r1, [r7, #4]
 8017c54:	6809      	ldr	r1, [r1, #0]
 8017c56:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017c58:	6839      	ldr	r1, [r7, #0]
 8017c5a:	2901      	cmp	r1, #1
 8017c5c:	d904      	bls.n	8017c68 <get_fat+0x20>
 8017c5e:	69b9      	ldr	r1, [r7, #24]
 8017c60:	69c9      	ldr	r1, [r1, #28]
 8017c62:	6838      	ldr	r0, [r7, #0]
 8017c64:	4288      	cmp	r0, r1
 8017c66:	d302      	bcc.n	8017c6e <get_fat+0x26>
		val = 1;	/* Internal error */
 8017c68:	2301      	movs	r3, #1
 8017c6a:	61fb      	str	r3, [r7, #28]
 8017c6c:	e101      	b.n	8017e72 <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017c6e:	f04f 31ff 	mov.w	r1, #4294967295
 8017c72:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 8017c74:	69b9      	ldr	r1, [r7, #24]
 8017c76:	7809      	ldrb	r1, [r1, #0]
 8017c78:	3901      	subs	r1, #1
 8017c7a:	2903      	cmp	r1, #3
 8017c7c:	f200 80ed 	bhi.w	8017e5a <get_fat+0x212>
 8017c80:	a001      	add	r0, pc, #4	; (adr r0, 8017c88 <get_fat+0x40>)
 8017c82:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017c86:	bf00      	nop
 8017c88:	08017c99 	.word	0x08017c99
 8017c8c:	08017d21 	.word	0x08017d21
 8017c90:	08017d57 	.word	0x08017d57
 8017c94:	08017d8f 	.word	0x08017d8f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017c98:	683b      	ldr	r3, [r7, #0]
 8017c9a:	60fb      	str	r3, [r7, #12]
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	085b      	lsrs	r3, r3, #1
 8017ca0:	68fa      	ldr	r2, [r7, #12]
 8017ca2:	4413      	add	r3, r2
 8017ca4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017ca6:	69bb      	ldr	r3, [r7, #24]
 8017ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	0a5b      	lsrs	r3, r3, #9
 8017cae:	4413      	add	r3, r2
 8017cb0:	4619      	mov	r1, r3
 8017cb2:	69b8      	ldr	r0, [r7, #24]
 8017cb4:	f7ff ff0c 	bl	8017ad0 <move_window>
 8017cb8:	4603      	mov	r3, r0
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	f040 80d0 	bne.w	8017e60 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	1c5a      	adds	r2, r3, #1
 8017cc4:	60fa      	str	r2, [r7, #12]
 8017cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017cca:	69ba      	ldr	r2, [r7, #24]
 8017ccc:	4413      	add	r3, r2
 8017cce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017cd2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017cd4:	69bb      	ldr	r3, [r7, #24]
 8017cd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	0a5b      	lsrs	r3, r3, #9
 8017cdc:	4413      	add	r3, r2
 8017cde:	4619      	mov	r1, r3
 8017ce0:	69b8      	ldr	r0, [r7, #24]
 8017ce2:	f7ff fef5 	bl	8017ad0 <move_window>
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	f040 80bb 	bne.w	8017e64 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017cf4:	69ba      	ldr	r2, [r7, #24]
 8017cf6:	4413      	add	r3, r2
 8017cf8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017cfc:	021b      	lsls	r3, r3, #8
 8017cfe:	461a      	mov	r2, r3
 8017d00:	68bb      	ldr	r3, [r7, #8]
 8017d02:	4313      	orrs	r3, r2
 8017d04:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017d06:	683b      	ldr	r3, [r7, #0]
 8017d08:	f003 0301 	and.w	r3, r3, #1
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d002      	beq.n	8017d16 <get_fat+0xce>
 8017d10:	68bb      	ldr	r3, [r7, #8]
 8017d12:	091b      	lsrs	r3, r3, #4
 8017d14:	e002      	b.n	8017d1c <get_fat+0xd4>
 8017d16:	68bb      	ldr	r3, [r7, #8]
 8017d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017d1c:	61fb      	str	r3, [r7, #28]
			break;
 8017d1e:	e0a8      	b.n	8017e72 <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017d20:	69bb      	ldr	r3, [r7, #24]
 8017d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d24:	683b      	ldr	r3, [r7, #0]
 8017d26:	0a1b      	lsrs	r3, r3, #8
 8017d28:	4413      	add	r3, r2
 8017d2a:	4619      	mov	r1, r3
 8017d2c:	69b8      	ldr	r0, [r7, #24]
 8017d2e:	f7ff fecf 	bl	8017ad0 <move_window>
 8017d32:	4603      	mov	r3, r0
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	f040 8097 	bne.w	8017e68 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017d3a:	69bb      	ldr	r3, [r7, #24]
 8017d3c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8017d40:	683b      	ldr	r3, [r7, #0]
 8017d42:	005b      	lsls	r3, r3, #1
 8017d44:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8017d48:	4413      	add	r3, r2
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	f7ff faac 	bl	80172a8 <ld_word>
 8017d50:	4603      	mov	r3, r0
 8017d52:	61fb      	str	r3, [r7, #28]
			break;
 8017d54:	e08d      	b.n	8017e72 <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017d56:	69bb      	ldr	r3, [r7, #24]
 8017d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d5a:	683b      	ldr	r3, [r7, #0]
 8017d5c:	09db      	lsrs	r3, r3, #7
 8017d5e:	4413      	add	r3, r2
 8017d60:	4619      	mov	r1, r3
 8017d62:	69b8      	ldr	r0, [r7, #24]
 8017d64:	f7ff feb4 	bl	8017ad0 <move_window>
 8017d68:	4603      	mov	r3, r0
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d17e      	bne.n	8017e6c <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017d6e:	69bb      	ldr	r3, [r7, #24]
 8017d70:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8017d74:	683b      	ldr	r3, [r7, #0]
 8017d76:	009b      	lsls	r3, r3, #2
 8017d78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017d7c:	4413      	add	r3, r2
 8017d7e:	4618      	mov	r0, r3
 8017d80:	f7ff faaa 	bl	80172d8 <ld_dword>
 8017d84:	4603      	mov	r3, r0
 8017d86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017d8a:	61fb      	str	r3, [r7, #28]
			break;
 8017d8c:	e071      	b.n	8017e72 <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8017d8e:	6879      	ldr	r1, [r7, #4]
 8017d90:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8017d94:	4301      	orrs	r1, r0
 8017d96:	d060      	beq.n	8017e5a <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8017d98:	6879      	ldr	r1, [r7, #4]
 8017d9a:	6889      	ldr	r1, [r1, #8]
 8017d9c:	6838      	ldr	r0, [r7, #0]
 8017d9e:	1a41      	subs	r1, r0, r1
 8017da0:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8017da2:	6879      	ldr	r1, [r7, #4]
 8017da4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8017da8:	1e42      	subs	r2, r0, #1
 8017daa:	f141 33ff 	adc.w	r3, r1, #4294967295
 8017dae:	f04f 0000 	mov.w	r0, #0
 8017db2:	f04f 0100 	mov.w	r1, #0
 8017db6:	0a50      	lsrs	r0, r2, #9
 8017db8:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8017dbc:	0a59      	lsrs	r1, r3, #9
 8017dbe:	4602      	mov	r2, r0
 8017dc0:	69bb      	ldr	r3, [r7, #24]
 8017dc2:	895b      	ldrh	r3, [r3, #10]
 8017dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8017dc8:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	79db      	ldrb	r3, [r3, #7]
 8017dce:	2b02      	cmp	r3, #2
 8017dd0:	d10e      	bne.n	8017df0 <get_fat+0x1a8>
					if (cofs <= clen) {
 8017dd2:	697a      	ldr	r2, [r7, #20]
 8017dd4:	693b      	ldr	r3, [r7, #16]
 8017dd6:	429a      	cmp	r2, r3
 8017dd8:	d80a      	bhi.n	8017df0 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8017dda:	697a      	ldr	r2, [r7, #20]
 8017ddc:	693b      	ldr	r3, [r7, #16]
 8017dde:	429a      	cmp	r2, r3
 8017de0:	d002      	beq.n	8017de8 <get_fat+0x1a0>
 8017de2:	683b      	ldr	r3, [r7, #0]
 8017de4:	3301      	adds	r3, #1
 8017de6:	e001      	b.n	8017dec <get_fat+0x1a4>
 8017de8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017dec:	61fb      	str	r3, [r7, #28]
						break;
 8017dee:	e040      	b.n	8017e72 <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	79db      	ldrb	r3, [r3, #7]
 8017df4:	2b03      	cmp	r3, #3
 8017df6:	d108      	bne.n	8017e0a <get_fat+0x1c2>
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	699b      	ldr	r3, [r3, #24]
 8017dfc:	697a      	ldr	r2, [r7, #20]
 8017dfe:	429a      	cmp	r2, r3
 8017e00:	d203      	bcs.n	8017e0a <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 8017e02:	683b      	ldr	r3, [r7, #0]
 8017e04:	3301      	adds	r3, #1
 8017e06:	61fb      	str	r3, [r7, #28]
					break;
 8017e08:	e033      	b.n	8017e72 <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	79db      	ldrb	r3, [r3, #7]
 8017e0e:	2b02      	cmp	r3, #2
 8017e10:	d023      	beq.n	8017e5a <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	69db      	ldr	r3, [r3, #28]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d003      	beq.n	8017e22 <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8017e1a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017e1e:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8017e20:	e027      	b.n	8017e72 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017e22:	69bb      	ldr	r3, [r7, #24]
 8017e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017e26:	683b      	ldr	r3, [r7, #0]
 8017e28:	09db      	lsrs	r3, r3, #7
 8017e2a:	4413      	add	r3, r2
 8017e2c:	4619      	mov	r1, r3
 8017e2e:	69b8      	ldr	r0, [r7, #24]
 8017e30:	f7ff fe4e 	bl	8017ad0 <move_window>
 8017e34:	4603      	mov	r3, r0
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d11a      	bne.n	8017e70 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8017e3a:	69bb      	ldr	r3, [r7, #24]
 8017e3c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8017e40:	683b      	ldr	r3, [r7, #0]
 8017e42:	009b      	lsls	r3, r3, #2
 8017e44:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017e48:	4413      	add	r3, r2
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f7ff fa44 	bl	80172d8 <ld_dword>
 8017e50:	4603      	mov	r3, r0
 8017e52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017e56:	61fb      	str	r3, [r7, #28]
					break;
 8017e58:	e00b      	b.n	8017e72 <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017e5a:	2301      	movs	r3, #1
 8017e5c:	61fb      	str	r3, [r7, #28]
 8017e5e:	e008      	b.n	8017e72 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017e60:	bf00      	nop
 8017e62:	e006      	b.n	8017e72 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017e64:	bf00      	nop
 8017e66:	e004      	b.n	8017e72 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017e68:	bf00      	nop
 8017e6a:	e002      	b.n	8017e72 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017e6c:	bf00      	nop
 8017e6e:	e000      	b.n	8017e72 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017e70:	bf00      	nop
		}
	}

	return val;
 8017e72:	69fb      	ldr	r3, [r7, #28]
}
 8017e74:	4618      	mov	r0, r3
 8017e76:	3720      	adds	r7, #32
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	bd80      	pop	{r7, pc}

08017e7c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8017e7c:	b590      	push	{r4, r7, lr}
 8017e7e:	b089      	sub	sp, #36	; 0x24
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	60f8      	str	r0, [r7, #12]
 8017e84:	60b9      	str	r1, [r7, #8]
 8017e86:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8017e88:	2302      	movs	r3, #2
 8017e8a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017e8c:	68bb      	ldr	r3, [r7, #8]
 8017e8e:	2b01      	cmp	r3, #1
 8017e90:	f240 80dd 	bls.w	801804e <put_fat+0x1d2>
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	69db      	ldr	r3, [r3, #28]
 8017e98:	68ba      	ldr	r2, [r7, #8]
 8017e9a:	429a      	cmp	r2, r3
 8017e9c:	f080 80d7 	bcs.w	801804e <put_fat+0x1d2>
		switch (fs->fs_type) {
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	781b      	ldrb	r3, [r3, #0]
 8017ea4:	2b04      	cmp	r3, #4
 8017ea6:	f300 80d2 	bgt.w	801804e <put_fat+0x1d2>
 8017eaa:	2b03      	cmp	r3, #3
 8017eac:	f280 8093 	bge.w	8017fd6 <put_fat+0x15a>
 8017eb0:	2b01      	cmp	r3, #1
 8017eb2:	d002      	beq.n	8017eba <put_fat+0x3e>
 8017eb4:	2b02      	cmp	r3, #2
 8017eb6:	d06e      	beq.n	8017f96 <put_fat+0x11a>
 8017eb8:	e0c9      	b.n	801804e <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8017eba:	68bb      	ldr	r3, [r7, #8]
 8017ebc:	61bb      	str	r3, [r7, #24]
 8017ebe:	69bb      	ldr	r3, [r7, #24]
 8017ec0:	085b      	lsrs	r3, r3, #1
 8017ec2:	69ba      	ldr	r2, [r7, #24]
 8017ec4:	4413      	add	r3, r2
 8017ec6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017ecc:	69bb      	ldr	r3, [r7, #24]
 8017ece:	0a5b      	lsrs	r3, r3, #9
 8017ed0:	4413      	add	r3, r2
 8017ed2:	4619      	mov	r1, r3
 8017ed4:	68f8      	ldr	r0, [r7, #12]
 8017ed6:	f7ff fdfb 	bl	8017ad0 <move_window>
 8017eda:	4603      	mov	r3, r0
 8017edc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017ede:	7ffb      	ldrb	r3, [r7, #31]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	f040 80ad 	bne.w	8018040 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8017eec:	69bb      	ldr	r3, [r7, #24]
 8017eee:	1c59      	adds	r1, r3, #1
 8017ef0:	61b9      	str	r1, [r7, #24]
 8017ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017ef6:	4413      	add	r3, r2
 8017ef8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017efa:	68bb      	ldr	r3, [r7, #8]
 8017efc:	f003 0301 	and.w	r3, r3, #1
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d00d      	beq.n	8017f20 <put_fat+0xa4>
 8017f04:	697b      	ldr	r3, [r7, #20]
 8017f06:	781b      	ldrb	r3, [r3, #0]
 8017f08:	b25b      	sxtb	r3, r3
 8017f0a:	f003 030f 	and.w	r3, r3, #15
 8017f0e:	b25a      	sxtb	r2, r3
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	b2db      	uxtb	r3, r3
 8017f14:	011b      	lsls	r3, r3, #4
 8017f16:	b25b      	sxtb	r3, r3
 8017f18:	4313      	orrs	r3, r2
 8017f1a:	b25b      	sxtb	r3, r3
 8017f1c:	b2db      	uxtb	r3, r3
 8017f1e:	e001      	b.n	8017f24 <put_fat+0xa8>
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	b2db      	uxtb	r3, r3
 8017f24:	697a      	ldr	r2, [r7, #20]
 8017f26:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	2201      	movs	r2, #1
 8017f2c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017f32:	69bb      	ldr	r3, [r7, #24]
 8017f34:	0a5b      	lsrs	r3, r3, #9
 8017f36:	4413      	add	r3, r2
 8017f38:	4619      	mov	r1, r3
 8017f3a:	68f8      	ldr	r0, [r7, #12]
 8017f3c:	f7ff fdc8 	bl	8017ad0 <move_window>
 8017f40:	4603      	mov	r3, r0
 8017f42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017f44:	7ffb      	ldrb	r3, [r7, #31]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d17c      	bne.n	8018044 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8017f50:	69bb      	ldr	r3, [r7, #24]
 8017f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017f56:	4413      	add	r3, r2
 8017f58:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017f5a:	68bb      	ldr	r3, [r7, #8]
 8017f5c:	f003 0301 	and.w	r3, r3, #1
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d003      	beq.n	8017f6c <put_fat+0xf0>
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	091b      	lsrs	r3, r3, #4
 8017f68:	b2db      	uxtb	r3, r3
 8017f6a:	e00e      	b.n	8017f8a <put_fat+0x10e>
 8017f6c:	697b      	ldr	r3, [r7, #20]
 8017f6e:	781b      	ldrb	r3, [r3, #0]
 8017f70:	b25b      	sxtb	r3, r3
 8017f72:	f023 030f 	bic.w	r3, r3, #15
 8017f76:	b25a      	sxtb	r2, r3
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	0a1b      	lsrs	r3, r3, #8
 8017f7c:	b25b      	sxtb	r3, r3
 8017f7e:	f003 030f 	and.w	r3, r3, #15
 8017f82:	b25b      	sxtb	r3, r3
 8017f84:	4313      	orrs	r3, r2
 8017f86:	b25b      	sxtb	r3, r3
 8017f88:	b2db      	uxtb	r3, r3
 8017f8a:	697a      	ldr	r2, [r7, #20]
 8017f8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	2201      	movs	r2, #1
 8017f92:	70da      	strb	r2, [r3, #3]
			break;
 8017f94:	e05b      	b.n	801804e <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017f9a:	68bb      	ldr	r3, [r7, #8]
 8017f9c:	0a1b      	lsrs	r3, r3, #8
 8017f9e:	4413      	add	r3, r2
 8017fa0:	4619      	mov	r1, r3
 8017fa2:	68f8      	ldr	r0, [r7, #12]
 8017fa4:	f7ff fd94 	bl	8017ad0 <move_window>
 8017fa8:	4603      	mov	r3, r0
 8017faa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017fac:	7ffb      	ldrb	r3, [r7, #31]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d14a      	bne.n	8018048 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8017fb8:	68bb      	ldr	r3, [r7, #8]
 8017fba:	005b      	lsls	r3, r3, #1
 8017fbc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8017fc0:	4413      	add	r3, r2
 8017fc2:	687a      	ldr	r2, [r7, #4]
 8017fc4:	b292      	uxth	r2, r2
 8017fc6:	4611      	mov	r1, r2
 8017fc8:	4618      	mov	r0, r3
 8017fca:	f7ff fa83 	bl	80174d4 <st_word>
			fs->wflag = 1;
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	2201      	movs	r2, #1
 8017fd2:	70da      	strb	r2, [r3, #3]
			break;
 8017fd4:	e03b      	b.n	801804e <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017fda:	68bb      	ldr	r3, [r7, #8]
 8017fdc:	09db      	lsrs	r3, r3, #7
 8017fde:	4413      	add	r3, r2
 8017fe0:	4619      	mov	r1, r3
 8017fe2:	68f8      	ldr	r0, [r7, #12]
 8017fe4:	f7ff fd74 	bl	8017ad0 <move_window>
 8017fe8:	4603      	mov	r3, r0
 8017fea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017fec:	7ffb      	ldrb	r3, [r7, #31]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d12c      	bne.n	801804c <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	781b      	ldrb	r3, [r3, #0]
 8017ff6:	2b04      	cmp	r3, #4
 8017ff8:	d012      	beq.n	8018020 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8018006:	68bb      	ldr	r3, [r7, #8]
 8018008:	009b      	lsls	r3, r3, #2
 801800a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801800e:	4413      	add	r3, r2
 8018010:	4618      	mov	r0, r3
 8018012:	f7ff f961 	bl	80172d8 <ld_dword>
 8018016:	4603      	mov	r3, r0
 8018018:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801801c:	4323      	orrs	r3, r4
 801801e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8018026:	68bb      	ldr	r3, [r7, #8]
 8018028:	009b      	lsls	r3, r3, #2
 801802a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801802e:	4413      	add	r3, r2
 8018030:	6879      	ldr	r1, [r7, #4]
 8018032:	4618      	mov	r0, r3
 8018034:	f7ff fa69 	bl	801750a <st_dword>
			fs->wflag = 1;
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	2201      	movs	r2, #1
 801803c:	70da      	strb	r2, [r3, #3]
			break;
 801803e:	e006      	b.n	801804e <put_fat+0x1d2>
			if (res != FR_OK) break;
 8018040:	bf00      	nop
 8018042:	e004      	b.n	801804e <put_fat+0x1d2>
			if (res != FR_OK) break;
 8018044:	bf00      	nop
 8018046:	e002      	b.n	801804e <put_fat+0x1d2>
			if (res != FR_OK) break;
 8018048:	bf00      	nop
 801804a:	e000      	b.n	801804e <put_fat+0x1d2>
			if (res != FR_OK) break;
 801804c:	bf00      	nop
		}
	}
	return res;
 801804e:	7ffb      	ldrb	r3, [r7, #31]
}
 8018050:	4618      	mov	r0, r3
 8018052:	3724      	adds	r7, #36	; 0x24
 8018054:	46bd      	mov	sp, r7
 8018056:	bd90      	pop	{r4, r7, pc}

08018058 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8018058:	b580      	push	{r7, lr}
 801805a:	b08a      	sub	sp, #40	; 0x28
 801805c:	af00      	add	r7, sp, #0
 801805e:	60f8      	str	r0, [r7, #12]
 8018060:	60b9      	str	r1, [r7, #8]
 8018062:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8018064:	68bb      	ldr	r3, [r7, #8]
 8018066:	3b02      	subs	r3, #2
 8018068:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	69db      	ldr	r3, [r3, #28]
 801806e:	3b02      	subs	r3, #2
 8018070:	68ba      	ldr	r2, [r7, #8]
 8018072:	429a      	cmp	r2, r3
 8018074:	d301      	bcc.n	801807a <find_bitmap+0x22>
 8018076:	2300      	movs	r3, #0
 8018078:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 801807a:	68bb      	ldr	r3, [r7, #8]
 801807c:	61fb      	str	r3, [r7, #28]
 801807e:	69fb      	ldr	r3, [r7, #28]
 8018080:	61bb      	str	r3, [r7, #24]
 8018082:	2300      	movs	r3, #0
 8018084:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801808a:	69fb      	ldr	r3, [r7, #28]
 801808c:	0b1b      	lsrs	r3, r3, #12
 801808e:	4413      	add	r3, r2
 8018090:	4619      	mov	r1, r3
 8018092:	68f8      	ldr	r0, [r7, #12]
 8018094:	f7ff fd1c 	bl	8017ad0 <move_window>
 8018098:	4603      	mov	r3, r0
 801809a:	2b00      	cmp	r3, #0
 801809c:	d002      	beq.n	80180a4 <find_bitmap+0x4c>
 801809e:	f04f 33ff 	mov.w	r3, #4294967295
 80180a2:	e051      	b.n	8018148 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80180a4:	69fb      	ldr	r3, [r7, #28]
 80180a6:	08db      	lsrs	r3, r3, #3
 80180a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80180ac:	623b      	str	r3, [r7, #32]
 80180ae:	69fb      	ldr	r3, [r7, #28]
 80180b0:	f003 0307 	and.w	r3, r3, #7
 80180b4:	2201      	movs	r2, #1
 80180b6:	fa02 f303 	lsl.w	r3, r2, r3
 80180ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80180be:	68fa      	ldr	r2, [r7, #12]
 80180c0:	6a3b      	ldr	r3, [r7, #32]
 80180c2:	4413      	add	r3, r2
 80180c4:	3338      	adds	r3, #56	; 0x38
 80180c6:	781a      	ldrb	r2, [r3, #0]
 80180c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80180cc:	4013      	ands	r3, r2
 80180ce:	74fb      	strb	r3, [r7, #19]
 80180d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80180d4:	005b      	lsls	r3, r3, #1
 80180d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80180da:	69fb      	ldr	r3, [r7, #28]
 80180dc:	3301      	adds	r3, #1
 80180de:	61fb      	str	r3, [r7, #28]
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	69db      	ldr	r3, [r3, #28]
 80180e4:	3b02      	subs	r3, #2
 80180e6:	69fa      	ldr	r2, [r7, #28]
 80180e8:	429a      	cmp	r2, r3
 80180ea:	d307      	bcc.n	80180fc <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 80180ec:	2300      	movs	r3, #0
 80180ee:	61fb      	str	r3, [r7, #28]
 80180f0:	2300      	movs	r3, #0
 80180f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80180f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80180fa:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 80180fc:	7cfb      	ldrb	r3, [r7, #19]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d109      	bne.n	8018116 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8018102:	697b      	ldr	r3, [r7, #20]
 8018104:	3301      	adds	r3, #1
 8018106:	617b      	str	r3, [r7, #20]
 8018108:	697a      	ldr	r2, [r7, #20]
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	429a      	cmp	r2, r3
 801810e:	d106      	bne.n	801811e <find_bitmap+0xc6>
 8018110:	69bb      	ldr	r3, [r7, #24]
 8018112:	3302      	adds	r3, #2
 8018114:	e018      	b.n	8018148 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8018116:	69fb      	ldr	r3, [r7, #28]
 8018118:	61bb      	str	r3, [r7, #24]
 801811a:	2300      	movs	r3, #0
 801811c:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 801811e:	69fa      	ldr	r2, [r7, #28]
 8018120:	68bb      	ldr	r3, [r7, #8]
 8018122:	429a      	cmp	r2, r3
 8018124:	d101      	bne.n	801812a <find_bitmap+0xd2>
 8018126:	2300      	movs	r3, #0
 8018128:	e00e      	b.n	8018148 <find_bitmap+0xf0>
			} while (bm);
 801812a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801812e:	2b00      	cmp	r3, #0
 8018130:	d1c5      	bne.n	80180be <find_bitmap+0x66>
			bm = 1;
 8018132:	2301      	movs	r3, #1
 8018134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8018138:	6a3b      	ldr	r3, [r7, #32]
 801813a:	3301      	adds	r3, #1
 801813c:	623b      	str	r3, [r7, #32]
 801813e:	6a3b      	ldr	r3, [r7, #32]
 8018140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018144:	d3bb      	bcc.n	80180be <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8018146:	e79e      	b.n	8018086 <find_bitmap+0x2e>
	}
}
 8018148:	4618      	mov	r0, r3
 801814a:	3728      	adds	r7, #40	; 0x28
 801814c:	46bd      	mov	sp, r7
 801814e:	bd80      	pop	{r7, pc}

08018150 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8018150:	b580      	push	{r7, lr}
 8018152:	b088      	sub	sp, #32
 8018154:	af00      	add	r7, sp, #0
 8018156:	60f8      	str	r0, [r7, #12]
 8018158:	60b9      	str	r1, [r7, #8]
 801815a:	607a      	str	r2, [r7, #4]
 801815c:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 801815e:	68bb      	ldr	r3, [r7, #8]
 8018160:	3b02      	subs	r3, #2
 8018162:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	0b1b      	lsrs	r3, r3, #12
 801816c:	4413      	add	r3, r2
 801816e:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8018170:	68bb      	ldr	r3, [r7, #8]
 8018172:	08db      	lsrs	r3, r3, #3
 8018174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018178:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 801817a:	68bb      	ldr	r3, [r7, #8]
 801817c:	f003 0307 	and.w	r3, r3, #7
 8018180:	2201      	movs	r2, #1
 8018182:	fa02 f303 	lsl.w	r3, r2, r3
 8018186:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8018188:	697b      	ldr	r3, [r7, #20]
 801818a:	1c5a      	adds	r2, r3, #1
 801818c:	617a      	str	r2, [r7, #20]
 801818e:	4619      	mov	r1, r3
 8018190:	68f8      	ldr	r0, [r7, #12]
 8018192:	f7ff fc9d 	bl	8017ad0 <move_window>
 8018196:	4603      	mov	r3, r0
 8018198:	2b00      	cmp	r3, #0
 801819a:	d001      	beq.n	80181a0 <change_bitmap+0x50>
 801819c:	2301      	movs	r3, #1
 801819e:	e03d      	b.n	801821c <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80181a0:	68fa      	ldr	r2, [r7, #12]
 80181a2:	69bb      	ldr	r3, [r7, #24]
 80181a4:	4413      	add	r3, r2
 80181a6:	3338      	adds	r3, #56	; 0x38
 80181a8:	781a      	ldrb	r2, [r3, #0]
 80181aa:	7ffb      	ldrb	r3, [r7, #31]
 80181ac:	4013      	ands	r3, r2
 80181ae:	b2db      	uxtb	r3, r3
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	bf14      	ite	ne
 80181b4:	2301      	movne	r3, #1
 80181b6:	2300      	moveq	r3, #0
 80181b8:	b2db      	uxtb	r3, r3
 80181ba:	461a      	mov	r2, r3
 80181bc:	683b      	ldr	r3, [r7, #0]
 80181be:	4293      	cmp	r3, r2
 80181c0:	d101      	bne.n	80181c6 <change_bitmap+0x76>
 80181c2:	2302      	movs	r3, #2
 80181c4:	e02a      	b.n	801821c <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 80181c6:	68fa      	ldr	r2, [r7, #12]
 80181c8:	69bb      	ldr	r3, [r7, #24]
 80181ca:	4413      	add	r3, r2
 80181cc:	3338      	adds	r3, #56	; 0x38
 80181ce:	781a      	ldrb	r2, [r3, #0]
 80181d0:	7ffb      	ldrb	r3, [r7, #31]
 80181d2:	4053      	eors	r3, r2
 80181d4:	b2d9      	uxtb	r1, r3
 80181d6:	68fa      	ldr	r2, [r7, #12]
 80181d8:	69bb      	ldr	r3, [r7, #24]
 80181da:	4413      	add	r3, r2
 80181dc:	3338      	adds	r3, #56	; 0x38
 80181de:	460a      	mov	r2, r1
 80181e0:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80181e2:	68fb      	ldr	r3, [r7, #12]
 80181e4:	2201      	movs	r2, #1
 80181e6:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	3b01      	subs	r3, #1
 80181ec:	607b      	str	r3, [r7, #4]
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d101      	bne.n	80181f8 <change_bitmap+0xa8>
 80181f4:	2300      	movs	r3, #0
 80181f6:	e011      	b.n	801821c <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 80181f8:	7ffb      	ldrb	r3, [r7, #31]
 80181fa:	005b      	lsls	r3, r3, #1
 80181fc:	77fb      	strb	r3, [r7, #31]
 80181fe:	7ffb      	ldrb	r3, [r7, #31]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d1cd      	bne.n	80181a0 <change_bitmap+0x50>
			bm = 1;
 8018204:	2301      	movs	r3, #1
 8018206:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8018208:	69bb      	ldr	r3, [r7, #24]
 801820a:	3301      	adds	r3, #1
 801820c:	61bb      	str	r3, [r7, #24]
 801820e:	69bb      	ldr	r3, [r7, #24]
 8018210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018214:	d3c4      	bcc.n	80181a0 <change_bitmap+0x50>
		i = 0;
 8018216:	2300      	movs	r3, #0
 8018218:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 801821a:	e7b5      	b.n	8018188 <change_bitmap+0x38>
	}
}
 801821c:	4618      	mov	r0, r3
 801821e:	3720      	adds	r7, #32
 8018220:	46bd      	mov	sp, r7
 8018222:	bd80      	pop	{r7, pc}

08018224 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b086      	sub	sp, #24
 8018228:	af00      	add	r7, sp, #0
 801822a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	79db      	ldrb	r3, [r3, #7]
 8018230:	2b03      	cmp	r3, #3
 8018232:	d121      	bne.n	8018278 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	689b      	ldr	r3, [r3, #8]
 8018238:	617b      	str	r3, [r7, #20]
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	699b      	ldr	r3, [r3, #24]
 801823e:	613b      	str	r3, [r7, #16]
 8018240:	e014      	b.n	801826c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	6818      	ldr	r0, [r3, #0]
 8018246:	697b      	ldr	r3, [r7, #20]
 8018248:	3301      	adds	r3, #1
 801824a:	461a      	mov	r2, r3
 801824c:	6979      	ldr	r1, [r7, #20]
 801824e:	f7ff fe15 	bl	8017e7c <put_fat>
 8018252:	4603      	mov	r3, r0
 8018254:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8018256:	7bfb      	ldrb	r3, [r7, #15]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d001      	beq.n	8018260 <fill_first_frag+0x3c>
 801825c:	7bfb      	ldrb	r3, [r7, #15]
 801825e:	e00c      	b.n	801827a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8018260:	697b      	ldr	r3, [r7, #20]
 8018262:	3301      	adds	r3, #1
 8018264:	617b      	str	r3, [r7, #20]
 8018266:	693b      	ldr	r3, [r7, #16]
 8018268:	3b01      	subs	r3, #1
 801826a:	613b      	str	r3, [r7, #16]
 801826c:	693b      	ldr	r3, [r7, #16]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d1e7      	bne.n	8018242 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	2200      	movs	r2, #0
 8018276:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8018278:	2300      	movs	r3, #0
}
 801827a:	4618      	mov	r0, r3
 801827c:	3718      	adds	r7, #24
 801827e:	46bd      	mov	sp, r7
 8018280:	bd80      	pop	{r7, pc}

08018282 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8018282:	b580      	push	{r7, lr}
 8018284:	b086      	sub	sp, #24
 8018286:	af00      	add	r7, sp, #0
 8018288:	60f8      	str	r0, [r7, #12]
 801828a:	60b9      	str	r1, [r7, #8]
 801828c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 801828e:	e020      	b.n	80182d2 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	6818      	ldr	r0, [r3, #0]
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	69db      	ldr	r3, [r3, #28]
 8018298:	68ba      	ldr	r2, [r7, #8]
 801829a:	1ad3      	subs	r3, r2, r3
 801829c:	1c59      	adds	r1, r3, #1
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	69db      	ldr	r3, [r3, #28]
 80182a2:	2b01      	cmp	r3, #1
 80182a4:	d905      	bls.n	80182b2 <fill_last_frag+0x30>
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	69db      	ldr	r3, [r3, #28]
 80182aa:	68ba      	ldr	r2, [r7, #8]
 80182ac:	1ad3      	subs	r3, r2, r3
 80182ae:	3302      	adds	r3, #2
 80182b0:	e000      	b.n	80182b4 <fill_last_frag+0x32>
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	461a      	mov	r2, r3
 80182b6:	f7ff fde1 	bl	8017e7c <put_fat>
 80182ba:	4603      	mov	r3, r0
 80182bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80182be:	7dfb      	ldrb	r3, [r7, #23]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d001      	beq.n	80182c8 <fill_last_frag+0x46>
 80182c4:	7dfb      	ldrb	r3, [r7, #23]
 80182c6:	e009      	b.n	80182dc <fill_last_frag+0x5a>
		obj->n_frag--;
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	69db      	ldr	r3, [r3, #28]
 80182cc:	1e5a      	subs	r2, r3, #1
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	69db      	ldr	r3, [r3, #28]
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d1da      	bne.n	8018290 <fill_last_frag+0xe>
	}
	return FR_OK;
 80182da:	2300      	movs	r3, #0
}
 80182dc:	4618      	mov	r0, r3
 80182de:	3718      	adds	r7, #24
 80182e0:	46bd      	mov	sp, r7
 80182e2:	bd80      	pop	{r7, pc}

080182e4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b08c      	sub	sp, #48	; 0x30
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	60f8      	str	r0, [r7, #12]
 80182ec:	60b9      	str	r1, [r7, #8]
 80182ee:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80182f0:	2300      	movs	r3, #0
 80182f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	DWORD nxt;
	FATFS *fs = obj->fs;
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	623b      	str	r3, [r7, #32]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 80182fc:	68bb      	ldr	r3, [r7, #8]
 80182fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018300:	68bb      	ldr	r3, [r7, #8]
 8018302:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8018304:	68bb      	ldr	r3, [r7, #8]
 8018306:	2b01      	cmp	r3, #1
 8018308:	d904      	bls.n	8018314 <remove_chain+0x30>
 801830a:	6a3b      	ldr	r3, [r7, #32]
 801830c:	69db      	ldr	r3, [r3, #28]
 801830e:	68ba      	ldr	r2, [r7, #8]
 8018310:	429a      	cmp	r2, r3
 8018312:	d301      	bcc.n	8018318 <remove_chain+0x34>
 8018314:	2302      	movs	r3, #2
 8018316:	e0b7      	b.n	8018488 <remove_chain+0x1a4>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d017      	beq.n	801834e <remove_chain+0x6a>
 801831e:	6a3b      	ldr	r3, [r7, #32]
 8018320:	781b      	ldrb	r3, [r3, #0]
 8018322:	2b04      	cmp	r3, #4
 8018324:	d103      	bne.n	801832e <remove_chain+0x4a>
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	79db      	ldrb	r3, [r3, #7]
 801832a:	2b02      	cmp	r3, #2
 801832c:	d00f      	beq.n	801834e <remove_chain+0x6a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801832e:	f04f 32ff 	mov.w	r2, #4294967295
 8018332:	6879      	ldr	r1, [r7, #4]
 8018334:	6a38      	ldr	r0, [r7, #32]
 8018336:	f7ff fda1 	bl	8017e7c <put_fat>
 801833a:	4603      	mov	r3, r0
 801833c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res != FR_OK) return res;
 8018340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018344:	2b00      	cmp	r3, #0
 8018346:	d002      	beq.n	801834e <remove_chain+0x6a>
 8018348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801834c:	e09c      	b.n	8018488 <remove_chain+0x1a4>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801834e:	68b9      	ldr	r1, [r7, #8]
 8018350:	68f8      	ldr	r0, [r7, #12]
 8018352:	f7ff fc79 	bl	8017c48 <get_fat>
 8018356:	61f8      	str	r0, [r7, #28]
		if (nxt == 0) break;				/* Empty cluster? */
 8018358:	69fb      	ldr	r3, [r7, #28]
 801835a:	2b00      	cmp	r3, #0
 801835c:	d073      	beq.n	8018446 <remove_chain+0x162>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801835e:	69fb      	ldr	r3, [r7, #28]
 8018360:	2b01      	cmp	r3, #1
 8018362:	d101      	bne.n	8018368 <remove_chain+0x84>
 8018364:	2302      	movs	r3, #2
 8018366:	e08f      	b.n	8018488 <remove_chain+0x1a4>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8018368:	69fb      	ldr	r3, [r7, #28]
 801836a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801836e:	d101      	bne.n	8018374 <remove_chain+0x90>
 8018370:	2301      	movs	r3, #1
 8018372:	e089      	b.n	8018488 <remove_chain+0x1a4>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8018374:	6a3b      	ldr	r3, [r7, #32]
 8018376:	781b      	ldrb	r3, [r3, #0]
 8018378:	2b04      	cmp	r3, #4
 801837a:	d00e      	beq.n	801839a <remove_chain+0xb6>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801837c:	2200      	movs	r2, #0
 801837e:	68b9      	ldr	r1, [r7, #8]
 8018380:	6a38      	ldr	r0, [r7, #32]
 8018382:	f7ff fd7b 	bl	8017e7c <put_fat>
 8018386:	4603      	mov	r3, r0
 8018388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (res != FR_OK) return res;
 801838c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018390:	2b00      	cmp	r3, #0
 8018392:	d002      	beq.n	801839a <remove_chain+0xb6>
 8018394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018398:	e076      	b.n	8018488 <remove_chain+0x1a4>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801839a:	6a3b      	ldr	r3, [r7, #32]
 801839c:	699a      	ldr	r2, [r3, #24]
 801839e:	6a3b      	ldr	r3, [r7, #32]
 80183a0:	69db      	ldr	r3, [r3, #28]
 80183a2:	3b02      	subs	r3, #2
 80183a4:	429a      	cmp	r2, r3
 80183a6:	d20b      	bcs.n	80183c0 <remove_chain+0xdc>
			fs->free_clst++;
 80183a8:	6a3b      	ldr	r3, [r7, #32]
 80183aa:	699b      	ldr	r3, [r3, #24]
 80183ac:	1c5a      	adds	r2, r3, #1
 80183ae:	6a3b      	ldr	r3, [r7, #32]
 80183b0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80183b2:	6a3b      	ldr	r3, [r7, #32]
 80183b4:	791b      	ldrb	r3, [r3, #4]
 80183b6:	f043 0301 	orr.w	r3, r3, #1
 80183ba:	b2da      	uxtb	r2, r3
 80183bc:	6a3b      	ldr	r3, [r7, #32]
 80183be:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80183c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183c2:	3301      	adds	r3, #1
 80183c4:	69fa      	ldr	r2, [r7, #28]
 80183c6:	429a      	cmp	r2, r3
 80183c8:	d102      	bne.n	80183d0 <remove_chain+0xec>
			ecl = nxt;
 80183ca:	69fb      	ldr	r3, [r7, #28]
 80183cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80183ce:	e032      	b.n	8018436 <remove_chain+0x152>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80183d0:	6a3b      	ldr	r3, [r7, #32]
 80183d2:	781b      	ldrb	r3, [r3, #0]
 80183d4:	2b04      	cmp	r3, #4
 80183d6:	d112      	bne.n	80183fe <remove_chain+0x11a>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80183d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80183da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183dc:	1ad3      	subs	r3, r2, r3
 80183de:	1c5a      	adds	r2, r3, #1
 80183e0:	2300      	movs	r3, #0
 80183e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80183e4:	6a38      	ldr	r0, [r7, #32]
 80183e6:	f7ff feb3 	bl	8018150 <change_bitmap>
 80183ea:	4603      	mov	r3, r0
 80183ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (res != FR_OK) return res;
 80183f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d002      	beq.n	80183fe <remove_chain+0x11a>
 80183f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80183fc:	e044      	b.n	8018488 <remove_chain+0x1a4>
			}
#endif
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
 80183fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018400:	6a38      	ldr	r0, [r7, #32]
 8018402:	f7ff fc01 	bl	8017c08 <clust2sect>
 8018406:	4603      	mov	r3, r0
 8018408:	617b      	str	r3, [r7, #20]
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
 801840a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801840c:	6a38      	ldr	r0, [r7, #32]
 801840e:	f7ff fbfb 	bl	8017c08 <clust2sect>
 8018412:	4602      	mov	r2, r0
 8018414:	6a3b      	ldr	r3, [r7, #32]
 8018416:	895b      	ldrh	r3, [r3, #10]
 8018418:	4413      	add	r3, r2
 801841a:	3b01      	subs	r3, #1
 801841c:	61bb      	str	r3, [r7, #24]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
 801841e:	6a3b      	ldr	r3, [r7, #32]
 8018420:	785b      	ldrb	r3, [r3, #1]
 8018422:	f107 0214 	add.w	r2, r7, #20
 8018426:	2104      	movs	r1, #4
 8018428:	4618      	mov	r0, r3
 801842a:	f7fe ff1f 	bl	801726c <disk_ioctl>
#endif
			scl = ecl = nxt;
 801842e:	69fb      	ldr	r3, [r7, #28]
 8018430:	62bb      	str	r3, [r7, #40]	; 0x28
 8018432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018434:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
#endif
		clst = nxt;					/* Next cluster */
 8018436:	69fb      	ldr	r3, [r7, #28]
 8018438:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801843a:	6a3b      	ldr	r3, [r7, #32]
 801843c:	69db      	ldr	r3, [r3, #28]
 801843e:	68ba      	ldr	r2, [r7, #8]
 8018440:	429a      	cmp	r2, r3
 8018442:	d384      	bcc.n	801834e <remove_chain+0x6a>
 8018444:	e000      	b.n	8018448 <remove_chain+0x164>
		if (nxt == 0) break;				/* Empty cluster? */
 8018446:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8018448:	6a3b      	ldr	r3, [r7, #32]
 801844a:	781b      	ldrb	r3, [r3, #0]
 801844c:	2b04      	cmp	r3, #4
 801844e:	d11a      	bne.n	8018486 <remove_chain+0x1a2>
		if (pclst == 0) {	/* Does the object have no chain? */
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	2b00      	cmp	r3, #0
 8018454:	d103      	bne.n	801845e <remove_chain+0x17a>
			obj->stat = 0;		/* Change the object status 'initial' */
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	2200      	movs	r2, #0
 801845a:	71da      	strb	r2, [r3, #7]
 801845c:	e013      	b.n	8018486 <remove_chain+0x1a2>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	79db      	ldrb	r3, [r3, #7]
 8018462:	2b03      	cmp	r3, #3
 8018464:	d10f      	bne.n	8018486 <remove_chain+0x1a2>
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	689b      	ldr	r3, [r3, #8]
 801846a:	687a      	ldr	r2, [r7, #4]
 801846c:	429a      	cmp	r2, r3
 801846e:	d30a      	bcc.n	8018486 <remove_chain+0x1a2>
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	689a      	ldr	r2, [r3, #8]
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	699b      	ldr	r3, [r3, #24]
 8018478:	4413      	add	r3, r2
 801847a:	687a      	ldr	r2, [r7, #4]
 801847c:	429a      	cmp	r2, r3
 801847e:	d802      	bhi.n	8018486 <remove_chain+0x1a2>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	2202      	movs	r2, #2
 8018484:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8018486:	2300      	movs	r3, #0
}
 8018488:	4618      	mov	r0, r3
 801848a:	3730      	adds	r7, #48	; 0x30
 801848c:	46bd      	mov	sp, r7
 801848e:	bd80      	pop	{r7, pc}

08018490 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b088      	sub	sp, #32
 8018494:	af00      	add	r7, sp, #0
 8018496:	6078      	str	r0, [r7, #4]
 8018498:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80184a0:	683b      	ldr	r3, [r7, #0]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d10d      	bne.n	80184c2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80184a6:	693b      	ldr	r3, [r7, #16]
 80184a8:	695b      	ldr	r3, [r3, #20]
 80184aa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80184ac:	69bb      	ldr	r3, [r7, #24]
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d004      	beq.n	80184bc <create_chain+0x2c>
 80184b2:	693b      	ldr	r3, [r7, #16]
 80184b4:	69db      	ldr	r3, [r3, #28]
 80184b6:	69ba      	ldr	r2, [r7, #24]
 80184b8:	429a      	cmp	r2, r3
 80184ba:	d31b      	bcc.n	80184f4 <create_chain+0x64>
 80184bc:	2301      	movs	r3, #1
 80184be:	61bb      	str	r3, [r7, #24]
 80184c0:	e018      	b.n	80184f4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80184c2:	6839      	ldr	r1, [r7, #0]
 80184c4:	6878      	ldr	r0, [r7, #4]
 80184c6:	f7ff fbbf 	bl	8017c48 <get_fat>
 80184ca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	2b01      	cmp	r3, #1
 80184d0:	d801      	bhi.n	80184d6 <create_chain+0x46>
 80184d2:	2301      	movs	r3, #1
 80184d4:	e0d9      	b.n	801868a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184dc:	d101      	bne.n	80184e2 <create_chain+0x52>
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	e0d3      	b.n	801868a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80184e2:	693b      	ldr	r3, [r7, #16]
 80184e4:	69db      	ldr	r3, [r3, #28]
 80184e6:	68fa      	ldr	r2, [r7, #12]
 80184e8:	429a      	cmp	r2, r3
 80184ea:	d201      	bcs.n	80184f0 <create_chain+0x60>
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	e0cc      	b.n	801868a <create_chain+0x1fa>
		scl = clst;
 80184f0:	683b      	ldr	r3, [r7, #0]
 80184f2:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80184f4:	693b      	ldr	r3, [r7, #16]
 80184f6:	781b      	ldrb	r3, [r3, #0]
 80184f8:	2b04      	cmp	r3, #4
 80184fa:	d164      	bne.n	80185c6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80184fc:	2201      	movs	r2, #1
 80184fe:	69b9      	ldr	r1, [r7, #24]
 8018500:	6938      	ldr	r0, [r7, #16]
 8018502:	f7ff fda9 	bl	8018058 <find_bitmap>
 8018506:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8018508:	69fb      	ldr	r3, [r7, #28]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d003      	beq.n	8018516 <create_chain+0x86>
 801850e:	69fb      	ldr	r3, [r7, #28]
 8018510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018514:	d101      	bne.n	801851a <create_chain+0x8a>
 8018516:	69fb      	ldr	r3, [r7, #28]
 8018518:	e0b7      	b.n	801868a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 801851a:	2301      	movs	r3, #1
 801851c:	2201      	movs	r2, #1
 801851e:	69f9      	ldr	r1, [r7, #28]
 8018520:	6938      	ldr	r0, [r7, #16]
 8018522:	f7ff fe15 	bl	8018150 <change_bitmap>
 8018526:	4603      	mov	r3, r0
 8018528:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 801852a:	7dfb      	ldrb	r3, [r7, #23]
 801852c:	2b02      	cmp	r3, #2
 801852e:	d101      	bne.n	8018534 <create_chain+0xa4>
 8018530:	2301      	movs	r3, #1
 8018532:	e0aa      	b.n	801868a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8018534:	7dfb      	ldrb	r3, [r7, #23]
 8018536:	2b01      	cmp	r3, #1
 8018538:	d102      	bne.n	8018540 <create_chain+0xb0>
 801853a:	f04f 33ff 	mov.w	r3, #4294967295
 801853e:	e0a4      	b.n	801868a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8018540:	683b      	ldr	r3, [r7, #0]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d103      	bne.n	801854e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	2202      	movs	r2, #2
 801854a:	71da      	strb	r2, [r3, #7]
 801854c:	e011      	b.n	8018572 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	79db      	ldrb	r3, [r3, #7]
 8018552:	2b02      	cmp	r3, #2
 8018554:	d10d      	bne.n	8018572 <create_chain+0xe2>
 8018556:	69bb      	ldr	r3, [r7, #24]
 8018558:	3301      	adds	r3, #1
 801855a:	69fa      	ldr	r2, [r7, #28]
 801855c:	429a      	cmp	r2, r3
 801855e:	d008      	beq.n	8018572 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	689b      	ldr	r3, [r3, #8]
 8018564:	69ba      	ldr	r2, [r7, #24]
 8018566:	1ad2      	subs	r2, r2, r3
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	2203      	movs	r2, #3
 8018570:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	79db      	ldrb	r3, [r3, #7]
 8018576:	2b02      	cmp	r3, #2
 8018578:	d064      	beq.n	8018644 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 801857a:	683b      	ldr	r3, [r7, #0]
 801857c:	3301      	adds	r3, #1
 801857e:	69fa      	ldr	r2, [r7, #28]
 8018580:	429a      	cmp	r2, r3
 8018582:	d10b      	bne.n	801859c <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	69db      	ldr	r3, [r3, #28]
 8018588:	2b00      	cmp	r3, #0
 801858a:	d003      	beq.n	8018594 <create_chain+0x104>
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	69db      	ldr	r3, [r3, #28]
 8018590:	3301      	adds	r3, #1
 8018592:	e000      	b.n	8018596 <create_chain+0x106>
 8018594:	2302      	movs	r3, #2
 8018596:	687a      	ldr	r2, [r7, #4]
 8018598:	61d3      	str	r3, [r2, #28]
 801859a:	e053      	b.n	8018644 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	69db      	ldr	r3, [r3, #28]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d102      	bne.n	80185aa <create_chain+0x11a>
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	2201      	movs	r2, #1
 80185a8:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80185aa:	69fa      	ldr	r2, [r7, #28]
 80185ac:	6839      	ldr	r1, [r7, #0]
 80185ae:	6878      	ldr	r0, [r7, #4]
 80185b0:	f7ff fe67 	bl	8018282 <fill_last_frag>
 80185b4:	4603      	mov	r3, r0
 80185b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80185b8:	7dfb      	ldrb	r3, [r7, #23]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d142      	bne.n	8018644 <create_chain+0x1b4>
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	2201      	movs	r2, #1
 80185c2:	61da      	str	r2, [r3, #28]
 80185c4:	e03e      	b.n	8018644 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80185c6:	69bb      	ldr	r3, [r7, #24]
 80185c8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80185ca:	69fb      	ldr	r3, [r7, #28]
 80185cc:	3301      	adds	r3, #1
 80185ce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80185d0:	693b      	ldr	r3, [r7, #16]
 80185d2:	69db      	ldr	r3, [r3, #28]
 80185d4:	69fa      	ldr	r2, [r7, #28]
 80185d6:	429a      	cmp	r2, r3
 80185d8:	d307      	bcc.n	80185ea <create_chain+0x15a>
				ncl = 2;
 80185da:	2302      	movs	r3, #2
 80185dc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80185de:	69fa      	ldr	r2, [r7, #28]
 80185e0:	69bb      	ldr	r3, [r7, #24]
 80185e2:	429a      	cmp	r2, r3
 80185e4:	d901      	bls.n	80185ea <create_chain+0x15a>
 80185e6:	2300      	movs	r3, #0
 80185e8:	e04f      	b.n	801868a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80185ea:	69f9      	ldr	r1, [r7, #28]
 80185ec:	6878      	ldr	r0, [r7, #4]
 80185ee:	f7ff fb2b 	bl	8017c48 <get_fat>
 80185f2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d00e      	beq.n	8018618 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	2b01      	cmp	r3, #1
 80185fe:	d003      	beq.n	8018608 <create_chain+0x178>
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018606:	d101      	bne.n	801860c <create_chain+0x17c>
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	e03e      	b.n	801868a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 801860c:	69fa      	ldr	r2, [r7, #28]
 801860e:	69bb      	ldr	r3, [r7, #24]
 8018610:	429a      	cmp	r2, r3
 8018612:	d1da      	bne.n	80185ca <create_chain+0x13a>
 8018614:	2300      	movs	r3, #0
 8018616:	e038      	b.n	801868a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8018618:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801861a:	f04f 32ff 	mov.w	r2, #4294967295
 801861e:	69f9      	ldr	r1, [r7, #28]
 8018620:	6938      	ldr	r0, [r7, #16]
 8018622:	f7ff fc2b 	bl	8017e7c <put_fat>
 8018626:	4603      	mov	r3, r0
 8018628:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801862a:	7dfb      	ldrb	r3, [r7, #23]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d109      	bne.n	8018644 <create_chain+0x1b4>
 8018630:	683b      	ldr	r3, [r7, #0]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d006      	beq.n	8018644 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8018636:	69fa      	ldr	r2, [r7, #28]
 8018638:	6839      	ldr	r1, [r7, #0]
 801863a:	6938      	ldr	r0, [r7, #16]
 801863c:	f7ff fc1e 	bl	8017e7c <put_fat>
 8018640:	4603      	mov	r3, r0
 8018642:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8018644:	7dfb      	ldrb	r3, [r7, #23]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d116      	bne.n	8018678 <create_chain+0x1e8>
		fs->last_clst = ncl;
 801864a:	693b      	ldr	r3, [r7, #16]
 801864c:	69fa      	ldr	r2, [r7, #28]
 801864e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8018650:	693b      	ldr	r3, [r7, #16]
 8018652:	699a      	ldr	r2, [r3, #24]
 8018654:	693b      	ldr	r3, [r7, #16]
 8018656:	69db      	ldr	r3, [r3, #28]
 8018658:	3b02      	subs	r3, #2
 801865a:	429a      	cmp	r2, r3
 801865c:	d804      	bhi.n	8018668 <create_chain+0x1d8>
 801865e:	693b      	ldr	r3, [r7, #16]
 8018660:	699b      	ldr	r3, [r3, #24]
 8018662:	1e5a      	subs	r2, r3, #1
 8018664:	693b      	ldr	r3, [r7, #16]
 8018666:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8018668:	693b      	ldr	r3, [r7, #16]
 801866a:	791b      	ldrb	r3, [r3, #4]
 801866c:	f043 0301 	orr.w	r3, r3, #1
 8018670:	b2da      	uxtb	r2, r3
 8018672:	693b      	ldr	r3, [r7, #16]
 8018674:	711a      	strb	r2, [r3, #4]
 8018676:	e007      	b.n	8018688 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8018678:	7dfb      	ldrb	r3, [r7, #23]
 801867a:	2b01      	cmp	r3, #1
 801867c:	d102      	bne.n	8018684 <create_chain+0x1f4>
 801867e:	f04f 33ff 	mov.w	r3, #4294967295
 8018682:	e000      	b.n	8018686 <create_chain+0x1f6>
 8018684:	2301      	movs	r3, #1
 8018686:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8018688:	69fb      	ldr	r3, [r7, #28]
}
 801868a:	4618      	mov	r0, r3
 801868c:	3720      	adds	r7, #32
 801868e:	46bd      	mov	sp, r7
 8018690:	bd80      	pop	{r7, pc}

08018692 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8018692:	b580      	push	{r7, lr}
 8018694:	b086      	sub	sp, #24
 8018696:	af00      	add	r7, sp, #0
 8018698:	6078      	str	r0, [r7, #4]
 801869a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80186a2:	693b      	ldr	r3, [r7, #16]
 80186a4:	781b      	ldrb	r3, [r3, #0]
 80186a6:	2b04      	cmp	r3, #4
 80186a8:	d102      	bne.n	80186b0 <dir_sdi+0x1e>
 80186aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80186ae:	e001      	b.n	80186b4 <dir_sdi+0x22>
 80186b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80186b4:	683b      	ldr	r3, [r7, #0]
 80186b6:	429a      	cmp	r2, r3
 80186b8:	d904      	bls.n	80186c4 <dir_sdi+0x32>
 80186ba:	683b      	ldr	r3, [r7, #0]
 80186bc:	f003 031f 	and.w	r3, r3, #31
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d001      	beq.n	80186c8 <dir_sdi+0x36>
		return FR_INT_ERR;
 80186c4:	2302      	movs	r3, #2
 80186c6:	e066      	b.n	8018796 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	683a      	ldr	r2, [r7, #0]
 80186cc:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	689b      	ldr	r3, [r3, #8]
 80186d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80186d4:	697b      	ldr	r3, [r7, #20]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d109      	bne.n	80186ee <dir_sdi+0x5c>
 80186da:	693b      	ldr	r3, [r7, #16]
 80186dc:	781b      	ldrb	r3, [r3, #0]
 80186de:	2b02      	cmp	r3, #2
 80186e0:	d905      	bls.n	80186ee <dir_sdi+0x5c>
		clst = fs->dirbase;
 80186e2:	693b      	ldr	r3, [r7, #16]
 80186e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	2200      	movs	r2, #0
 80186ec:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80186ee:	697b      	ldr	r3, [r7, #20]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d10c      	bne.n	801870e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80186f4:	683b      	ldr	r3, [r7, #0]
 80186f6:	095b      	lsrs	r3, r3, #5
 80186f8:	693a      	ldr	r2, [r7, #16]
 80186fa:	8912      	ldrh	r2, [r2, #8]
 80186fc:	4293      	cmp	r3, r2
 80186fe:	d301      	bcc.n	8018704 <dir_sdi+0x72>
 8018700:	2302      	movs	r3, #2
 8018702:	e048      	b.n	8018796 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8018704:	693b      	ldr	r3, [r7, #16]
 8018706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	639a      	str	r2, [r3, #56]	; 0x38
 801870c:	e029      	b.n	8018762 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801870e:	693b      	ldr	r3, [r7, #16]
 8018710:	895b      	ldrh	r3, [r3, #10]
 8018712:	025b      	lsls	r3, r3, #9
 8018714:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018716:	e019      	b.n	801874c <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	6979      	ldr	r1, [r7, #20]
 801871c:	4618      	mov	r0, r3
 801871e:	f7ff fa93 	bl	8017c48 <get_fat>
 8018722:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018724:	697b      	ldr	r3, [r7, #20]
 8018726:	f1b3 3fff 	cmp.w	r3, #4294967295
 801872a:	d101      	bne.n	8018730 <dir_sdi+0x9e>
 801872c:	2301      	movs	r3, #1
 801872e:	e032      	b.n	8018796 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8018730:	697b      	ldr	r3, [r7, #20]
 8018732:	2b01      	cmp	r3, #1
 8018734:	d904      	bls.n	8018740 <dir_sdi+0xae>
 8018736:	693b      	ldr	r3, [r7, #16]
 8018738:	69db      	ldr	r3, [r3, #28]
 801873a:	697a      	ldr	r2, [r7, #20]
 801873c:	429a      	cmp	r2, r3
 801873e:	d301      	bcc.n	8018744 <dir_sdi+0xb2>
 8018740:	2302      	movs	r3, #2
 8018742:	e028      	b.n	8018796 <dir_sdi+0x104>
			ofs -= csz;
 8018744:	683a      	ldr	r2, [r7, #0]
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	1ad3      	subs	r3, r2, r3
 801874a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801874c:	683a      	ldr	r2, [r7, #0]
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	429a      	cmp	r2, r3
 8018752:	d2e1      	bcs.n	8018718 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8018754:	6979      	ldr	r1, [r7, #20]
 8018756:	6938      	ldr	r0, [r7, #16]
 8018758:	f7ff fa56 	bl	8017c08 <clust2sect>
 801875c:	4602      	mov	r2, r0
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	697a      	ldr	r2, [r7, #20]
 8018766:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801876c:	2b00      	cmp	r3, #0
 801876e:	d101      	bne.n	8018774 <dir_sdi+0xe2>
 8018770:	2302      	movs	r3, #2
 8018772:	e010      	b.n	8018796 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018778:	683b      	ldr	r3, [r7, #0]
 801877a:	0a5b      	lsrs	r3, r3, #9
 801877c:	441a      	add	r2, r3
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8018782:	693b      	ldr	r3, [r7, #16]
 8018784:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8018788:	683b      	ldr	r3, [r7, #0]
 801878a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801878e:	441a      	add	r2, r3
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8018794:	2300      	movs	r3, #0
}
 8018796:	4618      	mov	r0, r3
 8018798:	3718      	adds	r7, #24
 801879a:	46bd      	mov	sp, r7
 801879c:	bd80      	pop	{r7, pc}

0801879e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801879e:	b580      	push	{r7, lr}
 80187a0:	b086      	sub	sp, #24
 80187a2:	af00      	add	r7, sp, #0
 80187a4:	6078      	str	r0, [r7, #4]
 80187a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80187b2:	3320      	adds	r3, #32
 80187b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d00b      	beq.n	80187d6 <dir_next+0x38>
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	781b      	ldrb	r3, [r3, #0]
 80187c2:	2b04      	cmp	r3, #4
 80187c4:	d102      	bne.n	80187cc <dir_next+0x2e>
 80187c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80187ca:	e001      	b.n	80187d0 <dir_next+0x32>
 80187cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80187d0:	68bb      	ldr	r3, [r7, #8]
 80187d2:	429a      	cmp	r2, r3
 80187d4:	d801      	bhi.n	80187da <dir_next+0x3c>
 80187d6:	2304      	movs	r3, #4
 80187d8:	e0b2      	b.n	8018940 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80187da:	68bb      	ldr	r3, [r7, #8]
 80187dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	f040 80a0 	bne.w	8018926 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187ea:	1c5a      	adds	r2, r3, #1
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d10b      	bne.n	8018810 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80187f8:	68bb      	ldr	r3, [r7, #8]
 80187fa:	095b      	lsrs	r3, r3, #5
 80187fc:	68fa      	ldr	r2, [r7, #12]
 80187fe:	8912      	ldrh	r2, [r2, #8]
 8018800:	4293      	cmp	r3, r2
 8018802:	f0c0 8090 	bcc.w	8018926 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	2200      	movs	r2, #0
 801880a:	639a      	str	r2, [r3, #56]	; 0x38
 801880c:	2304      	movs	r3, #4
 801880e:	e097      	b.n	8018940 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8018810:	68bb      	ldr	r3, [r7, #8]
 8018812:	0a5b      	lsrs	r3, r3, #9
 8018814:	68fa      	ldr	r2, [r7, #12]
 8018816:	8952      	ldrh	r2, [r2, #10]
 8018818:	3a01      	subs	r2, #1
 801881a:	4013      	ands	r3, r2
 801881c:	2b00      	cmp	r3, #0
 801881e:	f040 8082 	bne.w	8018926 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8018822:	687a      	ldr	r2, [r7, #4]
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018828:	4619      	mov	r1, r3
 801882a:	4610      	mov	r0, r2
 801882c:	f7ff fa0c 	bl	8017c48 <get_fat>
 8018830:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8018832:	697b      	ldr	r3, [r7, #20]
 8018834:	2b01      	cmp	r3, #1
 8018836:	d801      	bhi.n	801883c <dir_next+0x9e>
 8018838:	2302      	movs	r3, #2
 801883a:	e081      	b.n	8018940 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801883c:	697b      	ldr	r3, [r7, #20]
 801883e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018842:	d101      	bne.n	8018848 <dir_next+0xaa>
 8018844:	2301      	movs	r3, #1
 8018846:	e07b      	b.n	8018940 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	69db      	ldr	r3, [r3, #28]
 801884c:	697a      	ldr	r2, [r7, #20]
 801884e:	429a      	cmp	r2, r3
 8018850:	d35f      	bcc.n	8018912 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8018852:	683b      	ldr	r3, [r7, #0]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d104      	bne.n	8018862 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	2200      	movs	r2, #0
 801885c:	639a      	str	r2, [r3, #56]	; 0x38
 801885e:	2304      	movs	r3, #4
 8018860:	e06e      	b.n	8018940 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8018862:	687a      	ldr	r2, [r7, #4]
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018868:	4619      	mov	r1, r3
 801886a:	4610      	mov	r0, r2
 801886c:	f7ff fe10 	bl	8018490 <create_chain>
 8018870:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8018872:	697b      	ldr	r3, [r7, #20]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d101      	bne.n	801887c <dir_next+0xde>
 8018878:	2307      	movs	r3, #7
 801887a:	e061      	b.n	8018940 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801887c:	697b      	ldr	r3, [r7, #20]
 801887e:	2b01      	cmp	r3, #1
 8018880:	d101      	bne.n	8018886 <dir_next+0xe8>
 8018882:	2302      	movs	r3, #2
 8018884:	e05c      	b.n	8018940 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018886:	697b      	ldr	r3, [r7, #20]
 8018888:	f1b3 3fff 	cmp.w	r3, #4294967295
 801888c:	d101      	bne.n	8018892 <dir_next+0xf4>
 801888e:	2301      	movs	r3, #1
 8018890:	e056      	b.n	8018940 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	79db      	ldrb	r3, [r3, #7]
 8018896:	f043 0304 	orr.w	r3, r3, #4
 801889a:	b2da      	uxtb	r2, r3
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80188a0:	68f8      	ldr	r0, [r7, #12]
 80188a2:	f7ff f8d1 	bl	8017a48 <sync_window>
 80188a6:	4603      	mov	r3, r0
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d001      	beq.n	80188b0 <dir_next+0x112>
 80188ac:	2301      	movs	r3, #1
 80188ae:	e047      	b.n	8018940 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	3338      	adds	r3, #56	; 0x38
 80188b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80188b8:	2100      	movs	r1, #0
 80188ba:	4618      	mov	r0, r3
 80188bc:	f7fe fefa 	bl	80176b4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80188c0:	2300      	movs	r3, #0
 80188c2:	613b      	str	r3, [r7, #16]
 80188c4:	6979      	ldr	r1, [r7, #20]
 80188c6:	68f8      	ldr	r0, [r7, #12]
 80188c8:	f7ff f99e 	bl	8017c08 <clust2sect>
 80188cc:	4602      	mov	r2, r0
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	635a      	str	r2, [r3, #52]	; 0x34
 80188d2:	e012      	b.n	80188fa <dir_next+0x15c>
						fs->wflag = 1;
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	2201      	movs	r2, #1
 80188d8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80188da:	68f8      	ldr	r0, [r7, #12]
 80188dc:	f7ff f8b4 	bl	8017a48 <sync_window>
 80188e0:	4603      	mov	r3, r0
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d001      	beq.n	80188ea <dir_next+0x14c>
 80188e6:	2301      	movs	r3, #1
 80188e8:	e02a      	b.n	8018940 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80188ea:	693b      	ldr	r3, [r7, #16]
 80188ec:	3301      	adds	r3, #1
 80188ee:	613b      	str	r3, [r7, #16]
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80188f4:	1c5a      	adds	r2, r3, #1
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	635a      	str	r2, [r3, #52]	; 0x34
 80188fa:	68fb      	ldr	r3, [r7, #12]
 80188fc:	895b      	ldrh	r3, [r3, #10]
 80188fe:	461a      	mov	r2, r3
 8018900:	693b      	ldr	r3, [r7, #16]
 8018902:	4293      	cmp	r3, r2
 8018904:	d3e6      	bcc.n	80188d4 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801890a:	693b      	ldr	r3, [r7, #16]
 801890c:	1ad2      	subs	r2, r2, r3
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	697a      	ldr	r2, [r7, #20]
 8018916:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8018918:	6979      	ldr	r1, [r7, #20]
 801891a:	68f8      	ldr	r0, [r7, #12]
 801891c:	f7ff f974 	bl	8017c08 <clust2sect>
 8018920:	4602      	mov	r2, r0
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	68ba      	ldr	r2, [r7, #8]
 801892a:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018938:	441a      	add	r2, r3
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 801893e:	2300      	movs	r3, #0
}
 8018940:	4618      	mov	r0, r3
 8018942:	3718      	adds	r7, #24
 8018944:	46bd      	mov	sp, r7
 8018946:	bd80      	pop	{r7, pc}

08018948 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8018948:	b580      	push	{r7, lr}
 801894a:	b086      	sub	sp, #24
 801894c:	af00      	add	r7, sp, #0
 801894e:	6078      	str	r0, [r7, #4]
 8018950:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8018958:	2100      	movs	r1, #0
 801895a:	6878      	ldr	r0, [r7, #4]
 801895c:	f7ff fe99 	bl	8018692 <dir_sdi>
 8018960:	4603      	mov	r3, r0
 8018962:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018964:	7dfb      	ldrb	r3, [r7, #23]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d140      	bne.n	80189ec <dir_alloc+0xa4>
		n = 0;
 801896a:	2300      	movs	r3, #0
 801896c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018972:	4619      	mov	r1, r3
 8018974:	68f8      	ldr	r0, [r7, #12]
 8018976:	f7ff f8ab 	bl	8017ad0 <move_window>
 801897a:	4603      	mov	r3, r0
 801897c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801897e:	7dfb      	ldrb	r3, [r7, #23]
 8018980:	2b00      	cmp	r3, #0
 8018982:	d132      	bne.n	80189ea <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	781b      	ldrb	r3, [r3, #0]
 8018988:	2b04      	cmp	r3, #4
 801898a:	d108      	bne.n	801899e <dir_alloc+0x56>
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018990:	781b      	ldrb	r3, [r3, #0]
 8018992:	b25b      	sxtb	r3, r3
 8018994:	43db      	mvns	r3, r3
 8018996:	b2db      	uxtb	r3, r3
 8018998:	09db      	lsrs	r3, r3, #7
 801899a:	b2db      	uxtb	r3, r3
 801899c:	e00f      	b.n	80189be <dir_alloc+0x76>
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80189a2:	781b      	ldrb	r3, [r3, #0]
 80189a4:	2be5      	cmp	r3, #229	; 0xe5
 80189a6:	d004      	beq.n	80189b2 <dir_alloc+0x6a>
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80189ac:	781b      	ldrb	r3, [r3, #0]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d101      	bne.n	80189b6 <dir_alloc+0x6e>
 80189b2:	2301      	movs	r3, #1
 80189b4:	e000      	b.n	80189b8 <dir_alloc+0x70>
 80189b6:	2300      	movs	r3, #0
 80189b8:	f003 0301 	and.w	r3, r3, #1
 80189bc:	b2db      	uxtb	r3, r3
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d007      	beq.n	80189d2 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80189c2:	693b      	ldr	r3, [r7, #16]
 80189c4:	3301      	adds	r3, #1
 80189c6:	613b      	str	r3, [r7, #16]
 80189c8:	693a      	ldr	r2, [r7, #16]
 80189ca:	683b      	ldr	r3, [r7, #0]
 80189cc:	429a      	cmp	r2, r3
 80189ce:	d102      	bne.n	80189d6 <dir_alloc+0x8e>
 80189d0:	e00c      	b.n	80189ec <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80189d2:	2300      	movs	r3, #0
 80189d4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80189d6:	2101      	movs	r1, #1
 80189d8:	6878      	ldr	r0, [r7, #4]
 80189da:	f7ff fee0 	bl	801879e <dir_next>
 80189de:	4603      	mov	r3, r0
 80189e0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80189e2:	7dfb      	ldrb	r3, [r7, #23]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d0c2      	beq.n	801896e <dir_alloc+0x26>
 80189e8:	e000      	b.n	80189ec <dir_alloc+0xa4>
			if (res != FR_OK) break;
 80189ea:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80189ec:	7dfb      	ldrb	r3, [r7, #23]
 80189ee:	2b04      	cmp	r3, #4
 80189f0:	d101      	bne.n	80189f6 <dir_alloc+0xae>
 80189f2:	2307      	movs	r3, #7
 80189f4:	75fb      	strb	r3, [r7, #23]
	return res;
 80189f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80189f8:	4618      	mov	r0, r3
 80189fa:	3718      	adds	r7, #24
 80189fc:	46bd      	mov	sp, r7
 80189fe:	bd80      	pop	{r7, pc}

08018a00 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8018a00:	b580      	push	{r7, lr}
 8018a02:	b084      	sub	sp, #16
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	6078      	str	r0, [r7, #4]
 8018a08:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8018a0a:	683b      	ldr	r3, [r7, #0]
 8018a0c:	331a      	adds	r3, #26
 8018a0e:	4618      	mov	r0, r3
 8018a10:	f7fe fc4a 	bl	80172a8 <ld_word>
 8018a14:	4603      	mov	r3, r0
 8018a16:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	781b      	ldrb	r3, [r3, #0]
 8018a1c:	2b03      	cmp	r3, #3
 8018a1e:	d109      	bne.n	8018a34 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8018a20:	683b      	ldr	r3, [r7, #0]
 8018a22:	3314      	adds	r3, #20
 8018a24:	4618      	mov	r0, r3
 8018a26:	f7fe fc3f 	bl	80172a8 <ld_word>
 8018a2a:	4603      	mov	r3, r0
 8018a2c:	041b      	lsls	r3, r3, #16
 8018a2e:	68fa      	ldr	r2, [r7, #12]
 8018a30:	4313      	orrs	r3, r2
 8018a32:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8018a34:	68fb      	ldr	r3, [r7, #12]
}
 8018a36:	4618      	mov	r0, r3
 8018a38:	3710      	adds	r7, #16
 8018a3a:	46bd      	mov	sp, r7
 8018a3c:	bd80      	pop	{r7, pc}

08018a3e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8018a3e:	b580      	push	{r7, lr}
 8018a40:	b084      	sub	sp, #16
 8018a42:	af00      	add	r7, sp, #0
 8018a44:	60f8      	str	r0, [r7, #12]
 8018a46:	60b9      	str	r1, [r7, #8]
 8018a48:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8018a4a:	68bb      	ldr	r3, [r7, #8]
 8018a4c:	331a      	adds	r3, #26
 8018a4e:	687a      	ldr	r2, [r7, #4]
 8018a50:	b292      	uxth	r2, r2
 8018a52:	4611      	mov	r1, r2
 8018a54:	4618      	mov	r0, r3
 8018a56:	f7fe fd3d 	bl	80174d4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	781b      	ldrb	r3, [r3, #0]
 8018a5e:	2b03      	cmp	r3, #3
 8018a60:	d109      	bne.n	8018a76 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8018a62:	68bb      	ldr	r3, [r7, #8]
 8018a64:	f103 0214 	add.w	r2, r3, #20
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	0c1b      	lsrs	r3, r3, #16
 8018a6c:	b29b      	uxth	r3, r3
 8018a6e:	4619      	mov	r1, r3
 8018a70:	4610      	mov	r0, r2
 8018a72:	f7fe fd2f 	bl	80174d4 <st_word>
	}
}
 8018a76:	bf00      	nop
 8018a78:	3710      	adds	r7, #16
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	bd80      	pop	{r7, pc}
	...

08018a80 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8018a80:	b590      	push	{r4, r7, lr}
 8018a82:	b087      	sub	sp, #28
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	6078      	str	r0, [r7, #4]
 8018a88:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8018a8a:	683b      	ldr	r3, [r7, #0]
 8018a8c:	331a      	adds	r3, #26
 8018a8e:	4618      	mov	r0, r3
 8018a90:	f7fe fc0a 	bl	80172a8 <ld_word>
 8018a94:	4603      	mov	r3, r0
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d001      	beq.n	8018a9e <cmp_lfn+0x1e>
 8018a9a:	2300      	movs	r3, #0
 8018a9c:	e059      	b.n	8018b52 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8018a9e:	683b      	ldr	r3, [r7, #0]
 8018aa0:	781b      	ldrb	r3, [r3, #0]
 8018aa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018aa6:	1e5a      	subs	r2, r3, #1
 8018aa8:	4613      	mov	r3, r2
 8018aaa:	005b      	lsls	r3, r3, #1
 8018aac:	4413      	add	r3, r2
 8018aae:	009b      	lsls	r3, r3, #2
 8018ab0:	4413      	add	r3, r2
 8018ab2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018ab4:	2301      	movs	r3, #1
 8018ab6:	81fb      	strh	r3, [r7, #14]
 8018ab8:	2300      	movs	r3, #0
 8018aba:	613b      	str	r3, [r7, #16]
 8018abc:	e033      	b.n	8018b26 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8018abe:	4a27      	ldr	r2, [pc, #156]	; (8018b5c <cmp_lfn+0xdc>)
 8018ac0:	693b      	ldr	r3, [r7, #16]
 8018ac2:	4413      	add	r3, r2
 8018ac4:	781b      	ldrb	r3, [r3, #0]
 8018ac6:	461a      	mov	r2, r3
 8018ac8:	683b      	ldr	r3, [r7, #0]
 8018aca:	4413      	add	r3, r2
 8018acc:	4618      	mov	r0, r3
 8018ace:	f7fe fbeb 	bl	80172a8 <ld_word>
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8018ad6:	89fb      	ldrh	r3, [r7, #14]
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d01a      	beq.n	8018b12 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8018adc:	697b      	ldr	r3, [r7, #20]
 8018ade:	2bfe      	cmp	r3, #254	; 0xfe
 8018ae0:	d812      	bhi.n	8018b08 <cmp_lfn+0x88>
 8018ae2:	89bb      	ldrh	r3, [r7, #12]
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	f003 f9c1 	bl	801be6c <ff_wtoupper>
 8018aea:	4603      	mov	r3, r0
 8018aec:	461c      	mov	r4, r3
 8018aee:	697b      	ldr	r3, [r7, #20]
 8018af0:	1c5a      	adds	r2, r3, #1
 8018af2:	617a      	str	r2, [r7, #20]
 8018af4:	005b      	lsls	r3, r3, #1
 8018af6:	687a      	ldr	r2, [r7, #4]
 8018af8:	4413      	add	r3, r2
 8018afa:	881b      	ldrh	r3, [r3, #0]
 8018afc:	4618      	mov	r0, r3
 8018afe:	f003 f9b5 	bl	801be6c <ff_wtoupper>
 8018b02:	4603      	mov	r3, r0
 8018b04:	429c      	cmp	r4, r3
 8018b06:	d001      	beq.n	8018b0c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8018b08:	2300      	movs	r3, #0
 8018b0a:	e022      	b.n	8018b52 <cmp_lfn+0xd2>
			}
			wc = uc;
 8018b0c:	89bb      	ldrh	r3, [r7, #12]
 8018b0e:	81fb      	strh	r3, [r7, #14]
 8018b10:	e006      	b.n	8018b20 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018b12:	89bb      	ldrh	r3, [r7, #12]
 8018b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018b18:	4293      	cmp	r3, r2
 8018b1a:	d001      	beq.n	8018b20 <cmp_lfn+0xa0>
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	e018      	b.n	8018b52 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018b20:	693b      	ldr	r3, [r7, #16]
 8018b22:	3301      	adds	r3, #1
 8018b24:	613b      	str	r3, [r7, #16]
 8018b26:	693b      	ldr	r3, [r7, #16]
 8018b28:	2b0c      	cmp	r3, #12
 8018b2a:	d9c8      	bls.n	8018abe <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8018b2c:	683b      	ldr	r3, [r7, #0]
 8018b2e:	781b      	ldrb	r3, [r3, #0]
 8018b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d00b      	beq.n	8018b50 <cmp_lfn+0xd0>
 8018b38:	89fb      	ldrh	r3, [r7, #14]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d008      	beq.n	8018b50 <cmp_lfn+0xd0>
 8018b3e:	697b      	ldr	r3, [r7, #20]
 8018b40:	005b      	lsls	r3, r3, #1
 8018b42:	687a      	ldr	r2, [r7, #4]
 8018b44:	4413      	add	r3, r2
 8018b46:	881b      	ldrh	r3, [r3, #0]
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	d001      	beq.n	8018b50 <cmp_lfn+0xd0>
 8018b4c:	2300      	movs	r3, #0
 8018b4e:	e000      	b.n	8018b52 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8018b50:	2301      	movs	r3, #1
}
 8018b52:	4618      	mov	r0, r3
 8018b54:	371c      	adds	r7, #28
 8018b56:	46bd      	mov	sp, r7
 8018b58:	bd90      	pop	{r4, r7, pc}
 8018b5a:	bf00      	nop
 8018b5c:	0801e134 	.word	0x0801e134

08018b60 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b086      	sub	sp, #24
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	6078      	str	r0, [r7, #4]
 8018b68:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8018b6a:	683b      	ldr	r3, [r7, #0]
 8018b6c:	331a      	adds	r3, #26
 8018b6e:	4618      	mov	r0, r3
 8018b70:	f7fe fb9a 	bl	80172a8 <ld_word>
 8018b74:	4603      	mov	r3, r0
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d001      	beq.n	8018b7e <pick_lfn+0x1e>
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	e04d      	b.n	8018c1a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8018b7e:	683b      	ldr	r3, [r7, #0]
 8018b80:	781b      	ldrb	r3, [r3, #0]
 8018b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018b86:	1e5a      	subs	r2, r3, #1
 8018b88:	4613      	mov	r3, r2
 8018b8a:	005b      	lsls	r3, r3, #1
 8018b8c:	4413      	add	r3, r2
 8018b8e:	009b      	lsls	r3, r3, #2
 8018b90:	4413      	add	r3, r2
 8018b92:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018b94:	2301      	movs	r3, #1
 8018b96:	81fb      	strh	r3, [r7, #14]
 8018b98:	2300      	movs	r3, #0
 8018b9a:	613b      	str	r3, [r7, #16]
 8018b9c:	e028      	b.n	8018bf0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8018b9e:	4a21      	ldr	r2, [pc, #132]	; (8018c24 <pick_lfn+0xc4>)
 8018ba0:	693b      	ldr	r3, [r7, #16]
 8018ba2:	4413      	add	r3, r2
 8018ba4:	781b      	ldrb	r3, [r3, #0]
 8018ba6:	461a      	mov	r2, r3
 8018ba8:	683b      	ldr	r3, [r7, #0]
 8018baa:	4413      	add	r3, r2
 8018bac:	4618      	mov	r0, r3
 8018bae:	f7fe fb7b 	bl	80172a8 <ld_word>
 8018bb2:	4603      	mov	r3, r0
 8018bb4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8018bb6:	89fb      	ldrh	r3, [r7, #14]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d00f      	beq.n	8018bdc <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018bbc:	697b      	ldr	r3, [r7, #20]
 8018bbe:	2bfe      	cmp	r3, #254	; 0xfe
 8018bc0:	d901      	bls.n	8018bc6 <pick_lfn+0x66>
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	e029      	b.n	8018c1a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018bc6:	89bb      	ldrh	r3, [r7, #12]
 8018bc8:	81fb      	strh	r3, [r7, #14]
 8018bca:	697b      	ldr	r3, [r7, #20]
 8018bcc:	1c5a      	adds	r2, r3, #1
 8018bce:	617a      	str	r2, [r7, #20]
 8018bd0:	005b      	lsls	r3, r3, #1
 8018bd2:	687a      	ldr	r2, [r7, #4]
 8018bd4:	4413      	add	r3, r2
 8018bd6:	89fa      	ldrh	r2, [r7, #14]
 8018bd8:	801a      	strh	r2, [r3, #0]
 8018bda:	e006      	b.n	8018bea <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018bdc:	89bb      	ldrh	r3, [r7, #12]
 8018bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018be2:	4293      	cmp	r3, r2
 8018be4:	d001      	beq.n	8018bea <pick_lfn+0x8a>
 8018be6:	2300      	movs	r3, #0
 8018be8:	e017      	b.n	8018c1a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018bea:	693b      	ldr	r3, [r7, #16]
 8018bec:	3301      	adds	r3, #1
 8018bee:	613b      	str	r3, [r7, #16]
 8018bf0:	693b      	ldr	r3, [r7, #16]
 8018bf2:	2b0c      	cmp	r3, #12
 8018bf4:	d9d3      	bls.n	8018b9e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8018bf6:	683b      	ldr	r3, [r7, #0]
 8018bf8:	781b      	ldrb	r3, [r3, #0]
 8018bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d00a      	beq.n	8018c18 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8018c02:	697b      	ldr	r3, [r7, #20]
 8018c04:	2bfe      	cmp	r3, #254	; 0xfe
 8018c06:	d901      	bls.n	8018c0c <pick_lfn+0xac>
 8018c08:	2300      	movs	r3, #0
 8018c0a:	e006      	b.n	8018c1a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8018c0c:	697b      	ldr	r3, [r7, #20]
 8018c0e:	005b      	lsls	r3, r3, #1
 8018c10:	687a      	ldr	r2, [r7, #4]
 8018c12:	4413      	add	r3, r2
 8018c14:	2200      	movs	r2, #0
 8018c16:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8018c18:	2301      	movs	r3, #1
}
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	3718      	adds	r7, #24
 8018c1e:	46bd      	mov	sp, r7
 8018c20:	bd80      	pop	{r7, pc}
 8018c22:	bf00      	nop
 8018c24:	0801e134 	.word	0x0801e134

08018c28 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b088      	sub	sp, #32
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	60f8      	str	r0, [r7, #12]
 8018c30:	60b9      	str	r1, [r7, #8]
 8018c32:	4611      	mov	r1, r2
 8018c34:	461a      	mov	r2, r3
 8018c36:	460b      	mov	r3, r1
 8018c38:	71fb      	strb	r3, [r7, #7]
 8018c3a:	4613      	mov	r3, r2
 8018c3c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8018c3e:	68bb      	ldr	r3, [r7, #8]
 8018c40:	330d      	adds	r3, #13
 8018c42:	79ba      	ldrb	r2, [r7, #6]
 8018c44:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8018c46:	68bb      	ldr	r3, [r7, #8]
 8018c48:	330b      	adds	r3, #11
 8018c4a:	220f      	movs	r2, #15
 8018c4c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8018c4e:	68bb      	ldr	r3, [r7, #8]
 8018c50:	330c      	adds	r3, #12
 8018c52:	2200      	movs	r2, #0
 8018c54:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8018c56:	68bb      	ldr	r3, [r7, #8]
 8018c58:	331a      	adds	r3, #26
 8018c5a:	2100      	movs	r1, #0
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	f7fe fc39 	bl	80174d4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8018c62:	79fb      	ldrb	r3, [r7, #7]
 8018c64:	1e5a      	subs	r2, r3, #1
 8018c66:	4613      	mov	r3, r2
 8018c68:	005b      	lsls	r3, r3, #1
 8018c6a:	4413      	add	r3, r2
 8018c6c:	009b      	lsls	r3, r3, #2
 8018c6e:	4413      	add	r3, r2
 8018c70:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8018c72:	2300      	movs	r3, #0
 8018c74:	82fb      	strh	r3, [r7, #22]
 8018c76:	2300      	movs	r3, #0
 8018c78:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8018c7a:	8afb      	ldrh	r3, [r7, #22]
 8018c7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018c80:	4293      	cmp	r3, r2
 8018c82:	d007      	beq.n	8018c94 <put_lfn+0x6c>
 8018c84:	69fb      	ldr	r3, [r7, #28]
 8018c86:	1c5a      	adds	r2, r3, #1
 8018c88:	61fa      	str	r2, [r7, #28]
 8018c8a:	005b      	lsls	r3, r3, #1
 8018c8c:	68fa      	ldr	r2, [r7, #12]
 8018c8e:	4413      	add	r3, r2
 8018c90:	881b      	ldrh	r3, [r3, #0]
 8018c92:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8018c94:	4a17      	ldr	r2, [pc, #92]	; (8018cf4 <put_lfn+0xcc>)
 8018c96:	69bb      	ldr	r3, [r7, #24]
 8018c98:	4413      	add	r3, r2
 8018c9a:	781b      	ldrb	r3, [r3, #0]
 8018c9c:	461a      	mov	r2, r3
 8018c9e:	68bb      	ldr	r3, [r7, #8]
 8018ca0:	4413      	add	r3, r2
 8018ca2:	8afa      	ldrh	r2, [r7, #22]
 8018ca4:	4611      	mov	r1, r2
 8018ca6:	4618      	mov	r0, r3
 8018ca8:	f7fe fc14 	bl	80174d4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8018cac:	8afb      	ldrh	r3, [r7, #22]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d102      	bne.n	8018cb8 <put_lfn+0x90>
 8018cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018cb6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8018cb8:	69bb      	ldr	r3, [r7, #24]
 8018cba:	3301      	adds	r3, #1
 8018cbc:	61bb      	str	r3, [r7, #24]
 8018cbe:	69bb      	ldr	r3, [r7, #24]
 8018cc0:	2b0c      	cmp	r3, #12
 8018cc2:	d9da      	bls.n	8018c7a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8018cc4:	8afb      	ldrh	r3, [r7, #22]
 8018cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018cca:	4293      	cmp	r3, r2
 8018ccc:	d006      	beq.n	8018cdc <put_lfn+0xb4>
 8018cce:	69fb      	ldr	r3, [r7, #28]
 8018cd0:	005b      	lsls	r3, r3, #1
 8018cd2:	68fa      	ldr	r2, [r7, #12]
 8018cd4:	4413      	add	r3, r2
 8018cd6:	881b      	ldrh	r3, [r3, #0]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d103      	bne.n	8018ce4 <put_lfn+0xbc>
 8018cdc:	79fb      	ldrb	r3, [r7, #7]
 8018cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018ce2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8018ce4:	68bb      	ldr	r3, [r7, #8]
 8018ce6:	79fa      	ldrb	r2, [r7, #7]
 8018ce8:	701a      	strb	r2, [r3, #0]
}
 8018cea:	bf00      	nop
 8018cec:	3720      	adds	r7, #32
 8018cee:	46bd      	mov	sp, r7
 8018cf0:	bd80      	pop	{r7, pc}
 8018cf2:	bf00      	nop
 8018cf4:	0801e134 	.word	0x0801e134

08018cf8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8018cf8:	b580      	push	{r7, lr}
 8018cfa:	b08c      	sub	sp, #48	; 0x30
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	60f8      	str	r0, [r7, #12]
 8018d00:	60b9      	str	r1, [r7, #8]
 8018d02:	607a      	str	r2, [r7, #4]
 8018d04:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8018d06:	220b      	movs	r2, #11
 8018d08:	68b9      	ldr	r1, [r7, #8]
 8018d0a:	68f8      	ldr	r0, [r7, #12]
 8018d0c:	f7fe fcb1 	bl	8017672 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8018d10:	683b      	ldr	r3, [r7, #0]
 8018d12:	2b05      	cmp	r3, #5
 8018d14:	d929      	bls.n	8018d6a <gen_numname+0x72>
		sr = seq;
 8018d16:	683b      	ldr	r3, [r7, #0]
 8018d18:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8018d1a:	e020      	b.n	8018d5e <gen_numname+0x66>
			wc = *lfn++;
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	1c9a      	adds	r2, r3, #2
 8018d20:	607a      	str	r2, [r7, #4]
 8018d22:	881b      	ldrh	r3, [r3, #0]
 8018d24:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8018d26:	2300      	movs	r3, #0
 8018d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8018d2a:	e015      	b.n	8018d58 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8018d2c:	69fb      	ldr	r3, [r7, #28]
 8018d2e:	005a      	lsls	r2, r3, #1
 8018d30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018d32:	f003 0301 	and.w	r3, r3, #1
 8018d36:	4413      	add	r3, r2
 8018d38:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8018d3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018d3c:	085b      	lsrs	r3, r3, #1
 8018d3e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8018d40:	69fb      	ldr	r3, [r7, #28]
 8018d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d003      	beq.n	8018d52 <gen_numname+0x5a>
 8018d4a:	69fa      	ldr	r2, [r7, #28]
 8018d4c:	4b30      	ldr	r3, [pc, #192]	; (8018e10 <gen_numname+0x118>)
 8018d4e:	4053      	eors	r3, r2
 8018d50:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8018d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d54:	3301      	adds	r3, #1
 8018d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8018d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d5a:	2b0f      	cmp	r3, #15
 8018d5c:	d9e6      	bls.n	8018d2c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	881b      	ldrh	r3, [r3, #0]
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d1da      	bne.n	8018d1c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8018d66:	69fb      	ldr	r3, [r7, #28]
 8018d68:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8018d6a:	2307      	movs	r3, #7
 8018d6c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8018d6e:	683b      	ldr	r3, [r7, #0]
 8018d70:	b2db      	uxtb	r3, r3
 8018d72:	f003 030f 	and.w	r3, r3, #15
 8018d76:	b2db      	uxtb	r3, r3
 8018d78:	3330      	adds	r3, #48	; 0x30
 8018d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8018d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d82:	2b39      	cmp	r3, #57	; 0x39
 8018d84:	d904      	bls.n	8018d90 <gen_numname+0x98>
 8018d86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d8a:	3307      	adds	r3, #7
 8018d8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8018d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d92:	1e5a      	subs	r2, r3, #1
 8018d94:	62ba      	str	r2, [r7, #40]	; 0x28
 8018d96:	3330      	adds	r3, #48	; 0x30
 8018d98:	443b      	add	r3, r7
 8018d9a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8018d9e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8018da2:	683b      	ldr	r3, [r7, #0]
 8018da4:	091b      	lsrs	r3, r3, #4
 8018da6:	603b      	str	r3, [r7, #0]
	} while (seq);
 8018da8:	683b      	ldr	r3, [r7, #0]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d1df      	bne.n	8018d6e <gen_numname+0x76>
	ns[i] = '~';
 8018dae:	f107 0214 	add.w	r2, r7, #20
 8018db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018db4:	4413      	add	r3, r2
 8018db6:	227e      	movs	r2, #126	; 0x7e
 8018db8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8018dba:	2300      	movs	r3, #0
 8018dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8018dbe:	e002      	b.n	8018dc6 <gen_numname+0xce>
 8018dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dc2:	3301      	adds	r3, #1
 8018dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8018dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dca:	429a      	cmp	r2, r3
 8018dcc:	d205      	bcs.n	8018dda <gen_numname+0xe2>
 8018dce:	68fa      	ldr	r2, [r7, #12]
 8018dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dd2:	4413      	add	r3, r2
 8018dd4:	781b      	ldrb	r3, [r3, #0]
 8018dd6:	2b20      	cmp	r3, #32
 8018dd8:	d1f2      	bne.n	8018dc0 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8018dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ddc:	2b07      	cmp	r3, #7
 8018dde:	d807      	bhi.n	8018df0 <gen_numname+0xf8>
 8018de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018de2:	1c5a      	adds	r2, r3, #1
 8018de4:	62ba      	str	r2, [r7, #40]	; 0x28
 8018de6:	3330      	adds	r3, #48	; 0x30
 8018de8:	443b      	add	r3, r7
 8018dea:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8018dee:	e000      	b.n	8018df2 <gen_numname+0xfa>
 8018df0:	2120      	movs	r1, #32
 8018df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018df4:	1c5a      	adds	r2, r3, #1
 8018df6:	627a      	str	r2, [r7, #36]	; 0x24
 8018df8:	68fa      	ldr	r2, [r7, #12]
 8018dfa:	4413      	add	r3, r2
 8018dfc:	460a      	mov	r2, r1
 8018dfe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8018e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e02:	2b07      	cmp	r3, #7
 8018e04:	d9e9      	bls.n	8018dda <gen_numname+0xe2>
}
 8018e06:	bf00      	nop
 8018e08:	bf00      	nop
 8018e0a:	3730      	adds	r7, #48	; 0x30
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	bd80      	pop	{r7, pc}
 8018e10:	00011021 	.word	0x00011021

08018e14 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8018e14:	b480      	push	{r7}
 8018e16:	b085      	sub	sp, #20
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8018e20:	230b      	movs	r3, #11
 8018e22:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018e24:	7bfb      	ldrb	r3, [r7, #15]
 8018e26:	b2da      	uxtb	r2, r3
 8018e28:	0852      	lsrs	r2, r2, #1
 8018e2a:	01db      	lsls	r3, r3, #7
 8018e2c:	4313      	orrs	r3, r2
 8018e2e:	b2da      	uxtb	r2, r3
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	1c59      	adds	r1, r3, #1
 8018e34:	6079      	str	r1, [r7, #4]
 8018e36:	781b      	ldrb	r3, [r3, #0]
 8018e38:	4413      	add	r3, r2
 8018e3a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8018e3c:	68bb      	ldr	r3, [r7, #8]
 8018e3e:	3b01      	subs	r3, #1
 8018e40:	60bb      	str	r3, [r7, #8]
 8018e42:	68bb      	ldr	r3, [r7, #8]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d1ed      	bne.n	8018e24 <sum_sfn+0x10>
	return sum;
 8018e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	3714      	adds	r7, #20
 8018e4e:	46bd      	mov	sp, r7
 8018e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e54:	4770      	bx	lr

08018e56 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8018e56:	b480      	push	{r7}
 8018e58:	b087      	sub	sp, #28
 8018e5a:	af00      	add	r7, sp, #0
 8018e5c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	3301      	adds	r3, #1
 8018e62:	781b      	ldrb	r3, [r3, #0]
 8018e64:	3301      	adds	r3, #1
 8018e66:	015b      	lsls	r3, r3, #5
 8018e68:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8018e6a:	2300      	movs	r3, #0
 8018e6c:	827b      	strh	r3, [r7, #18]
 8018e6e:	2300      	movs	r3, #0
 8018e70:	617b      	str	r3, [r7, #20]
 8018e72:	e018      	b.n	8018ea6 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8018e74:	697b      	ldr	r3, [r7, #20]
 8018e76:	2b02      	cmp	r3, #2
 8018e78:	d103      	bne.n	8018e82 <xdir_sum+0x2c>
			i++;
 8018e7a:	697b      	ldr	r3, [r7, #20]
 8018e7c:	3301      	adds	r3, #1
 8018e7e:	617b      	str	r3, [r7, #20]
 8018e80:	e00e      	b.n	8018ea0 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8018e82:	8a7b      	ldrh	r3, [r7, #18]
 8018e84:	03db      	lsls	r3, r3, #15
 8018e86:	b29a      	uxth	r2, r3
 8018e88:	8a7b      	ldrh	r3, [r7, #18]
 8018e8a:	085b      	lsrs	r3, r3, #1
 8018e8c:	b29b      	uxth	r3, r3
 8018e8e:	4413      	add	r3, r2
 8018e90:	b29a      	uxth	r2, r3
 8018e92:	6879      	ldr	r1, [r7, #4]
 8018e94:	697b      	ldr	r3, [r7, #20]
 8018e96:	440b      	add	r3, r1
 8018e98:	781b      	ldrb	r3, [r3, #0]
 8018e9a:	b29b      	uxth	r3, r3
 8018e9c:	4413      	add	r3, r2
 8018e9e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8018ea0:	697b      	ldr	r3, [r7, #20]
 8018ea2:	3301      	adds	r3, #1
 8018ea4:	617b      	str	r3, [r7, #20]
 8018ea6:	697a      	ldr	r2, [r7, #20]
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	429a      	cmp	r2, r3
 8018eac:	d3e2      	bcc.n	8018e74 <xdir_sum+0x1e>
		}
	}
	return sum;
 8018eae:	8a7b      	ldrh	r3, [r7, #18]
}
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	371c      	adds	r7, #28
 8018eb4:	46bd      	mov	sp, r7
 8018eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eba:	4770      	bx	lr

08018ebc <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8018ebc:	b580      	push	{r7, lr}
 8018ebe:	b084      	sub	sp, #16
 8018ec0:	af00      	add	r7, sp, #0
 8018ec2:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8018ec8:	e01f      	b.n	8018f0a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8018eca:	89bb      	ldrh	r3, [r7, #12]
 8018ecc:	4618      	mov	r0, r3
 8018ece:	f002 ffcd 	bl	801be6c <ff_wtoupper>
 8018ed2:	4603      	mov	r3, r0
 8018ed4:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8018ed6:	89fb      	ldrh	r3, [r7, #14]
 8018ed8:	03db      	lsls	r3, r3, #15
 8018eda:	b29a      	uxth	r2, r3
 8018edc:	89fb      	ldrh	r3, [r7, #14]
 8018ede:	085b      	lsrs	r3, r3, #1
 8018ee0:	b29b      	uxth	r3, r3
 8018ee2:	4413      	add	r3, r2
 8018ee4:	b29a      	uxth	r2, r3
 8018ee6:	89bb      	ldrh	r3, [r7, #12]
 8018ee8:	b2db      	uxtb	r3, r3
 8018eea:	b29b      	uxth	r3, r3
 8018eec:	4413      	add	r3, r2
 8018eee:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8018ef0:	89fb      	ldrh	r3, [r7, #14]
 8018ef2:	03db      	lsls	r3, r3, #15
 8018ef4:	b29a      	uxth	r2, r3
 8018ef6:	89fb      	ldrh	r3, [r7, #14]
 8018ef8:	085b      	lsrs	r3, r3, #1
 8018efa:	b29b      	uxth	r3, r3
 8018efc:	4413      	add	r3, r2
 8018efe:	b29a      	uxth	r2, r3
 8018f00:	89bb      	ldrh	r3, [r7, #12]
 8018f02:	0a1b      	lsrs	r3, r3, #8
 8018f04:	b29b      	uxth	r3, r3
 8018f06:	4413      	add	r3, r2
 8018f08:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	1c9a      	adds	r2, r3, #2
 8018f0e:	607a      	str	r2, [r7, #4]
 8018f10:	881b      	ldrh	r3, [r3, #0]
 8018f12:	81bb      	strh	r3, [r7, #12]
 8018f14:	89bb      	ldrh	r3, [r7, #12]
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d1d7      	bne.n	8018eca <xname_sum+0xe>
	}
	return sum;
 8018f1a:	89fb      	ldrh	r3, [r7, #14]
}
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	3710      	adds	r7, #16
 8018f20:	46bd      	mov	sp, r7
 8018f22:	bd80      	pop	{r7, pc}

08018f24 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b086      	sub	sp, #24
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
 8018f2c:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 8018f2e:	2300      	movs	r3, #0
 8018f30:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8018f32:	2340      	movs	r3, #64	; 0x40
 8018f34:	613b      	str	r3, [r7, #16]
 8018f36:	2300      	movs	r3, #0
 8018f38:	60fb      	str	r3, [r7, #12]
 8018f3a:	e02c      	b.n	8018f96 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 8018f3c:	693b      	ldr	r3, [r7, #16]
 8018f3e:	f003 031f 	and.w	r3, r3, #31
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d102      	bne.n	8018f4c <get_xdir_info+0x28>
 8018f46:	693b      	ldr	r3, [r7, #16]
 8018f48:	3302      	adds	r3, #2
 8018f4a:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 8018f4c:	687a      	ldr	r2, [r7, #4]
 8018f4e:	693b      	ldr	r3, [r7, #16]
 8018f50:	4413      	add	r3, r2
 8018f52:	4618      	mov	r0, r3
 8018f54:	f7fe f9a8 	bl	80172a8 <ld_word>
 8018f58:	4603      	mov	r3, r0
 8018f5a:	2100      	movs	r1, #0
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	f002 ff49 	bl	801bdf4 <ff_convert>
 8018f62:	4603      	mov	r3, r0
 8018f64:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 8018f66:	897b      	ldrh	r3, [r7, #10]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d002      	beq.n	8018f72 <get_xdir_info+0x4e>
 8018f6c:	697b      	ldr	r3, [r7, #20]
 8018f6e:	2bfe      	cmp	r3, #254	; 0xfe
 8018f70:	d902      	bls.n	8018f78 <get_xdir_info+0x54>
 8018f72:	2300      	movs	r3, #0
 8018f74:	617b      	str	r3, [r7, #20]
 8018f76:	e015      	b.n	8018fa4 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 8018f78:	697b      	ldr	r3, [r7, #20]
 8018f7a:	1c5a      	adds	r2, r3, #1
 8018f7c:	617a      	str	r2, [r7, #20]
 8018f7e:	897a      	ldrh	r2, [r7, #10]
 8018f80:	b2d1      	uxtb	r1, r2
 8018f82:	683a      	ldr	r2, [r7, #0]
 8018f84:	4413      	add	r3, r2
 8018f86:	460a      	mov	r2, r1
 8018f88:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8018f8a:	693b      	ldr	r3, [r7, #16]
 8018f8c:	3302      	adds	r3, #2
 8018f8e:	613b      	str	r3, [r7, #16]
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	3301      	adds	r3, #1
 8018f94:	60fb      	str	r3, [r7, #12]
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	3323      	adds	r3, #35	; 0x23
 8018f9a:	781b      	ldrb	r3, [r3, #0]
 8018f9c:	461a      	mov	r2, r3
 8018f9e:	68fb      	ldr	r3, [r7, #12]
 8018fa0:	4293      	cmp	r3, r2
 8018fa2:	d3cb      	bcc.n	8018f3c <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8018fa4:	697b      	ldr	r3, [r7, #20]
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d106      	bne.n	8018fb8 <get_xdir_info+0x94>
 8018faa:	697b      	ldr	r3, [r7, #20]
 8018fac:	1c5a      	adds	r2, r3, #1
 8018fae:	617a      	str	r2, [r7, #20]
 8018fb0:	683a      	ldr	r2, [r7, #0]
 8018fb2:	4413      	add	r3, r2
 8018fb4:	223f      	movs	r2, #63	; 0x3f
 8018fb6:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 8018fb8:	683a      	ldr	r2, [r7, #0]
 8018fba:	697b      	ldr	r3, [r7, #20]
 8018fbc:	4413      	add	r3, r2
 8018fbe:	331a      	adds	r3, #26
 8018fc0:	2200      	movs	r2, #0
 8018fc2:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 8018fc4:	683b      	ldr	r3, [r7, #0]
 8018fc6:	2200      	movs	r2, #0
 8018fc8:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	791a      	ldrb	r2, [r3, #4]
 8018fce:	683b      	ldr	r3, [r7, #0]
 8018fd0:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8018fd2:	683b      	ldr	r3, [r7, #0]
 8018fd4:	7b1b      	ldrb	r3, [r3, #12]
 8018fd6:	f003 0310 	and.w	r3, r3, #16
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d107      	bne.n	8018fee <get_xdir_info+0xca>
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	3338      	adds	r3, #56	; 0x38
 8018fe2:	4618      	mov	r0, r3
 8018fe4:	f7fe f99b 	bl	801731e <ld_qword>
 8018fe8:	4602      	mov	r2, r0
 8018fea:	460b      	mov	r3, r1
 8018fec:	e003      	b.n	8018ff6 <get_xdir_info+0xd2>
 8018fee:	f04f 0200 	mov.w	r2, #0
 8018ff2:	f04f 0300 	mov.w	r3, #0
 8018ff6:	6839      	ldr	r1, [r7, #0]
 8018ff8:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	330c      	adds	r3, #12
 8019000:	4618      	mov	r0, r3
 8019002:	f7fe f951 	bl	80172a8 <ld_word>
 8019006:	4603      	mov	r3, r0
 8019008:	461a      	mov	r2, r3
 801900a:	683b      	ldr	r3, [r7, #0]
 801900c:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	330e      	adds	r3, #14
 8019012:	4618      	mov	r0, r3
 8019014:	f7fe f948 	bl	80172a8 <ld_word>
 8019018:	4603      	mov	r3, r0
 801901a:	461a      	mov	r2, r3
 801901c:	683b      	ldr	r3, [r7, #0]
 801901e:	811a      	strh	r2, [r3, #8]
}
 8019020:	bf00      	nop
 8019022:	3718      	adds	r7, #24
 8019024:	46bd      	mov	sp, r7
 8019026:	bd80      	pop	{r7, pc}

08019028 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8019028:	b590      	push	{r4, r7, lr}
 801902a:	b087      	sub	sp, #28
 801902c:	af00      	add	r7, sp, #0
 801902e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	691b      	ldr	r3, [r3, #16]
 8019036:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	681a      	ldr	r2, [r3, #0]
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019040:	4619      	mov	r1, r3
 8019042:	4610      	mov	r0, r2
 8019044:	f7fe fd44 	bl	8017ad0 <move_window>
 8019048:	4603      	mov	r3, r0
 801904a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 801904c:	7bfb      	ldrb	r3, [r7, #15]
 801904e:	2b00      	cmp	r3, #0
 8019050:	d001      	beq.n	8019056 <load_xdir+0x2e>
 8019052:	7bfb      	ldrb	r3, [r7, #15]
 8019054:	e09f      	b.n	8019196 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801905a:	781b      	ldrb	r3, [r3, #0]
 801905c:	2b85      	cmp	r3, #133	; 0x85
 801905e:	d001      	beq.n	8019064 <load_xdir+0x3c>
 8019060:	2302      	movs	r3, #2
 8019062:	e098      	b.n	8019196 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019068:	2220      	movs	r2, #32
 801906a:	4619      	mov	r1, r3
 801906c:	6938      	ldr	r0, [r7, #16]
 801906e:	f7fe fb00 	bl	8017672 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8019072:	693b      	ldr	r3, [r7, #16]
 8019074:	3301      	adds	r3, #1
 8019076:	781b      	ldrb	r3, [r3, #0]
 8019078:	3301      	adds	r3, #1
 801907a:	015b      	lsls	r3, r3, #5
 801907c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 801907e:	68bb      	ldr	r3, [r7, #8]
 8019080:	2b5f      	cmp	r3, #95	; 0x5f
 8019082:	d903      	bls.n	801908c <load_xdir+0x64>
 8019084:	68bb      	ldr	r3, [r7, #8]
 8019086:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 801908a:	d901      	bls.n	8019090 <load_xdir+0x68>
 801908c:	2302      	movs	r3, #2
 801908e:	e082      	b.n	8019196 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8019090:	2100      	movs	r1, #0
 8019092:	6878      	ldr	r0, [r7, #4]
 8019094:	f7ff fb83 	bl	801879e <dir_next>
 8019098:	4603      	mov	r3, r0
 801909a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 801909c:	7bfb      	ldrb	r3, [r7, #15]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d001      	beq.n	80190a6 <load_xdir+0x7e>
 80190a2:	7bfb      	ldrb	r3, [r7, #15]
 80190a4:	e077      	b.n	8019196 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	681a      	ldr	r2, [r3, #0]
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80190ae:	4619      	mov	r1, r3
 80190b0:	4610      	mov	r0, r2
 80190b2:	f7fe fd0d 	bl	8017ad0 <move_window>
 80190b6:	4603      	mov	r3, r0
 80190b8:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80190ba:	7bfb      	ldrb	r3, [r7, #15]
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d001      	beq.n	80190c4 <load_xdir+0x9c>
 80190c0:	7bfb      	ldrb	r3, [r7, #15]
 80190c2:	e068      	b.n	8019196 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80190c8:	781b      	ldrb	r3, [r3, #0]
 80190ca:	2bc0      	cmp	r3, #192	; 0xc0
 80190cc:	d001      	beq.n	80190d2 <load_xdir+0xaa>
 80190ce:	2302      	movs	r3, #2
 80190d0:	e061      	b.n	8019196 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 80190d2:	693b      	ldr	r3, [r7, #16]
 80190d4:	f103 0020 	add.w	r0, r3, #32
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80190dc:	2220      	movs	r2, #32
 80190de:	4619      	mov	r1, r3
 80190e0:	f7fe fac7 	bl	8017672 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 80190e4:	693b      	ldr	r3, [r7, #16]
 80190e6:	3323      	adds	r3, #35	; 0x23
 80190e8:	781b      	ldrb	r3, [r3, #0]
 80190ea:	332c      	adds	r3, #44	; 0x2c
 80190ec:	4a2c      	ldr	r2, [pc, #176]	; (80191a0 <load_xdir+0x178>)
 80190ee:	fba2 2303 	umull	r2, r3, r2, r3
 80190f2:	08db      	lsrs	r3, r3, #3
 80190f4:	015b      	lsls	r3, r3, #5
 80190f6:	68ba      	ldr	r2, [r7, #8]
 80190f8:	429a      	cmp	r2, r3
 80190fa:	d201      	bcs.n	8019100 <load_xdir+0xd8>
 80190fc:	2302      	movs	r3, #2
 80190fe:	e04a      	b.n	8019196 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8019100:	2340      	movs	r3, #64	; 0x40
 8019102:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8019104:	2100      	movs	r1, #0
 8019106:	6878      	ldr	r0, [r7, #4]
 8019108:	f7ff fb49 	bl	801879e <dir_next>
 801910c:	4603      	mov	r3, r0
 801910e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8019110:	7bfb      	ldrb	r3, [r7, #15]
 8019112:	2b00      	cmp	r3, #0
 8019114:	d001      	beq.n	801911a <load_xdir+0xf2>
 8019116:	7bfb      	ldrb	r3, [r7, #15]
 8019118:	e03d      	b.n	8019196 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	681a      	ldr	r2, [r3, #0]
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019122:	4619      	mov	r1, r3
 8019124:	4610      	mov	r0, r2
 8019126:	f7fe fcd3 	bl	8017ad0 <move_window>
 801912a:	4603      	mov	r3, r0
 801912c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 801912e:	7bfb      	ldrb	r3, [r7, #15]
 8019130:	2b00      	cmp	r3, #0
 8019132:	d001      	beq.n	8019138 <load_xdir+0x110>
 8019134:	7bfb      	ldrb	r3, [r7, #15]
 8019136:	e02e      	b.n	8019196 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801913c:	781b      	ldrb	r3, [r3, #0]
 801913e:	2bc1      	cmp	r3, #193	; 0xc1
 8019140:	d001      	beq.n	8019146 <load_xdir+0x11e>
 8019142:	2302      	movs	r3, #2
 8019144:	e027      	b.n	8019196 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8019146:	697b      	ldr	r3, [r7, #20]
 8019148:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 801914c:	d208      	bcs.n	8019160 <load_xdir+0x138>
 801914e:	693a      	ldr	r2, [r7, #16]
 8019150:	697b      	ldr	r3, [r7, #20]
 8019152:	18d0      	adds	r0, r2, r3
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019158:	2220      	movs	r2, #32
 801915a:	4619      	mov	r1, r3
 801915c:	f7fe fa89 	bl	8017672 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8019160:	697b      	ldr	r3, [r7, #20]
 8019162:	3320      	adds	r3, #32
 8019164:	617b      	str	r3, [r7, #20]
 8019166:	697a      	ldr	r2, [r7, #20]
 8019168:	68bb      	ldr	r3, [r7, #8]
 801916a:	429a      	cmp	r2, r3
 801916c:	d3ca      	bcc.n	8019104 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 801916e:	697b      	ldr	r3, [r7, #20]
 8019170:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8019174:	d80e      	bhi.n	8019194 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8019176:	6938      	ldr	r0, [r7, #16]
 8019178:	f7ff fe6d 	bl	8018e56 <xdir_sum>
 801917c:	4603      	mov	r3, r0
 801917e:	461c      	mov	r4, r3
 8019180:	693b      	ldr	r3, [r7, #16]
 8019182:	3302      	adds	r3, #2
 8019184:	4618      	mov	r0, r3
 8019186:	f7fe f88f 	bl	80172a8 <ld_word>
 801918a:	4603      	mov	r3, r0
 801918c:	429c      	cmp	r4, r3
 801918e:	d001      	beq.n	8019194 <load_xdir+0x16c>
 8019190:	2302      	movs	r3, #2
 8019192:	e000      	b.n	8019196 <load_xdir+0x16e>
	}
	return FR_OK;
 8019194:	2300      	movs	r3, #0
}
 8019196:	4618      	mov	r0, r3
 8019198:	371c      	adds	r7, #28
 801919a:	46bd      	mov	sp, r7
 801919c:	bd90      	pop	{r4, r7, pc}
 801919e:	bf00      	nop
 80191a0:	88888889 	.word	0x88888889

080191a4 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 80191a4:	b5b0      	push	{r4, r5, r7, lr}
 80191a6:	b084      	sub	sp, #16
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	6078      	str	r0, [r7, #4]
 80191ac:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 80191ae:	6839      	ldr	r1, [r7, #0]
 80191b0:	6808      	ldr	r0, [r1, #0]
 80191b2:	6879      	ldr	r1, [r7, #4]
 80191b4:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 80191b6:	6839      	ldr	r1, [r7, #0]
 80191b8:	6a08      	ldr	r0, [r1, #32]
 80191ba:	6879      	ldr	r1, [r7, #4]
 80191bc:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 80191be:	6839      	ldr	r1, [r7, #0]
 80191c0:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80191c2:	b2c8      	uxtb	r0, r1
 80191c4:	6879      	ldr	r1, [r7, #4]
 80191c6:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80191c8:	6839      	ldr	r1, [r7, #0]
 80191ca:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80191cc:	2000      	movs	r0, #0
 80191ce:	460c      	mov	r4, r1
 80191d0:	4605      	mov	r5, r0
 80191d2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80191d6:	2300      	movs	r3, #0
 80191d8:	6879      	ldr	r1, [r7, #4]
 80191da:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 80191de:	683b      	ldr	r3, [r7, #0]
 80191e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80191ea:	4619      	mov	r1, r3
 80191ec:	6878      	ldr	r0, [r7, #4]
 80191ee:	f7ff fa50 	bl	8018692 <dir_sdi>
 80191f2:	4603      	mov	r3, r0
 80191f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80191f6:	7bfb      	ldrb	r3, [r7, #15]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d104      	bne.n	8019206 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 80191fc:	6878      	ldr	r0, [r7, #4]
 80191fe:	f7ff ff13 	bl	8019028 <load_xdir>
 8019202:	4603      	mov	r3, r0
 8019204:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8019206:	7bfb      	ldrb	r3, [r7, #15]
}
 8019208:	4618      	mov	r0, r3
 801920a:	3710      	adds	r7, #16
 801920c:	46bd      	mov	sp, r7
 801920e:	bdb0      	pop	{r4, r5, r7, pc}

08019210 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8019210:	b590      	push	{r4, r7, lr}
 8019212:	b087      	sub	sp, #28
 8019214:	af00      	add	r7, sp, #0
 8019216:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	691b      	ldr	r3, [r3, #16]
 801921e:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	1c9c      	adds	r4, r3, #2
 8019224:	68f8      	ldr	r0, [r7, #12]
 8019226:	f7ff fe16 	bl	8018e56 <xdir_sum>
 801922a:	4603      	mov	r3, r0
 801922c:	4619      	mov	r1, r3
 801922e:	4620      	mov	r0, r4
 8019230:	f7fe f950 	bl	80174d4 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	3301      	adds	r3, #1
 8019238:	781b      	ldrb	r3, [r3, #0]
 801923a:	3301      	adds	r3, #1
 801923c:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019242:	4619      	mov	r1, r3
 8019244:	6878      	ldr	r0, [r7, #4]
 8019246:	f7ff fa24 	bl	8018692 <dir_sdi>
 801924a:	4603      	mov	r3, r0
 801924c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 801924e:	e026      	b.n	801929e <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	681a      	ldr	r2, [r3, #0]
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019258:	4619      	mov	r1, r3
 801925a:	4610      	mov	r0, r2
 801925c:	f7fe fc38 	bl	8017ad0 <move_window>
 8019260:	4603      	mov	r3, r0
 8019262:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8019264:	7dfb      	ldrb	r3, [r7, #23]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d11d      	bne.n	80192a6 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801926e:	2220      	movs	r2, #32
 8019270:	68f9      	ldr	r1, [r7, #12]
 8019272:	4618      	mov	r0, r3
 8019274:	f7fe f9fd 	bl	8017672 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	2201      	movs	r2, #1
 801927e:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8019280:	693b      	ldr	r3, [r7, #16]
 8019282:	3b01      	subs	r3, #1
 8019284:	613b      	str	r3, [r7, #16]
 8019286:	693b      	ldr	r3, [r7, #16]
 8019288:	2b00      	cmp	r3, #0
 801928a:	d00e      	beq.n	80192aa <store_xdir+0x9a>
		dirb += SZDIRE;
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	3320      	adds	r3, #32
 8019290:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8019292:	2100      	movs	r1, #0
 8019294:	6878      	ldr	r0, [r7, #4]
 8019296:	f7ff fa82 	bl	801879e <dir_next>
 801929a:	4603      	mov	r3, r0
 801929c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 801929e:	7dfb      	ldrb	r3, [r7, #23]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d0d5      	beq.n	8019250 <store_xdir+0x40>
 80192a4:	e002      	b.n	80192ac <store_xdir+0x9c>
		if (res != FR_OK) break;
 80192a6:	bf00      	nop
 80192a8:	e000      	b.n	80192ac <store_xdir+0x9c>
		if (--nent == 0) break;
 80192aa:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80192ac:	7dfb      	ldrb	r3, [r7, #23]
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d002      	beq.n	80192b8 <store_xdir+0xa8>
 80192b2:	7dfb      	ldrb	r3, [r7, #23]
 80192b4:	2b01      	cmp	r3, #1
 80192b6:	d101      	bne.n	80192bc <store_xdir+0xac>
 80192b8:	7dfb      	ldrb	r3, [r7, #23]
 80192ba:	e000      	b.n	80192be <store_xdir+0xae>
 80192bc:	2302      	movs	r3, #2
}
 80192be:	4618      	mov	r0, r3
 80192c0:	371c      	adds	r7, #28
 80192c2:	46bd      	mov	sp, r7
 80192c4:	bd90      	pop	{r4, r7, pc}

080192c6 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 80192c6:	b590      	push	{r4, r7, lr}
 80192c8:	b085      	sub	sp, #20
 80192ca:	af00      	add	r7, sp, #0
 80192cc:	6078      	str	r0, [r7, #4]
 80192ce:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 80192d0:	2240      	movs	r2, #64	; 0x40
 80192d2:	2100      	movs	r1, #0
 80192d4:	6878      	ldr	r0, [r7, #4]
 80192d6:	f7fe f9ed 	bl	80176b4 <mem_set>
	dirb[XDIR_Type] = 0x85;
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	2285      	movs	r2, #133	; 0x85
 80192de:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	3320      	adds	r3, #32
 80192e4:	22c0      	movs	r2, #192	; 0xc0
 80192e6:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 80192e8:	2300      	movs	r3, #0
 80192ea:	72bb      	strb	r3, [r7, #10]
 80192ec:	2301      	movs	r3, #1
 80192ee:	72fb      	strb	r3, [r7, #11]
 80192f0:	2301      	movs	r3, #1
 80192f2:	813b      	strh	r3, [r7, #8]
 80192f4:	2340      	movs	r3, #64	; 0x40
 80192f6:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	1c5a      	adds	r2, r3, #1
 80192fc:	60fa      	str	r2, [r7, #12]
 80192fe:	687a      	ldr	r2, [r7, #4]
 8019300:	4413      	add	r3, r2
 8019302:	22c1      	movs	r2, #193	; 0xc1
 8019304:	701a      	strb	r2, [r3, #0]
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	1c5a      	adds	r2, r3, #1
 801930a:	60fa      	str	r2, [r7, #12]
 801930c:	687a      	ldr	r2, [r7, #4]
 801930e:	4413      	add	r3, r2
 8019310:	2200      	movs	r2, #0
 8019312:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8019314:	893b      	ldrh	r3, [r7, #8]
 8019316:	2b00      	cmp	r3, #0
 8019318:	d00b      	beq.n	8019332 <create_xdir+0x6c>
 801931a:	7abb      	ldrb	r3, [r7, #10]
 801931c:	005b      	lsls	r3, r3, #1
 801931e:	683a      	ldr	r2, [r7, #0]
 8019320:	4413      	add	r3, r2
 8019322:	881b      	ldrh	r3, [r3, #0]
 8019324:	813b      	strh	r3, [r7, #8]
 8019326:	893b      	ldrh	r3, [r7, #8]
 8019328:	2b00      	cmp	r3, #0
 801932a:	d002      	beq.n	8019332 <create_xdir+0x6c>
 801932c:	7abb      	ldrb	r3, [r7, #10]
 801932e:	3301      	adds	r3, #1
 8019330:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8019332:	687a      	ldr	r2, [r7, #4]
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	4413      	add	r3, r2
 8019338:	893a      	ldrh	r2, [r7, #8]
 801933a:	4611      	mov	r1, r2
 801933c:	4618      	mov	r0, r3
 801933e:	f7fe f8c9 	bl	80174d4 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	3302      	adds	r3, #2
 8019346:	60fb      	str	r3, [r7, #12]
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	f003 031f 	and.w	r3, r3, #31
 801934e:	2b00      	cmp	r3, #0
 8019350:	d1e0      	bne.n	8019314 <create_xdir+0x4e>
		nb++;
 8019352:	7afb      	ldrb	r3, [r7, #11]
 8019354:	3301      	adds	r3, #1
 8019356:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8019358:	7abb      	ldrb	r3, [r7, #10]
 801935a:	005b      	lsls	r3, r3, #1
 801935c:	683a      	ldr	r2, [r7, #0]
 801935e:	4413      	add	r3, r2
 8019360:	881b      	ldrh	r3, [r3, #0]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d1c8      	bne.n	80192f8 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	3323      	adds	r3, #35	; 0x23
 801936a:	7aba      	ldrb	r2, [r7, #10]
 801936c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	3301      	adds	r3, #1
 8019372:	7afa      	ldrb	r2, [r7, #11]
 8019374:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	f103 0424 	add.w	r4, r3, #36	; 0x24
 801937c:	6838      	ldr	r0, [r7, #0]
 801937e:	f7ff fd9d 	bl	8018ebc <xname_sum>
 8019382:	4603      	mov	r3, r0
 8019384:	4619      	mov	r1, r3
 8019386:	4620      	mov	r0, r4
 8019388:	f7fe f8a4 	bl	80174d4 <st_word>
}
 801938c:	bf00      	nop
 801938e:	3714      	adds	r7, #20
 8019390:	46bd      	mov	sp, r7
 8019392:	bd90      	pop	{r4, r7, pc}

08019394 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8019394:	b580      	push	{r7, lr}
 8019396:	b086      	sub	sp, #24
 8019398:	af00      	add	r7, sp, #0
 801939a:	6078      	str	r0, [r7, #4]
 801939c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801939e:	2304      	movs	r3, #4
 80193a0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80193a8:	23ff      	movs	r3, #255	; 0xff
 80193aa:	757b      	strb	r3, [r7, #21]
 80193ac:	23ff      	movs	r3, #255	; 0xff
 80193ae:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80193b0:	e09f      	b.n	80194f2 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80193b6:	4619      	mov	r1, r3
 80193b8:	6938      	ldr	r0, [r7, #16]
 80193ba:	f7fe fb89 	bl	8017ad0 <move_window>
 80193be:	4603      	mov	r3, r0
 80193c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80193c2:	7dfb      	ldrb	r3, [r7, #23]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	f040 809a 	bne.w	80194fe <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80193ce:	781b      	ldrb	r3, [r3, #0]
 80193d0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80193d2:	7dbb      	ldrb	r3, [r7, #22]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d102      	bne.n	80193de <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80193d8:	2304      	movs	r3, #4
 80193da:	75fb      	strb	r3, [r7, #23]
 80193dc:	e096      	b.n	801950c <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80193de:	693b      	ldr	r3, [r7, #16]
 80193e0:	781b      	ldrb	r3, [r3, #0]
 80193e2:	2b04      	cmp	r3, #4
 80193e4:	d118      	bne.n	8019418 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 80193e6:	7dbb      	ldrb	r3, [r7, #22]
 80193e8:	2b85      	cmp	r3, #133	; 0x85
 80193ea:	d179      	bne.n	80194e0 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 80193f4:	6878      	ldr	r0, [r7, #4]
 80193f6:	f7ff fe17 	bl	8019028 <load_xdir>
 80193fa:	4603      	mov	r3, r0
 80193fc:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 80193fe:	7dfb      	ldrb	r3, [r7, #23]
 8019400:	2b00      	cmp	r3, #0
 8019402:	d17e      	bne.n	8019502 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8019404:	693b      	ldr	r3, [r7, #16]
 8019406:	691b      	ldr	r3, [r3, #16]
 8019408:	3304      	adds	r3, #4
 801940a:	781b      	ldrb	r3, [r3, #0]
 801940c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019410:	b2da      	uxtb	r2, r3
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	719a      	strb	r2, [r3, #6]
					}
					break;
 8019416:	e074      	b.n	8019502 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801941c:	330b      	adds	r3, #11
 801941e:	781b      	ldrb	r3, [r3, #0]
 8019420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019424:	73fb      	strb	r3, [r7, #15]
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	7bfa      	ldrb	r2, [r7, #15]
 801942a:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801942c:	7dbb      	ldrb	r3, [r7, #22]
 801942e:	2be5      	cmp	r3, #229	; 0xe5
 8019430:	d00e      	beq.n	8019450 <dir_read+0xbc>
 8019432:	7dbb      	ldrb	r3, [r7, #22]
 8019434:	2b2e      	cmp	r3, #46	; 0x2e
 8019436:	d00b      	beq.n	8019450 <dir_read+0xbc>
 8019438:	7bfb      	ldrb	r3, [r7, #15]
 801943a:	f023 0320 	bic.w	r3, r3, #32
 801943e:	2b08      	cmp	r3, #8
 8019440:	bf0c      	ite	eq
 8019442:	2301      	moveq	r3, #1
 8019444:	2300      	movne	r3, #0
 8019446:	b2db      	uxtb	r3, r3
 8019448:	461a      	mov	r2, r3
 801944a:	683b      	ldr	r3, [r7, #0]
 801944c:	4293      	cmp	r3, r2
 801944e:	d002      	beq.n	8019456 <dir_read+0xc2>
				ord = 0xFF;
 8019450:	23ff      	movs	r3, #255	; 0xff
 8019452:	757b      	strb	r3, [r7, #21]
 8019454:	e044      	b.n	80194e0 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8019456:	7bfb      	ldrb	r3, [r7, #15]
 8019458:	2b0f      	cmp	r3, #15
 801945a:	d12f      	bne.n	80194bc <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801945c:	7dbb      	ldrb	r3, [r7, #22]
 801945e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019462:	2b00      	cmp	r3, #0
 8019464:	d00d      	beq.n	8019482 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801946a:	7b5b      	ldrb	r3, [r3, #13]
 801946c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801946e:	7dbb      	ldrb	r3, [r7, #22]
 8019470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019474:	75bb      	strb	r3, [r7, #22]
 8019476:	7dbb      	ldrb	r3, [r7, #22]
 8019478:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8019482:	7dba      	ldrb	r2, [r7, #22]
 8019484:	7d7b      	ldrb	r3, [r7, #21]
 8019486:	429a      	cmp	r2, r3
 8019488:	d115      	bne.n	80194b6 <dir_read+0x122>
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801948e:	330d      	adds	r3, #13
 8019490:	781b      	ldrb	r3, [r3, #0]
 8019492:	7d3a      	ldrb	r2, [r7, #20]
 8019494:	429a      	cmp	r2, r3
 8019496:	d10e      	bne.n	80194b6 <dir_read+0x122>
 8019498:	693b      	ldr	r3, [r7, #16]
 801949a:	68da      	ldr	r2, [r3, #12]
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194a0:	4619      	mov	r1, r3
 80194a2:	4610      	mov	r0, r2
 80194a4:	f7ff fb5c 	bl	8018b60 <pick_lfn>
 80194a8:	4603      	mov	r3, r0
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d003      	beq.n	80194b6 <dir_read+0x122>
 80194ae:	7d7b      	ldrb	r3, [r7, #21]
 80194b0:	3b01      	subs	r3, #1
 80194b2:	b2db      	uxtb	r3, r3
 80194b4:	e000      	b.n	80194b8 <dir_read+0x124>
 80194b6:	23ff      	movs	r3, #255	; 0xff
 80194b8:	757b      	strb	r3, [r7, #21]
 80194ba:	e011      	b.n	80194e0 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80194bc:	7d7b      	ldrb	r3, [r7, #21]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d109      	bne.n	80194d6 <dir_read+0x142>
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194c6:	4618      	mov	r0, r3
 80194c8:	f7ff fca4 	bl	8018e14 <sum_sfn>
 80194cc:	4603      	mov	r3, r0
 80194ce:	461a      	mov	r2, r3
 80194d0:	7d3b      	ldrb	r3, [r7, #20]
 80194d2:	4293      	cmp	r3, r2
 80194d4:	d017      	beq.n	8019506 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	f04f 32ff 	mov.w	r2, #4294967295
 80194dc:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 80194de:	e012      	b.n	8019506 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80194e0:	2100      	movs	r1, #0
 80194e2:	6878      	ldr	r0, [r7, #4]
 80194e4:	f7ff f95b 	bl	801879e <dir_next>
 80194e8:	4603      	mov	r3, r0
 80194ea:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80194ec:	7dfb      	ldrb	r3, [r7, #23]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d10b      	bne.n	801950a <dir_read+0x176>
	while (dp->sect) {
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	f47f af5b 	bne.w	80193b2 <dir_read+0x1e>
 80194fc:	e006      	b.n	801950c <dir_read+0x178>
		if (res != FR_OK) break;
 80194fe:	bf00      	nop
 8019500:	e004      	b.n	801950c <dir_read+0x178>
					break;
 8019502:	bf00      	nop
 8019504:	e002      	b.n	801950c <dir_read+0x178>
					break;
 8019506:	bf00      	nop
 8019508:	e000      	b.n	801950c <dir_read+0x178>
		if (res != FR_OK) break;
 801950a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801950c:	7dfb      	ldrb	r3, [r7, #23]
 801950e:	2b00      	cmp	r3, #0
 8019510:	d002      	beq.n	8019518 <dir_read+0x184>
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	2200      	movs	r2, #0
 8019516:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8019518:	7dfb      	ldrb	r3, [r7, #23]
}
 801951a:	4618      	mov	r0, r3
 801951c:	3718      	adds	r7, #24
 801951e:	46bd      	mov	sp, r7
 8019520:	bd80      	pop	{r7, pc}

08019522 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8019522:	b590      	push	{r4, r7, lr}
 8019524:	b089      	sub	sp, #36	; 0x24
 8019526:	af00      	add	r7, sp, #0
 8019528:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8019530:	2100      	movs	r1, #0
 8019532:	6878      	ldr	r0, [r7, #4]
 8019534:	f7ff f8ad 	bl	8018692 <dir_sdi>
 8019538:	4603      	mov	r3, r0
 801953a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 801953c:	7ffb      	ldrb	r3, [r7, #31]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d001      	beq.n	8019546 <dir_find+0x24>
 8019542:	7ffb      	ldrb	r3, [r7, #31]
 8019544:	e112      	b.n	801976c <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	781b      	ldrb	r3, [r3, #0]
 801954a:	2b04      	cmp	r3, #4
 801954c:	d164      	bne.n	8019618 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	68db      	ldr	r3, [r3, #12]
 8019552:	4618      	mov	r0, r3
 8019554:	f7ff fcb2 	bl	8018ebc <xname_sum>
 8019558:	4603      	mov	r3, r0
 801955a:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 801955c:	e04f      	b.n	80195fe <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	691b      	ldr	r3, [r3, #16]
 8019562:	3324      	adds	r3, #36	; 0x24
 8019564:	4618      	mov	r0, r3
 8019566:	f7fd fe9f 	bl	80172a8 <ld_word>
 801956a:	4603      	mov	r3, r0
 801956c:	461a      	mov	r2, r3
 801956e:	893b      	ldrh	r3, [r7, #8]
 8019570:	4293      	cmp	r3, r2
 8019572:	d000      	beq.n	8019576 <dir_find+0x54>
 8019574:	e043      	b.n	80195fe <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8019576:	68fb      	ldr	r3, [r7, #12]
 8019578:	691b      	ldr	r3, [r3, #16]
 801957a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801957e:	76fb      	strb	r3, [r7, #27]
 8019580:	2340      	movs	r3, #64	; 0x40
 8019582:	617b      	str	r3, [r7, #20]
 8019584:	2300      	movs	r3, #0
 8019586:	613b      	str	r3, [r7, #16]
 8019588:	e029      	b.n	80195de <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 801958a:	697b      	ldr	r3, [r7, #20]
 801958c:	f003 031f 	and.w	r3, r3, #31
 8019590:	2b00      	cmp	r3, #0
 8019592:	d102      	bne.n	801959a <dir_find+0x78>
 8019594:	697b      	ldr	r3, [r7, #20]
 8019596:	3302      	adds	r3, #2
 8019598:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 801959a:	68fb      	ldr	r3, [r7, #12]
 801959c:	691a      	ldr	r2, [r3, #16]
 801959e:	697b      	ldr	r3, [r7, #20]
 80195a0:	4413      	add	r3, r2
 80195a2:	4618      	mov	r0, r3
 80195a4:	f7fd fe80 	bl	80172a8 <ld_word>
 80195a8:	4603      	mov	r3, r0
 80195aa:	4618      	mov	r0, r3
 80195ac:	f002 fc5e 	bl	801be6c <ff_wtoupper>
 80195b0:	4603      	mov	r3, r0
 80195b2:	461c      	mov	r4, r3
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	68da      	ldr	r2, [r3, #12]
 80195b8:	693b      	ldr	r3, [r7, #16]
 80195ba:	005b      	lsls	r3, r3, #1
 80195bc:	4413      	add	r3, r2
 80195be:	881b      	ldrh	r3, [r3, #0]
 80195c0:	4618      	mov	r0, r3
 80195c2:	f002 fc53 	bl	801be6c <ff_wtoupper>
 80195c6:	4603      	mov	r3, r0
 80195c8:	429c      	cmp	r4, r3
 80195ca:	d10c      	bne.n	80195e6 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80195cc:	7efb      	ldrb	r3, [r7, #27]
 80195ce:	3b01      	subs	r3, #1
 80195d0:	76fb      	strb	r3, [r7, #27]
 80195d2:	697b      	ldr	r3, [r7, #20]
 80195d4:	3302      	adds	r3, #2
 80195d6:	617b      	str	r3, [r7, #20]
 80195d8:	693b      	ldr	r3, [r7, #16]
 80195da:	3301      	adds	r3, #1
 80195dc:	613b      	str	r3, [r7, #16]
 80195de:	7efb      	ldrb	r3, [r7, #27]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d1d2      	bne.n	801958a <dir_find+0x68>
 80195e4:	e000      	b.n	80195e8 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80195e6:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80195e8:	7efb      	ldrb	r3, [r7, #27]
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d107      	bne.n	80195fe <dir_find+0xdc>
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	68da      	ldr	r2, [r3, #12]
 80195f2:	693b      	ldr	r3, [r7, #16]
 80195f4:	005b      	lsls	r3, r3, #1
 80195f6:	4413      	add	r3, r2
 80195f8:	881b      	ldrh	r3, [r3, #0]
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d009      	beq.n	8019612 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80195fe:	2100      	movs	r1, #0
 8019600:	6878      	ldr	r0, [r7, #4]
 8019602:	f7ff fec7 	bl	8019394 <dir_read>
 8019606:	4603      	mov	r3, r0
 8019608:	77fb      	strb	r3, [r7, #31]
 801960a:	7ffb      	ldrb	r3, [r7, #31]
 801960c:	2b00      	cmp	r3, #0
 801960e:	d0a6      	beq.n	801955e <dir_find+0x3c>
 8019610:	e000      	b.n	8019614 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8019612:	bf00      	nop
		}
		return res;
 8019614:	7ffb      	ldrb	r3, [r7, #31]
 8019616:	e0a9      	b.n	801976c <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8019618:	23ff      	movs	r3, #255	; 0xff
 801961a:	773b      	strb	r3, [r7, #28]
 801961c:	7f3b      	ldrb	r3, [r7, #28]
 801961e:	777b      	strb	r3, [r7, #29]
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	f04f 32ff 	mov.w	r2, #4294967295
 8019626:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801962c:	4619      	mov	r1, r3
 801962e:	68f8      	ldr	r0, [r7, #12]
 8019630:	f7fe fa4e 	bl	8017ad0 <move_window>
 8019634:	4603      	mov	r3, r0
 8019636:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8019638:	7ffb      	ldrb	r3, [r7, #31]
 801963a:	2b00      	cmp	r3, #0
 801963c:	f040 8090 	bne.w	8019760 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019644:	781b      	ldrb	r3, [r3, #0]
 8019646:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8019648:	7fbb      	ldrb	r3, [r7, #30]
 801964a:	2b00      	cmp	r3, #0
 801964c:	d102      	bne.n	8019654 <dir_find+0x132>
 801964e:	2304      	movs	r3, #4
 8019650:	77fb      	strb	r3, [r7, #31]
 8019652:	e08a      	b.n	801976a <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019658:	330b      	adds	r3, #11
 801965a:	781b      	ldrb	r3, [r3, #0]
 801965c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019660:	72fb      	strb	r3, [r7, #11]
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	7afa      	ldrb	r2, [r7, #11]
 8019666:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8019668:	7fbb      	ldrb	r3, [r7, #30]
 801966a:	2be5      	cmp	r3, #229	; 0xe5
 801966c:	d007      	beq.n	801967e <dir_find+0x15c>
 801966e:	7afb      	ldrb	r3, [r7, #11]
 8019670:	f003 0308 	and.w	r3, r3, #8
 8019674:	2b00      	cmp	r3, #0
 8019676:	d009      	beq.n	801968c <dir_find+0x16a>
 8019678:	7afb      	ldrb	r3, [r7, #11]
 801967a:	2b0f      	cmp	r3, #15
 801967c:	d006      	beq.n	801968c <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801967e:	23ff      	movs	r3, #255	; 0xff
 8019680:	777b      	strb	r3, [r7, #29]
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	f04f 32ff 	mov.w	r2, #4294967295
 8019688:	64da      	str	r2, [r3, #76]	; 0x4c
 801968a:	e05e      	b.n	801974a <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801968c:	7afb      	ldrb	r3, [r7, #11]
 801968e:	2b0f      	cmp	r3, #15
 8019690:	d136      	bne.n	8019700 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8019698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801969c:	2b00      	cmp	r3, #0
 801969e:	d154      	bne.n	801974a <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80196a0:	7fbb      	ldrb	r3, [r7, #30]
 80196a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d00d      	beq.n	80196c6 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80196ae:	7b5b      	ldrb	r3, [r3, #13]
 80196b0:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80196b2:	7fbb      	ldrb	r3, [r7, #30]
 80196b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80196b8:	77bb      	strb	r3, [r7, #30]
 80196ba:	7fbb      	ldrb	r3, [r7, #30]
 80196bc:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80196c6:	7fba      	ldrb	r2, [r7, #30]
 80196c8:	7f7b      	ldrb	r3, [r7, #29]
 80196ca:	429a      	cmp	r2, r3
 80196cc:	d115      	bne.n	80196fa <dir_find+0x1d8>
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80196d2:	330d      	adds	r3, #13
 80196d4:	781b      	ldrb	r3, [r3, #0]
 80196d6:	7f3a      	ldrb	r2, [r7, #28]
 80196d8:	429a      	cmp	r2, r3
 80196da:	d10e      	bne.n	80196fa <dir_find+0x1d8>
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	68da      	ldr	r2, [r3, #12]
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80196e4:	4619      	mov	r1, r3
 80196e6:	4610      	mov	r0, r2
 80196e8:	f7ff f9ca 	bl	8018a80 <cmp_lfn>
 80196ec:	4603      	mov	r3, r0
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d003      	beq.n	80196fa <dir_find+0x1d8>
 80196f2:	7f7b      	ldrb	r3, [r7, #29]
 80196f4:	3b01      	subs	r3, #1
 80196f6:	b2db      	uxtb	r3, r3
 80196f8:	e000      	b.n	80196fc <dir_find+0x1da>
 80196fa:	23ff      	movs	r3, #255	; 0xff
 80196fc:	777b      	strb	r3, [r7, #29]
 80196fe:	e024      	b.n	801974a <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8019700:	7f7b      	ldrb	r3, [r7, #29]
 8019702:	2b00      	cmp	r3, #0
 8019704:	d109      	bne.n	801971a <dir_find+0x1f8>
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801970a:	4618      	mov	r0, r3
 801970c:	f7ff fb82 	bl	8018e14 <sum_sfn>
 8019710:	4603      	mov	r3, r0
 8019712:	461a      	mov	r2, r3
 8019714:	7f3b      	ldrb	r3, [r7, #28]
 8019716:	4293      	cmp	r3, r2
 8019718:	d024      	beq.n	8019764 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8019720:	f003 0301 	and.w	r3, r3, #1
 8019724:	2b00      	cmp	r3, #0
 8019726:	d10a      	bne.n	801973e <dir_find+0x21c>
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	3340      	adds	r3, #64	; 0x40
 8019730:	220b      	movs	r2, #11
 8019732:	4619      	mov	r1, r3
 8019734:	f7fd ffd9 	bl	80176ea <mem_cmp>
 8019738:	4603      	mov	r3, r0
 801973a:	2b00      	cmp	r3, #0
 801973c:	d014      	beq.n	8019768 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801973e:	23ff      	movs	r3, #255	; 0xff
 8019740:	777b      	strb	r3, [r7, #29]
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	f04f 32ff 	mov.w	r2, #4294967295
 8019748:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801974a:	2100      	movs	r1, #0
 801974c:	6878      	ldr	r0, [r7, #4]
 801974e:	f7ff f826 	bl	801879e <dir_next>
 8019752:	4603      	mov	r3, r0
 8019754:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8019756:	7ffb      	ldrb	r3, [r7, #31]
 8019758:	2b00      	cmp	r3, #0
 801975a:	f43f af65 	beq.w	8019628 <dir_find+0x106>
 801975e:	e004      	b.n	801976a <dir_find+0x248>
		if (res != FR_OK) break;
 8019760:	bf00      	nop
 8019762:	e002      	b.n	801976a <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8019764:	bf00      	nop
 8019766:	e000      	b.n	801976a <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8019768:	bf00      	nop

	return res;
 801976a:	7ffb      	ldrb	r3, [r7, #31]
}
 801976c:	4618      	mov	r0, r3
 801976e:	3724      	adds	r7, #36	; 0x24
 8019770:	46bd      	mov	sp, r7
 8019772:	bd90      	pop	{r4, r7, pc}

08019774 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8019774:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019778:	b0a0      	sub	sp, #128	; 0x80
 801977a:	af00      	add	r7, sp, #0
 801977c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801978a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801978e:	2b00      	cmp	r3, #0
 8019790:	d001      	beq.n	8019796 <dir_register+0x22>
 8019792:	2306      	movs	r3, #6
 8019794:	e18e      	b.n	8019ab4 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8019796:	2300      	movs	r3, #0
 8019798:	677b      	str	r3, [r7, #116]	; 0x74
 801979a:	e002      	b.n	80197a2 <dir_register+0x2e>
 801979c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801979e:	3301      	adds	r3, #1
 80197a0:	677b      	str	r3, [r7, #116]	; 0x74
 80197a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80197a4:	68da      	ldr	r2, [r3, #12]
 80197a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80197a8:	005b      	lsls	r3, r3, #1
 80197aa:	4413      	add	r3, r2
 80197ac:	881b      	ldrh	r3, [r3, #0]
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d1f4      	bne.n	801979c <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80197b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80197b4:	781b      	ldrb	r3, [r3, #0]
 80197b6:	2b04      	cmp	r3, #4
 80197b8:	f040 809f 	bne.w	80198fa <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 80197bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80197be:	330e      	adds	r3, #14
 80197c0:	4aa2      	ldr	r2, [pc, #648]	; (8019a4c <dir_register+0x2d8>)
 80197c2:	fba2 2303 	umull	r2, r3, r2, r3
 80197c6:	08db      	lsrs	r3, r3, #3
 80197c8:	3302      	adds	r3, #2
 80197ca:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 80197cc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80197ce:	6878      	ldr	r0, [r7, #4]
 80197d0:	f7ff f8ba 	bl	8018948 <dir_alloc>
 80197d4:	4603      	mov	r3, r0
 80197d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 80197da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d002      	beq.n	80197e8 <dir_register+0x74>
 80197e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80197e6:	e165      	b.n	8019ab4 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80197ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80197ee:	3b01      	subs	r3, #1
 80197f0:	015b      	lsls	r3, r3, #5
 80197f2:	1ad2      	subs	r2, r2, r3
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	689b      	ldr	r3, [r3, #8]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d072      	beq.n	80198e6 <dir_register+0x172>
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	79db      	ldrb	r3, [r3, #7]
 8019804:	f003 0304 	and.w	r3, r3, #4
 8019808:	2b00      	cmp	r3, #0
 801980a:	d06c      	beq.n	80198e6 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8019812:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8019814:	8949      	ldrh	r1, [r1, #10]
 8019816:	0249      	lsls	r1, r1, #9
 8019818:	2000      	movs	r0, #0
 801981a:	460c      	mov	r4, r1
 801981c:	4605      	mov	r5, r0
 801981e:	eb12 0804 	adds.w	r8, r2, r4
 8019822:	eb43 0905 	adc.w	r9, r3, r5
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	4618      	mov	r0, r3
 8019830:	f7fe fcf8 	bl	8018224 <fill_first_frag>
 8019834:	4603      	mov	r3, r0
 8019836:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 801983a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801983e:	2b00      	cmp	r3, #0
 8019840:	d002      	beq.n	8019848 <dir_register+0xd4>
 8019842:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019846:	e135      	b.n	8019ab4 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8019848:	6878      	ldr	r0, [r7, #4]
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801984e:	f04f 32ff 	mov.w	r2, #4294967295
 8019852:	4619      	mov	r1, r3
 8019854:	f7fe fd15 	bl	8018282 <fill_last_frag>
 8019858:	4603      	mov	r3, r0
 801985a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 801985e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019862:	2b00      	cmp	r3, #0
 8019864:	d002      	beq.n	801986c <dir_register+0xf8>
 8019866:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801986a:	e123      	b.n	8019ab4 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 801986c:	687a      	ldr	r2, [r7, #4]
 801986e:	f107 0308 	add.w	r3, r7, #8
 8019872:	4611      	mov	r1, r2
 8019874:	4618      	mov	r0, r3
 8019876:	f7ff fc95 	bl	80191a4 <load_obj_dir>
 801987a:	4603      	mov	r3, r0
 801987c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8019880:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019884:	2b00      	cmp	r3, #0
 8019886:	d002      	beq.n	801988e <dir_register+0x11a>
 8019888:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801988c:	e112      	b.n	8019ab4 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 801988e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019890:	691b      	ldr	r3, [r3, #16]
 8019892:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801989c:	4608      	mov	r0, r1
 801989e:	f7fd fe60 	bl	8017562 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 80198a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80198a4:	691b      	ldr	r3, [r3, #16]
 80198a6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80198b0:	4608      	mov	r0, r1
 80198b2:	f7fd fe56 	bl	8017562 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	79da      	ldrb	r2, [r3, #7]
 80198ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80198bc:	691b      	ldr	r3, [r3, #16]
 80198be:	3321      	adds	r3, #33	; 0x21
 80198c0:	f042 0201 	orr.w	r2, r2, #1
 80198c4:	b2d2      	uxtb	r2, r2
 80198c6:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 80198c8:	f107 0308 	add.w	r3, r7, #8
 80198cc:	4618      	mov	r0, r3
 80198ce:	f7ff fc9f 	bl	8019210 <store_xdir>
 80198d2:	4603      	mov	r3, r0
 80198d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80198d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d002      	beq.n	80198e6 <dir_register+0x172>
 80198e0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80198e4:	e0e6      	b.n	8019ab4 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 80198e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80198e8:	691a      	ldr	r2, [r3, #16]
 80198ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80198ec:	68db      	ldr	r3, [r3, #12]
 80198ee:	4619      	mov	r1, r3
 80198f0:	4610      	mov	r0, r2
 80198f2:	f7ff fce8 	bl	80192c6 <create_xdir>
		return FR_OK;
 80198f6:	2300      	movs	r3, #0
 80198f8:	e0dc      	b.n	8019ab4 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8019900:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8019904:	220c      	movs	r2, #12
 8019906:	4618      	mov	r0, r3
 8019908:	f7fd feb3 	bl	8017672 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801990c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019910:	f003 0301 	and.w	r3, r3, #1
 8019914:	2b00      	cmp	r3, #0
 8019916:	d033      	beq.n	8019980 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	2240      	movs	r2, #64	; 0x40
 801991c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8019920:	2301      	movs	r3, #1
 8019922:	67bb      	str	r3, [r7, #120]	; 0x78
 8019924:	e016      	b.n	8019954 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801992c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801992e:	68da      	ldr	r2, [r3, #12]
 8019930:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8019934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019936:	f7ff f9df 	bl	8018cf8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801993a:	6878      	ldr	r0, [r7, #4]
 801993c:	f7ff fdf1 	bl	8019522 <dir_find>
 8019940:	4603      	mov	r3, r0
 8019942:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8019946:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801994a:	2b00      	cmp	r3, #0
 801994c:	d106      	bne.n	801995c <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 801994e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019950:	3301      	adds	r3, #1
 8019952:	67bb      	str	r3, [r7, #120]	; 0x78
 8019954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019956:	2b63      	cmp	r3, #99	; 0x63
 8019958:	d9e5      	bls.n	8019926 <dir_register+0x1b2>
 801995a:	e000      	b.n	801995e <dir_register+0x1ea>
			if (res != FR_OK) break;
 801995c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801995e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019960:	2b64      	cmp	r3, #100	; 0x64
 8019962:	d101      	bne.n	8019968 <dir_register+0x1f4>
 8019964:	2307      	movs	r3, #7
 8019966:	e0a5      	b.n	8019ab4 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8019968:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801996c:	2b04      	cmp	r3, #4
 801996e:	d002      	beq.n	8019976 <dir_register+0x202>
 8019970:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019974:	e09e      	b.n	8019ab4 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8019976:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8019980:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019984:	f003 0302 	and.w	r3, r3, #2
 8019988:	2b00      	cmp	r3, #0
 801998a:	d007      	beq.n	801999c <dir_register+0x228>
 801998c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801998e:	330c      	adds	r3, #12
 8019990:	4a2f      	ldr	r2, [pc, #188]	; (8019a50 <dir_register+0x2dc>)
 8019992:	fba2 2303 	umull	r2, r3, r2, r3
 8019996:	089b      	lsrs	r3, r3, #2
 8019998:	3301      	adds	r3, #1
 801999a:	e000      	b.n	801999e <dir_register+0x22a>
 801999c:	2301      	movs	r3, #1
 801999e:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80199a0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80199a2:	6878      	ldr	r0, [r7, #4]
 80199a4:	f7fe ffd0 	bl	8018948 <dir_alloc>
 80199a8:	4603      	mov	r3, r0
 80199aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80199ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d14f      	bne.n	8019a56 <dir_register+0x2e2>
 80199b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80199b8:	3b01      	subs	r3, #1
 80199ba:	673b      	str	r3, [r7, #112]	; 0x70
 80199bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d049      	beq.n	8019a56 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80199c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80199c8:	015b      	lsls	r3, r3, #5
 80199ca:	1ad3      	subs	r3, r2, r3
 80199cc:	4619      	mov	r1, r3
 80199ce:	6878      	ldr	r0, [r7, #4]
 80199d0:	f7fe fe5f 	bl	8018692 <dir_sdi>
 80199d4:	4603      	mov	r3, r0
 80199d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 80199da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d139      	bne.n	8019a56 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	3340      	adds	r3, #64	; 0x40
 80199e6:	4618      	mov	r0, r3
 80199e8:	f7ff fa14 	bl	8018e14 <sum_sfn>
 80199ec:	4603      	mov	r3, r0
 80199ee:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80199f6:	4619      	mov	r1, r3
 80199f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80199fa:	f7fe f869 	bl	8017ad0 <move_window>
 80199fe:	4603      	mov	r3, r0
 8019a00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8019a04:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d123      	bne.n	8019a54 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8019a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019a0e:	68d8      	ldr	r0, [r3, #12]
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8019a14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019a16:	b2da      	uxtb	r2, r3
 8019a18:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8019a1c:	f7ff f904 	bl	8018c28 <put_lfn>
				fs->wflag = 1;
 8019a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019a22:	2201      	movs	r2, #1
 8019a24:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8019a26:	2100      	movs	r1, #0
 8019a28:	6878      	ldr	r0, [r7, #4]
 8019a2a:	f7fe feb8 	bl	801879e <dir_next>
 8019a2e:	4603      	mov	r3, r0
 8019a30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8019a34:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d10c      	bne.n	8019a56 <dir_register+0x2e2>
 8019a3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019a3e:	3b01      	subs	r3, #1
 8019a40:	673b      	str	r3, [r7, #112]	; 0x70
 8019a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d1d4      	bne.n	80199f2 <dir_register+0x27e>
 8019a48:	e005      	b.n	8019a56 <dir_register+0x2e2>
 8019a4a:	bf00      	nop
 8019a4c:	88888889 	.word	0x88888889
 8019a50:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8019a54:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8019a56:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d128      	bne.n	8019ab0 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a62:	4619      	mov	r1, r3
 8019a64:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8019a66:	f7fe f833 	bl	8017ad0 <move_window>
 8019a6a:	4603      	mov	r3, r0
 8019a6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8019a70:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d11b      	bne.n	8019ab0 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a7c:	2220      	movs	r2, #32
 8019a7e:	2100      	movs	r1, #0
 8019a80:	4618      	mov	r0, r3
 8019a82:	f7fd fe17 	bl	80176b4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	3340      	adds	r3, #64	; 0x40
 8019a8e:	220b      	movs	r2, #11
 8019a90:	4619      	mov	r1, r3
 8019a92:	f7fd fdee 	bl	8017672 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019aa0:	330c      	adds	r3, #12
 8019aa2:	f002 0218 	and.w	r2, r2, #24
 8019aa6:	b2d2      	uxtb	r2, r2
 8019aa8:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8019aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019aac:	2201      	movs	r2, #1
 8019aae:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8019ab0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	3780      	adds	r7, #128	; 0x80
 8019ab8:	46bd      	mov	sp, r7
 8019aba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019abe:	bf00      	nop

08019ac0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8019ac0:	b580      	push	{r7, lr}
 8019ac2:	b086      	sub	sp, #24
 8019ac4:	af00      	add	r7, sp, #0
 8019ac6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ad2:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019adc:	d007      	beq.n	8019aee <dir_remove+0x2e>
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019ae2:	4619      	mov	r1, r3
 8019ae4:	6878      	ldr	r0, [r7, #4]
 8019ae6:	f7fe fdd4 	bl	8018692 <dir_sdi>
 8019aea:	4603      	mov	r3, r0
 8019aec:	e000      	b.n	8019af0 <dir_remove+0x30>
 8019aee:	2300      	movs	r3, #0
 8019af0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019af2:	7dfb      	ldrb	r3, [r7, #23]
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d136      	bne.n	8019b66 <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019afc:	4619      	mov	r1, r3
 8019afe:	6938      	ldr	r0, [r7, #16]
 8019b00:	f7fd ffe6 	bl	8017ad0 <move_window>
 8019b04:	4603      	mov	r3, r0
 8019b06:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8019b08:	7dfb      	ldrb	r3, [r7, #23]
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d123      	bne.n	8019b56 <dir_remove+0x96>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8019b0e:	693b      	ldr	r3, [r7, #16]
 8019b10:	781b      	ldrb	r3, [r3, #0]
 8019b12:	2b04      	cmp	r3, #4
 8019b14:	d109      	bne.n	8019b2a <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b1a:	781a      	ldrb	r2, [r3, #0]
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8019b24:	b2d2      	uxtb	r2, r2
 8019b26:	701a      	strb	r2, [r3, #0]
 8019b28:	e003      	b.n	8019b32 <dir_remove+0x72>
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b2e:	22e5      	movs	r2, #229	; 0xe5
 8019b30:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8019b32:	693b      	ldr	r3, [r7, #16]
 8019b34:	2201      	movs	r2, #1
 8019b36:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b3c:	68fa      	ldr	r2, [r7, #12]
 8019b3e:	429a      	cmp	r2, r3
 8019b40:	d90b      	bls.n	8019b5a <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 8019b42:	2100      	movs	r1, #0
 8019b44:	6878      	ldr	r0, [r7, #4]
 8019b46:	f7fe fe2a 	bl	801879e <dir_next>
 8019b4a:	4603      	mov	r3, r0
 8019b4c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8019b4e:	7dfb      	ldrb	r3, [r7, #23]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d0d1      	beq.n	8019af8 <dir_remove+0x38>
 8019b54:	e002      	b.n	8019b5c <dir_remove+0x9c>
			if (res != FR_OK) break;
 8019b56:	bf00      	nop
 8019b58:	e000      	b.n	8019b5c <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8019b5a:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8019b5c:	7dfb      	ldrb	r3, [r7, #23]
 8019b5e:	2b04      	cmp	r3, #4
 8019b60:	d101      	bne.n	8019b66 <dir_remove+0xa6>
 8019b62:	2302      	movs	r3, #2
 8019b64:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8019b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8019b68:	4618      	mov	r0, r3
 8019b6a:	3718      	adds	r7, #24
 8019b6c:	46bd      	mov	sp, r7
 8019b6e:	bd80      	pop	{r7, pc}

08019b70 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8019b70:	b5b0      	push	{r4, r5, r7, lr}
 8019b72:	b088      	sub	sp, #32
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
 8019b78:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8019b80:	683b      	ldr	r3, [r7, #0]
 8019b82:	2200      	movs	r2, #0
 8019b84:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	f000 80d8 	beq.w	8019d40 <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8019b90:	693b      	ldr	r3, [r7, #16]
 8019b92:	781b      	ldrb	r3, [r3, #0]
 8019b94:	2b04      	cmp	r3, #4
 8019b96:	d106      	bne.n	8019ba6 <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 8019b98:	693b      	ldr	r3, [r7, #16]
 8019b9a:	691b      	ldr	r3, [r3, #16]
 8019b9c:	6839      	ldr	r1, [r7, #0]
 8019b9e:	4618      	mov	r0, r3
 8019ba0:	f7ff f9c0 	bl	8018f24 <get_xdir_info>
		return;
 8019ba4:	e0cd      	b.n	8019d42 <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bae:	d032      	beq.n	8019c16 <get_fileinfo+0xa6>
			i = j = 0;
 8019bb0:	2300      	movs	r3, #0
 8019bb2:	61bb      	str	r3, [r7, #24]
 8019bb4:	69bb      	ldr	r3, [r7, #24]
 8019bb6:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8019bb8:	e01b      	b.n	8019bf2 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8019bba:	89fb      	ldrh	r3, [r7, #14]
 8019bbc:	2100      	movs	r1, #0
 8019bbe:	4618      	mov	r0, r3
 8019bc0:	f002 f918 	bl	801bdf4 <ff_convert>
 8019bc4:	4603      	mov	r3, r0
 8019bc6:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8019bc8:	89fb      	ldrh	r3, [r7, #14]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d102      	bne.n	8019bd4 <get_fileinfo+0x64>
 8019bce:	2300      	movs	r3, #0
 8019bd0:	61fb      	str	r3, [r7, #28]
 8019bd2:	e01a      	b.n	8019c0a <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8019bd4:	69fb      	ldr	r3, [r7, #28]
 8019bd6:	2bfe      	cmp	r3, #254	; 0xfe
 8019bd8:	d902      	bls.n	8019be0 <get_fileinfo+0x70>
 8019bda:	2300      	movs	r3, #0
 8019bdc:	61fb      	str	r3, [r7, #28]
 8019bde:	e014      	b.n	8019c0a <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 8019be0:	69fb      	ldr	r3, [r7, #28]
 8019be2:	1c5a      	adds	r2, r3, #1
 8019be4:	61fa      	str	r2, [r7, #28]
 8019be6:	89fa      	ldrh	r2, [r7, #14]
 8019be8:	b2d1      	uxtb	r1, r2
 8019bea:	683a      	ldr	r2, [r7, #0]
 8019bec:	4413      	add	r3, r2
 8019bee:	460a      	mov	r2, r1
 8019bf0:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8019bf2:	693b      	ldr	r3, [r7, #16]
 8019bf4:	68da      	ldr	r2, [r3, #12]
 8019bf6:	69bb      	ldr	r3, [r7, #24]
 8019bf8:	1c59      	adds	r1, r3, #1
 8019bfa:	61b9      	str	r1, [r7, #24]
 8019bfc:	005b      	lsls	r3, r3, #1
 8019bfe:	4413      	add	r3, r2
 8019c00:	881b      	ldrh	r3, [r3, #0]
 8019c02:	81fb      	strh	r3, [r7, #14]
 8019c04:	89fb      	ldrh	r3, [r7, #14]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d1d7      	bne.n	8019bba <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8019c0a:	683a      	ldr	r2, [r7, #0]
 8019c0c:	69fb      	ldr	r3, [r7, #28]
 8019c0e:	4413      	add	r3, r2
 8019c10:	331a      	adds	r3, #26
 8019c12:	2200      	movs	r2, #0
 8019c14:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8019c16:	2300      	movs	r3, #0
 8019c18:	61bb      	str	r3, [r7, #24]
 8019c1a:	69bb      	ldr	r3, [r7, #24]
 8019c1c:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8019c1e:	683a      	ldr	r2, [r7, #0]
 8019c20:	69fb      	ldr	r3, [r7, #28]
 8019c22:	4413      	add	r3, r2
 8019c24:	331a      	adds	r3, #26
 8019c26:	781b      	ldrb	r3, [r3, #0]
 8019c28:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8019c2a:	e04c      	b.n	8019cc6 <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8019c30:	69fb      	ldr	r3, [r7, #28]
 8019c32:	1c59      	adds	r1, r3, #1
 8019c34:	61f9      	str	r1, [r7, #28]
 8019c36:	4413      	add	r3, r2
 8019c38:	781b      	ldrb	r3, [r3, #0]
 8019c3a:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8019c3c:	7dfb      	ldrb	r3, [r7, #23]
 8019c3e:	2b20      	cmp	r3, #32
 8019c40:	d100      	bne.n	8019c44 <get_fileinfo+0xd4>
 8019c42:	e040      	b.n	8019cc6 <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8019c44:	7dfb      	ldrb	r3, [r7, #23]
 8019c46:	2b05      	cmp	r3, #5
 8019c48:	d101      	bne.n	8019c4e <get_fileinfo+0xde>
 8019c4a:	23e5      	movs	r3, #229	; 0xe5
 8019c4c:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8019c4e:	69fb      	ldr	r3, [r7, #28]
 8019c50:	2b09      	cmp	r3, #9
 8019c52:	d10f      	bne.n	8019c74 <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 8019c54:	89bb      	ldrh	r3, [r7, #12]
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d105      	bne.n	8019c66 <get_fileinfo+0xf6>
 8019c5a:	683a      	ldr	r2, [r7, #0]
 8019c5c:	69bb      	ldr	r3, [r7, #24]
 8019c5e:	4413      	add	r3, r2
 8019c60:	331a      	adds	r3, #26
 8019c62:	222e      	movs	r2, #46	; 0x2e
 8019c64:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8019c66:	69bb      	ldr	r3, [r7, #24]
 8019c68:	1c5a      	adds	r2, r3, #1
 8019c6a:	61ba      	str	r2, [r7, #24]
 8019c6c:	683a      	ldr	r2, [r7, #0]
 8019c6e:	4413      	add	r3, r2
 8019c70:	222e      	movs	r2, #46	; 0x2e
 8019c72:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8019c74:	683a      	ldr	r2, [r7, #0]
 8019c76:	69bb      	ldr	r3, [r7, #24]
 8019c78:	4413      	add	r3, r2
 8019c7a:	330d      	adds	r3, #13
 8019c7c:	7dfa      	ldrb	r2, [r7, #23]
 8019c7e:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8019c80:	89bb      	ldrh	r3, [r7, #12]
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d11c      	bne.n	8019cc0 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8019c86:	7dfb      	ldrb	r3, [r7, #23]
 8019c88:	2b40      	cmp	r3, #64	; 0x40
 8019c8a:	d913      	bls.n	8019cb4 <get_fileinfo+0x144>
 8019c8c:	7dfb      	ldrb	r3, [r7, #23]
 8019c8e:	2b5a      	cmp	r3, #90	; 0x5a
 8019c90:	d810      	bhi.n	8019cb4 <get_fileinfo+0x144>
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c96:	330c      	adds	r3, #12
 8019c98:	781b      	ldrb	r3, [r3, #0]
 8019c9a:	461a      	mov	r2, r3
 8019c9c:	69fb      	ldr	r3, [r7, #28]
 8019c9e:	2b08      	cmp	r3, #8
 8019ca0:	d901      	bls.n	8019ca6 <get_fileinfo+0x136>
 8019ca2:	2310      	movs	r3, #16
 8019ca4:	e000      	b.n	8019ca8 <get_fileinfo+0x138>
 8019ca6:	2308      	movs	r3, #8
 8019ca8:	4013      	ands	r3, r2
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d002      	beq.n	8019cb4 <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 8019cae:	7dfb      	ldrb	r3, [r7, #23]
 8019cb0:	3320      	adds	r3, #32
 8019cb2:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8019cb4:	683a      	ldr	r2, [r7, #0]
 8019cb6:	69bb      	ldr	r3, [r7, #24]
 8019cb8:	4413      	add	r3, r2
 8019cba:	331a      	adds	r3, #26
 8019cbc:	7dfa      	ldrb	r2, [r7, #23]
 8019cbe:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8019cc0:	69bb      	ldr	r3, [r7, #24]
 8019cc2:	3301      	adds	r3, #1
 8019cc4:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8019cc6:	69fb      	ldr	r3, [r7, #28]
 8019cc8:	2b0a      	cmp	r3, #10
 8019cca:	d9af      	bls.n	8019c2c <get_fileinfo+0xbc>
	}
	if (!lfv) {
 8019ccc:	89bb      	ldrh	r3, [r7, #12]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d10d      	bne.n	8019cee <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 8019cd2:	683a      	ldr	r2, [r7, #0]
 8019cd4:	69bb      	ldr	r3, [r7, #24]
 8019cd6:	4413      	add	r3, r2
 8019cd8:	331a      	adds	r3, #26
 8019cda:	2200      	movs	r2, #0
 8019cdc:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ce2:	330c      	adds	r3, #12
 8019ce4:	781b      	ldrb	r3, [r3, #0]
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d101      	bne.n	8019cee <get_fileinfo+0x17e>
 8019cea:	2300      	movs	r3, #0
 8019cec:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8019cee:	683a      	ldr	r2, [r7, #0]
 8019cf0:	69bb      	ldr	r3, [r7, #24]
 8019cf2:	4413      	add	r3, r2
 8019cf4:	330d      	adds	r3, #13
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019cfe:	7ada      	ldrb	r2, [r3, #11]
 8019d00:	683b      	ldr	r3, [r7, #0]
 8019d02:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d08:	331c      	adds	r3, #28
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	f7fd fae4 	bl	80172d8 <ld_dword>
 8019d10:	4603      	mov	r3, r0
 8019d12:	2200      	movs	r2, #0
 8019d14:	461c      	mov	r4, r3
 8019d16:	4615      	mov	r5, r2
 8019d18:	683b      	ldr	r3, [r7, #0]
 8019d1a:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d22:	3316      	adds	r3, #22
 8019d24:	4618      	mov	r0, r3
 8019d26:	f7fd fad7 	bl	80172d8 <ld_dword>
 8019d2a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8019d2c:	68bb      	ldr	r3, [r7, #8]
 8019d2e:	b29a      	uxth	r2, r3
 8019d30:	683b      	ldr	r3, [r7, #0]
 8019d32:	815a      	strh	r2, [r3, #10]
 8019d34:	68bb      	ldr	r3, [r7, #8]
 8019d36:	0c1b      	lsrs	r3, r3, #16
 8019d38:	b29a      	uxth	r2, r3
 8019d3a:	683b      	ldr	r3, [r7, #0]
 8019d3c:	811a      	strh	r2, [r3, #8]
 8019d3e:	e000      	b.n	8019d42 <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8019d40:	bf00      	nop
}
 8019d42:	3720      	adds	r7, #32
 8019d44:	46bd      	mov	sp, r7
 8019d46:	bdb0      	pop	{r4, r5, r7, pc}

08019d48 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b08a      	sub	sp, #40	; 0x28
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	6078      	str	r0, [r7, #4]
 8019d50:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8019d52:	683b      	ldr	r3, [r7, #0]
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	613b      	str	r3, [r7, #16]
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	68db      	ldr	r3, [r3, #12]
 8019d5e:	60fb      	str	r3, [r7, #12]
 8019d60:	2300      	movs	r3, #0
 8019d62:	617b      	str	r3, [r7, #20]
 8019d64:	697b      	ldr	r3, [r7, #20]
 8019d66:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8019d68:	69bb      	ldr	r3, [r7, #24]
 8019d6a:	1c5a      	adds	r2, r3, #1
 8019d6c:	61ba      	str	r2, [r7, #24]
 8019d6e:	693a      	ldr	r2, [r7, #16]
 8019d70:	4413      	add	r3, r2
 8019d72:	781b      	ldrb	r3, [r3, #0]
 8019d74:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8019d76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019d78:	2b1f      	cmp	r3, #31
 8019d7a:	d940      	bls.n	8019dfe <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8019d7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019d7e:	2b2f      	cmp	r3, #47	; 0x2f
 8019d80:	d006      	beq.n	8019d90 <create_name+0x48>
 8019d82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019d84:	2b5c      	cmp	r3, #92	; 0x5c
 8019d86:	d110      	bne.n	8019daa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8019d88:	e002      	b.n	8019d90 <create_name+0x48>
 8019d8a:	69bb      	ldr	r3, [r7, #24]
 8019d8c:	3301      	adds	r3, #1
 8019d8e:	61bb      	str	r3, [r7, #24]
 8019d90:	693a      	ldr	r2, [r7, #16]
 8019d92:	69bb      	ldr	r3, [r7, #24]
 8019d94:	4413      	add	r3, r2
 8019d96:	781b      	ldrb	r3, [r3, #0]
 8019d98:	2b2f      	cmp	r3, #47	; 0x2f
 8019d9a:	d0f6      	beq.n	8019d8a <create_name+0x42>
 8019d9c:	693a      	ldr	r2, [r7, #16]
 8019d9e:	69bb      	ldr	r3, [r7, #24]
 8019da0:	4413      	add	r3, r2
 8019da2:	781b      	ldrb	r3, [r3, #0]
 8019da4:	2b5c      	cmp	r3, #92	; 0x5c
 8019da6:	d0f0      	beq.n	8019d8a <create_name+0x42>
			break;
 8019da8:	e02a      	b.n	8019e00 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8019daa:	697b      	ldr	r3, [r7, #20]
 8019dac:	2bfe      	cmp	r3, #254	; 0xfe
 8019dae:	d901      	bls.n	8019db4 <create_name+0x6c>
 8019db0:	2306      	movs	r3, #6
 8019db2:	e17d      	b.n	801a0b0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8019db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019db6:	b2db      	uxtb	r3, r3
 8019db8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8019dba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019dbc:	2101      	movs	r1, #1
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	f002 f818 	bl	801bdf4 <ff_convert>
 8019dc4:	4603      	mov	r3, r0
 8019dc6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8019dc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d101      	bne.n	8019dd2 <create_name+0x8a>
 8019dce:	2306      	movs	r3, #6
 8019dd0:	e16e      	b.n	801a0b0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8019dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8019dd6:	d809      	bhi.n	8019dec <create_name+0xa4>
 8019dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019dda:	4619      	mov	r1, r3
 8019ddc:	488d      	ldr	r0, [pc, #564]	; (801a014 <create_name+0x2cc>)
 8019dde:	f7fd fcab 	bl	8017738 <chk_chr>
 8019de2:	4603      	mov	r3, r0
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d001      	beq.n	8019dec <create_name+0xa4>
 8019de8:	2306      	movs	r3, #6
 8019dea:	e161      	b.n	801a0b0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8019dec:	697b      	ldr	r3, [r7, #20]
 8019dee:	1c5a      	adds	r2, r3, #1
 8019df0:	617a      	str	r2, [r7, #20]
 8019df2:	005b      	lsls	r3, r3, #1
 8019df4:	68fa      	ldr	r2, [r7, #12]
 8019df6:	4413      	add	r3, r2
 8019df8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019dfa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8019dfc:	e7b4      	b.n	8019d68 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8019dfe:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8019e00:	693a      	ldr	r2, [r7, #16]
 8019e02:	69bb      	ldr	r3, [r7, #24]
 8019e04:	441a      	add	r2, r3
 8019e06:	683b      	ldr	r3, [r7, #0]
 8019e08:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8019e0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019e0c:	2b1f      	cmp	r3, #31
 8019e0e:	d801      	bhi.n	8019e14 <create_name+0xcc>
 8019e10:	2304      	movs	r3, #4
 8019e12:	e000      	b.n	8019e16 <create_name+0xce>
 8019e14:	2300      	movs	r3, #0
 8019e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8019e1a:	e011      	b.n	8019e40 <create_name+0xf8>
		w = lfn[di - 1];
 8019e1c:	697a      	ldr	r2, [r7, #20]
 8019e1e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019e22:	4413      	add	r3, r2
 8019e24:	005b      	lsls	r3, r3, #1
 8019e26:	68fa      	ldr	r2, [r7, #12]
 8019e28:	4413      	add	r3, r2
 8019e2a:	881b      	ldrh	r3, [r3, #0]
 8019e2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8019e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019e30:	2b20      	cmp	r3, #32
 8019e32:	d002      	beq.n	8019e3a <create_name+0xf2>
 8019e34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019e36:	2b2e      	cmp	r3, #46	; 0x2e
 8019e38:	d106      	bne.n	8019e48 <create_name+0x100>
		di--;
 8019e3a:	697b      	ldr	r3, [r7, #20]
 8019e3c:	3b01      	subs	r3, #1
 8019e3e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8019e40:	697b      	ldr	r3, [r7, #20]
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d1ea      	bne.n	8019e1c <create_name+0xd4>
 8019e46:	e000      	b.n	8019e4a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8019e48:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8019e4a:	697b      	ldr	r3, [r7, #20]
 8019e4c:	005b      	lsls	r3, r3, #1
 8019e4e:	68fa      	ldr	r2, [r7, #12]
 8019e50:	4413      	add	r3, r2
 8019e52:	2200      	movs	r2, #0
 8019e54:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8019e56:	697b      	ldr	r3, [r7, #20]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d101      	bne.n	8019e60 <create_name+0x118>
 8019e5c:	2306      	movs	r3, #6
 8019e5e:	e127      	b.n	801a0b0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	3340      	adds	r3, #64	; 0x40
 8019e64:	220b      	movs	r2, #11
 8019e66:	2120      	movs	r1, #32
 8019e68:	4618      	mov	r0, r3
 8019e6a:	f7fd fc23 	bl	80176b4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8019e6e:	2300      	movs	r3, #0
 8019e70:	61bb      	str	r3, [r7, #24]
 8019e72:	e002      	b.n	8019e7a <create_name+0x132>
 8019e74:	69bb      	ldr	r3, [r7, #24]
 8019e76:	3301      	adds	r3, #1
 8019e78:	61bb      	str	r3, [r7, #24]
 8019e7a:	69bb      	ldr	r3, [r7, #24]
 8019e7c:	005b      	lsls	r3, r3, #1
 8019e7e:	68fa      	ldr	r2, [r7, #12]
 8019e80:	4413      	add	r3, r2
 8019e82:	881b      	ldrh	r3, [r3, #0]
 8019e84:	2b20      	cmp	r3, #32
 8019e86:	d0f5      	beq.n	8019e74 <create_name+0x12c>
 8019e88:	69bb      	ldr	r3, [r7, #24]
 8019e8a:	005b      	lsls	r3, r3, #1
 8019e8c:	68fa      	ldr	r2, [r7, #12]
 8019e8e:	4413      	add	r3, r2
 8019e90:	881b      	ldrh	r3, [r3, #0]
 8019e92:	2b2e      	cmp	r3, #46	; 0x2e
 8019e94:	d0ee      	beq.n	8019e74 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8019e96:	69bb      	ldr	r3, [r7, #24]
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d009      	beq.n	8019eb0 <create_name+0x168>
 8019e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ea0:	f043 0303 	orr.w	r3, r3, #3
 8019ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8019ea8:	e002      	b.n	8019eb0 <create_name+0x168>
 8019eaa:	697b      	ldr	r3, [r7, #20]
 8019eac:	3b01      	subs	r3, #1
 8019eae:	617b      	str	r3, [r7, #20]
 8019eb0:	697b      	ldr	r3, [r7, #20]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d009      	beq.n	8019eca <create_name+0x182>
 8019eb6:	697a      	ldr	r2, [r7, #20]
 8019eb8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019ebc:	4413      	add	r3, r2
 8019ebe:	005b      	lsls	r3, r3, #1
 8019ec0:	68fa      	ldr	r2, [r7, #12]
 8019ec2:	4413      	add	r3, r2
 8019ec4:	881b      	ldrh	r3, [r3, #0]
 8019ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8019ec8:	d1ef      	bne.n	8019eaa <create_name+0x162>

	i = b = 0; ni = 8;
 8019eca:	2300      	movs	r3, #0
 8019ecc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019ed0:	2300      	movs	r3, #0
 8019ed2:	623b      	str	r3, [r7, #32]
 8019ed4:	2308      	movs	r3, #8
 8019ed6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8019ed8:	69bb      	ldr	r3, [r7, #24]
 8019eda:	1c5a      	adds	r2, r3, #1
 8019edc:	61ba      	str	r2, [r7, #24]
 8019ede:	005b      	lsls	r3, r3, #1
 8019ee0:	68fa      	ldr	r2, [r7, #12]
 8019ee2:	4413      	add	r3, r2
 8019ee4:	881b      	ldrh	r3, [r3, #0]
 8019ee6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8019ee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	f000 8090 	beq.w	801a010 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8019ef0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019ef2:	2b20      	cmp	r3, #32
 8019ef4:	d006      	beq.n	8019f04 <create_name+0x1bc>
 8019ef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8019efa:	d10a      	bne.n	8019f12 <create_name+0x1ca>
 8019efc:	69ba      	ldr	r2, [r7, #24]
 8019efe:	697b      	ldr	r3, [r7, #20]
 8019f00:	429a      	cmp	r2, r3
 8019f02:	d006      	beq.n	8019f12 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8019f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019f08:	f043 0303 	orr.w	r3, r3, #3
 8019f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019f10:	e07d      	b.n	801a00e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8019f12:	6a3a      	ldr	r2, [r7, #32]
 8019f14:	69fb      	ldr	r3, [r7, #28]
 8019f16:	429a      	cmp	r2, r3
 8019f18:	d203      	bcs.n	8019f22 <create_name+0x1da>
 8019f1a:	69ba      	ldr	r2, [r7, #24]
 8019f1c:	697b      	ldr	r3, [r7, #20]
 8019f1e:	429a      	cmp	r2, r3
 8019f20:	d123      	bne.n	8019f6a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8019f22:	69fb      	ldr	r3, [r7, #28]
 8019f24:	2b0b      	cmp	r3, #11
 8019f26:	d106      	bne.n	8019f36 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8019f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019f2c:	f043 0303 	orr.w	r3, r3, #3
 8019f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019f34:	e075      	b.n	801a022 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8019f36:	69ba      	ldr	r2, [r7, #24]
 8019f38:	697b      	ldr	r3, [r7, #20]
 8019f3a:	429a      	cmp	r2, r3
 8019f3c:	d005      	beq.n	8019f4a <create_name+0x202>
 8019f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019f42:	f043 0303 	orr.w	r3, r3, #3
 8019f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8019f4a:	69ba      	ldr	r2, [r7, #24]
 8019f4c:	697b      	ldr	r3, [r7, #20]
 8019f4e:	429a      	cmp	r2, r3
 8019f50:	d866      	bhi.n	801a020 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8019f52:	697b      	ldr	r3, [r7, #20]
 8019f54:	61bb      	str	r3, [r7, #24]
 8019f56:	2308      	movs	r3, #8
 8019f58:	623b      	str	r3, [r7, #32]
 8019f5a:	230b      	movs	r3, #11
 8019f5c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8019f5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019f62:	009b      	lsls	r3, r3, #2
 8019f64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019f68:	e051      	b.n	801a00e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8019f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8019f6e:	d914      	bls.n	8019f9a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8019f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019f72:	2100      	movs	r1, #0
 8019f74:	4618      	mov	r0, r3
 8019f76:	f001 ff3d 	bl	801bdf4 <ff_convert>
 8019f7a:	4603      	mov	r3, r0
 8019f7c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8019f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d004      	beq.n	8019f8e <create_name+0x246>
 8019f84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019f86:	3b80      	subs	r3, #128	; 0x80
 8019f88:	4a23      	ldr	r2, [pc, #140]	; (801a018 <create_name+0x2d0>)
 8019f8a:	5cd3      	ldrb	r3, [r2, r3]
 8019f8c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8019f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019f92:	f043 0302 	orr.w	r3, r3, #2
 8019f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8019f9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d007      	beq.n	8019fb0 <create_name+0x268>
 8019fa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019fa2:	4619      	mov	r1, r3
 8019fa4:	481d      	ldr	r0, [pc, #116]	; (801a01c <create_name+0x2d4>)
 8019fa6:	f7fd fbc7 	bl	8017738 <chk_chr>
 8019faa:	4603      	mov	r3, r0
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d008      	beq.n	8019fc2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8019fb0:	235f      	movs	r3, #95	; 0x5f
 8019fb2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8019fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019fb8:	f043 0303 	orr.w	r3, r3, #3
 8019fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019fc0:	e01b      	b.n	8019ffa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8019fc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019fc4:	2b40      	cmp	r3, #64	; 0x40
 8019fc6:	d909      	bls.n	8019fdc <create_name+0x294>
 8019fc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019fca:	2b5a      	cmp	r3, #90	; 0x5a
 8019fcc:	d806      	bhi.n	8019fdc <create_name+0x294>
					b |= 2;
 8019fce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019fd2:	f043 0302 	orr.w	r3, r3, #2
 8019fd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019fda:	e00e      	b.n	8019ffa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8019fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019fde:	2b60      	cmp	r3, #96	; 0x60
 8019fe0:	d90b      	bls.n	8019ffa <create_name+0x2b2>
 8019fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019fe4:	2b7a      	cmp	r3, #122	; 0x7a
 8019fe6:	d808      	bhi.n	8019ffa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8019fe8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019fec:	f043 0301 	orr.w	r3, r3, #1
 8019ff0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019ff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019ff6:	3b20      	subs	r3, #32
 8019ff8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8019ffa:	6a3b      	ldr	r3, [r7, #32]
 8019ffc:	1c5a      	adds	r2, r3, #1
 8019ffe:	623a      	str	r2, [r7, #32]
 801a000:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a002:	b2d1      	uxtb	r1, r2
 801a004:	687a      	ldr	r2, [r7, #4]
 801a006:	4413      	add	r3, r2
 801a008:	460a      	mov	r2, r1
 801a00a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 801a00e:	e763      	b.n	8019ed8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801a010:	bf00      	nop
 801a012:	e006      	b.n	801a022 <create_name+0x2da>
 801a014:	0801e00c 	.word	0x0801e00c
 801a018:	0801e0b4 	.word	0x0801e0b4
 801a01c:	0801e018 	.word	0x0801e018
			if (si > di) break;			/* No extension */
 801a020:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a028:	2be5      	cmp	r3, #229	; 0xe5
 801a02a:	d103      	bne.n	801a034 <create_name+0x2ec>
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	2205      	movs	r2, #5
 801a030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 801a034:	69fb      	ldr	r3, [r7, #28]
 801a036:	2b08      	cmp	r3, #8
 801a038:	d104      	bne.n	801a044 <create_name+0x2fc>
 801a03a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a03e:	009b      	lsls	r3, r3, #2
 801a040:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801a044:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a048:	f003 030c 	and.w	r3, r3, #12
 801a04c:	2b0c      	cmp	r3, #12
 801a04e:	d005      	beq.n	801a05c <create_name+0x314>
 801a050:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a054:	f003 0303 	and.w	r3, r3, #3
 801a058:	2b03      	cmp	r3, #3
 801a05a:	d105      	bne.n	801a068 <create_name+0x320>
 801a05c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a060:	f043 0302 	orr.w	r3, r3, #2
 801a064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801a068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a06c:	f003 0302 	and.w	r3, r3, #2
 801a070:	2b00      	cmp	r3, #0
 801a072:	d117      	bne.n	801a0a4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801a074:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a078:	f003 0303 	and.w	r3, r3, #3
 801a07c:	2b01      	cmp	r3, #1
 801a07e:	d105      	bne.n	801a08c <create_name+0x344>
 801a080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a084:	f043 0310 	orr.w	r3, r3, #16
 801a088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801a08c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a090:	f003 030c 	and.w	r3, r3, #12
 801a094:	2b04      	cmp	r3, #4
 801a096:	d105      	bne.n	801a0a4 <create_name+0x35c>
 801a098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a09c:	f043 0308 	orr.w	r3, r3, #8
 801a0a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a0aa:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 801a0ae:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	3728      	adds	r7, #40	; 0x28
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	bd80      	pop	{r7, pc}

0801a0b8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801a0b8:	b580      	push	{r7, lr}
 801a0ba:	b086      	sub	sp, #24
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	6078      	str	r0, [r7, #4]
 801a0c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801a0c6:	693b      	ldr	r3, [r7, #16]
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801a0cc:	e002      	b.n	801a0d4 <follow_path+0x1c>
 801a0ce:	683b      	ldr	r3, [r7, #0]
 801a0d0:	3301      	adds	r3, #1
 801a0d2:	603b      	str	r3, [r7, #0]
 801a0d4:	683b      	ldr	r3, [r7, #0]
 801a0d6:	781b      	ldrb	r3, [r3, #0]
 801a0d8:	2b2f      	cmp	r3, #47	; 0x2f
 801a0da:	d0f8      	beq.n	801a0ce <follow_path+0x16>
 801a0dc:	683b      	ldr	r3, [r7, #0]
 801a0de:	781b      	ldrb	r3, [r3, #0]
 801a0e0:	2b5c      	cmp	r3, #92	; 0x5c
 801a0e2:	d0f4      	beq.n	801a0ce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801a0e4:	693b      	ldr	r3, [r7, #16]
 801a0e6:	2200      	movs	r2, #0
 801a0e8:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 801a0ea:	693b      	ldr	r3, [r7, #16]
 801a0ec:	2200      	movs	r2, #0
 801a0ee:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801a0f0:	683b      	ldr	r3, [r7, #0]
 801a0f2:	781b      	ldrb	r3, [r3, #0]
 801a0f4:	2b1f      	cmp	r3, #31
 801a0f6:	d80a      	bhi.n	801a10e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	2280      	movs	r2, #128	; 0x80
 801a0fc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 801a100:	2100      	movs	r1, #0
 801a102:	6878      	ldr	r0, [r7, #4]
 801a104:	f7fe fac5 	bl	8018692 <dir_sdi>
 801a108:	4603      	mov	r3, r0
 801a10a:	75fb      	strb	r3, [r7, #23]
 801a10c:	e078      	b.n	801a200 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801a10e:	463b      	mov	r3, r7
 801a110:	4619      	mov	r1, r3
 801a112:	6878      	ldr	r0, [r7, #4]
 801a114:	f7ff fe18 	bl	8019d48 <create_name>
 801a118:	4603      	mov	r3, r0
 801a11a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801a11c:	7dfb      	ldrb	r3, [r7, #23]
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d169      	bne.n	801a1f6 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 801a122:	6878      	ldr	r0, [r7, #4]
 801a124:	f7ff f9fd 	bl	8019522 <dir_find>
 801a128:	4603      	mov	r3, r0
 801a12a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801a132:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801a134:	7dfb      	ldrb	r3, [r7, #23]
 801a136:	2b00      	cmp	r3, #0
 801a138:	d00a      	beq.n	801a150 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801a13a:	7dfb      	ldrb	r3, [r7, #23]
 801a13c:	2b04      	cmp	r3, #4
 801a13e:	d15c      	bne.n	801a1fa <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801a140:	7afb      	ldrb	r3, [r7, #11]
 801a142:	f003 0304 	and.w	r3, r3, #4
 801a146:	2b00      	cmp	r3, #0
 801a148:	d157      	bne.n	801a1fa <follow_path+0x142>
 801a14a:	2305      	movs	r3, #5
 801a14c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801a14e:	e054      	b.n	801a1fa <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801a150:	7afb      	ldrb	r3, [r7, #11]
 801a152:	f003 0304 	and.w	r3, r3, #4
 801a156:	2b00      	cmp	r3, #0
 801a158:	d151      	bne.n	801a1fe <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801a15a:	693b      	ldr	r3, [r7, #16]
 801a15c:	799b      	ldrb	r3, [r3, #6]
 801a15e:	f003 0310 	and.w	r3, r3, #16
 801a162:	2b00      	cmp	r3, #0
 801a164:	d102      	bne.n	801a16c <follow_path+0xb4>
				res = FR_NO_PATH; break;
 801a166:	2305      	movs	r3, #5
 801a168:	75fb      	strb	r3, [r7, #23]
 801a16a:	e049      	b.n	801a200 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	781b      	ldrb	r3, [r3, #0]
 801a170:	2b04      	cmp	r3, #4
 801a172:	d130      	bne.n	801a1d6 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 801a174:	693b      	ldr	r3, [r7, #16]
 801a176:	689a      	ldr	r2, [r3, #8]
 801a178:	693b      	ldr	r3, [r7, #16]
 801a17a:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 801a17c:	693b      	ldr	r3, [r7, #16]
 801a17e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801a182:	4613      	mov	r3, r2
 801a184:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801a188:	693a      	ldr	r2, [r7, #16]
 801a18a:	79d2      	ldrb	r2, [r2, #7]
 801a18c:	431a      	orrs	r2, r3
 801a18e:	693b      	ldr	r3, [r7, #16]
 801a190:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a196:	693b      	ldr	r3, [r7, #16]
 801a198:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	691b      	ldr	r3, [r3, #16]
 801a19e:	3334      	adds	r3, #52	; 0x34
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	f7fd f899 	bl	80172d8 <ld_dword>
 801a1a6:	4602      	mov	r2, r0
 801a1a8:	693b      	ldr	r3, [r7, #16]
 801a1aa:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	691b      	ldr	r3, [r3, #16]
 801a1b0:	3321      	adds	r3, #33	; 0x21
 801a1b2:	781b      	ldrb	r3, [r3, #0]
 801a1b4:	f003 0302 	and.w	r3, r3, #2
 801a1b8:	b2da      	uxtb	r2, r3
 801a1ba:	693b      	ldr	r3, [r7, #16]
 801a1bc:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	691b      	ldr	r3, [r3, #16]
 801a1c2:	3338      	adds	r3, #56	; 0x38
 801a1c4:	4618      	mov	r0, r3
 801a1c6:	f7fd f8aa 	bl	801731e <ld_qword>
 801a1ca:	4602      	mov	r2, r0
 801a1cc:	460b      	mov	r3, r1
 801a1ce:	6939      	ldr	r1, [r7, #16]
 801a1d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 801a1d4:	e79b      	b.n	801a10e <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a1e4:	4413      	add	r3, r2
 801a1e6:	4619      	mov	r1, r3
 801a1e8:	68f8      	ldr	r0, [r7, #12]
 801a1ea:	f7fe fc09 	bl	8018a00 <ld_clust>
 801a1ee:	4602      	mov	r2, r0
 801a1f0:	693b      	ldr	r3, [r7, #16]
 801a1f2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801a1f4:	e78b      	b.n	801a10e <follow_path+0x56>
			if (res != FR_OK) break;
 801a1f6:	bf00      	nop
 801a1f8:	e002      	b.n	801a200 <follow_path+0x148>
				break;
 801a1fa:	bf00      	nop
 801a1fc:	e000      	b.n	801a200 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801a1fe:	bf00      	nop
			}
		}
	}

	return res;
 801a200:	7dfb      	ldrb	r3, [r7, #23]
}
 801a202:	4618      	mov	r0, r3
 801a204:	3718      	adds	r7, #24
 801a206:	46bd      	mov	sp, r7
 801a208:	bd80      	pop	{r7, pc}

0801a20a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801a20a:	b480      	push	{r7}
 801a20c:	b087      	sub	sp, #28
 801a20e:	af00      	add	r7, sp, #0
 801a210:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801a212:	f04f 33ff 	mov.w	r3, #4294967295
 801a216:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d031      	beq.n	801a284 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	617b      	str	r3, [r7, #20]
 801a226:	e002      	b.n	801a22e <get_ldnumber+0x24>
 801a228:	697b      	ldr	r3, [r7, #20]
 801a22a:	3301      	adds	r3, #1
 801a22c:	617b      	str	r3, [r7, #20]
 801a22e:	697b      	ldr	r3, [r7, #20]
 801a230:	781b      	ldrb	r3, [r3, #0]
 801a232:	2b1f      	cmp	r3, #31
 801a234:	d903      	bls.n	801a23e <get_ldnumber+0x34>
 801a236:	697b      	ldr	r3, [r7, #20]
 801a238:	781b      	ldrb	r3, [r3, #0]
 801a23a:	2b3a      	cmp	r3, #58	; 0x3a
 801a23c:	d1f4      	bne.n	801a228 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801a23e:	697b      	ldr	r3, [r7, #20]
 801a240:	781b      	ldrb	r3, [r3, #0]
 801a242:	2b3a      	cmp	r3, #58	; 0x3a
 801a244:	d11c      	bne.n	801a280 <get_ldnumber+0x76>
			tp = *path;
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801a24c:	68fb      	ldr	r3, [r7, #12]
 801a24e:	1c5a      	adds	r2, r3, #1
 801a250:	60fa      	str	r2, [r7, #12]
 801a252:	781b      	ldrb	r3, [r3, #0]
 801a254:	3b30      	subs	r3, #48	; 0x30
 801a256:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801a258:	68bb      	ldr	r3, [r7, #8]
 801a25a:	2b09      	cmp	r3, #9
 801a25c:	d80e      	bhi.n	801a27c <get_ldnumber+0x72>
 801a25e:	68fa      	ldr	r2, [r7, #12]
 801a260:	697b      	ldr	r3, [r7, #20]
 801a262:	429a      	cmp	r2, r3
 801a264:	d10a      	bne.n	801a27c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801a266:	68bb      	ldr	r3, [r7, #8]
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d107      	bne.n	801a27c <get_ldnumber+0x72>
					vol = (int)i;
 801a26c:	68bb      	ldr	r3, [r7, #8]
 801a26e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801a270:	697b      	ldr	r3, [r7, #20]
 801a272:	3301      	adds	r3, #1
 801a274:	617b      	str	r3, [r7, #20]
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	697a      	ldr	r2, [r7, #20]
 801a27a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801a27c:	693b      	ldr	r3, [r7, #16]
 801a27e:	e002      	b.n	801a286 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801a280:	2300      	movs	r3, #0
 801a282:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801a284:	693b      	ldr	r3, [r7, #16]
}
 801a286:	4618      	mov	r0, r3
 801a288:	371c      	adds	r7, #28
 801a28a:	46bd      	mov	sp, r7
 801a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a290:	4770      	bx	lr
	...

0801a294 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b082      	sub	sp, #8
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
 801a29c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	2200      	movs	r2, #0
 801a2a2:	70da      	strb	r2, [r3, #3]
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	f04f 32ff 	mov.w	r2, #4294967295
 801a2aa:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801a2ac:	6839      	ldr	r1, [r7, #0]
 801a2ae:	6878      	ldr	r0, [r7, #4]
 801a2b0:	f7fd fc0e 	bl	8017ad0 <move_window>
 801a2b4:	4603      	mov	r3, r0
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d001      	beq.n	801a2be <check_fs+0x2a>
 801a2ba:	2304      	movs	r3, #4
 801a2bc:	e044      	b.n	801a348 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	3338      	adds	r3, #56	; 0x38
 801a2c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	f7fc ffee 	bl	80172a8 <ld_word>
 801a2cc:	4603      	mov	r3, r0
 801a2ce:	461a      	mov	r2, r3
 801a2d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801a2d4:	429a      	cmp	r2, r3
 801a2d6:	d001      	beq.n	801a2dc <check_fs+0x48>
 801a2d8:	2303      	movs	r3, #3
 801a2da:	e035      	b.n	801a348 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a2e2:	2be9      	cmp	r3, #233	; 0xe9
 801a2e4:	d009      	beq.n	801a2fa <check_fs+0x66>
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a2ec:	2beb      	cmp	r3, #235	; 0xeb
 801a2ee:	d11e      	bne.n	801a32e <check_fs+0x9a>
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801a2f6:	2b90      	cmp	r3, #144	; 0x90
 801a2f8:	d119      	bne.n	801a32e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	3338      	adds	r3, #56	; 0x38
 801a2fe:	3336      	adds	r3, #54	; 0x36
 801a300:	4618      	mov	r0, r3
 801a302:	f7fc ffe9 	bl	80172d8 <ld_dword>
 801a306:	4603      	mov	r3, r0
 801a308:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801a30c:	4a10      	ldr	r2, [pc, #64]	; (801a350 <check_fs+0xbc>)
 801a30e:	4293      	cmp	r3, r2
 801a310:	d101      	bne.n	801a316 <check_fs+0x82>
 801a312:	2300      	movs	r3, #0
 801a314:	e018      	b.n	801a348 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	3338      	adds	r3, #56	; 0x38
 801a31a:	3352      	adds	r3, #82	; 0x52
 801a31c:	4618      	mov	r0, r3
 801a31e:	f7fc ffdb 	bl	80172d8 <ld_dword>
 801a322:	4603      	mov	r3, r0
 801a324:	4a0b      	ldr	r2, [pc, #44]	; (801a354 <check_fs+0xc0>)
 801a326:	4293      	cmp	r3, r2
 801a328:	d101      	bne.n	801a32e <check_fs+0x9a>
 801a32a:	2300      	movs	r3, #0
 801a32c:	e00c      	b.n	801a348 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	3338      	adds	r3, #56	; 0x38
 801a332:	220b      	movs	r2, #11
 801a334:	4908      	ldr	r1, [pc, #32]	; (801a358 <check_fs+0xc4>)
 801a336:	4618      	mov	r0, r3
 801a338:	f7fd f9d7 	bl	80176ea <mem_cmp>
 801a33c:	4603      	mov	r3, r0
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d101      	bne.n	801a346 <check_fs+0xb2>
 801a342:	2301      	movs	r3, #1
 801a344:	e000      	b.n	801a348 <check_fs+0xb4>
#endif
	return 2;
 801a346:	2302      	movs	r3, #2
}
 801a348:	4618      	mov	r0, r3
 801a34a:	3708      	adds	r7, #8
 801a34c:	46bd      	mov	sp, r7
 801a34e:	bd80      	pop	{r7, pc}
 801a350:	00544146 	.word	0x00544146
 801a354:	33544146 	.word	0x33544146
 801a358:	0801e020 	.word	0x0801e020

0801a35c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801a35c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a360:	b09c      	sub	sp, #112	; 0x70
 801a362:	af00      	add	r7, sp, #0
 801a364:	61f8      	str	r0, [r7, #28]
 801a366:	61b9      	str	r1, [r7, #24]
 801a368:	4613      	mov	r3, r2
 801a36a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801a36c:	69bb      	ldr	r3, [r7, #24]
 801a36e:	2200      	movs	r2, #0
 801a370:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801a372:	69f8      	ldr	r0, [r7, #28]
 801a374:	f7ff ff49 	bl	801a20a <get_ldnumber>
 801a378:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 801a37a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	da01      	bge.n	801a384 <find_volume+0x28>
 801a380:	230b      	movs	r3, #11
 801a382:	e337      	b.n	801a9f4 <find_volume+0x698>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801a384:	4a99      	ldr	r2, [pc, #612]	; (801a5ec <find_volume+0x290>)
 801a386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a38c:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801a38e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a390:	2b00      	cmp	r3, #0
 801a392:	d101      	bne.n	801a398 <find_volume+0x3c>
 801a394:	230c      	movs	r3, #12
 801a396:	e32d      	b.n	801a9f4 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801a398:	69bb      	ldr	r3, [r7, #24]
 801a39a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a39c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801a39e:	7dfb      	ldrb	r3, [r7, #23]
 801a3a0:	f023 0301 	bic.w	r3, r3, #1
 801a3a4:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801a3a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3a8:	781b      	ldrb	r3, [r3, #0]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d01a      	beq.n	801a3e4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 801a3ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3b0:	785b      	ldrb	r3, [r3, #1]
 801a3b2:	4618      	mov	r0, r3
 801a3b4:	f7fc feda 	bl	801716c <disk_status>
 801a3b8:	4603      	mov	r3, r0
 801a3ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801a3be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a3c2:	f003 0301 	and.w	r3, r3, #1
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d10c      	bne.n	801a3e4 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801a3ca:	7dfb      	ldrb	r3, [r7, #23]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d007      	beq.n	801a3e0 <find_volume+0x84>
 801a3d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a3d4:	f003 0304 	and.w	r3, r3, #4
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d001      	beq.n	801a3e0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 801a3dc:	230a      	movs	r3, #10
 801a3de:	e309      	b.n	801a9f4 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 801a3e0:	2300      	movs	r3, #0
 801a3e2:	e307      	b.n	801a9f4 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801a3e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3e6:	2200      	movs	r2, #0
 801a3e8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801a3ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3ec:	b2da      	uxtb	r2, r3
 801a3ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3f0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801a3f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3f4:	785b      	ldrb	r3, [r3, #1]
 801a3f6:	4618      	mov	r0, r3
 801a3f8:	f7fc fed2 	bl	80171a0 <disk_initialize>
 801a3fc:	4603      	mov	r3, r0
 801a3fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801a402:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a406:	f003 0301 	and.w	r3, r3, #1
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d001      	beq.n	801a412 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801a40e:	2303      	movs	r3, #3
 801a410:	e2f0      	b.n	801a9f4 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801a412:	7dfb      	ldrb	r3, [r7, #23]
 801a414:	2b00      	cmp	r3, #0
 801a416:	d007      	beq.n	801a428 <find_volume+0xcc>
 801a418:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a41c:	f003 0304 	and.w	r3, r3, #4
 801a420:	2b00      	cmp	r3, #0
 801a422:	d001      	beq.n	801a428 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 801a424:	230a      	movs	r3, #10
 801a426:	e2e5      	b.n	801a9f4 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801a428:	2300      	movs	r3, #0
 801a42a:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801a42c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801a42e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801a430:	f7ff ff30 	bl	801a294 <check_fs>
 801a434:	4603      	mov	r3, r0
 801a436:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801a43a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801a43e:	2b02      	cmp	r3, #2
 801a440:	d14d      	bne.n	801a4de <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801a442:	2300      	movs	r3, #0
 801a444:	65bb      	str	r3, [r7, #88]	; 0x58
 801a446:	e020      	b.n	801a48a <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801a448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a44a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801a44e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a450:	011b      	lsls	r3, r3, #4
 801a452:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801a456:	4413      	add	r3, r2
 801a458:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801a45a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a45c:	3304      	adds	r3, #4
 801a45e:	781b      	ldrb	r3, [r3, #0]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d006      	beq.n	801a472 <find_volume+0x116>
 801a464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a466:	3308      	adds	r3, #8
 801a468:	4618      	mov	r0, r3
 801a46a:	f7fc ff35 	bl	80172d8 <ld_dword>
 801a46e:	4602      	mov	r2, r0
 801a470:	e000      	b.n	801a474 <find_volume+0x118>
 801a472:	2200      	movs	r2, #0
 801a474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a476:	009b      	lsls	r3, r3, #2
 801a478:	3360      	adds	r3, #96	; 0x60
 801a47a:	f107 0110 	add.w	r1, r7, #16
 801a47e:	440b      	add	r3, r1
 801a480:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801a484:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a486:	3301      	adds	r3, #1
 801a488:	65bb      	str	r3, [r7, #88]	; 0x58
 801a48a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a48c:	2b03      	cmp	r3, #3
 801a48e:	d9db      	bls.n	801a448 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801a490:	2300      	movs	r3, #0
 801a492:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 801a494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a496:	2b00      	cmp	r3, #0
 801a498:	d002      	beq.n	801a4a0 <find_volume+0x144>
 801a49a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a49c:	3b01      	subs	r3, #1
 801a49e:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 801a4a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a4a2:	009b      	lsls	r3, r3, #2
 801a4a4:	3360      	adds	r3, #96	; 0x60
 801a4a6:	f107 0210 	add.w	r2, r7, #16
 801a4aa:	4413      	add	r3, r2
 801a4ac:	f853 3c50 	ldr.w	r3, [r3, #-80]
 801a4b0:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801a4b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d005      	beq.n	801a4c4 <find_volume+0x168>
 801a4b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801a4ba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801a4bc:	f7ff feea 	bl	801a294 <check_fs>
 801a4c0:	4603      	mov	r3, r0
 801a4c2:	e000      	b.n	801a4c6 <find_volume+0x16a>
 801a4c4:	2303      	movs	r3, #3
 801a4c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801a4ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801a4ce:	2b01      	cmp	r3, #1
 801a4d0:	d905      	bls.n	801a4de <find_volume+0x182>
 801a4d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a4d4:	3301      	adds	r3, #1
 801a4d6:	65bb      	str	r3, [r7, #88]	; 0x58
 801a4d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a4da:	2b03      	cmp	r3, #3
 801a4dc:	d9e0      	bls.n	801a4a0 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801a4de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801a4e2:	2b04      	cmp	r3, #4
 801a4e4:	d101      	bne.n	801a4ea <find_volume+0x18e>
 801a4e6:	2301      	movs	r3, #1
 801a4e8:	e284      	b.n	801a9f4 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801a4ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801a4ee:	2b01      	cmp	r3, #1
 801a4f0:	d901      	bls.n	801a4f6 <find_volume+0x19a>
 801a4f2:	230d      	movs	r3, #13
 801a4f4:	e27e      	b.n	801a9f4 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 801a4f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801a4fa:	2b01      	cmp	r3, #1
 801a4fc:	f040 80fa 	bne.w	801a6f4 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 801a500:	230b      	movs	r3, #11
 801a502:	65bb      	str	r3, [r7, #88]	; 0x58
 801a504:	e002      	b.n	801a50c <find_volume+0x1b0>
 801a506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a508:	3301      	adds	r3, #1
 801a50a:	65bb      	str	r3, [r7, #88]	; 0x58
 801a50c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a50e:	2b3f      	cmp	r3, #63	; 0x3f
 801a510:	d806      	bhi.n	801a520 <find_volume+0x1c4>
 801a512:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a516:	4413      	add	r3, r2
 801a518:	3338      	adds	r3, #56	; 0x38
 801a51a:	781b      	ldrb	r3, [r3, #0]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d0f2      	beq.n	801a506 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 801a520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a522:	2b3f      	cmp	r3, #63	; 0x3f
 801a524:	d801      	bhi.n	801a52a <find_volume+0x1ce>
 801a526:	230d      	movs	r3, #13
 801a528:	e264      	b.n	801a9f4 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 801a52a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a52c:	3338      	adds	r3, #56	; 0x38
 801a52e:	3368      	adds	r3, #104	; 0x68
 801a530:	4618      	mov	r0, r3
 801a532:	f7fc feb9 	bl	80172a8 <ld_word>
 801a536:	4603      	mov	r3, r0
 801a538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a53c:	d001      	beq.n	801a542 <find_volume+0x1e6>
 801a53e:	230d      	movs	r3, #13
 801a540:	e258      	b.n	801a9f4 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 801a542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a544:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 801a548:	2b09      	cmp	r3, #9
 801a54a:	d001      	beq.n	801a550 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 801a54c:	230d      	movs	r3, #13
 801a54e:	e251      	b.n	801a9f4 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 801a550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a552:	3338      	adds	r3, #56	; 0x38
 801a554:	3348      	adds	r3, #72	; 0x48
 801a556:	4618      	mov	r0, r3
 801a558:	f7fc fee1 	bl	801731e <ld_qword>
 801a55c:	4602      	mov	r2, r0
 801a55e:	460b      	mov	r3, r1
 801a560:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801a562:	2000      	movs	r0, #0
 801a564:	60b9      	str	r1, [r7, #8]
 801a566:	60f8      	str	r0, [r7, #12]
 801a568:	68b9      	ldr	r1, [r7, #8]
 801a56a:	1851      	adds	r1, r2, r1
 801a56c:	6039      	str	r1, [r7, #0]
 801a56e:	68f9      	ldr	r1, [r7, #12]
 801a570:	eb43 0101 	adc.w	r1, r3, r1
 801a574:	6079      	str	r1, [r7, #4]
 801a576:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a57a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 801a57e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801a582:	2b01      	cmp	r3, #1
 801a584:	d301      	bcc.n	801a58a <find_volume+0x22e>
 801a586:	230d      	movs	r3, #13
 801a588:	e234      	b.n	801a9f4 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 801a58a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a58c:	3338      	adds	r3, #56	; 0x38
 801a58e:	3354      	adds	r3, #84	; 0x54
 801a590:	4618      	mov	r0, r3
 801a592:	f7fc fea1 	bl	80172d8 <ld_dword>
 801a596:	4602      	mov	r2, r0
 801a598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a59a:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 801a59c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a59e:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 801a5a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5a4:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 801a5a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5a8:	789b      	ldrb	r3, [r3, #2]
 801a5aa:	2b01      	cmp	r3, #1
 801a5ac:	d001      	beq.n	801a5b2 <find_volume+0x256>
 801a5ae:	230d      	movs	r3, #13
 801a5b0:	e220      	b.n	801a9f4 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 801a5b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801a5b8:	461a      	mov	r2, r3
 801a5ba:	2301      	movs	r3, #1
 801a5bc:	4093      	lsls	r3, r2
 801a5be:	b29a      	uxth	r2, r3
 801a5c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5c2:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 801a5c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5c6:	895b      	ldrh	r3, [r3, #10]
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d101      	bne.n	801a5d0 <find_volume+0x274>
 801a5cc:	230d      	movs	r3, #13
 801a5ce:	e211      	b.n	801a9f4 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 801a5d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5d2:	3338      	adds	r3, #56	; 0x38
 801a5d4:	335c      	adds	r3, #92	; 0x5c
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	f7fc fe7e 	bl	80172d8 <ld_dword>
 801a5dc:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 801a5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a5e0:	4a03      	ldr	r2, [pc, #12]	; (801a5f0 <find_volume+0x294>)
 801a5e2:	4293      	cmp	r3, r2
 801a5e4:	d906      	bls.n	801a5f4 <find_volume+0x298>
 801a5e6:	230d      	movs	r3, #13
 801a5e8:	e204      	b.n	801a9f4 <find_volume+0x698>
 801a5ea:	bf00      	nop
 801a5ec:	24001310 	.word	0x24001310
 801a5f0:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 801a5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a5f6:	1c9a      	adds	r2, r3, #2
 801a5f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5fa:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 801a5fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a600:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 801a602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a604:	3338      	adds	r3, #56	; 0x38
 801a606:	3358      	adds	r3, #88	; 0x58
 801a608:	4618      	mov	r0, r3
 801a60a:	f7fc fe65 	bl	80172d8 <ld_dword>
 801a60e:	4602      	mov	r2, r0
 801a610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a612:	441a      	add	r2, r3
 801a614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a616:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 801a618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a61a:	3338      	adds	r3, #56	; 0x38
 801a61c:	3350      	adds	r3, #80	; 0x50
 801a61e:	4618      	mov	r0, r3
 801a620:	f7fc fe5a 	bl	80172d8 <ld_dword>
 801a624:	4602      	mov	r2, r0
 801a626:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a628:	441a      	add	r2, r3
 801a62a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a62c:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 801a62e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a632:	2200      	movs	r2, #0
 801a634:	469a      	mov	sl, r3
 801a636:	4693      	mov	fp, r2
 801a638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a63a:	895b      	ldrh	r3, [r3, #10]
 801a63c:	461a      	mov	r2, r3
 801a63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a640:	fb02 f303 	mul.w	r3, r2, r3
 801a644:	2200      	movs	r2, #0
 801a646:	4698      	mov	r8, r3
 801a648:	4691      	mov	r9, r2
 801a64a:	eb1a 0408 	adds.w	r4, sl, r8
 801a64e:	eb4b 0509 	adc.w	r5, fp, r9
 801a652:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801a656:	42a2      	cmp	r2, r4
 801a658:	41ab      	sbcs	r3, r5
 801a65a:	d201      	bcs.n	801a660 <find_volume+0x304>
 801a65c:	230d      	movs	r3, #13
 801a65e:	e1c9      	b.n	801a9f4 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 801a660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a662:	3338      	adds	r3, #56	; 0x38
 801a664:	3360      	adds	r3, #96	; 0x60
 801a666:	4618      	mov	r0, r3
 801a668:	f7fc fe36 	bl	80172d8 <ld_dword>
 801a66c:	4602      	mov	r2, r0
 801a66e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a670:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 801a672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a676:	4619      	mov	r1, r3
 801a678:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801a67a:	f7fd fac5 	bl	8017c08 <clust2sect>
 801a67e:	4603      	mov	r3, r0
 801a680:	4619      	mov	r1, r3
 801a682:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801a684:	f7fd fa24 	bl	8017ad0 <move_window>
 801a688:	4603      	mov	r3, r0
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d001      	beq.n	801a692 <find_volume+0x336>
 801a68e:	2301      	movs	r3, #1
 801a690:	e1b0      	b.n	801a9f4 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 801a692:	2300      	movs	r3, #0
 801a694:	65bb      	str	r3, [r7, #88]	; 0x58
 801a696:	e015      	b.n	801a6c4 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 801a698:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a69a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a69c:	4413      	add	r3, r2
 801a69e:	3338      	adds	r3, #56	; 0x38
 801a6a0:	781b      	ldrb	r3, [r3, #0]
 801a6a2:	2b81      	cmp	r3, #129	; 0x81
 801a6a4:	d10b      	bne.n	801a6be <find_volume+0x362>
 801a6a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6a8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801a6ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a6ae:	3314      	adds	r3, #20
 801a6b0:	4413      	add	r3, r2
 801a6b2:	4618      	mov	r0, r3
 801a6b4:	f7fc fe10 	bl	80172d8 <ld_dword>
 801a6b8:	4603      	mov	r3, r0
 801a6ba:	2b02      	cmp	r3, #2
 801a6bc:	d007      	beq.n	801a6ce <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 801a6be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a6c0:	3320      	adds	r3, #32
 801a6c2:	65bb      	str	r3, [r7, #88]	; 0x58
 801a6c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a6c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a6ca:	d3e5      	bcc.n	801a698 <find_volume+0x33c>
 801a6cc:	e000      	b.n	801a6d0 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 801a6ce:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 801a6d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a6d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a6d6:	d101      	bne.n	801a6dc <find_volume+0x380>
 801a6d8:	230d      	movs	r3, #13
 801a6da:	e18b      	b.n	801a9f4 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801a6dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6de:	f04f 32ff 	mov.w	r2, #4294967295
 801a6e2:	619a      	str	r2, [r3, #24]
 801a6e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6e6:	699a      	ldr	r2, [r3, #24]
 801a6e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6ea:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 801a6ec:	2304      	movs	r3, #4
 801a6ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 801a6f2:	e167      	b.n	801a9c4 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801a6f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6f6:	3338      	adds	r3, #56	; 0x38
 801a6f8:	330b      	adds	r3, #11
 801a6fa:	4618      	mov	r0, r3
 801a6fc:	f7fc fdd4 	bl	80172a8 <ld_word>
 801a700:	4603      	mov	r3, r0
 801a702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a706:	d001      	beq.n	801a70c <find_volume+0x3b0>
 801a708:	230d      	movs	r3, #13
 801a70a:	e173      	b.n	801a9f4 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801a70c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a70e:	3338      	adds	r3, #56	; 0x38
 801a710:	3316      	adds	r3, #22
 801a712:	4618      	mov	r0, r3
 801a714:	f7fc fdc8 	bl	80172a8 <ld_word>
 801a718:	4603      	mov	r3, r0
 801a71a:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801a71c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d106      	bne.n	801a730 <find_volume+0x3d4>
 801a722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a724:	3338      	adds	r3, #56	; 0x38
 801a726:	3324      	adds	r3, #36	; 0x24
 801a728:	4618      	mov	r0, r3
 801a72a:	f7fc fdd5 	bl	80172d8 <ld_dword>
 801a72e:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 801a730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a732:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801a734:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801a736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a738:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801a73c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a73e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801a740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a742:	789b      	ldrb	r3, [r3, #2]
 801a744:	2b01      	cmp	r3, #1
 801a746:	d005      	beq.n	801a754 <find_volume+0x3f8>
 801a748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a74a:	789b      	ldrb	r3, [r3, #2]
 801a74c:	2b02      	cmp	r3, #2
 801a74e:	d001      	beq.n	801a754 <find_volume+0x3f8>
 801a750:	230d      	movs	r3, #13
 801a752:	e14f      	b.n	801a9f4 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801a754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a756:	789b      	ldrb	r3, [r3, #2]
 801a758:	461a      	mov	r2, r3
 801a75a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a75c:	fb02 f303 	mul.w	r3, r2, r3
 801a760:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801a762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a768:	b29a      	uxth	r2, r3
 801a76a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a76c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801a76e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a770:	895b      	ldrh	r3, [r3, #10]
 801a772:	2b00      	cmp	r3, #0
 801a774:	d008      	beq.n	801a788 <find_volume+0x42c>
 801a776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a778:	895b      	ldrh	r3, [r3, #10]
 801a77a:	461a      	mov	r2, r3
 801a77c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a77e:	895b      	ldrh	r3, [r3, #10]
 801a780:	3b01      	subs	r3, #1
 801a782:	4013      	ands	r3, r2
 801a784:	2b00      	cmp	r3, #0
 801a786:	d001      	beq.n	801a78c <find_volume+0x430>
 801a788:	230d      	movs	r3, #13
 801a78a:	e133      	b.n	801a9f4 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801a78c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a78e:	3338      	adds	r3, #56	; 0x38
 801a790:	3311      	adds	r3, #17
 801a792:	4618      	mov	r0, r3
 801a794:	f7fc fd88 	bl	80172a8 <ld_word>
 801a798:	4603      	mov	r3, r0
 801a79a:	461a      	mov	r2, r3
 801a79c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a79e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801a7a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7a2:	891b      	ldrh	r3, [r3, #8]
 801a7a4:	f003 030f 	and.w	r3, r3, #15
 801a7a8:	b29b      	uxth	r3, r3
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d001      	beq.n	801a7b2 <find_volume+0x456>
 801a7ae:	230d      	movs	r3, #13
 801a7b0:	e120      	b.n	801a9f4 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801a7b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7b4:	3338      	adds	r3, #56	; 0x38
 801a7b6:	3313      	adds	r3, #19
 801a7b8:	4618      	mov	r0, r3
 801a7ba:	f7fc fd75 	bl	80172a8 <ld_word>
 801a7be:	4603      	mov	r3, r0
 801a7c0:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801a7c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d106      	bne.n	801a7d6 <find_volume+0x47a>
 801a7c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7ca:	3338      	adds	r3, #56	; 0x38
 801a7cc:	3320      	adds	r3, #32
 801a7ce:	4618      	mov	r0, r3
 801a7d0:	f7fc fd82 	bl	80172d8 <ld_dword>
 801a7d4:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801a7d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7d8:	3338      	adds	r3, #56	; 0x38
 801a7da:	330e      	adds	r3, #14
 801a7dc:	4618      	mov	r0, r3
 801a7de:	f7fc fd63 	bl	80172a8 <ld_word>
 801a7e2:	4603      	mov	r3, r0
 801a7e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801a7e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d101      	bne.n	801a7f4 <find_volume+0x498>
 801a7f0:	230d      	movs	r3, #13
 801a7f2:	e0ff      	b.n	801a9f4 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801a7f4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a7f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a7fa:	4413      	add	r3, r2
 801a7fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a7fe:	8912      	ldrh	r2, [r2, #8]
 801a800:	0912      	lsrs	r2, r2, #4
 801a802:	b292      	uxth	r2, r2
 801a804:	4413      	add	r3, r2
 801a806:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801a808:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801a80a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a80c:	429a      	cmp	r2, r3
 801a80e:	d201      	bcs.n	801a814 <find_volume+0x4b8>
 801a810:	230d      	movs	r3, #13
 801a812:	e0ef      	b.n	801a9f4 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801a814:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801a816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a818:	1ad3      	subs	r3, r2, r3
 801a81a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a81c:	8952      	ldrh	r2, [r2, #10]
 801a81e:	fbb3 f3f2 	udiv	r3, r3, r2
 801a822:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801a824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a826:	2b00      	cmp	r3, #0
 801a828:	d101      	bne.n	801a82e <find_volume+0x4d2>
 801a82a:	230d      	movs	r3, #13
 801a82c:	e0e2      	b.n	801a9f4 <find_volume+0x698>
		fmt = FS_FAT32;
 801a82e:	2303      	movs	r3, #3
 801a830:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801a834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a836:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801a83a:	4293      	cmp	r3, r2
 801a83c:	d802      	bhi.n	801a844 <find_volume+0x4e8>
 801a83e:	2302      	movs	r3, #2
 801a840:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801a844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a846:	f640 72f5 	movw	r2, #4085	; 0xff5
 801a84a:	4293      	cmp	r3, r2
 801a84c:	d802      	bhi.n	801a854 <find_volume+0x4f8>
 801a84e:	2301      	movs	r3, #1
 801a850:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801a854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a856:	1c9a      	adds	r2, r3, #2
 801a858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a85a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801a85c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a85e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a860:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801a862:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a866:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a868:	441a      	add	r2, r3
 801a86a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a86c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801a86e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a872:	441a      	add	r2, r3
 801a874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a876:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801a878:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801a87c:	2b03      	cmp	r3, #3
 801a87e:	d11e      	bne.n	801a8be <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801a880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a882:	3338      	adds	r3, #56	; 0x38
 801a884:	332a      	adds	r3, #42	; 0x2a
 801a886:	4618      	mov	r0, r3
 801a888:	f7fc fd0e 	bl	80172a8 <ld_word>
 801a88c:	4603      	mov	r3, r0
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d001      	beq.n	801a896 <find_volume+0x53a>
 801a892:	230d      	movs	r3, #13
 801a894:	e0ae      	b.n	801a9f4 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801a896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a898:	891b      	ldrh	r3, [r3, #8]
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d001      	beq.n	801a8a2 <find_volume+0x546>
 801a89e:	230d      	movs	r3, #13
 801a8a0:	e0a8      	b.n	801a9f4 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801a8a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a8a4:	3338      	adds	r3, #56	; 0x38
 801a8a6:	332c      	adds	r3, #44	; 0x2c
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	f7fc fd15 	bl	80172d8 <ld_dword>
 801a8ae:	4602      	mov	r2, r0
 801a8b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a8b2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801a8b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a8b6:	69db      	ldr	r3, [r3, #28]
 801a8b8:	009b      	lsls	r3, r3, #2
 801a8ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 801a8bc:	e01f      	b.n	801a8fe <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801a8be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a8c0:	891b      	ldrh	r3, [r3, #8]
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d101      	bne.n	801a8ca <find_volume+0x56e>
 801a8c6:	230d      	movs	r3, #13
 801a8c8:	e094      	b.n	801a9f4 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801a8ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a8cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a8ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a8d0:	441a      	add	r2, r3
 801a8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a8d4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801a8d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801a8da:	2b02      	cmp	r3, #2
 801a8dc:	d103      	bne.n	801a8e6 <find_volume+0x58a>
 801a8de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a8e0:	69db      	ldr	r3, [r3, #28]
 801a8e2:	005b      	lsls	r3, r3, #1
 801a8e4:	e00a      	b.n	801a8fc <find_volume+0x5a0>
 801a8e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a8e8:	69da      	ldr	r2, [r3, #28]
 801a8ea:	4613      	mov	r3, r2
 801a8ec:	005b      	lsls	r3, r3, #1
 801a8ee:	4413      	add	r3, r2
 801a8f0:	085a      	lsrs	r2, r3, #1
 801a8f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a8f4:	69db      	ldr	r3, [r3, #28]
 801a8f6:	f003 0301 	and.w	r3, r3, #1
 801a8fa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801a8fc:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801a8fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a900:	6a1a      	ldr	r2, [r3, #32]
 801a902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a904:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801a908:	0a5b      	lsrs	r3, r3, #9
 801a90a:	429a      	cmp	r2, r3
 801a90c:	d201      	bcs.n	801a912 <find_volume+0x5b6>
 801a90e:	230d      	movs	r3, #13
 801a910:	e070      	b.n	801a9f4 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801a912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a914:	f04f 32ff 	mov.w	r2, #4294967295
 801a918:	619a      	str	r2, [r3, #24]
 801a91a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a91c:	699a      	ldr	r2, [r3, #24]
 801a91e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a920:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801a922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a924:	2280      	movs	r2, #128	; 0x80
 801a926:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801a928:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801a92c:	2b03      	cmp	r3, #3
 801a92e:	d149      	bne.n	801a9c4 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801a930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a932:	3338      	adds	r3, #56	; 0x38
 801a934:	3330      	adds	r3, #48	; 0x30
 801a936:	4618      	mov	r0, r3
 801a938:	f7fc fcb6 	bl	80172a8 <ld_word>
 801a93c:	4603      	mov	r3, r0
 801a93e:	2b01      	cmp	r3, #1
 801a940:	d140      	bne.n	801a9c4 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 801a942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a944:	3301      	adds	r3, #1
 801a946:	4619      	mov	r1, r3
 801a948:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801a94a:	f7fd f8c1 	bl	8017ad0 <move_window>
 801a94e:	4603      	mov	r3, r0
 801a950:	2b00      	cmp	r3, #0
 801a952:	d137      	bne.n	801a9c4 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 801a954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a956:	2200      	movs	r2, #0
 801a958:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801a95a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a95c:	3338      	adds	r3, #56	; 0x38
 801a95e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a962:	4618      	mov	r0, r3
 801a964:	f7fc fca0 	bl	80172a8 <ld_word>
 801a968:	4603      	mov	r3, r0
 801a96a:	461a      	mov	r2, r3
 801a96c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801a970:	429a      	cmp	r2, r3
 801a972:	d127      	bne.n	801a9c4 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801a974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a976:	3338      	adds	r3, #56	; 0x38
 801a978:	4618      	mov	r0, r3
 801a97a:	f7fc fcad 	bl	80172d8 <ld_dword>
 801a97e:	4603      	mov	r3, r0
 801a980:	4a1f      	ldr	r2, [pc, #124]	; (801aa00 <find_volume+0x6a4>)
 801a982:	4293      	cmp	r3, r2
 801a984:	d11e      	bne.n	801a9c4 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801a986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a988:	3338      	adds	r3, #56	; 0x38
 801a98a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801a98e:	4618      	mov	r0, r3
 801a990:	f7fc fca2 	bl	80172d8 <ld_dword>
 801a994:	4603      	mov	r3, r0
 801a996:	4a1b      	ldr	r2, [pc, #108]	; (801aa04 <find_volume+0x6a8>)
 801a998:	4293      	cmp	r3, r2
 801a99a:	d113      	bne.n	801a9c4 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801a99c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a99e:	3338      	adds	r3, #56	; 0x38
 801a9a0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	f7fc fc97 	bl	80172d8 <ld_dword>
 801a9aa:	4602      	mov	r2, r0
 801a9ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a9ae:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801a9b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a9b2:	3338      	adds	r3, #56	; 0x38
 801a9b4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801a9b8:	4618      	mov	r0, r3
 801a9ba:	f7fc fc8d 	bl	80172d8 <ld_dword>
 801a9be:	4602      	mov	r2, r0
 801a9c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a9c2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801a9c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a9c6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 801a9ca:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801a9cc:	4b0e      	ldr	r3, [pc, #56]	; (801aa08 <find_volume+0x6ac>)
 801a9ce:	881b      	ldrh	r3, [r3, #0]
 801a9d0:	3301      	adds	r3, #1
 801a9d2:	b29a      	uxth	r2, r3
 801a9d4:	4b0c      	ldr	r3, [pc, #48]	; (801aa08 <find_volume+0x6ac>)
 801a9d6:	801a      	strh	r2, [r3, #0]
 801a9d8:	4b0b      	ldr	r3, [pc, #44]	; (801aa08 <find_volume+0x6ac>)
 801a9da:	881a      	ldrh	r2, [r3, #0]
 801a9dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a9de:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801a9e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a9e2:	4a0a      	ldr	r2, [pc, #40]	; (801aa0c <find_volume+0x6b0>)
 801a9e4:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 801a9e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a9e8:	4a09      	ldr	r2, [pc, #36]	; (801aa10 <find_volume+0x6b4>)
 801a9ea:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801a9ec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801a9ee:	f7fd f807 	bl	8017a00 <clear_lock>
#endif
	return FR_OK;
 801a9f2:	2300      	movs	r3, #0
}
 801a9f4:	4618      	mov	r0, r3
 801a9f6:	3770      	adds	r7, #112	; 0x70
 801a9f8:	46bd      	mov	sp, r7
 801a9fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a9fe:	bf00      	nop
 801aa00:	41615252 	.word	0x41615252
 801aa04:	61417272 	.word	0x61417272
 801aa08:	24001314 	.word	0x24001314
 801aa0c:	240015f8 	.word	0x240015f8
 801aa10:	24001398 	.word	0x24001398

0801aa14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801aa14:	b580      	push	{r7, lr}
 801aa16:	b084      	sub	sp, #16
 801aa18:	af00      	add	r7, sp, #0
 801aa1a:	6078      	str	r0, [r7, #4]
 801aa1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801aa1e:	2309      	movs	r3, #9
 801aa20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d01c      	beq.n	801aa62 <validate+0x4e>
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d018      	beq.n	801aa62 <validate+0x4e>
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	781b      	ldrb	r3, [r3, #0]
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d013      	beq.n	801aa62 <validate+0x4e>
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	889a      	ldrh	r2, [r3, #4]
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	88db      	ldrh	r3, [r3, #6]
 801aa44:	429a      	cmp	r2, r3
 801aa46:	d10c      	bne.n	801aa62 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	681b      	ldr	r3, [r3, #0]
 801aa4c:	785b      	ldrb	r3, [r3, #1]
 801aa4e:	4618      	mov	r0, r3
 801aa50:	f7fc fb8c 	bl	801716c <disk_status>
 801aa54:	4603      	mov	r3, r0
 801aa56:	f003 0301 	and.w	r3, r3, #1
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d101      	bne.n	801aa62 <validate+0x4e>
			res = FR_OK;
 801aa5e:	2300      	movs	r3, #0
 801aa60:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801aa62:	7bfb      	ldrb	r3, [r7, #15]
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d102      	bne.n	801aa6e <validate+0x5a>
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	e000      	b.n	801aa70 <validate+0x5c>
 801aa6e:	2300      	movs	r3, #0
 801aa70:	683a      	ldr	r2, [r7, #0]
 801aa72:	6013      	str	r3, [r2, #0]
	return res;
 801aa74:	7bfb      	ldrb	r3, [r7, #15]
}
 801aa76:	4618      	mov	r0, r3
 801aa78:	3710      	adds	r7, #16
 801aa7a:	46bd      	mov	sp, r7
 801aa7c:	bd80      	pop	{r7, pc}
	...

0801aa80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801aa80:	b580      	push	{r7, lr}
 801aa82:	b088      	sub	sp, #32
 801aa84:	af00      	add	r7, sp, #0
 801aa86:	60f8      	str	r0, [r7, #12]
 801aa88:	60b9      	str	r1, [r7, #8]
 801aa8a:	4613      	mov	r3, r2
 801aa8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801aa8e:	68bb      	ldr	r3, [r7, #8]
 801aa90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801aa92:	f107 0310 	add.w	r3, r7, #16
 801aa96:	4618      	mov	r0, r3
 801aa98:	f7ff fbb7 	bl	801a20a <get_ldnumber>
 801aa9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801aa9e:	69fb      	ldr	r3, [r7, #28]
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	da01      	bge.n	801aaa8 <f_mount+0x28>
 801aaa4:	230b      	movs	r3, #11
 801aaa6:	e02b      	b.n	801ab00 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801aaa8:	4a17      	ldr	r2, [pc, #92]	; (801ab08 <f_mount+0x88>)
 801aaaa:	69fb      	ldr	r3, [r7, #28]
 801aaac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801aab0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801aab2:	69bb      	ldr	r3, [r7, #24]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d005      	beq.n	801aac4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801aab8:	69b8      	ldr	r0, [r7, #24]
 801aaba:	f7fc ffa1 	bl	8017a00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801aabe:	69bb      	ldr	r3, [r7, #24]
 801aac0:	2200      	movs	r2, #0
 801aac2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d002      	beq.n	801aad0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801aaca:	68fb      	ldr	r3, [r7, #12]
 801aacc:	2200      	movs	r2, #0
 801aace:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801aad0:	68fa      	ldr	r2, [r7, #12]
 801aad2:	490d      	ldr	r1, [pc, #52]	; (801ab08 <f_mount+0x88>)
 801aad4:	69fb      	ldr	r3, [r7, #28]
 801aad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d002      	beq.n	801aae6 <f_mount+0x66>
 801aae0:	79fb      	ldrb	r3, [r7, #7]
 801aae2:	2b01      	cmp	r3, #1
 801aae4:	d001      	beq.n	801aaea <f_mount+0x6a>
 801aae6:	2300      	movs	r3, #0
 801aae8:	e00a      	b.n	801ab00 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801aaea:	f107 010c 	add.w	r1, r7, #12
 801aaee:	f107 0308 	add.w	r3, r7, #8
 801aaf2:	2200      	movs	r2, #0
 801aaf4:	4618      	mov	r0, r3
 801aaf6:	f7ff fc31 	bl	801a35c <find_volume>
 801aafa:	4603      	mov	r3, r0
 801aafc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801aafe:	7dfb      	ldrb	r3, [r7, #23]
}
 801ab00:	4618      	mov	r0, r3
 801ab02:	3720      	adds	r7, #32
 801ab04:	46bd      	mov	sp, r7
 801ab06:	bd80      	pop	{r7, pc}
 801ab08:	24001310 	.word	0x24001310

0801ab0c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801ab0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ab10:	b0a6      	sub	sp, #152	; 0x98
 801ab12:	af00      	add	r7, sp, #0
 801ab14:	61f8      	str	r0, [r7, #28]
 801ab16:	61b9      	str	r1, [r7, #24]
 801ab18:	4613      	mov	r3, r2
 801ab1a:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801ab1c:	69fb      	ldr	r3, [r7, #28]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d101      	bne.n	801ab26 <f_open+0x1a>
 801ab22:	2309      	movs	r3, #9
 801ab24:	e2ab      	b.n	801b07e <f_open+0x572>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801ab26:	7dfb      	ldrb	r3, [r7, #23]
 801ab28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ab2c:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 801ab2e:	7dfa      	ldrb	r2, [r7, #23]
 801ab30:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801ab34:	f107 0318 	add.w	r3, r7, #24
 801ab38:	4618      	mov	r0, r3
 801ab3a:	f7ff fc0f 	bl	801a35c <find_volume>
 801ab3e:	4603      	mov	r3, r0
 801ab40:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 801ab44:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	f040 828f 	bne.w	801b06c <f_open+0x560>
		dj.obj.fs = fs;
 801ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab50:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801ab52:	69ba      	ldr	r2, [r7, #24]
 801ab54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ab58:	4611      	mov	r1, r2
 801ab5a:	4618      	mov	r0, r3
 801ab5c:	f7ff faac 	bl	801a0b8 <follow_path>
 801ab60:	4603      	mov	r3, r0
 801ab62:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801ab66:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d11a      	bne.n	801aba4 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801ab6e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801ab72:	b25b      	sxtb	r3, r3
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	da03      	bge.n	801ab80 <f_open+0x74>
				res = FR_INVALID_NAME;
 801ab78:	2306      	movs	r3, #6
 801ab7a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801ab7e:	e011      	b.n	801aba4 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801ab80:	7dfb      	ldrb	r3, [r7, #23]
 801ab82:	f023 0301 	bic.w	r3, r3, #1
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	bf14      	ite	ne
 801ab8a:	2301      	movne	r3, #1
 801ab8c:	2300      	moveq	r3, #0
 801ab8e:	b2db      	uxtb	r3, r3
 801ab90:	461a      	mov	r2, r3
 801ab92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ab96:	4611      	mov	r1, r2
 801ab98:	4618      	mov	r0, r3
 801ab9a:	f7fc fde9 	bl	8017770 <chk_lock>
 801ab9e:	4603      	mov	r3, r0
 801aba0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801aba4:	7dfb      	ldrb	r3, [r7, #23]
 801aba6:	f003 031c 	and.w	r3, r3, #28
 801abaa:	2b00      	cmp	r3, #0
 801abac:	f000 8115 	beq.w	801adda <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 801abb0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d017      	beq.n	801abe8 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801abb8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801abbc:	2b04      	cmp	r3, #4
 801abbe:	d10e      	bne.n	801abde <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801abc0:	f7fc fe32 	bl	8017828 <enq_lock>
 801abc4:	4603      	mov	r3, r0
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d006      	beq.n	801abd8 <f_open+0xcc>
 801abca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801abce:	4618      	mov	r0, r3
 801abd0:	f7fe fdd0 	bl	8019774 <dir_register>
 801abd4:	4603      	mov	r3, r0
 801abd6:	e000      	b.n	801abda <f_open+0xce>
 801abd8:	2312      	movs	r3, #18
 801abda:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801abde:	7dfb      	ldrb	r3, [r7, #23]
 801abe0:	f043 0308 	orr.w	r3, r3, #8
 801abe4:	75fb      	strb	r3, [r7, #23]
 801abe6:	e011      	b.n	801ac0c <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801abe8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801abec:	f003 0311 	and.w	r3, r3, #17
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d003      	beq.n	801abfc <f_open+0xf0>
					res = FR_DENIED;
 801abf4:	2307      	movs	r3, #7
 801abf6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801abfa:	e007      	b.n	801ac0c <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801abfc:	7dfb      	ldrb	r3, [r7, #23]
 801abfe:	f003 0304 	and.w	r3, r3, #4
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d002      	beq.n	801ac0c <f_open+0x100>
 801ac06:	2308      	movs	r3, #8
 801ac08:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801ac0c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	f040 80fe 	bne.w	801ae12 <f_open+0x306>
 801ac16:	7dfb      	ldrb	r3, [r7, #23]
 801ac18:	f003 0308 	and.w	r3, r3, #8
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	f000 80f8 	beq.w	801ae12 <f_open+0x306>
				dw = GET_FATTIME();
 801ac22:	f7fc f865 	bl	8016cf0 <get_fattime>
 801ac26:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 801ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac2c:	781b      	ldrb	r3, [r3, #0]
 801ac2e:	2b04      	cmp	r3, #4
 801ac30:	f040 8084 	bne.w	801ad3c <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 801ac34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac36:	69fb      	ldr	r3, [r7, #28]
 801ac38:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 801ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac3c:	691b      	ldr	r3, [r3, #16]
 801ac3e:	3334      	adds	r3, #52	; 0x34
 801ac40:	4618      	mov	r0, r3
 801ac42:	f7fc fb49 	bl	80172d8 <ld_dword>
 801ac46:	4602      	mov	r2, r0
 801ac48:	69fb      	ldr	r3, [r7, #28]
 801ac4a:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801ac4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac4e:	691b      	ldr	r3, [r3, #16]
 801ac50:	3338      	adds	r3, #56	; 0x38
 801ac52:	4618      	mov	r0, r3
 801ac54:	f7fc fb63 	bl	801731e <ld_qword>
 801ac58:	4602      	mov	r2, r0
 801ac5a:	460b      	mov	r3, r1
 801ac5c:	69f9      	ldr	r1, [r7, #28]
 801ac5e:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801ac62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac64:	691b      	ldr	r3, [r3, #16]
 801ac66:	3321      	adds	r3, #33	; 0x21
 801ac68:	781b      	ldrb	r3, [r3, #0]
 801ac6a:	f003 0302 	and.w	r3, r3, #2
 801ac6e:	b2da      	uxtb	r2, r3
 801ac70:	69fb      	ldr	r3, [r7, #28]
 801ac72:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 801ac74:	69fb      	ldr	r3, [r7, #28]
 801ac76:	2200      	movs	r2, #0
 801ac78:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 801ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac7c:	691b      	ldr	r3, [r3, #16]
 801ac7e:	3308      	adds	r3, #8
 801ac80:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801ac84:	4618      	mov	r0, r3
 801ac86:	f7fc fc40 	bl	801750a <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 801ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac8c:	691b      	ldr	r3, [r3, #16]
 801ac8e:	3314      	adds	r3, #20
 801ac90:	2200      	movs	r2, #0
 801ac92:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 801ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac96:	691b      	ldr	r3, [r3, #16]
 801ac98:	330c      	adds	r3, #12
 801ac9a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801ac9e:	4618      	mov	r0, r3
 801aca0:	f7fc fc33 	bl	801750a <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 801aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aca6:	691b      	ldr	r3, [r3, #16]
 801aca8:	3315      	adds	r3, #21
 801acaa:	2200      	movs	r2, #0
 801acac:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 801acae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acb0:	691b      	ldr	r3, [r3, #16]
 801acb2:	3304      	adds	r3, #4
 801acb4:	2220      	movs	r2, #32
 801acb6:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 801acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acba:	691b      	ldr	r3, [r3, #16]
 801acbc:	3334      	adds	r3, #52	; 0x34
 801acbe:	2100      	movs	r1, #0
 801acc0:	4618      	mov	r0, r3
 801acc2:	f7fc fc22 	bl	801750a <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 801acc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acc8:	691b      	ldr	r3, [r3, #16]
 801acca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801acce:	f04f 0200 	mov.w	r2, #0
 801acd2:	f04f 0300 	mov.w	r3, #0
 801acd6:	4608      	mov	r0, r1
 801acd8:	f7fc fc43 	bl	8017562 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 801acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acde:	691b      	ldr	r3, [r3, #16]
 801ace0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801ace4:	f04f 0200 	mov.w	r2, #0
 801ace8:	f04f 0300 	mov.w	r3, #0
 801acec:	4608      	mov	r0, r1
 801acee:	f7fc fc38 	bl	8017562 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 801acf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acf4:	691b      	ldr	r3, [r3, #16]
 801acf6:	3321      	adds	r3, #33	; 0x21
 801acf8:	2201      	movs	r2, #1
 801acfa:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 801acfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ad00:	4618      	mov	r0, r3
 801ad02:	f7fe fa85 	bl	8019210 <store_xdir>
 801ad06:	4603      	mov	r3, r0
 801ad08:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 801ad0c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d17e      	bne.n	801ae12 <f_open+0x306>
 801ad14:	69fb      	ldr	r3, [r7, #28]
 801ad16:	689b      	ldr	r3, [r3, #8]
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d07a      	beq.n	801ae12 <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 801ad1c:	69f8      	ldr	r0, [r7, #28]
 801ad1e:	69fb      	ldr	r3, [r7, #28]
 801ad20:	689b      	ldr	r3, [r3, #8]
 801ad22:	2200      	movs	r2, #0
 801ad24:	4619      	mov	r1, r3
 801ad26:	f7fd fadd 	bl	80182e4 <remove_chain>
 801ad2a:	4603      	mov	r3, r0
 801ad2c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 801ad30:	69fb      	ldr	r3, [r7, #28]
 801ad32:	689a      	ldr	r2, [r3, #8]
 801ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad36:	3a01      	subs	r2, #1
 801ad38:	615a      	str	r2, [r3, #20]
 801ad3a:	e06a      	b.n	801ae12 <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801ad3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ad3e:	330e      	adds	r3, #14
 801ad40:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801ad44:	4618      	mov	r0, r3
 801ad46:	f7fc fbe0 	bl	801750a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801ad4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ad4c:	3316      	adds	r3, #22
 801ad4e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801ad52:	4618      	mov	r0, r3
 801ad54:	f7fc fbd9 	bl	801750a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801ad58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ad5a:	330b      	adds	r3, #11
 801ad5c:	2220      	movs	r2, #32
 801ad5e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801ad64:	4611      	mov	r1, r2
 801ad66:	4618      	mov	r0, r3
 801ad68:	f7fd fe4a 	bl	8018a00 <ld_clust>
 801ad6c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad72:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801ad74:	2200      	movs	r2, #0
 801ad76:	4618      	mov	r0, r3
 801ad78:	f7fd fe61 	bl	8018a3e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801ad7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ad7e:	331c      	adds	r3, #28
 801ad80:	2100      	movs	r1, #0
 801ad82:	4618      	mov	r0, r3
 801ad84:	f7fc fbc1 	bl	801750a <st_dword>
					fs->wflag = 1;
 801ad88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad8a:	2201      	movs	r2, #1
 801ad8c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801ad8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d03d      	beq.n	801ae12 <f_open+0x306>
						dw = fs->winsect;
 801ad96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 801ad9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ada2:	2200      	movs	r2, #0
 801ada4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801ada8:	4618      	mov	r0, r3
 801adaa:	f7fd fa9b 	bl	80182e4 <remove_chain>
 801adae:	4603      	mov	r3, r0
 801adb0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 801adb4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d12a      	bne.n	801ae12 <f_open+0x306>
							res = move_window(fs, dw);
 801adbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adbe:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801adc2:	4618      	mov	r0, r3
 801adc4:	f7fc fe84 	bl	8017ad0 <move_window>
 801adc8:	4603      	mov	r3, r0
 801adca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801adce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801add0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801add4:	3a01      	subs	r2, #1
 801add6:	615a      	str	r2, [r3, #20]
 801add8:	e01b      	b.n	801ae12 <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801adda:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d117      	bne.n	801ae12 <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801ade2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801ade6:	f003 0310 	and.w	r3, r3, #16
 801adea:	2b00      	cmp	r3, #0
 801adec:	d003      	beq.n	801adf6 <f_open+0x2ea>
					res = FR_NO_FILE;
 801adee:	2304      	movs	r3, #4
 801adf0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801adf4:	e00d      	b.n	801ae12 <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801adf6:	7dfb      	ldrb	r3, [r7, #23]
 801adf8:	f003 0302 	and.w	r3, r3, #2
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	d008      	beq.n	801ae12 <f_open+0x306>
 801ae00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801ae04:	f003 0301 	and.w	r3, r3, #1
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d002      	beq.n	801ae12 <f_open+0x306>
						res = FR_DENIED;
 801ae0c:	2307      	movs	r3, #7
 801ae0e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 801ae12:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801ae16:	2b00      	cmp	r3, #0
 801ae18:	d128      	bne.n	801ae6c <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801ae1a:	7dfb      	ldrb	r3, [r7, #23]
 801ae1c:	f003 0308 	and.w	r3, r3, #8
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d003      	beq.n	801ae2c <f_open+0x320>
				mode |= FA_MODIFIED;
 801ae24:	7dfb      	ldrb	r3, [r7, #23]
 801ae26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ae2a:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801ae2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ae30:	69fb      	ldr	r3, [r7, #28]
 801ae32:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 801ae34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801ae36:	69fb      	ldr	r3, [r7, #28]
 801ae38:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801ae3a:	7dfb      	ldrb	r3, [r7, #23]
 801ae3c:	f023 0301 	bic.w	r3, r3, #1
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	bf14      	ite	ne
 801ae44:	2301      	movne	r3, #1
 801ae46:	2300      	moveq	r3, #0
 801ae48:	b2db      	uxtb	r3, r3
 801ae4a:	461a      	mov	r2, r3
 801ae4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ae50:	4611      	mov	r1, r2
 801ae52:	4618      	mov	r0, r3
 801ae54:	f7fc fd0a 	bl	801786c <inc_lock>
 801ae58:	4602      	mov	r2, r0
 801ae5a:	69fb      	ldr	r3, [r7, #28]
 801ae5c:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801ae5e:	69fb      	ldr	r3, [r7, #28]
 801ae60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae62:	2b00      	cmp	r3, #0
 801ae64:	d102      	bne.n	801ae6c <f_open+0x360>
 801ae66:	2302      	movs	r3, #2
 801ae68:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 801ae6c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	f040 80fb 	bne.w	801b06c <f_open+0x560>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801ae76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae78:	781b      	ldrb	r3, [r3, #0]
 801ae7a:	2b04      	cmp	r3, #4
 801ae7c:	d12d      	bne.n	801aeda <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 801ae7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae80:	69fb      	ldr	r3, [r7, #28]
 801ae82:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 801ae84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801ae88:	4613      	mov	r3, r2
 801ae8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801ae8e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801ae92:	431a      	orrs	r2, r3
 801ae94:	69fb      	ldr	r3, [r7, #28]
 801ae96:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 801ae98:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ae9a:	69fb      	ldr	r3, [r7, #28]
 801ae9c:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 801ae9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aea0:	691b      	ldr	r3, [r3, #16]
 801aea2:	3334      	adds	r3, #52	; 0x34
 801aea4:	4618      	mov	r0, r3
 801aea6:	f7fc fa17 	bl	80172d8 <ld_dword>
 801aeaa:	4602      	mov	r2, r0
 801aeac:	69fb      	ldr	r3, [r7, #28]
 801aeae:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801aeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aeb2:	691b      	ldr	r3, [r3, #16]
 801aeb4:	3338      	adds	r3, #56	; 0x38
 801aeb6:	4618      	mov	r0, r3
 801aeb8:	f7fc fa31 	bl	801731e <ld_qword>
 801aebc:	4602      	mov	r2, r0
 801aebe:	460b      	mov	r3, r1
 801aec0:	69f9      	ldr	r1, [r7, #28]
 801aec2:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801aec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aec8:	691b      	ldr	r3, [r3, #16]
 801aeca:	3321      	adds	r3, #33	; 0x21
 801aecc:	781b      	ldrb	r3, [r3, #0]
 801aece:	f003 0302 	and.w	r3, r3, #2
 801aed2:	b2da      	uxtb	r2, r3
 801aed4:	69fb      	ldr	r3, [r7, #28]
 801aed6:	71da      	strb	r2, [r3, #7]
 801aed8:	e016      	b.n	801af08 <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801aeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aedc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801aede:	4611      	mov	r1, r2
 801aee0:	4618      	mov	r0, r3
 801aee2:	f7fd fd8d 	bl	8018a00 <ld_clust>
 801aee6:	4602      	mov	r2, r0
 801aee8:	69fb      	ldr	r3, [r7, #28]
 801aeea:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801aeec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801aeee:	331c      	adds	r3, #28
 801aef0:	4618      	mov	r0, r3
 801aef2:	f7fc f9f1 	bl	80172d8 <ld_dword>
 801aef6:	4603      	mov	r3, r0
 801aef8:	2200      	movs	r2, #0
 801aefa:	60bb      	str	r3, [r7, #8]
 801aefc:	60fa      	str	r2, [r7, #12]
 801aefe:	69fb      	ldr	r3, [r7, #28]
 801af00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801af04:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801af08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801af0a:	69fb      	ldr	r3, [r7, #28]
 801af0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801af0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af10:	88da      	ldrh	r2, [r3, #6]
 801af12:	69fb      	ldr	r3, [r7, #28]
 801af14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801af16:	69fb      	ldr	r3, [r7, #28]
 801af18:	7dfa      	ldrb	r2, [r7, #23]
 801af1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 801af1e:	69fb      	ldr	r3, [r7, #28]
 801af20:	2200      	movs	r2, #0
 801af22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 801af26:	69fb      	ldr	r3, [r7, #28]
 801af28:	2200      	movs	r2, #0
 801af2a:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 801af2c:	69f9      	ldr	r1, [r7, #28]
 801af2e:	f04f 0200 	mov.w	r2, #0
 801af32:	f04f 0300 	mov.w	r3, #0
 801af36:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801af3a:	69fb      	ldr	r3, [r7, #28]
 801af3c:	3350      	adds	r3, #80	; 0x50
 801af3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801af42:	2100      	movs	r1, #0
 801af44:	4618      	mov	r0, r3
 801af46:	f7fc fbb5 	bl	80176b4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801af4a:	7dfb      	ldrb	r3, [r7, #23]
 801af4c:	f003 0320 	and.w	r3, r3, #32
 801af50:	2b00      	cmp	r3, #0
 801af52:	f000 808b 	beq.w	801b06c <f_open+0x560>
 801af56:	69fb      	ldr	r3, [r7, #28]
 801af58:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801af5c:	4313      	orrs	r3, r2
 801af5e:	f000 8085 	beq.w	801b06c <f_open+0x560>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801af62:	69fb      	ldr	r3, [r7, #28]
 801af64:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801af68:	69f9      	ldr	r1, [r7, #28]
 801af6a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801af6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af70:	895b      	ldrh	r3, [r3, #10]
 801af72:	025b      	lsls	r3, r3, #9
 801af74:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801af76:	69fb      	ldr	r3, [r7, #28]
 801af78:	689b      	ldr	r3, [r3, #8]
 801af7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801af7e:	69fb      	ldr	r3, [r7, #28]
 801af80:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801af84:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 801af88:	e026      	b.n	801afd8 <f_open+0x4cc>
					clst = get_fat(&fp->obj, clst);
 801af8a:	69fb      	ldr	r3, [r7, #28]
 801af8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801af90:	4618      	mov	r0, r3
 801af92:	f7fc fe59 	bl	8017c48 <get_fat>
 801af96:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 801af9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801af9e:	2b01      	cmp	r3, #1
 801afa0:	d802      	bhi.n	801afa8 <f_open+0x49c>
 801afa2:	2302      	movs	r3, #2
 801afa4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801afa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801afac:	f1b3 3fff 	cmp.w	r3, #4294967295
 801afb0:	d102      	bne.n	801afb8 <f_open+0x4ac>
 801afb2:	2301      	movs	r3, #1
 801afb4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801afb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801afba:	2200      	movs	r2, #0
 801afbc:	469a      	mov	sl, r3
 801afbe:	4693      	mov	fp, r2
 801afc0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801afc4:	ebb2 010a 	subs.w	r1, r2, sl
 801afc8:	6039      	str	r1, [r7, #0]
 801afca:	eb63 030b 	sbc.w	r3, r3, fp
 801afce:	607b      	str	r3, [r7, #4]
 801afd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801afd4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 801afd8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d109      	bne.n	801aff4 <f_open+0x4e8>
 801afe0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801afe2:	2200      	movs	r2, #0
 801afe4:	4698      	mov	r8, r3
 801afe6:	4691      	mov	r9, r2
 801afe8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801afec:	4590      	cmp	r8, r2
 801afee:	eb79 0303 	sbcs.w	r3, r9, r3
 801aff2:	d3ca      	bcc.n	801af8a <f_open+0x47e>
				}
				fp->clust = clst;
 801aff4:	69fb      	ldr	r3, [r7, #28]
 801aff6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801affa:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801affc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b000:	2b00      	cmp	r3, #0
 801b002:	d133      	bne.n	801b06c <f_open+0x560>
 801b004:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801b008:	f3c2 0408 	ubfx	r4, r2, #0, #9
 801b00c:	2500      	movs	r5, #0
 801b00e:	ea54 0305 	orrs.w	r3, r4, r5
 801b012:	d02b      	beq.n	801b06c <f_open+0x560>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b016:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801b01a:	4618      	mov	r0, r3
 801b01c:	f7fc fdf4 	bl	8017c08 <clust2sect>
 801b020:	67b8      	str	r0, [r7, #120]	; 0x78
 801b022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b024:	2b00      	cmp	r3, #0
 801b026:	d103      	bne.n	801b030 <f_open+0x524>
						res = FR_INT_ERR;
 801b028:	2302      	movs	r3, #2
 801b02a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801b02e:	e01d      	b.n	801b06c <f_open+0x560>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801b030:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801b034:	f04f 0200 	mov.w	r2, #0
 801b038:	f04f 0300 	mov.w	r3, #0
 801b03c:	0a42      	lsrs	r2, r0, #9
 801b03e:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 801b042:	0a4b      	lsrs	r3, r1, #9
 801b044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b046:	441a      	add	r2, r3
 801b048:	69fb      	ldr	r3, [r7, #28]
 801b04a:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801b04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b04e:	7858      	ldrb	r0, [r3, #1]
 801b050:	69fb      	ldr	r3, [r7, #28]
 801b052:	f103 0150 	add.w	r1, r3, #80	; 0x50
 801b056:	69fb      	ldr	r3, [r7, #28]
 801b058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b05a:	2301      	movs	r3, #1
 801b05c:	f7fc f8c6 	bl	80171ec <disk_read>
 801b060:	4603      	mov	r3, r0
 801b062:	2b00      	cmp	r3, #0
 801b064:	d002      	beq.n	801b06c <f_open+0x560>
 801b066:	2301      	movs	r3, #1
 801b068:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801b06c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b070:	2b00      	cmp	r3, #0
 801b072:	d002      	beq.n	801b07a <f_open+0x56e>
 801b074:	69fb      	ldr	r3, [r7, #28]
 801b076:	2200      	movs	r2, #0
 801b078:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801b07a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 801b07e:	4618      	mov	r0, r3
 801b080:	3798      	adds	r7, #152	; 0x98
 801b082:	46bd      	mov	sp, r7
 801b084:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801b088 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801b088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b08c:	b095      	sub	sp, #84	; 0x54
 801b08e:	af00      	add	r7, sp, #0
 801b090:	61f8      	str	r0, [r7, #28]
 801b092:	61b9      	str	r1, [r7, #24]
 801b094:	617a      	str	r2, [r7, #20]
 801b096:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801b098:	69bb      	ldr	r3, [r7, #24]
 801b09a:	63fb      	str	r3, [r7, #60]	; 0x3c


	*br = 0;	/* Clear read byte counter */
 801b09c:	693b      	ldr	r3, [r7, #16]
 801b09e:	2200      	movs	r2, #0
 801b0a0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801b0a2:	69fb      	ldr	r3, [r7, #28]
 801b0a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801b0a8:	4611      	mov	r1, r2
 801b0aa:	4618      	mov	r0, r3
 801b0ac:	f7ff fcb2 	bl	801aa14 <validate>
 801b0b0:	4603      	mov	r3, r0
 801b0b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801b0b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d108      	bne.n	801b0d0 <f_read+0x48>
 801b0be:	69fb      	ldr	r3, [r7, #28]
 801b0c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b0c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801b0c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d002      	beq.n	801b0d6 <f_read+0x4e>
 801b0d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b0d4:	e13f      	b.n	801b356 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801b0d6:	69fb      	ldr	r3, [r7, #28]
 801b0d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b0dc:	f003 0301 	and.w	r3, r3, #1
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d101      	bne.n	801b0e8 <f_read+0x60>
 801b0e4:	2307      	movs	r3, #7
 801b0e6:	e136      	b.n	801b356 <f_read+0x2ce>
	remain = fp->obj.objsize - fp->fptr;
 801b0e8:	69fb      	ldr	r3, [r7, #28]
 801b0ea:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801b0ee:	69fb      	ldr	r3, [r7, #28]
 801b0f0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801b0f4:	1a86      	subs	r6, r0, r2
 801b0f6:	603e      	str	r6, [r7, #0]
 801b0f8:	eb61 0303 	sbc.w	r3, r1, r3
 801b0fc:	607b      	str	r3, [r7, #4]
 801b0fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b102:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801b106:	697b      	ldr	r3, [r7, #20]
 801b108:	2200      	movs	r2, #0
 801b10a:	469a      	mov	sl, r3
 801b10c:	4693      	mov	fp, r2
 801b10e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801b112:	4552      	cmp	r2, sl
 801b114:	eb73 030b 	sbcs.w	r3, r3, fp
 801b118:	f080 8118 	bcs.w	801b34c <f_read+0x2c4>
 801b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b11e:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 801b120:	e114      	b.n	801b34c <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801b122:	69fb      	ldr	r3, [r7, #28]
 801b124:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801b128:	f3c2 0408 	ubfx	r4, r2, #0, #9
 801b12c:	2500      	movs	r5, #0
 801b12e:	ea54 0305 	orrs.w	r3, r4, r5
 801b132:	f040 80cd 	bne.w	801b2d0 <f_read+0x248>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801b136:	69fb      	ldr	r3, [r7, #28]
 801b138:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801b13c:	f04f 0200 	mov.w	r2, #0
 801b140:	f04f 0300 	mov.w	r3, #0
 801b144:	0a42      	lsrs	r2, r0, #9
 801b146:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 801b14a:	0a4b      	lsrs	r3, r1, #9
 801b14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b14e:	895b      	ldrh	r3, [r3, #10]
 801b150:	3b01      	subs	r3, #1
 801b152:	4013      	ands	r3, r2
 801b154:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 801b156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d126      	bne.n	801b1aa <f_read+0x122>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801b15c:	69fb      	ldr	r3, [r7, #28]
 801b15e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801b162:	4313      	orrs	r3, r2
 801b164:	d103      	bne.n	801b16e <f_read+0xe6>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801b166:	69fb      	ldr	r3, [r7, #28]
 801b168:	689b      	ldr	r3, [r3, #8]
 801b16a:	64bb      	str	r3, [r7, #72]	; 0x48
 801b16c:	e007      	b.n	801b17e <f_read+0xf6>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801b16e:	69fa      	ldr	r2, [r7, #28]
 801b170:	69fb      	ldr	r3, [r7, #28]
 801b172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b174:	4619      	mov	r1, r3
 801b176:	4610      	mov	r0, r2
 801b178:	f7fc fd66 	bl	8017c48 <get_fat>
 801b17c:	64b8      	str	r0, [r7, #72]	; 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801b17e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b180:	2b01      	cmp	r3, #1
 801b182:	d805      	bhi.n	801b190 <f_read+0x108>
 801b184:	69fb      	ldr	r3, [r7, #28]
 801b186:	2202      	movs	r2, #2
 801b188:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801b18c:	2302      	movs	r3, #2
 801b18e:	e0e2      	b.n	801b356 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801b190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b192:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b196:	d105      	bne.n	801b1a4 <f_read+0x11c>
 801b198:	69fb      	ldr	r3, [r7, #28]
 801b19a:	2201      	movs	r2, #1
 801b19c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801b1a0:	2301      	movs	r3, #1
 801b1a2:	e0d8      	b.n	801b356 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 801b1a4:	69fb      	ldr	r3, [r7, #28]
 801b1a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b1a8:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801b1aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b1ac:	69fb      	ldr	r3, [r7, #28]
 801b1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b1b0:	4619      	mov	r1, r3
 801b1b2:	4610      	mov	r0, r2
 801b1b4:	f7fc fd28 	bl	8017c08 <clust2sect>
 801b1b8:	62b8      	str	r0, [r7, #40]	; 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 801b1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d105      	bne.n	801b1cc <f_read+0x144>
 801b1c0:	69fb      	ldr	r3, [r7, #28]
 801b1c2:	2202      	movs	r2, #2
 801b1c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801b1c8:	2302      	movs	r3, #2
 801b1ca:	e0c4      	b.n	801b356 <f_read+0x2ce>
			sect += csect;
 801b1cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1d0:	4413      	add	r3, r2
 801b1d2:	62bb      	str	r3, [r7, #40]	; 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801b1d4:	697b      	ldr	r3, [r7, #20]
 801b1d6:	0a5b      	lsrs	r3, r3, #9
 801b1d8:	643b      	str	r3, [r7, #64]	; 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 801b1da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d03b      	beq.n	801b258 <f_read+0x1d0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801b1e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b1e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b1e4:	4413      	add	r3, r2
 801b1e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b1e8:	8952      	ldrh	r2, [r2, #10]
 801b1ea:	4293      	cmp	r3, r2
 801b1ec:	d905      	bls.n	801b1fa <f_read+0x172>
					cc = fs->csize - csect;
 801b1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1f0:	895b      	ldrh	r3, [r3, #10]
 801b1f2:	461a      	mov	r2, r3
 801b1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1f6:	1ad3      	subs	r3, r2, r3
 801b1f8:	643b      	str	r3, [r7, #64]	; 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801b1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1fc:	7858      	ldrb	r0, [r3, #1]
 801b1fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b202:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801b204:	f7fb fff2 	bl	80171ec <disk_read>
 801b208:	4603      	mov	r3, r0
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d005      	beq.n	801b21a <f_read+0x192>
 801b20e:	69fb      	ldr	r3, [r7, #28]
 801b210:	2201      	movs	r2, #1
 801b212:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801b216:	2301      	movs	r3, #1
 801b218:	e09d      	b.n	801b356 <f_read+0x2ce>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801b21a:	69fb      	ldr	r3, [r7, #28]
 801b21c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b220:	b25b      	sxtb	r3, r3
 801b222:	2b00      	cmp	r3, #0
 801b224:	da14      	bge.n	801b250 <f_read+0x1c8>
 801b226:	69fb      	ldr	r3, [r7, #28]
 801b228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b22c:	1ad3      	subs	r3, r2, r3
 801b22e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b230:	429a      	cmp	r2, r3
 801b232:	d90d      	bls.n	801b250 <f_read+0x1c8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801b234:	69fb      	ldr	r3, [r7, #28]
 801b236:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b23a:	1ad3      	subs	r3, r2, r3
 801b23c:	025b      	lsls	r3, r3, #9
 801b23e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b240:	18d0      	adds	r0, r2, r3
 801b242:	69fb      	ldr	r3, [r7, #28]
 801b244:	3350      	adds	r3, #80	; 0x50
 801b246:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b24a:	4619      	mov	r1, r3
 801b24c:	f7fc fa11 	bl	8017672 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801b250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b252:	025b      	lsls	r3, r3, #9
 801b254:	647b      	str	r3, [r7, #68]	; 0x44
				continue;
 801b256:	e059      	b.n	801b30c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801b258:	69fb      	ldr	r3, [r7, #28]
 801b25a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b25c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b25e:	429a      	cmp	r2, r3
 801b260:	d033      	beq.n	801b2ca <f_read+0x242>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801b262:	69fb      	ldr	r3, [r7, #28]
 801b264:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b268:	b25b      	sxtb	r3, r3
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	da1b      	bge.n	801b2a6 <f_read+0x21e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b270:	7858      	ldrb	r0, [r3, #1]
 801b272:	69fb      	ldr	r3, [r7, #28]
 801b274:	f103 0150 	add.w	r1, r3, #80	; 0x50
 801b278:	69fb      	ldr	r3, [r7, #28]
 801b27a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b27c:	2301      	movs	r3, #1
 801b27e:	f7fb ffd5 	bl	801722c <disk_write>
 801b282:	4603      	mov	r3, r0
 801b284:	2b00      	cmp	r3, #0
 801b286:	d005      	beq.n	801b294 <f_read+0x20c>
 801b288:	69fb      	ldr	r3, [r7, #28]
 801b28a:	2201      	movs	r2, #1
 801b28c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801b290:	2301      	movs	r3, #1
 801b292:	e060      	b.n	801b356 <f_read+0x2ce>
					fp->flag &= (BYTE)~FA_DIRTY;
 801b294:	69fb      	ldr	r3, [r7, #28]
 801b296:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b29a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b29e:	b2da      	uxtb	r2, r3
 801b2a0:	69fb      	ldr	r3, [r7, #28]
 801b2a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801b2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2a8:	7858      	ldrb	r0, [r3, #1]
 801b2aa:	69fb      	ldr	r3, [r7, #28]
 801b2ac:	f103 0150 	add.w	r1, r3, #80	; 0x50
 801b2b0:	2301      	movs	r3, #1
 801b2b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b2b4:	f7fb ff9a 	bl	80171ec <disk_read>
 801b2b8:	4603      	mov	r3, r0
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d005      	beq.n	801b2ca <f_read+0x242>
 801b2be:	69fb      	ldr	r3, [r7, #28]
 801b2c0:	2201      	movs	r2, #1
 801b2c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801b2c6:	2301      	movs	r3, #1
 801b2c8:	e045      	b.n	801b356 <f_read+0x2ce>
			}
#endif
			fp->sect = sect;
 801b2ca:	69fb      	ldr	r3, [r7, #28]
 801b2cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b2ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801b2d0:	69fb      	ldr	r3, [r7, #28]
 801b2d2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801b2d6:	4613      	mov	r3, r2
 801b2d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b2dc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801b2e0:	647b      	str	r3, [r7, #68]	; 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801b2e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b2e4:	697b      	ldr	r3, [r7, #20]
 801b2e6:	429a      	cmp	r2, r3
 801b2e8:	d901      	bls.n	801b2ee <f_read+0x266>
 801b2ea:	697b      	ldr	r3, [r7, #20]
 801b2ec:	647b      	str	r3, [r7, #68]	; 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801b2ee:	69fb      	ldr	r3, [r7, #28]
 801b2f0:	f103 0150 	add.w	r1, r3, #80	; 0x50
 801b2f4:	69fb      	ldr	r3, [r7, #28]
 801b2f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801b2fa:	4613      	mov	r3, r2
 801b2fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b300:	440b      	add	r3, r1
 801b302:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b304:	4619      	mov	r1, r3
 801b306:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801b308:	f7fc f9b3 	bl	8017672 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801b30c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b30e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b310:	4413      	add	r3, r2
 801b312:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b314:	69fb      	ldr	r3, [r7, #28]
 801b316:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801b31a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801b31c:	2000      	movs	r0, #0
 801b31e:	4688      	mov	r8, r1
 801b320:	4681      	mov	r9, r0
 801b322:	eb12 0108 	adds.w	r1, r2, r8
 801b326:	60b9      	str	r1, [r7, #8]
 801b328:	eb43 0309 	adc.w	r3, r3, r9
 801b32c:	60fb      	str	r3, [r7, #12]
 801b32e:	69fb      	ldr	r3, [r7, #28]
 801b330:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801b334:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
 801b338:	693b      	ldr	r3, [r7, #16]
 801b33a:	681a      	ldr	r2, [r3, #0]
 801b33c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b33e:	441a      	add	r2, r3
 801b340:	693b      	ldr	r3, [r7, #16]
 801b342:	601a      	str	r2, [r3, #0]
 801b344:	697a      	ldr	r2, [r7, #20]
 801b346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b348:	1ad3      	subs	r3, r2, r3
 801b34a:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 801b34c:	697b      	ldr	r3, [r7, #20]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	f47f aee7 	bne.w	801b122 <f_read+0x9a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801b354:	2300      	movs	r3, #0
}
 801b356:	4618      	mov	r0, r3
 801b358:	3754      	adds	r7, #84	; 0x54
 801b35a:	46bd      	mov	sp, r7
 801b35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b360 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801b360:	b580      	push	{r7, lr}
 801b362:	b09a      	sub	sp, #104	; 0x68
 801b364:	af00      	add	r7, sp, #0
 801b366:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801b36e:	4611      	mov	r1, r2
 801b370:	4618      	mov	r0, r3
 801b372:	f7ff fb4f 	bl	801aa14 <validate>
 801b376:	4603      	mov	r3, r0
 801b378:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801b37c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801b380:	2b00      	cmp	r3, #0
 801b382:	f040 8105 	bne.w	801b590 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b38c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b390:	2b00      	cmp	r3, #0
 801b392:	f000 80fd 	beq.w	801b590 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b39c:	b25b      	sxtb	r3, r3
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	da17      	bge.n	801b3d2 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801b3a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b3a4:	7858      	ldrb	r0, [r3, #1]
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	f103 0150 	add.w	r1, r3, #80	; 0x50
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b3b0:	2301      	movs	r3, #1
 801b3b2:	f7fb ff3b 	bl	801722c <disk_write>
 801b3b6:	4603      	mov	r3, r0
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d001      	beq.n	801b3c0 <f_sync+0x60>
 801b3bc:	2301      	movs	r3, #1
 801b3be:	e0e9      	b.n	801b594 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b3c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b3ca:	b2da      	uxtb	r2, r3
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801b3d2:	f7fb fc8d 	bl	8016cf0 <get_fattime>
 801b3d6:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801b3d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b3da:	781b      	ldrb	r3, [r3, #0]
 801b3dc:	2b04      	cmp	r3, #4
 801b3de:	f040 808c 	bne.w	801b4fa <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	4618      	mov	r0, r3
 801b3e6:	f7fc ff1d 	bl	8018224 <fill_first_frag>
 801b3ea:	4603      	mov	r3, r0
 801b3ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 801b3f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d10a      	bne.n	801b40e <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 801b3f8:	6878      	ldr	r0, [r7, #4]
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3fe:	f04f 32ff 	mov.w	r2, #4294967295
 801b402:	4619      	mov	r1, r3
 801b404:	f7fc ff3d 	bl	8018282 <fill_last_frag>
 801b408:	4603      	mov	r3, r0
 801b40a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 801b40e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801b412:	2b00      	cmp	r3, #0
 801b414:	f040 80bc 	bne.w	801b590 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 801b418:	687a      	ldr	r2, [r7, #4]
 801b41a:	f107 0308 	add.w	r3, r7, #8
 801b41e:	4611      	mov	r1, r2
 801b420:	4618      	mov	r0, r3
 801b422:	f7fd febf 	bl	80191a4 <load_obj_dir>
 801b426:	4603      	mov	r3, r0
 801b428:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 801b42c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801b430:	2b00      	cmp	r3, #0
 801b432:	f040 80ad 	bne.w	801b590 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 801b436:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b438:	691b      	ldr	r3, [r3, #16]
 801b43a:	3304      	adds	r3, #4
 801b43c:	781a      	ldrb	r2, [r3, #0]
 801b43e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b440:	691b      	ldr	r3, [r3, #16]
 801b442:	3304      	adds	r3, #4
 801b444:	f042 0220 	orr.w	r2, r2, #32
 801b448:	b2d2      	uxtb	r2, r2
 801b44a:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	79da      	ldrb	r2, [r3, #7]
 801b450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b452:	691b      	ldr	r3, [r3, #16]
 801b454:	3321      	adds	r3, #33	; 0x21
 801b456:	f042 0201 	orr.w	r2, r2, #1
 801b45a:	b2d2      	uxtb	r2, r2
 801b45c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 801b45e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b460:	691b      	ldr	r3, [r3, #16]
 801b462:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	689b      	ldr	r3, [r3, #8]
 801b46a:	4619      	mov	r1, r3
 801b46c:	4610      	mov	r0, r2
 801b46e:	f7fc f84c 	bl	801750a <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 801b472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b474:	691b      	ldr	r3, [r3, #16]
 801b476:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801b480:	4608      	mov	r0, r1
 801b482:	f7fc f86e 	bl	8017562 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 801b486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b488:	691b      	ldr	r3, [r3, #16]
 801b48a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801b494:	4608      	mov	r0, r1
 801b496:	f7fc f864 	bl	8017562 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 801b49a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b49c:	691b      	ldr	r3, [r3, #16]
 801b49e:	330c      	adds	r3, #12
 801b4a0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801b4a2:	4618      	mov	r0, r3
 801b4a4:	f7fc f831 	bl	801750a <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 801b4a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b4aa:	691b      	ldr	r3, [r3, #16]
 801b4ac:	3315      	adds	r3, #21
 801b4ae:	2200      	movs	r2, #0
 801b4b0:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 801b4b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b4b4:	691b      	ldr	r3, [r3, #16]
 801b4b6:	3310      	adds	r3, #16
 801b4b8:	2100      	movs	r1, #0
 801b4ba:	4618      	mov	r0, r3
 801b4bc:	f7fc f825 	bl	801750a <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 801b4c0:	f107 0308 	add.w	r3, r7, #8
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	f7fd fea3 	bl	8019210 <store_xdir>
 801b4ca:	4603      	mov	r3, r0
 801b4cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801b4d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	d15b      	bne.n	801b590 <f_sync+0x230>
							res = sync_fs(fs);
 801b4d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b4da:	4618      	mov	r0, r3
 801b4dc:	f7fc fb26 	bl	8017b2c <sync_fs>
 801b4e0:	4603      	mov	r3, r0
 801b4e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b4ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b4f0:	b2da      	uxtb	r2, r3
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 801b4f8:	e04a      	b.n	801b590 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801b4fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b500:	4619      	mov	r1, r3
 801b502:	4610      	mov	r0, r2
 801b504:	f7fc fae4 	bl	8017ad0 <move_window>
 801b508:	4603      	mov	r3, r0
 801b50a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 801b50e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801b512:	2b00      	cmp	r3, #0
 801b514:	d13c      	bne.n	801b590 <f_sync+0x230>
					dir = fp->dir_ptr;
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b51a:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801b51c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b51e:	330b      	adds	r3, #11
 801b520:	781a      	ldrb	r2, [r3, #0]
 801b522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b524:	330b      	adds	r3, #11
 801b526:	f042 0220 	orr.w	r2, r2, #32
 801b52a:	b2d2      	uxtb	r2, r2
 801b52c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	6818      	ldr	r0, [r3, #0]
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	689b      	ldr	r3, [r3, #8]
 801b536:	461a      	mov	r2, r3
 801b538:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801b53a:	f7fd fa80 	bl	8018a3e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801b53e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b540:	f103 001c 	add.w	r0, r3, #28
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801b54a:	4613      	mov	r3, r2
 801b54c:	4619      	mov	r1, r3
 801b54e:	f7fb ffdc 	bl	801750a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801b552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b554:	3316      	adds	r3, #22
 801b556:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801b558:	4618      	mov	r0, r3
 801b55a:	f7fb ffd6 	bl	801750a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801b55e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b560:	3312      	adds	r3, #18
 801b562:	2100      	movs	r1, #0
 801b564:	4618      	mov	r0, r3
 801b566:	f7fb ffb5 	bl	80174d4 <st_word>
					fs->wflag = 1;
 801b56a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b56c:	2201      	movs	r2, #1
 801b56e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801b570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b572:	4618      	mov	r0, r3
 801b574:	f7fc fada 	bl	8017b2c <sync_fs>
 801b578:	4603      	mov	r3, r0
 801b57a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b588:	b2da      	uxtb	r2, r3
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801b590:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801b594:	4618      	mov	r0, r3
 801b596:	3768      	adds	r7, #104	; 0x68
 801b598:	46bd      	mov	sp, r7
 801b59a:	bd80      	pop	{r7, pc}

0801b59c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801b59c:	b580      	push	{r7, lr}
 801b59e:	b084      	sub	sp, #16
 801b5a0:	af00      	add	r7, sp, #0
 801b5a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801b5a4:	6878      	ldr	r0, [r7, #4]
 801b5a6:	f7ff fedb 	bl	801b360 <f_sync>
 801b5aa:	4603      	mov	r3, r0
 801b5ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801b5ae:	7bfb      	ldrb	r3, [r7, #15]
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d118      	bne.n	801b5e6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	f107 0208 	add.w	r2, r7, #8
 801b5ba:	4611      	mov	r1, r2
 801b5bc:	4618      	mov	r0, r3
 801b5be:	f7ff fa29 	bl	801aa14 <validate>
 801b5c2:	4603      	mov	r3, r0
 801b5c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801b5c6:	7bfb      	ldrb	r3, [r7, #15]
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	d10c      	bne.n	801b5e6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b5d0:	4618      	mov	r0, r3
 801b5d2:	f7fc f9d9 	bl	8017988 <dec_lock>
 801b5d6:	4603      	mov	r3, r0
 801b5d8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801b5da:	7bfb      	ldrb	r3, [r7, #15]
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	d102      	bne.n	801b5e6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	2200      	movs	r2, #0
 801b5e4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801b5e6:	7bfb      	ldrb	r3, [r7, #15]
}
 801b5e8:	4618      	mov	r0, r3
 801b5ea:	3710      	adds	r7, #16
 801b5ec:	46bd      	mov	sp, r7
 801b5ee:	bd80      	pop	{r7, pc}

0801b5f0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801b5f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b5f4:	b0a8      	sub	sp, #160	; 0xa0
 801b5f6:	af00      	add	r7, sp, #0
 801b5f8:	67f8      	str	r0, [r7, #124]	; 0x7c
 801b5fa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801b5fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801b600:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801b604:	4619      	mov	r1, r3
 801b606:	4610      	mov	r0, r2
 801b608:	f7ff fa04 	bl	801aa14 <validate>
 801b60c:	4603      	mov	r3, r0
 801b60e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801b612:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 801b616:	2b00      	cmp	r3, #0
 801b618:	d104      	bne.n	801b624 <f_lseek+0x34>
 801b61a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b61c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b620:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 801b624:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d10f      	bne.n	801b64c <f_lseek+0x5c>
 801b62c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b630:	781b      	ldrb	r3, [r3, #0]
 801b632:	2b04      	cmp	r3, #4
 801b634:	d10a      	bne.n	801b64c <f_lseek+0x5c>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 801b636:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801b638:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b63c:	f04f 32ff 	mov.w	r2, #4294967295
 801b640:	4619      	mov	r1, r3
 801b642:	f7fc fe1e 	bl	8018282 <fill_last_frag>
 801b646:	4603      	mov	r3, r0
 801b648:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801b64c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 801b650:	2b00      	cmp	r3, #0
 801b652:	d002      	beq.n	801b65a <f_lseek+0x6a>
 801b654:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 801b658:	e20a      	b.n	801ba70 <f_lseek+0x480>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 801b65a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b65e:	781b      	ldrb	r3, [r3, #0]
 801b660:	2b04      	cmp	r3, #4
 801b662:	d009      	beq.n	801b678 <f_lseek+0x88>
 801b664:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801b668:	2b01      	cmp	r3, #1
 801b66a:	d305      	bcc.n	801b678 <f_lseek+0x88>
 801b66c:	f04f 32ff 	mov.w	r2, #4294967295
 801b670:	f04f 0300 	mov.w	r3, #0
 801b674:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801b678:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b67a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801b67e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801b682:	4290      	cmp	r0, r2
 801b684:	eb71 0303 	sbcs.w	r3, r1, r3
 801b688:	d20b      	bcs.n	801b6a2 <f_lseek+0xb2>
 801b68a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b68c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b690:	f003 0302 	and.w	r3, r3, #2
 801b694:	2b00      	cmp	r3, #0
 801b696:	d104      	bne.n	801b6a2 <f_lseek+0xb2>
			ofs = fp->obj.objsize;
 801b698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b69a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801b69e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		}
		ifptr = fp->fptr;
 801b6a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b6a4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801b6a8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		fp->fptr = nsect = 0;
 801b6ac:	2300      	movs	r3, #0
 801b6ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b6b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801b6b4:	f04f 0200 	mov.w	r2, #0
 801b6b8:	f04f 0300 	mov.w	r3, #0
 801b6bc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 801b6c0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801b6c4:	4313      	orrs	r3, r2
 801b6c6:	f000 816a 	beq.w	801b99e <f_lseek+0x3ae>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801b6ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b6ce:	895b      	ldrh	r3, [r3, #10]
 801b6d0:	025b      	lsls	r3, r3, #9
 801b6d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (ifptr > 0 &&
 801b6d6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801b6da:	4313      	orrs	r3, r2
 801b6dc:	d05d      	beq.n	801b79a <f_lseek+0x1aa>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801b6de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801b6e2:	1e54      	subs	r4, r2, #1
 801b6e4:	f143 35ff 	adc.w	r5, r3, #4294967295
 801b6e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b6ec:	2200      	movs	r2, #0
 801b6ee:	66bb      	str	r3, [r7, #104]	; 0x68
 801b6f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 801b6f2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801b6f6:	4620      	mov	r0, r4
 801b6f8:	4629      	mov	r1, r5
 801b6fa:	f7e4 fe41 	bl	8000380 <__aeabi_uldivmod>
 801b6fe:	4602      	mov	r2, r0
 801b700:	460b      	mov	r3, r1
 801b702:	4614      	mov	r4, r2
 801b704:	461d      	mov	r5, r3
 801b706:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801b70a:	1e51      	subs	r1, r2, #1
 801b70c:	6639      	str	r1, [r7, #96]	; 0x60
 801b70e:	f143 33ff 	adc.w	r3, r3, #4294967295
 801b712:	667b      	str	r3, [r7, #100]	; 0x64
 801b714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b718:	2200      	movs	r2, #0
 801b71a:	65bb      	str	r3, [r7, #88]	; 0x58
 801b71c:	65fa      	str	r2, [r7, #92]	; 0x5c
 801b71e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801b722:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801b726:	f7e4 fe2b 	bl	8000380 <__aeabi_uldivmod>
 801b72a:	4602      	mov	r2, r0
 801b72c:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 801b72e:	4294      	cmp	r4, r2
 801b730:	eb75 0303 	sbcs.w	r3, r5, r3
 801b734:	d331      	bcc.n	801b79a <f_lseek+0x1aa>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801b736:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801b73a:	f112 3aff 	adds.w	sl, r2, #4294967295
 801b73e:	f143 3bff 	adc.w	fp, r3, #4294967295
 801b742:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b746:	3b01      	subs	r3, #1
 801b748:	2200      	movs	r2, #0
 801b74a:	653b      	str	r3, [r7, #80]	; 0x50
 801b74c:	657a      	str	r2, [r7, #84]	; 0x54
 801b74e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 801b752:	460b      	mov	r3, r1
 801b754:	ea6f 0803 	mvn.w	r8, r3
 801b758:	4613      	mov	r3, r2
 801b75a:	ea6f 0903 	mvn.w	r9, r3
 801b75e:	ea0a 0308 	and.w	r3, sl, r8
 801b762:	64bb      	str	r3, [r7, #72]	; 0x48
 801b764:	ea0b 0309 	and.w	r3, fp, r9
 801b768:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b76a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b76c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801b770:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 801b774:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b776:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801b77a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801b77e:	1a14      	subs	r4, r2, r0
 801b780:	60bc      	str	r4, [r7, #8]
 801b782:	eb63 0301 	sbc.w	r3, r3, r1
 801b786:	60fb      	str	r3, [r7, #12]
 801b788:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801b78c:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
				clst = fp->clust;
 801b790:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801b798:	e02b      	b.n	801b7f2 <f_lseek+0x202>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801b79a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b79c:	689b      	ldr	r3, [r3, #8]
 801b79e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801b7a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d11f      	bne.n	801b7ea <f_lseek+0x1fa>
					clst = create_chain(&fp->obj, 0);
 801b7aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b7ac:	2100      	movs	r1, #0
 801b7ae:	4618      	mov	r0, r3
 801b7b0:	f7fc fe6e 	bl	8018490 <create_chain>
 801b7b4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801b7b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b7bc:	2b01      	cmp	r3, #1
 801b7be:	d105      	bne.n	801b7cc <f_lseek+0x1dc>
 801b7c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b7c2:	2202      	movs	r2, #2
 801b7c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801b7c8:	2302      	movs	r3, #2
 801b7ca:	e151      	b.n	801ba70 <f_lseek+0x480>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801b7cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b7d4:	d105      	bne.n	801b7e2 <f_lseek+0x1f2>
 801b7d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b7d8:	2201      	movs	r2, #1
 801b7da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801b7de:	2301      	movs	r3, #1
 801b7e0:	e146      	b.n	801ba70 <f_lseek+0x480>
					fp->obj.sclust = clst;
 801b7e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801b7e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b7e8:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 801b7ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801b7ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b7f0:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (clst != 0) {
 801b7f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	f000 80d1 	beq.w	801b99e <f_lseek+0x3ae>
				while (ofs > bcs) {						/* Cluster following loop */
 801b7fc:	e082      	b.n	801b904 <f_lseek+0x314>
					ofs -= bcs; fp->fptr += bcs;
 801b7fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b802:	2200      	movs	r2, #0
 801b804:	643b      	str	r3, [r7, #64]	; 0x40
 801b806:	647a      	str	r2, [r7, #68]	; 0x44
 801b808:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801b80c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 801b810:	4621      	mov	r1, r4
 801b812:	1a51      	subs	r1, r2, r1
 801b814:	6039      	str	r1, [r7, #0]
 801b816:	4629      	mov	r1, r5
 801b818:	eb63 0301 	sbc.w	r3, r3, r1
 801b81c:	607b      	str	r3, [r7, #4]
 801b81e:	e9d7 3400 	ldrd	r3, r4, [r7]
 801b822:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 801b826:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b828:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801b82c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801b830:	2000      	movs	r0, #0
 801b832:	63b9      	str	r1, [r7, #56]	; 0x38
 801b834:	63f8      	str	r0, [r7, #60]	; 0x3c
 801b836:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 801b83a:	4621      	mov	r1, r4
 801b83c:	1851      	adds	r1, r2, r1
 801b83e:	6339      	str	r1, [r7, #48]	; 0x30
 801b840:	4629      	mov	r1, r5
 801b842:	414b      	adcs	r3, r1
 801b844:	637b      	str	r3, [r7, #52]	; 0x34
 801b846:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b848:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801b84c:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801b850:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b852:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b856:	f003 0302 	and.w	r3, r3, #2
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d02a      	beq.n	801b8b4 <f_lseek+0x2c4>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 801b85e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b860:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801b864:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b866:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801b86a:	4282      	cmp	r2, r0
 801b86c:	418b      	sbcs	r3, r1
 801b86e:	d20e      	bcs.n	801b88e <f_lseek+0x29e>
							fp->obj.objsize = fp->fptr;
 801b870:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b872:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801b876:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b878:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 801b87c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b87e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b886:	b2db      	uxtb	r3, r3
 801b888:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801b88a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801b88e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b890:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801b894:	4618      	mov	r0, r3
 801b896:	f7fc fdfb 	bl	8018490 <create_chain>
 801b89a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
						if (clst == 0) {				/* Clip file size in case of disk full */
 801b89e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d10e      	bne.n	801b8c4 <f_lseek+0x2d4>
							ofs = 0; break;
 801b8a6:	f04f 0200 	mov.w	r2, #0
 801b8aa:	f04f 0300 	mov.w	r3, #0
 801b8ae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 801b8b2:	e037      	b.n	801b924 <f_lseek+0x334>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801b8b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b8b6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	f7fc f9c4 	bl	8017c48 <get_fat>
 801b8c0:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801b8c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b8cc:	d105      	bne.n	801b8da <f_lseek+0x2ea>
 801b8ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b8d0:	2201      	movs	r2, #1
 801b8d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801b8d6:	2301      	movs	r3, #1
 801b8d8:	e0ca      	b.n	801ba70 <f_lseek+0x480>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801b8da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b8de:	2b01      	cmp	r3, #1
 801b8e0:	d906      	bls.n	801b8f0 <f_lseek+0x300>
 801b8e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b8e6:	69da      	ldr	r2, [r3, #28]
 801b8e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b8ec:	4293      	cmp	r3, r2
 801b8ee:	d305      	bcc.n	801b8fc <f_lseek+0x30c>
 801b8f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b8f2:	2202      	movs	r2, #2
 801b8f4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801b8f8:	2302      	movs	r3, #2
 801b8fa:	e0b9      	b.n	801ba70 <f_lseek+0x480>
					fp->clust = clst;
 801b8fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801b8fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b902:	6413      	str	r3, [r2, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 801b904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b908:	2200      	movs	r2, #0
 801b90a:	62bb      	str	r3, [r7, #40]	; 0x28
 801b90c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b90e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801b912:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 801b916:	4621      	mov	r1, r4
 801b918:	4291      	cmp	r1, r2
 801b91a:	4629      	mov	r1, r5
 801b91c:	eb71 0303 	sbcs.w	r3, r1, r3
 801b920:	f4ff af6d 	bcc.w	801b7fe <f_lseek+0x20e>
				}
				fp->fptr += ofs;
 801b924:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b926:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801b92a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801b92e:	1884      	adds	r4, r0, r2
 801b930:	623c      	str	r4, [r7, #32]
 801b932:	eb41 0303 	adc.w	r3, r1, r3
 801b936:	627b      	str	r3, [r7, #36]	; 0x24
 801b938:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b93a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801b93e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 801b942:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801b946:	f3c2 0308 	ubfx	r3, r2, #0, #9
 801b94a:	61bb      	str	r3, [r7, #24]
 801b94c:	2300      	movs	r3, #0
 801b94e:	61fb      	str	r3, [r7, #28]
 801b950:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801b954:	460b      	mov	r3, r1
 801b956:	4313      	orrs	r3, r2
 801b958:	d021      	beq.n	801b99e <f_lseek+0x3ae>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801b95a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b95e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801b962:	4618      	mov	r0, r3
 801b964:	f7fc f950 	bl	8017c08 <clust2sect>
 801b968:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801b96c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b970:	2b00      	cmp	r3, #0
 801b972:	d105      	bne.n	801b980 <f_lseek+0x390>
 801b974:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b976:	2202      	movs	r2, #2
 801b978:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801b97c:	2302      	movs	r3, #2
 801b97e:	e077      	b.n	801ba70 <f_lseek+0x480>
					nsect += (DWORD)(ofs / SS(fs));
 801b980:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801b984:	f04f 0200 	mov.w	r2, #0
 801b988:	f04f 0300 	mov.w	r3, #0
 801b98c:	0a42      	lsrs	r2, r0, #9
 801b98e:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 801b992:	0a4b      	lsrs	r3, r1, #9
 801b994:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b998:	4413      	add	r3, r2
 801b99a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801b99e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b9a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801b9a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801b9a6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 801b9aa:	4290      	cmp	r0, r2
 801b9ac:	eb71 0303 	sbcs.w	r3, r1, r3
 801b9b0:	d20e      	bcs.n	801b9d0 <f_lseek+0x3e0>
			fp->obj.objsize = fp->fptr;
 801b9b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b9b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801b9b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801b9ba:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 801b9be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b9c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b9c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9c8:	b2da      	uxtb	r2, r3
 801b9ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b9cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801b9d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b9d2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801b9d6:	f3c2 0308 	ubfx	r3, r2, #0, #9
 801b9da:	613b      	str	r3, [r7, #16]
 801b9dc:	2300      	movs	r3, #0
 801b9de:	617b      	str	r3, [r7, #20]
 801b9e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801b9e4:	460b      	mov	r3, r1
 801b9e6:	4313      	orrs	r3, r2
 801b9e8:	d040      	beq.n	801ba6c <f_lseek+0x47c>
 801b9ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b9ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b9f2:	429a      	cmp	r2, r3
 801b9f4:	d03a      	beq.n	801ba6c <f_lseek+0x47c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801b9f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b9f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b9fc:	b25b      	sxtb	r3, r3
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	da1c      	bge.n	801ba3c <f_lseek+0x44c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ba02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ba06:	7858      	ldrb	r0, [r3, #1]
 801ba08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ba0a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 801ba0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ba10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ba12:	2301      	movs	r3, #1
 801ba14:	f7fb fc0a 	bl	801722c <disk_write>
 801ba18:	4603      	mov	r3, r0
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d005      	beq.n	801ba2a <f_lseek+0x43a>
 801ba1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ba20:	2201      	movs	r2, #1
 801ba22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801ba26:	2301      	movs	r3, #1
 801ba28:	e022      	b.n	801ba70 <f_lseek+0x480>
				fp->flag &= (BYTE)~FA_DIRTY;
 801ba2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ba2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ba30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ba34:	b2da      	uxtb	r2, r3
 801ba36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ba38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801ba3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ba40:	7858      	ldrb	r0, [r3, #1]
 801ba42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ba44:	f103 0150 	add.w	r1, r3, #80	; 0x50
 801ba48:	2301      	movs	r3, #1
 801ba4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801ba4e:	f7fb fbcd 	bl	80171ec <disk_read>
 801ba52:	4603      	mov	r3, r0
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d005      	beq.n	801ba64 <f_lseek+0x474>
 801ba58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ba5a:	2201      	movs	r2, #1
 801ba5c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801ba60:	2301      	movs	r3, #1
 801ba62:	e005      	b.n	801ba70 <f_lseek+0x480>
#endif
			fp->sect = nsect;
 801ba64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ba66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801ba6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 801ba6c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 801ba70:	4618      	mov	r0, r3
 801ba72:	37a0      	adds	r7, #160	; 0xa0
 801ba74:	46bd      	mov	sp, r7
 801ba76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801ba7a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801ba7a:	b580      	push	{r7, lr}
 801ba7c:	b098      	sub	sp, #96	; 0x60
 801ba7e:	af00      	add	r7, sp, #0
 801ba80:	6078      	str	r0, [r7, #4]
 801ba82:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801ba84:	f107 0108 	add.w	r1, r7, #8
 801ba88:	1d3b      	adds	r3, r7, #4
 801ba8a:	2200      	movs	r2, #0
 801ba8c:	4618      	mov	r0, r3
 801ba8e:	f7fe fc65 	bl	801a35c <find_volume>
 801ba92:	4603      	mov	r3, r0
 801ba94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801ba98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d11f      	bne.n	801bae0 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801baa0:	687a      	ldr	r2, [r7, #4]
 801baa2:	f107 0308 	add.w	r3, r7, #8
 801baa6:	4611      	mov	r1, r2
 801baa8:	4618      	mov	r0, r3
 801baaa:	f7fe fb05 	bl	801a0b8 <follow_path>
 801baae:	4603      	mov	r3, r0
 801bab0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 801bab4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801bab8:	2b00      	cmp	r3, #0
 801baba:	d111      	bne.n	801bae0 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801babc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801bac0:	b25b      	sxtb	r3, r3
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	da03      	bge.n	801bace <f_stat+0x54>
				res = FR_INVALID_NAME;
 801bac6:	2306      	movs	r3, #6
 801bac8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801bacc:	e008      	b.n	801bae0 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801bace:	683b      	ldr	r3, [r7, #0]
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	d005      	beq.n	801bae0 <f_stat+0x66>
 801bad4:	f107 0308 	add.w	r3, r7, #8
 801bad8:	6839      	ldr	r1, [r7, #0]
 801bada:	4618      	mov	r0, r3
 801badc:	f7fe f848 	bl	8019b70 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801bae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801bae4:	4618      	mov	r0, r3
 801bae6:	3760      	adds	r7, #96	; 0x60
 801bae8:	46bd      	mov	sp, r7
 801baea:	bd80      	pop	{r7, pc}

0801baec <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801baec:	b580      	push	{r7, lr}
 801baee:	b0ba      	sub	sp, #232	; 0xe8
 801baf0:	af00      	add	r7, sp, #0
 801baf2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801baf4:	2300      	movs	r3, #0
 801baf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801bafa:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801bafe:	1d3b      	adds	r3, r7, #4
 801bb00:	2202      	movs	r2, #2
 801bb02:	4618      	mov	r0, r3
 801bb04:	f7fe fc2a 	bl	801a35c <find_volume>
 801bb08:	4603      	mov	r3, r0
 801bb0a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	dj.obj.fs = fs;
 801bb0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bb10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	if (res == FR_OK) {
 801bb14:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	f040 80c3 	bne.w	801bca4 <f_unlink+0x1b8>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801bb1e:	687a      	ldr	r2, [r7, #4]
 801bb20:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801bb24:	4611      	mov	r1, r2
 801bb26:	4618      	mov	r0, r3
 801bb28:	f7fe fac6 	bl	801a0b8 <follow_path>
 801bb2c:	4603      	mov	r3, r0
 801bb2e:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801bb32:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d108      	bne.n	801bb4c <f_unlink+0x60>
 801bb3a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801bb3e:	2102      	movs	r1, #2
 801bb40:	4618      	mov	r0, r3
 801bb42:	f7fb fe15 	bl	8017770 <chk_lock>
 801bb46:	4603      	mov	r3, r0
 801bb48:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801bb4c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 801bb50:	2b00      	cmp	r3, #0
 801bb52:	f040 80a7 	bne.w	801bca4 <f_unlink+0x1b8>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801bb56:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 801bb5a:	b25b      	sxtb	r3, r3
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	da03      	bge.n	801bb68 <f_unlink+0x7c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801bb60:	2306      	movs	r3, #6
 801bb62:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 801bb66:	e008      	b.n	801bb7a <f_unlink+0x8e>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801bb68:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801bb6c:	f003 0301 	and.w	r3, r3, #1
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d002      	beq.n	801bb7a <f_unlink+0x8e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801bb74:	2307      	movs	r3, #7
 801bb76:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				}
			}
			if (res == FR_OK) {
 801bb7a:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d166      	bne.n	801bc50 <f_unlink+0x164>
#if _FS_EXFAT
				obj.fs = fs;
 801bb82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bb84:	60bb      	str	r3, [r7, #8]
				if (fs->fs_type == FS_EXFAT) {
 801bb86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bb88:	781b      	ldrb	r3, [r3, #0]
 801bb8a:	2b04      	cmp	r3, #4
 801bb8c:	d11d      	bne.n	801bbca <f_unlink+0xde>
					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
 801bb8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bb90:	691b      	ldr	r3, [r3, #16]
 801bb92:	3334      	adds	r3, #52	; 0x34
 801bb94:	4618      	mov	r0, r3
 801bb96:	f7fb fb9f 	bl	80172d8 <ld_dword>
 801bb9a:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 801bb9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bba2:	613b      	str	r3, [r7, #16]
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801bba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bba6:	691b      	ldr	r3, [r3, #16]
 801bba8:	3338      	adds	r3, #56	; 0x38
 801bbaa:	4618      	mov	r0, r3
 801bbac:	f7fb fbb7 	bl	801731e <ld_qword>
 801bbb0:	4602      	mov	r2, r0
 801bbb2:	460b      	mov	r3, r1
 801bbb4:	e9c7 2306 	strd	r2, r3, [r7, #24]
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801bbb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bbba:	691b      	ldr	r3, [r3, #16]
 801bbbc:	3321      	adds	r3, #33	; 0x21
 801bbbe:	781b      	ldrb	r3, [r3, #0]
 801bbc0:	f003 0302 	and.w	r3, r3, #2
 801bbc4:	b2db      	uxtb	r3, r3
 801bbc6:	73fb      	strb	r3, [r7, #15]
 801bbc8:	e008      	b.n	801bbdc <f_unlink+0xf0>
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801bbca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bbcc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801bbd0:	4611      	mov	r1, r2
 801bbd2:	4618      	mov	r0, r3
 801bbd4:	f7fc ff14 	bl	8018a00 <ld_clust>
 801bbd8:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801bbdc:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801bbe0:	f003 0310 	and.w	r3, r3, #16
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d033      	beq.n	801bc50 <f_unlink+0x164>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801bbe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bbea:	643b      	str	r3, [r7, #64]	; 0x40
						sdj.obj.sclust = dclst;
 801bbec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bbf0:	64bb      	str	r3, [r7, #72]	; 0x48
#if _FS_EXFAT
						if (fs->fs_type == FS_EXFAT) {
 801bbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bbf4:	781b      	ldrb	r3, [r3, #0]
 801bbf6:	2b04      	cmp	r3, #4
 801bbf8:	d106      	bne.n	801bc08 <f_unlink+0x11c>
							sdj.obj.objsize = obj.objsize;
 801bbfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801bbfe:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
							sdj.obj.stat = obj.stat;
 801bc02:	7bfb      	ldrb	r3, [r7, #15]
 801bc04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						}
#endif
						res = dir_sdi(&sdj, 0);
 801bc08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801bc0c:	2100      	movs	r1, #0
 801bc0e:	4618      	mov	r0, r3
 801bc10:	f7fc fd3f 	bl	8018692 <dir_sdi>
 801bc14:	4603      	mov	r3, r0
 801bc16:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
						if (res == FR_OK) {
 801bc1a:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d116      	bne.n	801bc50 <f_unlink+0x164>
							res = dir_read(&sdj, 0);			/* Read an item */
 801bc22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801bc26:	2100      	movs	r1, #0
 801bc28:	4618      	mov	r0, r3
 801bc2a:	f7fd fbb3 	bl	8019394 <dir_read>
 801bc2e:	4603      	mov	r3, r0
 801bc30:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801bc34:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d102      	bne.n	801bc42 <f_unlink+0x156>
 801bc3c:	2307      	movs	r3, #7
 801bc3e:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801bc42:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 801bc46:	2b04      	cmp	r3, #4
 801bc48:	d102      	bne.n	801bc50 <f_unlink+0x164>
 801bc4a:	2300      	movs	r3, #0
 801bc4c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
						}
					}
				}
			}
			if (res == FR_OK) {
 801bc50:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d125      	bne.n	801bca4 <f_unlink+0x1b8>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801bc58:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801bc5c:	4618      	mov	r0, r3
 801bc5e:	f7fd ff2f 	bl	8019ac0 <dir_remove>
 801bc62:	4603      	mov	r3, r0
 801bc64:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801bc68:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	d10e      	bne.n	801bc8e <f_unlink+0x1a2>
 801bc70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d00a      	beq.n	801bc8e <f_unlink+0x1a2>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
 801bc78:	f107 0308 	add.w	r3, r7, #8
 801bc7c:	2200      	movs	r2, #0
 801bc7e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 801bc82:	4618      	mov	r0, r3
 801bc84:	f7fc fb2e 	bl	80182e4 <remove_chain>
 801bc88:	4603      	mov	r3, r0
 801bc8a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801bc8e:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d106      	bne.n	801bca4 <f_unlink+0x1b8>
 801bc96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bc98:	4618      	mov	r0, r3
 801bc9a:	f7fb ff47 	bl	8017b2c <sync_fs>
 801bc9e:	4603      	mov	r3, r0
 801bca0:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801bca4:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
}
 801bca8:	4618      	mov	r0, r3
 801bcaa:	37e8      	adds	r7, #232	; 0xe8
 801bcac:	46bd      	mov	sp, r7
 801bcae:	bd80      	pop	{r7, pc}

0801bcb0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801bcb0:	b480      	push	{r7}
 801bcb2:	b087      	sub	sp, #28
 801bcb4:	af00      	add	r7, sp, #0
 801bcb6:	60f8      	str	r0, [r7, #12]
 801bcb8:	60b9      	str	r1, [r7, #8]
 801bcba:	4613      	mov	r3, r2
 801bcbc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801bcbe:	2301      	movs	r3, #1
 801bcc0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801bcc2:	2300      	movs	r3, #0
 801bcc4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801bcc6:	4b1f      	ldr	r3, [pc, #124]	; (801bd44 <FATFS_LinkDriverEx+0x94>)
 801bcc8:	7a5b      	ldrb	r3, [r3, #9]
 801bcca:	b2db      	uxtb	r3, r3
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d131      	bne.n	801bd34 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801bcd0:	4b1c      	ldr	r3, [pc, #112]	; (801bd44 <FATFS_LinkDriverEx+0x94>)
 801bcd2:	7a5b      	ldrb	r3, [r3, #9]
 801bcd4:	b2db      	uxtb	r3, r3
 801bcd6:	461a      	mov	r2, r3
 801bcd8:	4b1a      	ldr	r3, [pc, #104]	; (801bd44 <FATFS_LinkDriverEx+0x94>)
 801bcda:	2100      	movs	r1, #0
 801bcdc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801bcde:	4b19      	ldr	r3, [pc, #100]	; (801bd44 <FATFS_LinkDriverEx+0x94>)
 801bce0:	7a5b      	ldrb	r3, [r3, #9]
 801bce2:	b2db      	uxtb	r3, r3
 801bce4:	4a17      	ldr	r2, [pc, #92]	; (801bd44 <FATFS_LinkDriverEx+0x94>)
 801bce6:	009b      	lsls	r3, r3, #2
 801bce8:	4413      	add	r3, r2
 801bcea:	68fa      	ldr	r2, [r7, #12]
 801bcec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801bcee:	4b15      	ldr	r3, [pc, #84]	; (801bd44 <FATFS_LinkDriverEx+0x94>)
 801bcf0:	7a5b      	ldrb	r3, [r3, #9]
 801bcf2:	b2db      	uxtb	r3, r3
 801bcf4:	461a      	mov	r2, r3
 801bcf6:	4b13      	ldr	r3, [pc, #76]	; (801bd44 <FATFS_LinkDriverEx+0x94>)
 801bcf8:	4413      	add	r3, r2
 801bcfa:	79fa      	ldrb	r2, [r7, #7]
 801bcfc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801bcfe:	4b11      	ldr	r3, [pc, #68]	; (801bd44 <FATFS_LinkDriverEx+0x94>)
 801bd00:	7a5b      	ldrb	r3, [r3, #9]
 801bd02:	b2db      	uxtb	r3, r3
 801bd04:	1c5a      	adds	r2, r3, #1
 801bd06:	b2d1      	uxtb	r1, r2
 801bd08:	4a0e      	ldr	r2, [pc, #56]	; (801bd44 <FATFS_LinkDriverEx+0x94>)
 801bd0a:	7251      	strb	r1, [r2, #9]
 801bd0c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801bd0e:	7dbb      	ldrb	r3, [r7, #22]
 801bd10:	3330      	adds	r3, #48	; 0x30
 801bd12:	b2da      	uxtb	r2, r3
 801bd14:	68bb      	ldr	r3, [r7, #8]
 801bd16:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801bd18:	68bb      	ldr	r3, [r7, #8]
 801bd1a:	3301      	adds	r3, #1
 801bd1c:	223a      	movs	r2, #58	; 0x3a
 801bd1e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801bd20:	68bb      	ldr	r3, [r7, #8]
 801bd22:	3302      	adds	r3, #2
 801bd24:	222f      	movs	r2, #47	; 0x2f
 801bd26:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801bd28:	68bb      	ldr	r3, [r7, #8]
 801bd2a:	3303      	adds	r3, #3
 801bd2c:	2200      	movs	r2, #0
 801bd2e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801bd30:	2300      	movs	r3, #0
 801bd32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801bd34:	7dfb      	ldrb	r3, [r7, #23]
}
 801bd36:	4618      	mov	r0, r3
 801bd38:	371c      	adds	r7, #28
 801bd3a:	46bd      	mov	sp, r7
 801bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd40:	4770      	bx	lr
 801bd42:	bf00      	nop
 801bd44:	240017f8 	.word	0x240017f8

0801bd48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801bd48:	b580      	push	{r7, lr}
 801bd4a:	b082      	sub	sp, #8
 801bd4c:	af00      	add	r7, sp, #0
 801bd4e:	6078      	str	r0, [r7, #4]
 801bd50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801bd52:	2200      	movs	r2, #0
 801bd54:	6839      	ldr	r1, [r7, #0]
 801bd56:	6878      	ldr	r0, [r7, #4]
 801bd58:	f7ff ffaa 	bl	801bcb0 <FATFS_LinkDriverEx>
 801bd5c:	4603      	mov	r3, r0
}
 801bd5e:	4618      	mov	r0, r3
 801bd60:	3708      	adds	r7, #8
 801bd62:	46bd      	mov	sp, r7
 801bd64:	bd80      	pop	{r7, pc}
	...

0801bd68 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 801bd68:	b480      	push	{r7}
 801bd6a:	b085      	sub	sp, #20
 801bd6c:	af00      	add	r7, sp, #0
 801bd6e:	6078      	str	r0, [r7, #4]
 801bd70:	460b      	mov	r3, r1
 801bd72:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 801bd74:	2300      	movs	r3, #0
 801bd76:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 801bd78:	2301      	movs	r3, #1
 801bd7a:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 801bd7c:	4b15      	ldr	r3, [pc, #84]	; (801bdd4 <FATFS_UnLinkDriverEx+0x6c>)
 801bd7e:	7a5b      	ldrb	r3, [r3, #9]
 801bd80:	b2db      	uxtb	r3, r3
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d01e      	beq.n	801bdc4 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	781b      	ldrb	r3, [r3, #0]
 801bd8a:	3b30      	subs	r3, #48	; 0x30
 801bd8c:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 801bd8e:	7bbb      	ldrb	r3, [r7, #14]
 801bd90:	4a10      	ldr	r2, [pc, #64]	; (801bdd4 <FATFS_UnLinkDriverEx+0x6c>)
 801bd92:	009b      	lsls	r3, r3, #2
 801bd94:	4413      	add	r3, r2
 801bd96:	685b      	ldr	r3, [r3, #4]
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	d013      	beq.n	801bdc4 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 801bd9c:	7bbb      	ldrb	r3, [r7, #14]
 801bd9e:	4a0d      	ldr	r2, [pc, #52]	; (801bdd4 <FATFS_UnLinkDriverEx+0x6c>)
 801bda0:	009b      	lsls	r3, r3, #2
 801bda2:	4413      	add	r3, r2
 801bda4:	2200      	movs	r2, #0
 801bda6:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 801bda8:	7bbb      	ldrb	r3, [r7, #14]
 801bdaa:	4a0a      	ldr	r2, [pc, #40]	; (801bdd4 <FATFS_UnLinkDriverEx+0x6c>)
 801bdac:	4413      	add	r3, r2
 801bdae:	2200      	movs	r2, #0
 801bdb0:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 801bdb2:	4b08      	ldr	r3, [pc, #32]	; (801bdd4 <FATFS_UnLinkDriverEx+0x6c>)
 801bdb4:	7a5b      	ldrb	r3, [r3, #9]
 801bdb6:	b2db      	uxtb	r3, r3
 801bdb8:	3b01      	subs	r3, #1
 801bdba:	b2da      	uxtb	r2, r3
 801bdbc:	4b05      	ldr	r3, [pc, #20]	; (801bdd4 <FATFS_UnLinkDriverEx+0x6c>)
 801bdbe:	725a      	strb	r2, [r3, #9]
      ret = 0;
 801bdc0:	2300      	movs	r3, #0
 801bdc2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801bdc4:	7bfb      	ldrb	r3, [r7, #15]
}
 801bdc6:	4618      	mov	r0, r3
 801bdc8:	3714      	adds	r7, #20
 801bdca:	46bd      	mov	sp, r7
 801bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdd0:	4770      	bx	lr
 801bdd2:	bf00      	nop
 801bdd4:	240017f8 	.word	0x240017f8

0801bdd8 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 801bdd8:	b580      	push	{r7, lr}
 801bdda:	b082      	sub	sp, #8
 801bddc:	af00      	add	r7, sp, #0
 801bdde:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 801bde0:	2100      	movs	r1, #0
 801bde2:	6878      	ldr	r0, [r7, #4]
 801bde4:	f7ff ffc0 	bl	801bd68 <FATFS_UnLinkDriverEx>
 801bde8:	4603      	mov	r3, r0
}
 801bdea:	4618      	mov	r0, r3
 801bdec:	3708      	adds	r7, #8
 801bdee:	46bd      	mov	sp, r7
 801bdf0:	bd80      	pop	{r7, pc}
	...

0801bdf4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801bdf4:	b480      	push	{r7}
 801bdf6:	b085      	sub	sp, #20
 801bdf8:	af00      	add	r7, sp, #0
 801bdfa:	4603      	mov	r3, r0
 801bdfc:	6039      	str	r1, [r7, #0]
 801bdfe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801be00:	88fb      	ldrh	r3, [r7, #6]
 801be02:	2b7f      	cmp	r3, #127	; 0x7f
 801be04:	d802      	bhi.n	801be0c <ff_convert+0x18>
		c = chr;
 801be06:	88fb      	ldrh	r3, [r7, #6]
 801be08:	81fb      	strh	r3, [r7, #14]
 801be0a:	e025      	b.n	801be58 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801be0c:	683b      	ldr	r3, [r7, #0]
 801be0e:	2b00      	cmp	r3, #0
 801be10:	d00b      	beq.n	801be2a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801be12:	88fb      	ldrh	r3, [r7, #6]
 801be14:	2bff      	cmp	r3, #255	; 0xff
 801be16:	d805      	bhi.n	801be24 <ff_convert+0x30>
 801be18:	88fb      	ldrh	r3, [r7, #6]
 801be1a:	3b80      	subs	r3, #128	; 0x80
 801be1c:	4a12      	ldr	r2, [pc, #72]	; (801be68 <ff_convert+0x74>)
 801be1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801be22:	e000      	b.n	801be26 <ff_convert+0x32>
 801be24:	2300      	movs	r3, #0
 801be26:	81fb      	strh	r3, [r7, #14]
 801be28:	e016      	b.n	801be58 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801be2a:	2300      	movs	r3, #0
 801be2c:	81fb      	strh	r3, [r7, #14]
 801be2e:	e009      	b.n	801be44 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801be30:	89fb      	ldrh	r3, [r7, #14]
 801be32:	4a0d      	ldr	r2, [pc, #52]	; (801be68 <ff_convert+0x74>)
 801be34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801be38:	88fa      	ldrh	r2, [r7, #6]
 801be3a:	429a      	cmp	r2, r3
 801be3c:	d006      	beq.n	801be4c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801be3e:	89fb      	ldrh	r3, [r7, #14]
 801be40:	3301      	adds	r3, #1
 801be42:	81fb      	strh	r3, [r7, #14]
 801be44:	89fb      	ldrh	r3, [r7, #14]
 801be46:	2b7f      	cmp	r3, #127	; 0x7f
 801be48:	d9f2      	bls.n	801be30 <ff_convert+0x3c>
 801be4a:	e000      	b.n	801be4e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801be4c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801be4e:	89fb      	ldrh	r3, [r7, #14]
 801be50:	3380      	adds	r3, #128	; 0x80
 801be52:	b29b      	uxth	r3, r3
 801be54:	b2db      	uxtb	r3, r3
 801be56:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801be58:	89fb      	ldrh	r3, [r7, #14]
}
 801be5a:	4618      	mov	r0, r3
 801be5c:	3714      	adds	r7, #20
 801be5e:	46bd      	mov	sp, r7
 801be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be64:	4770      	bx	lr
 801be66:	bf00      	nop
 801be68:	0801e144 	.word	0x0801e144

0801be6c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801be6c:	b480      	push	{r7}
 801be6e:	b087      	sub	sp, #28
 801be70:	af00      	add	r7, sp, #0
 801be72:	4603      	mov	r3, r0
 801be74:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801be76:	88fb      	ldrh	r3, [r7, #6]
 801be78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801be7c:	d201      	bcs.n	801be82 <ff_wtoupper+0x16>
 801be7e:	4b3e      	ldr	r3, [pc, #248]	; (801bf78 <ff_wtoupper+0x10c>)
 801be80:	e000      	b.n	801be84 <ff_wtoupper+0x18>
 801be82:	4b3e      	ldr	r3, [pc, #248]	; (801bf7c <ff_wtoupper+0x110>)
 801be84:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801be86:	697b      	ldr	r3, [r7, #20]
 801be88:	1c9a      	adds	r2, r3, #2
 801be8a:	617a      	str	r2, [r7, #20]
 801be8c:	881b      	ldrh	r3, [r3, #0]
 801be8e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801be90:	8a7b      	ldrh	r3, [r7, #18]
 801be92:	2b00      	cmp	r3, #0
 801be94:	d068      	beq.n	801bf68 <ff_wtoupper+0xfc>
 801be96:	88fa      	ldrh	r2, [r7, #6]
 801be98:	8a7b      	ldrh	r3, [r7, #18]
 801be9a:	429a      	cmp	r2, r3
 801be9c:	d364      	bcc.n	801bf68 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801be9e:	697b      	ldr	r3, [r7, #20]
 801bea0:	1c9a      	adds	r2, r3, #2
 801bea2:	617a      	str	r2, [r7, #20]
 801bea4:	881b      	ldrh	r3, [r3, #0]
 801bea6:	823b      	strh	r3, [r7, #16]
 801bea8:	8a3b      	ldrh	r3, [r7, #16]
 801beaa:	0a1b      	lsrs	r3, r3, #8
 801beac:	81fb      	strh	r3, [r7, #14]
 801beae:	8a3b      	ldrh	r3, [r7, #16]
 801beb0:	b2db      	uxtb	r3, r3
 801beb2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801beb4:	88fa      	ldrh	r2, [r7, #6]
 801beb6:	8a79      	ldrh	r1, [r7, #18]
 801beb8:	8a3b      	ldrh	r3, [r7, #16]
 801beba:	440b      	add	r3, r1
 801bebc:	429a      	cmp	r2, r3
 801bebe:	da49      	bge.n	801bf54 <ff_wtoupper+0xe8>
			switch (cmd) {
 801bec0:	89fb      	ldrh	r3, [r7, #14]
 801bec2:	2b08      	cmp	r3, #8
 801bec4:	d84f      	bhi.n	801bf66 <ff_wtoupper+0xfa>
 801bec6:	a201      	add	r2, pc, #4	; (adr r2, 801becc <ff_wtoupper+0x60>)
 801bec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801becc:	0801bef1 	.word	0x0801bef1
 801bed0:	0801bf03 	.word	0x0801bf03
 801bed4:	0801bf19 	.word	0x0801bf19
 801bed8:	0801bf21 	.word	0x0801bf21
 801bedc:	0801bf29 	.word	0x0801bf29
 801bee0:	0801bf31 	.word	0x0801bf31
 801bee4:	0801bf39 	.word	0x0801bf39
 801bee8:	0801bf41 	.word	0x0801bf41
 801beec:	0801bf49 	.word	0x0801bf49
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801bef0:	88fa      	ldrh	r2, [r7, #6]
 801bef2:	8a7b      	ldrh	r3, [r7, #18]
 801bef4:	1ad3      	subs	r3, r2, r3
 801bef6:	005b      	lsls	r3, r3, #1
 801bef8:	697a      	ldr	r2, [r7, #20]
 801befa:	4413      	add	r3, r2
 801befc:	881b      	ldrh	r3, [r3, #0]
 801befe:	80fb      	strh	r3, [r7, #6]
 801bf00:	e027      	b.n	801bf52 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801bf02:	88fa      	ldrh	r2, [r7, #6]
 801bf04:	8a7b      	ldrh	r3, [r7, #18]
 801bf06:	1ad3      	subs	r3, r2, r3
 801bf08:	b29b      	uxth	r3, r3
 801bf0a:	f003 0301 	and.w	r3, r3, #1
 801bf0e:	b29b      	uxth	r3, r3
 801bf10:	88fa      	ldrh	r2, [r7, #6]
 801bf12:	1ad3      	subs	r3, r2, r3
 801bf14:	80fb      	strh	r3, [r7, #6]
 801bf16:	e01c      	b.n	801bf52 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801bf18:	88fb      	ldrh	r3, [r7, #6]
 801bf1a:	3b10      	subs	r3, #16
 801bf1c:	80fb      	strh	r3, [r7, #6]
 801bf1e:	e018      	b.n	801bf52 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801bf20:	88fb      	ldrh	r3, [r7, #6]
 801bf22:	3b20      	subs	r3, #32
 801bf24:	80fb      	strh	r3, [r7, #6]
 801bf26:	e014      	b.n	801bf52 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801bf28:	88fb      	ldrh	r3, [r7, #6]
 801bf2a:	3b30      	subs	r3, #48	; 0x30
 801bf2c:	80fb      	strh	r3, [r7, #6]
 801bf2e:	e010      	b.n	801bf52 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801bf30:	88fb      	ldrh	r3, [r7, #6]
 801bf32:	3b1a      	subs	r3, #26
 801bf34:	80fb      	strh	r3, [r7, #6]
 801bf36:	e00c      	b.n	801bf52 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801bf38:	88fb      	ldrh	r3, [r7, #6]
 801bf3a:	3308      	adds	r3, #8
 801bf3c:	80fb      	strh	r3, [r7, #6]
 801bf3e:	e008      	b.n	801bf52 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801bf40:	88fb      	ldrh	r3, [r7, #6]
 801bf42:	3b50      	subs	r3, #80	; 0x50
 801bf44:	80fb      	strh	r3, [r7, #6]
 801bf46:	e004      	b.n	801bf52 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801bf48:	88fb      	ldrh	r3, [r7, #6]
 801bf4a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801bf4e:	80fb      	strh	r3, [r7, #6]
 801bf50:	bf00      	nop
			}
			break;
 801bf52:	e008      	b.n	801bf66 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801bf54:	89fb      	ldrh	r3, [r7, #14]
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	d195      	bne.n	801be86 <ff_wtoupper+0x1a>
 801bf5a:	8a3b      	ldrh	r3, [r7, #16]
 801bf5c:	005b      	lsls	r3, r3, #1
 801bf5e:	697a      	ldr	r2, [r7, #20]
 801bf60:	4413      	add	r3, r2
 801bf62:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801bf64:	e78f      	b.n	801be86 <ff_wtoupper+0x1a>
			break;
 801bf66:	bf00      	nop
	}

	return chr;
 801bf68:	88fb      	ldrh	r3, [r7, #6]
}
 801bf6a:	4618      	mov	r0, r3
 801bf6c:	371c      	adds	r7, #28
 801bf6e:	46bd      	mov	sp, r7
 801bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf74:	4770      	bx	lr
 801bf76:	bf00      	nop
 801bf78:	0801e244 	.word	0x0801e244
 801bf7c:	0801e438 	.word	0x0801e438

0801bf80 <_ZN10MathExtras7Vector3C1Efff>:
        z_((float)vector.z_)
    {
    }

    /// Construct from coordinates.
    Vector3(float x, float y, float z) noexcept :
 801bf80:	b480      	push	{r7}
 801bf82:	b085      	sub	sp, #20
 801bf84:	af00      	add	r7, sp, #0
 801bf86:	60f8      	str	r0, [r7, #12]
 801bf88:	ed87 0a02 	vstr	s0, [r7, #8]
 801bf8c:	edc7 0a01 	vstr	s1, [r7, #4]
 801bf90:	ed87 1a00 	vstr	s2, [r7]
        x_(x),
 801bf94:	68fb      	ldr	r3, [r7, #12]
 801bf96:	68ba      	ldr	r2, [r7, #8]
 801bf98:	601a      	str	r2, [r3, #0]
        y_(y),
 801bf9a:	68fb      	ldr	r3, [r7, #12]
 801bf9c:	687a      	ldr	r2, [r7, #4]
 801bf9e:	605a      	str	r2, [r3, #4]
        z_(z)
 801bfa0:	68fb      	ldr	r3, [r7, #12]
 801bfa2:	683a      	ldr	r2, [r7, #0]
 801bfa4:	609a      	str	r2, [r3, #8]
    {
    }
 801bfa6:	68fb      	ldr	r3, [r7, #12]
 801bfa8:	4618      	mov	r0, r3
 801bfaa:	3714      	adds	r7, #20
 801bfac:	46bd      	mov	sp, r7
 801bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfb2:	4770      	bx	lr

0801bfb4 <_ZN10MathExtras5ColorC1Efff>:
        a_(a)
    {
    }

    /// Construct from RGB values and set alpha fully opaque.
    Color(float r, float g, float b) noexcept :
 801bfb4:	b480      	push	{r7}
 801bfb6:	b085      	sub	sp, #20
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	60f8      	str	r0, [r7, #12]
 801bfbc:	ed87 0a02 	vstr	s0, [r7, #8]
 801bfc0:	edc7 0a01 	vstr	s1, [r7, #4]
 801bfc4:	ed87 1a00 	vstr	s2, [r7]
        r_(r),
 801bfc8:	68fb      	ldr	r3, [r7, #12]
 801bfca:	68ba      	ldr	r2, [r7, #8]
 801bfcc:	601a      	str	r2, [r3, #0]
        g_(g),
 801bfce:	68fb      	ldr	r3, [r7, #12]
 801bfd0:	687a      	ldr	r2, [r7, #4]
 801bfd2:	605a      	str	r2, [r3, #4]
        b_(b),
 801bfd4:	68fb      	ldr	r3, [r7, #12]
 801bfd6:	683a      	ldr	r2, [r7, #0]
 801bfd8:	609a      	str	r2, [r3, #8]
        a_(1.0f)
 801bfda:	68fb      	ldr	r3, [r7, #12]
 801bfdc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801bfe0:	60da      	str	r2, [r3, #12]
    {
    }
 801bfe2:	68fb      	ldr	r3, [r7, #12]
 801bfe4:	4618      	mov	r0, r3
 801bfe6:	3714      	adds	r7, #20
 801bfe8:	46bd      	mov	sp, r7
 801bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfee:	4770      	bx	lr

0801bff0 <_ZN10MathExtras5ColorC1Effff>:

    /// Construct from RGBA values.
    Color(float r, float g, float b, float a) noexcept :
 801bff0:	b480      	push	{r7}
 801bff2:	b087      	sub	sp, #28
 801bff4:	af00      	add	r7, sp, #0
 801bff6:	6178      	str	r0, [r7, #20]
 801bff8:	ed87 0a04 	vstr	s0, [r7, #16]
 801bffc:	edc7 0a03 	vstr	s1, [r7, #12]
 801c000:	ed87 1a02 	vstr	s2, [r7, #8]
 801c004:	edc7 1a01 	vstr	s3, [r7, #4]
        r_(r),
 801c008:	697b      	ldr	r3, [r7, #20]
 801c00a:	693a      	ldr	r2, [r7, #16]
 801c00c:	601a      	str	r2, [r3, #0]
        g_(g),
 801c00e:	697b      	ldr	r3, [r7, #20]
 801c010:	68fa      	ldr	r2, [r7, #12]
 801c012:	605a      	str	r2, [r3, #4]
        b_(b),
 801c014:	697b      	ldr	r3, [r7, #20]
 801c016:	68ba      	ldr	r2, [r7, #8]
 801c018:	609a      	str	r2, [r3, #8]
        a_(a)
 801c01a:	697b      	ldr	r3, [r7, #20]
 801c01c:	687a      	ldr	r2, [r7, #4]
 801c01e:	60da      	str	r2, [r3, #12]
    {
    }
 801c020:	697b      	ldr	r3, [r7, #20]
 801c022:	4618      	mov	r0, r3
 801c024:	371c      	adds	r7, #28
 801c026:	46bd      	mov	sp, r7
 801c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c02c:	4770      	bx	lr

0801c02e <_ZNK10MathExtras5Color4LerpERKS0_f>:
    if (invertAlpha)
        a_ = 1.0f - a_;
}

Color Color::Lerp(const Color& rhs, float t) const
{
 801c02e:	b590      	push	{r4, r7, lr}
 801c030:	b093      	sub	sp, #76	; 0x4c
 801c032:	af00      	add	r7, sp, #0
 801c034:	61f8      	str	r0, [r7, #28]
 801c036:	61b9      	str	r1, [r7, #24]
 801c038:	ed87 0a05 	vstr	s0, [r7, #20]
    float invT = 1.0f - t;
 801c03c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c040:	edd7 7a05 	vldr	s15, [r7, #20]
 801c044:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c048:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    return Color(
        r_ * invT + rhs.r_ * t,
 801c04c:	69fb      	ldr	r3, [r7, #28]
 801c04e:	ed93 7a00 	vldr	s14, [r3]
 801c052:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801c056:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c05a:	69bb      	ldr	r3, [r7, #24]
 801c05c:	edd3 6a00 	vldr	s13, [r3]
 801c060:	edd7 7a05 	vldr	s15, [r7, #20]
 801c064:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return Color(
 801c068:	ee37 6a27 	vadd.f32	s12, s14, s15
        g_ * invT + rhs.g_ * t,
 801c06c:	69fb      	ldr	r3, [r7, #28]
 801c06e:	ed93 7a01 	vldr	s14, [r3, #4]
 801c072:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801c076:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c07a:	69bb      	ldr	r3, [r7, #24]
 801c07c:	edd3 6a01 	vldr	s13, [r3, #4]
 801c080:	edd7 7a05 	vldr	s15, [r7, #20]
 801c084:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return Color(
 801c088:	ee77 5a27 	vadd.f32	s11, s14, s15
        b_ * invT + rhs.b_ * t,
 801c08c:	69fb      	ldr	r3, [r7, #28]
 801c08e:	ed93 7a02 	vldr	s14, [r3, #8]
 801c092:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801c096:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c09a:	69bb      	ldr	r3, [r7, #24]
 801c09c:	edd3 6a02 	vldr	s13, [r3, #8]
 801c0a0:	edd7 7a05 	vldr	s15, [r7, #20]
 801c0a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return Color(
 801c0a8:	ee37 5a27 	vadd.f32	s10, s14, s15
        a_ * invT + rhs.a_ * t
 801c0ac:	69fb      	ldr	r3, [r7, #28]
 801c0ae:	ed93 7a03 	vldr	s14, [r3, #12]
 801c0b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801c0b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c0ba:	69bb      	ldr	r3, [r7, #24]
 801c0bc:	edd3 6a03 	vldr	s13, [r3, #12]
 801c0c0:	edd7 7a05 	vldr	s15, [r7, #20]
 801c0c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return Color(
 801c0c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c0cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c0d0:	eef0 1a67 	vmov.f32	s3, s15
 801c0d4:	eeb0 1a45 	vmov.f32	s2, s10
 801c0d8:	eef0 0a65 	vmov.f32	s1, s11
 801c0dc:	eeb0 0a46 	vmov.f32	s0, s12
 801c0e0:	4618      	mov	r0, r3
 801c0e2:	f7ff ff85 	bl	801bff0 <_ZN10MathExtras5ColorC1Effff>
    );
 801c0e6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 801c0ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c0ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c0f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801c0f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c0f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c0f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0fc:	ee06 0a10 	vmov	s12, r0
 801c100:	ee06 1a90 	vmov	s13, r1
 801c104:	ee07 2a10 	vmov	s14, r2
 801c108:	ee07 3a90 	vmov	s15, r3
}
 801c10c:	eeb0 0a46 	vmov.f32	s0, s12
 801c110:	eef0 0a66 	vmov.f32	s1, s13
 801c114:	eeb0 1a47 	vmov.f32	s2, s14
 801c118:	eef0 1a67 	vmov.f32	s3, s15
 801c11c:	374c      	adds	r7, #76	; 0x4c
 801c11e:	46bd      	mov	sp, r7
 801c120:	bd90      	pop	{r4, r7, pc}
	...

0801c124 <_Z41__static_initialization_and_destruction_0ii>:





}
 801c124:	b580      	push	{r7, lr}
 801c126:	b082      	sub	sp, #8
 801c128:	af00      	add	r7, sp, #0
 801c12a:	6078      	str	r0, [r7, #4]
 801c12c:	6039      	str	r1, [r7, #0]
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	2b01      	cmp	r3, #1
 801c132:	d163      	bne.n	801c1fc <_Z41__static_initialization_and_destruction_0ii+0xd8>
 801c134:	683b      	ldr	r3, [r7, #0]
 801c136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c13a:	4293      	cmp	r3, r2
 801c13c:	d15e      	bne.n	801c1fc <_Z41__static_initialization_and_destruction_0ii+0xd8>
const Color Color::WHITE;
 801c13e:	4831      	ldr	r0, [pc, #196]	; (801c204 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 801c140:	f7e4 fa9c 	bl	800067c <_ZN10MathExtras5ColorC1Ev>
const Color Color::GRAY(0.5f, 0.5f, 0.5f);
 801c144:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 801c148:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 801c14c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801c150:	482d      	ldr	r0, [pc, #180]	; (801c208 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 801c152:	f7ff ff2f 	bl	801bfb4 <_ZN10MathExtras5ColorC1Efff>
const Color Color::BLACK(0.0f, 0.0f, 0.0f);
 801c156:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c15a:	eddf 0a2c 	vldr	s1, [pc, #176]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c15e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c162:	482b      	ldr	r0, [pc, #172]	; (801c210 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 801c164:	f7ff ff26 	bl	801bfb4 <_ZN10MathExtras5ColorC1Efff>
const Color Color::RED(1.0f, 0.0f, 0.0f);
 801c168:	ed9f 1a28 	vldr	s2, [pc, #160]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c16c:	eddf 0a27 	vldr	s1, [pc, #156]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c170:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c174:	4827      	ldr	r0, [pc, #156]	; (801c214 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 801c176:	f7ff ff1d 	bl	801bfb4 <_ZN10MathExtras5ColorC1Efff>
const Color Color::GREEN(0.0f, 1.0f, 0.0f);
 801c17a:	ed9f 1a24 	vldr	s2, [pc, #144]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c17e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801c182:	ed9f 0a22 	vldr	s0, [pc, #136]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c186:	4824      	ldr	r0, [pc, #144]	; (801c218 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 801c188:	f7ff ff14 	bl	801bfb4 <_ZN10MathExtras5ColorC1Efff>
const Color Color::BLUE(0.0f, 0.0f, 1.0f);
 801c18c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801c190:	eddf 0a1e 	vldr	s1, [pc, #120]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c194:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c198:	4820      	ldr	r0, [pc, #128]	; (801c21c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 801c19a:	f7ff ff0b 	bl	801bfb4 <_ZN10MathExtras5ColorC1Efff>
const Color Color::CYAN(0.0f, 1.0f, 1.0f);
 801c19e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801c1a2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801c1a6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c1aa:	481d      	ldr	r0, [pc, #116]	; (801c220 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 801c1ac:	f7ff ff02 	bl	801bfb4 <_ZN10MathExtras5ColorC1Efff>
const Color Color::MAGENTA(1.0f, 0.0f, 1.0f);
 801c1b0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801c1b4:	eddf 0a15 	vldr	s1, [pc, #84]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c1b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c1bc:	4819      	ldr	r0, [pc, #100]	; (801c224 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 801c1be:	f7ff fef9 	bl	801bfb4 <_ZN10MathExtras5ColorC1Efff>
const Color Color::YELLOW(1.0f, 1.0f, 0.0f);
 801c1c2:	ed9f 1a12 	vldr	s2, [pc, #72]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c1c6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801c1ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c1ce:	4816      	ldr	r0, [pc, #88]	; (801c228 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 801c1d0:	f7ff fef0 	bl	801bfb4 <_ZN10MathExtras5ColorC1Efff>
const Color Color::ORANGE(1.0f, 0.5f, 0.0f);
 801c1d4:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c1d8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 801c1dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c1e0:	4812      	ldr	r0, [pc, #72]	; (801c22c <_Z41__static_initialization_and_destruction_0ii+0x108>)
 801c1e2:	f7ff fee7 	bl	801bfb4 <_ZN10MathExtras5ColorC1Efff>
const Color Color::TRANSPARENT_BLACK(0.0f, 0.0f, 0.0f, 0.0f);
 801c1e6:	eddf 1a09 	vldr	s3, [pc, #36]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c1ea:	ed9f 1a08 	vldr	s2, [pc, #32]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c1ee:	eddf 0a07 	vldr	s1, [pc, #28]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c1f2:	ed9f 0a06 	vldr	s0, [pc, #24]	; 801c20c <_Z41__static_initialization_and_destruction_0ii+0xe8>
 801c1f6:	480e      	ldr	r0, [pc, #56]	; (801c230 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 801c1f8:	f7ff fefa 	bl	801bff0 <_ZN10MathExtras5ColorC1Effff>
}
 801c1fc:	bf00      	nop
 801c1fe:	3708      	adds	r7, #8
 801c200:	46bd      	mov	sp, r7
 801c202:	bd80      	pop	{r7, pc}
 801c204:	24001804 	.word	0x24001804
 801c208:	24001814 	.word	0x24001814
 801c20c:	00000000 	.word	0x00000000
 801c210:	24001824 	.word	0x24001824
 801c214:	24001834 	.word	0x24001834
 801c218:	24001844 	.word	0x24001844
 801c21c:	24001854 	.word	0x24001854
 801c220:	24001864 	.word	0x24001864
 801c224:	24001874 	.word	0x24001874
 801c228:	24001884 	.word	0x24001884
 801c22c:	24001894 	.word	0x24001894
 801c230:	240018a4 	.word	0x240018a4

0801c234 <_GLOBAL__sub_I__ZNK10MathExtras5Color6ToUIntEv>:
 801c234:	b580      	push	{r7, lr}
 801c236:	af00      	add	r7, sp, #0
 801c238:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c23c:	2001      	movs	r0, #1
 801c23e:	f7ff ff71 	bl	801c124 <_Z41__static_initialization_and_destruction_0ii>
 801c242:	bd80      	pop	{r7, pc}

0801c244 <_ZN10MathExtras10IntVector2C1Ev>:
/// Two-dimensional vector with integer values.
class IntVector2
{
public:
    /// Construct a zero vector.
    IntVector2() noexcept :
 801c244:	b480      	push	{r7}
 801c246:	b083      	sub	sp, #12
 801c248:	af00      	add	r7, sp, #0
 801c24a:	6078      	str	r0, [r7, #4]
        x_(0),
 801c24c:	687b      	ldr	r3, [r7, #4]
 801c24e:	2200      	movs	r2, #0
 801c250:	601a      	str	r2, [r3, #0]
        y_(0)
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	2200      	movs	r2, #0
 801c256:	605a      	str	r2, [r3, #4]
    {
    }
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	4618      	mov	r0, r3
 801c25c:	370c      	adds	r7, #12
 801c25e:	46bd      	mov	sp, r7
 801c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c264:	4770      	bx	lr

0801c266 <_ZN10MathExtras10IntVector2C1Eii>:

    /// Construct from coordinates.
    IntVector2(int x, int y) noexcept :
 801c266:	b480      	push	{r7}
 801c268:	b085      	sub	sp, #20
 801c26a:	af00      	add	r7, sp, #0
 801c26c:	60f8      	str	r0, [r7, #12]
 801c26e:	60b9      	str	r1, [r7, #8]
 801c270:	607a      	str	r2, [r7, #4]
        x_(x),
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	68ba      	ldr	r2, [r7, #8]
 801c276:	601a      	str	r2, [r3, #0]
        y_(y)
 801c278:	68fb      	ldr	r3, [r7, #12]
 801c27a:	687a      	ldr	r2, [r7, #4]
 801c27c:	605a      	str	r2, [r3, #4]
    {
    }
 801c27e:	68fb      	ldr	r3, [r7, #12]
 801c280:	4618      	mov	r0, r3
 801c282:	3714      	adds	r7, #20
 801c284:	46bd      	mov	sp, r7
 801c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c28a:	4770      	bx	lr

0801c28c <_ZN10MathExtras7Vector2C1Ev>:
/// Two-dimensional vector.
class  Vector2
{
public:
    /// Construct a zero vector.
    Vector2() noexcept :
 801c28c:	b480      	push	{r7}
 801c28e:	b083      	sub	sp, #12
 801c290:	af00      	add	r7, sp, #0
 801c292:	6078      	str	r0, [r7, #4]
        x_(0.0f),
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	f04f 0200 	mov.w	r2, #0
 801c29a:	601a      	str	r2, [r3, #0]
        y_(0.0f)
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	f04f 0200 	mov.w	r2, #0
 801c2a2:	605a      	str	r2, [r3, #4]
    {
    }
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	4618      	mov	r0, r3
 801c2a8:	370c      	adds	r7, #12
 801c2aa:	46bd      	mov	sp, r7
 801c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2b0:	4770      	bx	lr

0801c2b2 <_ZN10MathExtras7Vector2C1Eff>:
        y_((float)vector.y_)
    {
    }

    /// Construct from coordinates.
    Vector2(float x, float y) noexcept :
 801c2b2:	b480      	push	{r7}
 801c2b4:	b085      	sub	sp, #20
 801c2b6:	af00      	add	r7, sp, #0
 801c2b8:	60f8      	str	r0, [r7, #12]
 801c2ba:	ed87 0a02 	vstr	s0, [r7, #8]
 801c2be:	edc7 0a01 	vstr	s1, [r7, #4]
        x_(x),
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	68ba      	ldr	r2, [r7, #8]
 801c2c6:	601a      	str	r2, [r3, #0]
        y_(y)
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	687a      	ldr	r2, [r7, #4]
 801c2cc:	605a      	str	r2, [r3, #4]
    {
    }
 801c2ce:	68fb      	ldr	r3, [r7, #12]
 801c2d0:	4618      	mov	r0, r3
 801c2d2:	3714      	adds	r7, #20
 801c2d4:	46bd      	mov	sp, r7
 801c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2da:	4770      	bx	lr

0801c2dc <_Z41__static_initialization_and_destruction_0ii>:
const IntVector2 IntVector2::DOWN(0, -1);
const IntVector2 IntVector2::ONE(1, 1);



}
 801c2dc:	b580      	push	{r7, lr}
 801c2de:	b082      	sub	sp, #8
 801c2e0:	af00      	add	r7, sp, #0
 801c2e2:	6078      	str	r0, [r7, #4]
 801c2e4:	6039      	str	r1, [r7, #0]
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	2b01      	cmp	r3, #1
 801c2ea:	d148      	bne.n	801c37e <_Z41__static_initialization_and_destruction_0ii+0xa2>
 801c2ec:	683b      	ldr	r3, [r7, #0]
 801c2ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c2f2:	4293      	cmp	r3, r2
 801c2f4:	d143      	bne.n	801c37e <_Z41__static_initialization_and_destruction_0ii+0xa2>
const Vector2 Vector2::ZERO;
 801c2f6:	4824      	ldr	r0, [pc, #144]	; (801c388 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801c2f8:	f7ff ffc8 	bl	801c28c <_ZN10MathExtras7Vector2C1Ev>
const Vector2 Vector2::LEFT(-1.0f, 0.0f);
 801c2fc:	eddf 0a23 	vldr	s1, [pc, #140]	; 801c38c <_Z41__static_initialization_and_destruction_0ii+0xb0>
 801c300:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c304:	4822      	ldr	r0, [pc, #136]	; (801c390 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 801c306:	f7ff ffd4 	bl	801c2b2 <_ZN10MathExtras7Vector2C1Eff>
const Vector2 Vector2::RIGHT(1.0f, 0.0f);
 801c30a:	eddf 0a20 	vldr	s1, [pc, #128]	; 801c38c <_Z41__static_initialization_and_destruction_0ii+0xb0>
 801c30e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c312:	4820      	ldr	r0, [pc, #128]	; (801c394 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 801c314:	f7ff ffcd 	bl	801c2b2 <_ZN10MathExtras7Vector2C1Eff>
const Vector2 Vector2::UP(0.0f, 1.0f);
 801c318:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801c31c:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 801c38c <_Z41__static_initialization_and_destruction_0ii+0xb0>
 801c320:	481d      	ldr	r0, [pc, #116]	; (801c398 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 801c322:	f7ff ffc6 	bl	801c2b2 <_ZN10MathExtras7Vector2C1Eff>
const Vector2 Vector2::DOWN(0.0f, -1.0f);
 801c326:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 801c32a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801c38c <_Z41__static_initialization_and_destruction_0ii+0xb0>
 801c32e:	481b      	ldr	r0, [pc, #108]	; (801c39c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 801c330:	f7ff ffbf 	bl	801c2b2 <_ZN10MathExtras7Vector2C1Eff>
const Vector2 Vector2::ONE(1.0f, 1.0f);
 801c334:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801c338:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c33c:	4818      	ldr	r0, [pc, #96]	; (801c3a0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 801c33e:	f7ff ffb8 	bl	801c2b2 <_ZN10MathExtras7Vector2C1Eff>
const IntVector2 IntVector2::ZERO;
 801c342:	4818      	ldr	r0, [pc, #96]	; (801c3a4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 801c344:	f7ff ff7e 	bl	801c244 <_ZN10MathExtras10IntVector2C1Ev>
const IntVector2 IntVector2::LEFT(-1, 0);
 801c348:	2200      	movs	r2, #0
 801c34a:	f04f 31ff 	mov.w	r1, #4294967295
 801c34e:	4816      	ldr	r0, [pc, #88]	; (801c3a8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 801c350:	f7ff ff89 	bl	801c266 <_ZN10MathExtras10IntVector2C1Eii>
const IntVector2 IntVector2::RIGHT(1, 0);
 801c354:	2200      	movs	r2, #0
 801c356:	2101      	movs	r1, #1
 801c358:	4814      	ldr	r0, [pc, #80]	; (801c3ac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 801c35a:	f7ff ff84 	bl	801c266 <_ZN10MathExtras10IntVector2C1Eii>
const IntVector2 IntVector2::UP(0, 1);
 801c35e:	2201      	movs	r2, #1
 801c360:	2100      	movs	r1, #0
 801c362:	4813      	ldr	r0, [pc, #76]	; (801c3b0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 801c364:	f7ff ff7f 	bl	801c266 <_ZN10MathExtras10IntVector2C1Eii>
const IntVector2 IntVector2::DOWN(0, -1);
 801c368:	f04f 32ff 	mov.w	r2, #4294967295
 801c36c:	2100      	movs	r1, #0
 801c36e:	4811      	ldr	r0, [pc, #68]	; (801c3b4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 801c370:	f7ff ff79 	bl	801c266 <_ZN10MathExtras10IntVector2C1Eii>
const IntVector2 IntVector2::ONE(1, 1);
 801c374:	2201      	movs	r2, #1
 801c376:	2101      	movs	r1, #1
 801c378:	480f      	ldr	r0, [pc, #60]	; (801c3b8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 801c37a:	f7ff ff74 	bl	801c266 <_ZN10MathExtras10IntVector2C1Eii>
}
 801c37e:	bf00      	nop
 801c380:	3708      	adds	r7, #8
 801c382:	46bd      	mov	sp, r7
 801c384:	bd80      	pop	{r7, pc}
 801c386:	bf00      	nop
 801c388:	240018b4 	.word	0x240018b4
 801c38c:	00000000 	.word	0x00000000
 801c390:	240018bc 	.word	0x240018bc
 801c394:	240018c4 	.word	0x240018c4
 801c398:	240018cc 	.word	0x240018cc
 801c39c:	240018d4 	.word	0x240018d4
 801c3a0:	240018dc 	.word	0x240018dc
 801c3a4:	240018e4 	.word	0x240018e4
 801c3a8:	240018ec 	.word	0x240018ec
 801c3ac:	240018f4 	.word	0x240018f4
 801c3b0:	240018fc 	.word	0x240018fc
 801c3b4:	24001904 	.word	0x24001904
 801c3b8:	2400190c 	.word	0x2400190c

0801c3bc <_GLOBAL__sub_I__ZN10MathExtras7Vector24ZEROE>:
 801c3bc:	b580      	push	{r7, lr}
 801c3be:	af00      	add	r7, sp, #0
 801c3c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c3c4:	2001      	movs	r0, #1
 801c3c6:	f7ff ff89 	bl	801c2dc <_Z41__static_initialization_and_destruction_0ii>
 801c3ca:	bd80      	pop	{r7, pc}

0801c3cc <_ZN10MathExtras10IntVector3C1Ev>:
    IntVector3() noexcept :
 801c3cc:	b480      	push	{r7}
 801c3ce:	b083      	sub	sp, #12
 801c3d0:	af00      	add	r7, sp, #0
 801c3d2:	6078      	str	r0, [r7, #4]
        x_(0),
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	2200      	movs	r2, #0
 801c3d8:	601a      	str	r2, [r3, #0]
        y_(0),
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	2200      	movs	r2, #0
 801c3de:	605a      	str	r2, [r3, #4]
        z_(0)
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	2200      	movs	r2, #0
 801c3e4:	609a      	str	r2, [r3, #8]
    }
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	4618      	mov	r0, r3
 801c3ea:	370c      	adds	r7, #12
 801c3ec:	46bd      	mov	sp, r7
 801c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3f2:	4770      	bx	lr

0801c3f4 <_ZN10MathExtras10IntVector3C1Eiii>:
    IntVector3(int x, int y, int z) noexcept :
 801c3f4:	b480      	push	{r7}
 801c3f6:	b085      	sub	sp, #20
 801c3f8:	af00      	add	r7, sp, #0
 801c3fa:	60f8      	str	r0, [r7, #12]
 801c3fc:	60b9      	str	r1, [r7, #8]
 801c3fe:	607a      	str	r2, [r7, #4]
 801c400:	603b      	str	r3, [r7, #0]
        x_(x),
 801c402:	68fb      	ldr	r3, [r7, #12]
 801c404:	68ba      	ldr	r2, [r7, #8]
 801c406:	601a      	str	r2, [r3, #0]
        y_(y),
 801c408:	68fb      	ldr	r3, [r7, #12]
 801c40a:	687a      	ldr	r2, [r7, #4]
 801c40c:	605a      	str	r2, [r3, #4]
        z_(z)
 801c40e:	68fb      	ldr	r3, [r7, #12]
 801c410:	683a      	ldr	r2, [r7, #0]
 801c412:	609a      	str	r2, [r3, #8]
    }
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	4618      	mov	r0, r3
 801c418:	3714      	adds	r7, #20
 801c41a:	46bd      	mov	sp, r7
 801c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c420:	4770      	bx	lr

0801c422 <_ZN10MathExtras7Vector3C1Ev>:
    Vector3() noexcept :
 801c422:	b480      	push	{r7}
 801c424:	b083      	sub	sp, #12
 801c426:	af00      	add	r7, sp, #0
 801c428:	6078      	str	r0, [r7, #4]
        x_(0.0f),
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	f04f 0200 	mov.w	r2, #0
 801c430:	601a      	str	r2, [r3, #0]
        y_(0.0f),
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	f04f 0200 	mov.w	r2, #0
 801c438:	605a      	str	r2, [r3, #4]
        z_(0.0f)
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	f04f 0200 	mov.w	r2, #0
 801c440:	609a      	str	r2, [r3, #8]
    }
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	4618      	mov	r0, r3
 801c446:	370c      	adds	r7, #12
 801c448:	46bd      	mov	sp, r7
 801c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c44e:	4770      	bx	lr

0801c450 <_Z41__static_initialization_and_destruction_0ii>:
const IntVector3 IntVector3::BACK(0, 0, -1);
const IntVector3 IntVector3::ONE(1, 1, 1);



}
 801c450:	b580      	push	{r7, lr}
 801c452:	b082      	sub	sp, #8
 801c454:	af00      	add	r7, sp, #0
 801c456:	6078      	str	r0, [r7, #4]
 801c458:	6039      	str	r1, [r7, #0]
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	2b01      	cmp	r3, #1
 801c45e:	d176      	bne.n	801c54e <_Z41__static_initialization_and_destruction_0ii+0xfe>
 801c460:	683b      	ldr	r3, [r7, #0]
 801c462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c466:	4293      	cmp	r3, r2
 801c468:	d171      	bne.n	801c54e <_Z41__static_initialization_and_destruction_0ii+0xfe>
const Vector3 Vector3::ZERO;
 801c46a:	483b      	ldr	r0, [pc, #236]	; (801c558 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 801c46c:	f7ff ffd9 	bl	801c422 <_ZN10MathExtras7Vector3C1Ev>
const Vector3 Vector3::LEFT(-1.0f, 0.0f, 0.0f);
 801c470:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 801c55c <_Z41__static_initialization_and_destruction_0ii+0x10c>
 801c474:	eddf 0a39 	vldr	s1, [pc, #228]	; 801c55c <_Z41__static_initialization_and_destruction_0ii+0x10c>
 801c478:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c47c:	4838      	ldr	r0, [pc, #224]	; (801c560 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 801c47e:	f7ff fd7f 	bl	801bf80 <_ZN10MathExtras7Vector3C1Efff>
const Vector3 Vector3::RIGHT(1.0f, 0.0f, 0.0f);
 801c482:	ed9f 1a36 	vldr	s2, [pc, #216]	; 801c55c <_Z41__static_initialization_and_destruction_0ii+0x10c>
 801c486:	eddf 0a35 	vldr	s1, [pc, #212]	; 801c55c <_Z41__static_initialization_and_destruction_0ii+0x10c>
 801c48a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c48e:	4835      	ldr	r0, [pc, #212]	; (801c564 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 801c490:	f7ff fd76 	bl	801bf80 <_ZN10MathExtras7Vector3C1Efff>
const Vector3 Vector3::UP(0.0f, 1.0f, 0.0f);
 801c494:	ed9f 1a31 	vldr	s2, [pc, #196]	; 801c55c <_Z41__static_initialization_and_destruction_0ii+0x10c>
 801c498:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801c49c:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 801c55c <_Z41__static_initialization_and_destruction_0ii+0x10c>
 801c4a0:	4831      	ldr	r0, [pc, #196]	; (801c568 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 801c4a2:	f7ff fd6d 	bl	801bf80 <_ZN10MathExtras7Vector3C1Efff>
const Vector3 Vector3::DOWN(0.0f, -1.0f, 0.0f);
 801c4a6:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 801c55c <_Z41__static_initialization_and_destruction_0ii+0x10c>
 801c4aa:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 801c4ae:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 801c55c <_Z41__static_initialization_and_destruction_0ii+0x10c>
 801c4b2:	482e      	ldr	r0, [pc, #184]	; (801c56c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 801c4b4:	f7ff fd64 	bl	801bf80 <_ZN10MathExtras7Vector3C1Efff>
const Vector3 Vector3::FORWARD(0.0f, 0.0f, 1.0f);
 801c4b8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801c4bc:	eddf 0a27 	vldr	s1, [pc, #156]	; 801c55c <_Z41__static_initialization_and_destruction_0ii+0x10c>
 801c4c0:	ed9f 0a26 	vldr	s0, [pc, #152]	; 801c55c <_Z41__static_initialization_and_destruction_0ii+0x10c>
 801c4c4:	482a      	ldr	r0, [pc, #168]	; (801c570 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 801c4c6:	f7ff fd5b 	bl	801bf80 <_ZN10MathExtras7Vector3C1Efff>
const Vector3 Vector3::BACK(0.0f, 0.0f, -1.0f);
 801c4ca:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 801c4ce:	eddf 0a23 	vldr	s1, [pc, #140]	; 801c55c <_Z41__static_initialization_and_destruction_0ii+0x10c>
 801c4d2:	ed9f 0a22 	vldr	s0, [pc, #136]	; 801c55c <_Z41__static_initialization_and_destruction_0ii+0x10c>
 801c4d6:	4827      	ldr	r0, [pc, #156]	; (801c574 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 801c4d8:	f7ff fd52 	bl	801bf80 <_ZN10MathExtras7Vector3C1Efff>
const Vector3 Vector3::ONE(1.0f, 1.0f, 1.0f);
 801c4dc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801c4e0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801c4e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c4e8:	4823      	ldr	r0, [pc, #140]	; (801c578 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 801c4ea:	f7ff fd49 	bl	801bf80 <_ZN10MathExtras7Vector3C1Efff>
const IntVector3 IntVector3::ZERO;
 801c4ee:	4823      	ldr	r0, [pc, #140]	; (801c57c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 801c4f0:	f7ff ff6c 	bl	801c3cc <_ZN10MathExtras10IntVector3C1Ev>
const IntVector3 IntVector3::LEFT(-1, 0, 0);
 801c4f4:	2300      	movs	r3, #0
 801c4f6:	2200      	movs	r2, #0
 801c4f8:	f04f 31ff 	mov.w	r1, #4294967295
 801c4fc:	4820      	ldr	r0, [pc, #128]	; (801c580 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 801c4fe:	f7ff ff79 	bl	801c3f4 <_ZN10MathExtras10IntVector3C1Eiii>
const IntVector3 IntVector3::RIGHT(1, 0, 0);
 801c502:	2300      	movs	r3, #0
 801c504:	2200      	movs	r2, #0
 801c506:	2101      	movs	r1, #1
 801c508:	481e      	ldr	r0, [pc, #120]	; (801c584 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 801c50a:	f7ff ff73 	bl	801c3f4 <_ZN10MathExtras10IntVector3C1Eiii>
const IntVector3 IntVector3::UP(0, 1, 0);
 801c50e:	2300      	movs	r3, #0
 801c510:	2201      	movs	r2, #1
 801c512:	2100      	movs	r1, #0
 801c514:	481c      	ldr	r0, [pc, #112]	; (801c588 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 801c516:	f7ff ff6d 	bl	801c3f4 <_ZN10MathExtras10IntVector3C1Eiii>
const IntVector3 IntVector3::DOWN(0, -1, 0);
 801c51a:	2300      	movs	r3, #0
 801c51c:	f04f 32ff 	mov.w	r2, #4294967295
 801c520:	2100      	movs	r1, #0
 801c522:	481a      	ldr	r0, [pc, #104]	; (801c58c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 801c524:	f7ff ff66 	bl	801c3f4 <_ZN10MathExtras10IntVector3C1Eiii>
const IntVector3 IntVector3::FORWARD(0, 0, 1);
 801c528:	2301      	movs	r3, #1
 801c52a:	2200      	movs	r2, #0
 801c52c:	2100      	movs	r1, #0
 801c52e:	4818      	ldr	r0, [pc, #96]	; (801c590 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 801c530:	f7ff ff60 	bl	801c3f4 <_ZN10MathExtras10IntVector3C1Eiii>
const IntVector3 IntVector3::BACK(0, 0, -1);
 801c534:	f04f 33ff 	mov.w	r3, #4294967295
 801c538:	2200      	movs	r2, #0
 801c53a:	2100      	movs	r1, #0
 801c53c:	4815      	ldr	r0, [pc, #84]	; (801c594 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 801c53e:	f7ff ff59 	bl	801c3f4 <_ZN10MathExtras10IntVector3C1Eiii>
const IntVector3 IntVector3::ONE(1, 1, 1);
 801c542:	2301      	movs	r3, #1
 801c544:	2201      	movs	r2, #1
 801c546:	2101      	movs	r1, #1
 801c548:	4813      	ldr	r0, [pc, #76]	; (801c598 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 801c54a:	f7ff ff53 	bl	801c3f4 <_ZN10MathExtras10IntVector3C1Eiii>
}
 801c54e:	bf00      	nop
 801c550:	3708      	adds	r7, #8
 801c552:	46bd      	mov	sp, r7
 801c554:	bd80      	pop	{r7, pc}
 801c556:	bf00      	nop
 801c558:	24001914 	.word	0x24001914
 801c55c:	00000000 	.word	0x00000000
 801c560:	24001920 	.word	0x24001920
 801c564:	2400192c 	.word	0x2400192c
 801c568:	24001938 	.word	0x24001938
 801c56c:	24001944 	.word	0x24001944
 801c570:	24001950 	.word	0x24001950
 801c574:	2400195c 	.word	0x2400195c
 801c578:	24001968 	.word	0x24001968
 801c57c:	24001974 	.word	0x24001974
 801c580:	24001980 	.word	0x24001980
 801c584:	2400198c 	.word	0x2400198c
 801c588:	24001998 	.word	0x24001998
 801c58c:	240019a4 	.word	0x240019a4
 801c590:	240019b0 	.word	0x240019b0
 801c594:	240019bc 	.word	0x240019bc
 801c598:	240019c8 	.word	0x240019c8

0801c59c <_GLOBAL__sub_I__ZN10MathExtras7Vector34ZEROE>:
 801c59c:	b580      	push	{r7, lr}
 801c59e:	af00      	add	r7, sp, #0
 801c5a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c5a4:	2001      	movs	r0, #1
 801c5a6:	f7ff ff53 	bl	801c450 <_Z41__static_initialization_and_destruction_0ii>
 801c5aa:	bd80      	pop	{r7, pc}

0801c5ac <_ZN10MathExtras7Vector4C1Ev>:
/// Four-dimensional vector.
class  Vector4
{
public:
    /// Construct a zero vector.
    Vector4() noexcept :
 801c5ac:	b480      	push	{r7}
 801c5ae:	b083      	sub	sp, #12
 801c5b0:	af00      	add	r7, sp, #0
 801c5b2:	6078      	str	r0, [r7, #4]
        x_(0.0f),
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	f04f 0200 	mov.w	r2, #0
 801c5ba:	601a      	str	r2, [r3, #0]
        y_(0.0f),
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	f04f 0200 	mov.w	r2, #0
 801c5c2:	605a      	str	r2, [r3, #4]
        z_(0.0f),
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	f04f 0200 	mov.w	r2, #0
 801c5ca:	609a      	str	r2, [r3, #8]
        w_(0.0f)
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	f04f 0200 	mov.w	r2, #0
 801c5d2:	60da      	str	r2, [r3, #12]
    {
    }
 801c5d4:	687b      	ldr	r3, [r7, #4]
 801c5d6:	4618      	mov	r0, r3
 801c5d8:	370c      	adds	r7, #12
 801c5da:	46bd      	mov	sp, r7
 801c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5e0:	4770      	bx	lr

0801c5e2 <_ZN10MathExtras7Vector4C1Effff>:
        w_(w)
    {
    }

    /// Construct from coordinates.
    Vector4(float x, float y, float z, float w) noexcept :
 801c5e2:	b480      	push	{r7}
 801c5e4:	b087      	sub	sp, #28
 801c5e6:	af00      	add	r7, sp, #0
 801c5e8:	6178      	str	r0, [r7, #20]
 801c5ea:	ed87 0a04 	vstr	s0, [r7, #16]
 801c5ee:	edc7 0a03 	vstr	s1, [r7, #12]
 801c5f2:	ed87 1a02 	vstr	s2, [r7, #8]
 801c5f6:	edc7 1a01 	vstr	s3, [r7, #4]
        x_(x),
 801c5fa:	697b      	ldr	r3, [r7, #20]
 801c5fc:	693a      	ldr	r2, [r7, #16]
 801c5fe:	601a      	str	r2, [r3, #0]
        y_(y),
 801c600:	697b      	ldr	r3, [r7, #20]
 801c602:	68fa      	ldr	r2, [r7, #12]
 801c604:	605a      	str	r2, [r3, #4]
        z_(z),
 801c606:	697b      	ldr	r3, [r7, #20]
 801c608:	68ba      	ldr	r2, [r7, #8]
 801c60a:	609a      	str	r2, [r3, #8]
        w_(w)
 801c60c:	697b      	ldr	r3, [r7, #20]
 801c60e:	687a      	ldr	r2, [r7, #4]
 801c610:	60da      	str	r2, [r3, #12]
    {
    }
 801c612:	697b      	ldr	r3, [r7, #20]
 801c614:	4618      	mov	r0, r3
 801c616:	371c      	adds	r7, #28
 801c618:	46bd      	mov	sp, r7
 801c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c61e:	4770      	bx	lr

0801c620 <_Z41__static_initialization_and_destruction_0ii>:

const Vector4 Vector4::ZERO;
const Vector4 Vector4::ONE(1.0f, 1.0f, 1.0f, 1.0f);


}
 801c620:	b580      	push	{r7, lr}
 801c622:	b082      	sub	sp, #8
 801c624:	af00      	add	r7, sp, #0
 801c626:	6078      	str	r0, [r7, #4]
 801c628:	6039      	str	r1, [r7, #0]
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	2b01      	cmp	r3, #1
 801c62e:	d112      	bne.n	801c656 <_Z41__static_initialization_and_destruction_0ii+0x36>
 801c630:	683b      	ldr	r3, [r7, #0]
 801c632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c636:	4293      	cmp	r3, r2
 801c638:	d10d      	bne.n	801c656 <_Z41__static_initialization_and_destruction_0ii+0x36>
const Vector4 Vector4::ZERO;
 801c63a:	4809      	ldr	r0, [pc, #36]	; (801c660 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801c63c:	f7ff ffb6 	bl	801c5ac <_ZN10MathExtras7Vector4C1Ev>
const Vector4 Vector4::ONE(1.0f, 1.0f, 1.0f, 1.0f);
 801c640:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 801c644:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801c648:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801c64c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c650:	4804      	ldr	r0, [pc, #16]	; (801c664 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 801c652:	f7ff ffc6 	bl	801c5e2 <_ZN10MathExtras7Vector4C1Effff>
}
 801c656:	bf00      	nop
 801c658:	3708      	adds	r7, #8
 801c65a:	46bd      	mov	sp, r7
 801c65c:	bd80      	pop	{r7, pc}
 801c65e:	bf00      	nop
 801c660:	240019d4 	.word	0x240019d4
 801c664:	240019e4 	.word	0x240019e4

0801c668 <_GLOBAL__sub_I__ZN10MathExtras7Vector44ZEROE>:
 801c668:	b580      	push	{r7, lr}
 801c66a:	af00      	add	r7, sp, #0
 801c66c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c670:	2001      	movs	r0, #1
 801c672:	f7ff ffd5 	bl	801c620 <_Z41__static_initialization_and_destruction_0ii>
 801c676:	bd80      	pop	{r7, pc}

0801c678 <_Z11WS2812_INITv>:
volatile uint16_t WS2812_DMA_BUFF1[WS2812_DMA_BUFF_SIZE];
volatile uint16_t WS2812_DMA_BUFF2[WS2812_DMA_BUFF_SIZE];
volatile int WS2812_DMA_CURRENT_DRAW_BUFF = 1;

void WS2812_INIT()
{
 801c678:	b580      	push	{r7, lr}
 801c67a:	b084      	sub	sp, #16
 801c67c:	af00      	add	r7, sp, #0
	for(uint16_t i = 0; i < WS2812_TOTAL_BYTES; i++)
 801c67e:	2300      	movs	r3, #0
 801c680:	81fb      	strh	r3, [r7, #14]
 801c682:	e006      	b.n	801c692 <_Z11WS2812_INITv+0x1a>
		WS2812_LEDSTATE[i] = 0;
 801c684:	89fb      	ldrh	r3, [r7, #14]
 801c686:	4a2b      	ldr	r2, [pc, #172]	; (801c734 <_Z11WS2812_INITv+0xbc>)
 801c688:	2100      	movs	r1, #0
 801c68a:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < WS2812_TOTAL_BYTES; i++)
 801c68c:	89fb      	ldrh	r3, [r7, #14]
 801c68e:	3301      	adds	r3, #1
 801c690:	81fb      	strh	r3, [r7, #14]
 801c692:	89fb      	ldrh	r3, [r7, #14]
 801c694:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 801c698:	d3f4      	bcc.n	801c684 <_Z11WS2812_INITv+0xc>


	for(uint16_t i = 0; i < WS2812_TOTAL_BYTES*WS2812_DMA_BYTES_PER_CHAN; i++)
 801c69a:	2300      	movs	r3, #0
 801c69c:	81bb      	strh	r3, [r7, #12]
 801c69e:	e007      	b.n	801c6b0 <_Z11WS2812_INITv+0x38>
		WS2812_DMA_BUFF1[i] = (uint16_t)WS2812_LOWVAL;
 801c6a0:	89bb      	ldrh	r3, [r7, #12]
 801c6a2:	4a25      	ldr	r2, [pc, #148]	; (801c738 <_Z11WS2812_INITv+0xc0>)
 801c6a4:	215a      	movs	r1, #90	; 0x5a
 801c6a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = 0; i < WS2812_TOTAL_BYTES*WS2812_DMA_BYTES_PER_CHAN; i++)
 801c6aa:	89bb      	ldrh	r3, [r7, #12]
 801c6ac:	3301      	adds	r3, #1
 801c6ae:	81bb      	strh	r3, [r7, #12]
 801c6b0:	89bb      	ldrh	r3, [r7, #12]
 801c6b2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 801c6b6:	d3f3      	bcc.n	801c6a0 <_Z11WS2812_INITv+0x28>

	for(uint16_t i = WS2812_TOTAL_BYTES*WS2812_DMA_BYTES_PER_CHAN; i < WS2812_DMA_BUFF_SIZE; i++)
 801c6b8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 801c6bc:	817b      	strh	r3, [r7, #10]
 801c6be:	e007      	b.n	801c6d0 <_Z11WS2812_INITv+0x58>
		WS2812_DMA_BUFF1[i] = 0;
 801c6c0:	897b      	ldrh	r3, [r7, #10]
 801c6c2:	4a1d      	ldr	r2, [pc, #116]	; (801c738 <_Z11WS2812_INITv+0xc0>)
 801c6c4:	2100      	movs	r1, #0
 801c6c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = WS2812_TOTAL_BYTES*WS2812_DMA_BYTES_PER_CHAN; i < WS2812_DMA_BUFF_SIZE; i++)
 801c6ca:	897b      	ldrh	r3, [r7, #10]
 801c6cc:	3301      	adds	r3, #1
 801c6ce:	817b      	strh	r3, [r7, #10]
 801c6d0:	897b      	ldrh	r3, [r7, #10]
 801c6d2:	f640 222b 	movw	r2, #2603	; 0xa2b
 801c6d6:	4293      	cmp	r3, r2
 801c6d8:	d9f2      	bls.n	801c6c0 <_Z11WS2812_INITv+0x48>



	for(uint16_t i = 0; i < WS2812_TOTAL_BYTES*WS2812_DMA_BYTES_PER_CHAN; i++)
 801c6da:	2300      	movs	r3, #0
 801c6dc:	813b      	strh	r3, [r7, #8]
 801c6de:	e007      	b.n	801c6f0 <_Z11WS2812_INITv+0x78>
		WS2812_DMA_BUFF2[i] = (uint16_t)WS2812_LOWVAL;
 801c6e0:	893b      	ldrh	r3, [r7, #8]
 801c6e2:	4a16      	ldr	r2, [pc, #88]	; (801c73c <_Z11WS2812_INITv+0xc4>)
 801c6e4:	215a      	movs	r1, #90	; 0x5a
 801c6e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = 0; i < WS2812_TOTAL_BYTES*WS2812_DMA_BYTES_PER_CHAN; i++)
 801c6ea:	893b      	ldrh	r3, [r7, #8]
 801c6ec:	3301      	adds	r3, #1
 801c6ee:	813b      	strh	r3, [r7, #8]
 801c6f0:	893b      	ldrh	r3, [r7, #8]
 801c6f2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 801c6f6:	d3f3      	bcc.n	801c6e0 <_Z11WS2812_INITv+0x68>

	for(uint16_t i = WS2812_TOTAL_BYTES*WS2812_DMA_BYTES_PER_CHAN; i < WS2812_DMA_BUFF_SIZE; i++)
 801c6f8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 801c6fc:	80fb      	strh	r3, [r7, #6]
 801c6fe:	e007      	b.n	801c710 <_Z11WS2812_INITv+0x98>
		WS2812_DMA_BUFF2[i] = 0;
 801c700:	88fb      	ldrh	r3, [r7, #6]
 801c702:	4a0e      	ldr	r2, [pc, #56]	; (801c73c <_Z11WS2812_INITv+0xc4>)
 801c704:	2100      	movs	r1, #0
 801c706:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = WS2812_TOTAL_BYTES*WS2812_DMA_BYTES_PER_CHAN; i < WS2812_DMA_BUFF_SIZE; i++)
 801c70a:	88fb      	ldrh	r3, [r7, #6]
 801c70c:	3301      	adds	r3, #1
 801c70e:	80fb      	strh	r3, [r7, #6]
 801c710:	88fb      	ldrh	r3, [r7, #6]
 801c712:	f640 222b 	movw	r2, #2603	; 0xa2b
 801c716:	4293      	cmp	r3, r2
 801c718:	d9f2      	bls.n	801c700 <_Z11WS2812_INITv+0x88>


	HAL_StatusTypeDef status = HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t*)WS2812_DMA_BUFF2,
 801c71a:	f640 232c 	movw	r3, #2604	; 0xa2c
 801c71e:	4a07      	ldr	r2, [pc, #28]	; (801c73c <_Z11WS2812_INITv+0xc4>)
 801c720:	2100      	movs	r1, #0
 801c722:	4807      	ldr	r0, [pc, #28]	; (801c740 <_Z11WS2812_INITv+0xc8>)
 801c724:	f7f4 fdee 	bl	8011304 <HAL_TIM_PWM_Start_DMA>
 801c728:	4603      	mov	r3, r0
 801c72a:	717b      	strb	r3, [r7, #5]
			WS2812_DMA_BUFF_SIZE);



}
 801c72c:	bf00      	nop
 801c72e:	3710      	adds	r7, #16
 801c730:	46bd      	mov	sp, r7
 801c732:	bd80      	pop	{r7, pc}
 801c734:	240019f4 	.word	0x240019f4
 801c738:	24001b14 	.word	0x24001b14
 801c73c:	24002f6c 	.word	0x24002f6c
 801c740:	24000a70 	.word	0x24000a70

0801c744 <_Z13WS2812_DEINITv>:
void WS2812_DEINIT()
{
 801c744:	b580      	push	{r7, lr}
 801c746:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 801c748:	2100      	movs	r1, #0
 801c74a:	4802      	ldr	r0, [pc, #8]	; (801c754 <_Z13WS2812_DEINITv+0x10>)
 801c74c:	f7f5 f8d0 	bl	80118f0 <HAL_TIM_PWM_Stop_DMA>
}
 801c750:	bf00      	nop
 801c752:	bd80      	pop	{r7, pc}
 801c754:	24000a70 	.word	0x24000a70

0801c758 <_Z19WS2812_SWAP_BUFFERSv>:

//call after setting led states..
void WS2812_SWAP_BUFFERS()
{
 801c758:	b580      	push	{r7, lr}
 801c75a:	b082      	sub	sp, #8
 801c75c:	af00      	add	r7, sp, #0

	//Could Maybe use DMA for transfer.  But its usually busy doing other things..
	HAL_StatusTypeDef status = HAL_DMA_Start(&hdma_memtomem_dma2_stream1, (uint32_t)WS2812_DMA_BUFF1, (uint32_t)WS2812_DMA_BUFF2, WS2812_DMA_BUFF_SIZE);
 801c75e:	4909      	ldr	r1, [pc, #36]	; (801c784 <_Z19WS2812_SWAP_BUFFERSv+0x2c>)
 801c760:	4a09      	ldr	r2, [pc, #36]	; (801c788 <_Z19WS2812_SWAP_BUFFERSv+0x30>)
 801c762:	f640 232c 	movw	r3, #2604	; 0xa2c
 801c766:	4809      	ldr	r0, [pc, #36]	; (801c78c <_Z19WS2812_SWAP_BUFFERSv+0x34>)
 801c768:	f7e7 ffba 	bl	80046e0 <HAL_DMA_Start>
 801c76c:	4603      	mov	r3, r0
 801c76e:	71fb      	strb	r3, [r7, #7]

	HAL_DMA_PollForTransfer(&hdma_memtomem_dma2_stream1,HAL_DMA_FULL_TRANSFER, 10000);
 801c770:	f242 7210 	movw	r2, #10000	; 0x2710
 801c774:	2100      	movs	r1, #0
 801c776:	4805      	ldr	r0, [pc, #20]	; (801c78c <_Z19WS2812_SWAP_BUFFERSv+0x34>)
 801c778:	f7e9 f8bc 	bl	80058f4 <HAL_DMA_PollForTransfer>

}
 801c77c:	bf00      	nop
 801c77e:	3708      	adds	r7, #8
 801c780:	46bd      	mov	sp, r7
 801c782:	bd80      	pop	{r7, pc}
 801c784:	24001b14 	.word	0x24001b14
 801c788:	24002f6c 	.word	0x24002f6c
 801c78c:	240001e8 	.word	0x240001e8

0801c790 <_Z13WS2812_SETLEDhhhh>:
//		if(update[2]) drawBuffer[index*WS2812_NUMCOLORCHANNELS*WS2812_DMA_BYTES_PER_CHAN + WS2812_DMA_BYTES_PER_CHAN*2 + 7-i] = ((b & mask) >> i)*WS2812_HIGHVAL + (!((b & mask) >> i))*WS2812_LOWVAL;
//	}
//
//}
void WS2812_SETLED(uint8_t index, uint8_t r, uint8_t g, uint8_t b)
{
 801c790:	b490      	push	{r4, r7}
 801c792:	b086      	sub	sp, #24
 801c794:	af00      	add	r7, sp, #0
 801c796:	4604      	mov	r4, r0
 801c798:	4608      	mov	r0, r1
 801c79a:	4611      	mov	r1, r2
 801c79c:	461a      	mov	r2, r3
 801c79e:	4623      	mov	r3, r4
 801c7a0:	71fb      	strb	r3, [r7, #7]
 801c7a2:	4603      	mov	r3, r0
 801c7a4:	71bb      	strb	r3, [r7, #6]
 801c7a6:	460b      	mov	r3, r1
 801c7a8:	717b      	strb	r3, [r7, #5]
 801c7aa:	4613      	mov	r3, r2
 801c7ac:	713b      	strb	r3, [r7, #4]
	uint16_t stateLookup = index*WS2812_NUMCOLORCHANNELS;
 801c7ae:	79fb      	ldrb	r3, [r7, #7]
 801c7b0:	b29b      	uxth	r3, r3
 801c7b2:	461a      	mov	r2, r3
 801c7b4:	0052      	lsls	r2, r2, #1
 801c7b6:	4413      	add	r3, r2
 801c7b8:	823b      	strh	r3, [r7, #16]

	WS2812_LEDSTATE[stateLookup] = g;
 801c7ba:	8a3b      	ldrh	r3, [r7, #16]
 801c7bc:	4957      	ldr	r1, [pc, #348]	; (801c91c <_Z13WS2812_SETLEDhhhh+0x18c>)
 801c7be:	797a      	ldrb	r2, [r7, #5]
 801c7c0:	54ca      	strb	r2, [r1, r3]
	WS2812_LEDSTATE[stateLookup+1] = r;
 801c7c2:	8a3b      	ldrh	r3, [r7, #16]
 801c7c4:	3301      	adds	r3, #1
 801c7c6:	4955      	ldr	r1, [pc, #340]	; (801c91c <_Z13WS2812_SETLEDhhhh+0x18c>)
 801c7c8:	79ba      	ldrb	r2, [r7, #6]
 801c7ca:	54ca      	strb	r2, [r1, r3]
	WS2812_LEDSTATE[stateLookup+2] = b;
 801c7cc:	8a3b      	ldrh	r3, [r7, #16]
 801c7ce:	3302      	adds	r3, #2
 801c7d0:	4952      	ldr	r1, [pc, #328]	; (801c91c <_Z13WS2812_SETLEDhhhh+0x18c>)
 801c7d2:	793a      	ldrb	r2, [r7, #4]
 801c7d4:	54ca      	strb	r2, [r1, r3]

	//determine buffer to write to
	volatile uint16_t* drawBuffer = nullptr;
 801c7d6:	2300      	movs	r3, #0
 801c7d8:	617b      	str	r3, [r7, #20]
	if(WS2812_DMA_CURRENT_DRAW_BUFF == 1)
 801c7da:	4b51      	ldr	r3, [pc, #324]	; (801c920 <_Z13WS2812_SETLEDhhhh+0x190>)
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	2b01      	cmp	r3, #1
 801c7e0:	bf0c      	ite	eq
 801c7e2:	2301      	moveq	r3, #1
 801c7e4:	2300      	movne	r3, #0
 801c7e6:	b2db      	uxtb	r3, r3
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d002      	beq.n	801c7f2 <_Z13WS2812_SETLEDhhhh+0x62>
	{
		drawBuffer = WS2812_DMA_BUFF1;
 801c7ec:	4b4d      	ldr	r3, [pc, #308]	; (801c924 <_Z13WS2812_SETLEDhhhh+0x194>)
 801c7ee:	617b      	str	r3, [r7, #20]
 801c7f0:	e001      	b.n	801c7f6 <_Z13WS2812_SETLEDhhhh+0x66>
	}
	else
	{
		drawBuffer = WS2812_DMA_BUFF2;
 801c7f2:	4b4d      	ldr	r3, [pc, #308]	; (801c928 <_Z13WS2812_SETLEDhhhh+0x198>)
 801c7f4:	617b      	str	r3, [r7, #20]
	}



	for(uint16_t i = 0; i < 8; i++)
 801c7f6:	2300      	movs	r3, #0
 801c7f8:	827b      	strh	r3, [r7, #18]
 801c7fa:	e084      	b.n	801c906 <_Z13WS2812_SETLEDhhhh+0x176>
	{
		uint8_t mask = (1 << i);
 801c7fc:	8a7b      	ldrh	r3, [r7, #18]
 801c7fe:	2201      	movs	r2, #1
 801c800:	fa02 f303 	lsl.w	r3, r2, r3
 801c804:	73fb      	strb	r3, [r7, #15]
		drawBuffer[index*WS2812_NUMCOLORCHANNELS*WS2812_DMA_BYTES_PER_CHAN                               + 7-i] = ((g & mask) >> i)*WS2812_HIGHVAL + (!((g & mask) >> i))*WS2812_LOWVAL;
 801c806:	797a      	ldrb	r2, [r7, #5]
 801c808:	7bfb      	ldrb	r3, [r7, #15]
 801c80a:	4013      	ands	r3, r2
 801c80c:	b2db      	uxtb	r3, r3
 801c80e:	461a      	mov	r2, r3
 801c810:	8a7b      	ldrh	r3, [r7, #18]
 801c812:	fa42 f303 	asr.w	r3, r2, r3
 801c816:	b29b      	uxth	r3, r3
 801c818:	461a      	mov	r2, r3
 801c81a:	0112      	lsls	r2, r2, #4
 801c81c:	1ad3      	subs	r3, r2, r3
 801c81e:	011b      	lsls	r3, r3, #4
 801c820:	b299      	uxth	r1, r3
 801c822:	797a      	ldrb	r2, [r7, #5]
 801c824:	7bfb      	ldrb	r3, [r7, #15]
 801c826:	4013      	ands	r3, r2
 801c828:	b2db      	uxtb	r3, r3
 801c82a:	461a      	mov	r2, r3
 801c82c:	8a7b      	ldrh	r3, [r7, #18]
 801c82e:	fa42 f303 	asr.w	r3, r2, r3
 801c832:	2b00      	cmp	r3, #0
 801c834:	d101      	bne.n	801c83a <_Z13WS2812_SETLEDhhhh+0xaa>
 801c836:	205a      	movs	r0, #90	; 0x5a
 801c838:	e000      	b.n	801c83c <_Z13WS2812_SETLEDhhhh+0xac>
 801c83a:	2000      	movs	r0, #0
 801c83c:	79fa      	ldrb	r2, [r7, #7]
 801c83e:	4613      	mov	r3, r2
 801c840:	005b      	lsls	r3, r3, #1
 801c842:	4413      	add	r3, r2
 801c844:	00db      	lsls	r3, r3, #3
 801c846:	1dda      	adds	r2, r3, #7
 801c848:	8a7b      	ldrh	r3, [r7, #18]
 801c84a:	1ad3      	subs	r3, r2, r3
 801c84c:	005b      	lsls	r3, r3, #1
 801c84e:	697a      	ldr	r2, [r7, #20]
 801c850:	4413      	add	r3, r2
 801c852:	1842      	adds	r2, r0, r1
 801c854:	b292      	uxth	r2, r2
 801c856:	801a      	strh	r2, [r3, #0]
		drawBuffer[index*WS2812_NUMCOLORCHANNELS*WS2812_DMA_BYTES_PER_CHAN + WS2812_DMA_BYTES_PER_CHAN   + 7-i] = ((r & mask) >> i)*WS2812_HIGHVAL + (!((r & mask) >> i))*WS2812_LOWVAL;
 801c858:	79ba      	ldrb	r2, [r7, #6]
 801c85a:	7bfb      	ldrb	r3, [r7, #15]
 801c85c:	4013      	ands	r3, r2
 801c85e:	b2db      	uxtb	r3, r3
 801c860:	461a      	mov	r2, r3
 801c862:	8a7b      	ldrh	r3, [r7, #18]
 801c864:	fa42 f303 	asr.w	r3, r2, r3
 801c868:	b29b      	uxth	r3, r3
 801c86a:	461a      	mov	r2, r3
 801c86c:	0112      	lsls	r2, r2, #4
 801c86e:	1ad3      	subs	r3, r2, r3
 801c870:	011b      	lsls	r3, r3, #4
 801c872:	b299      	uxth	r1, r3
 801c874:	79ba      	ldrb	r2, [r7, #6]
 801c876:	7bfb      	ldrb	r3, [r7, #15]
 801c878:	4013      	ands	r3, r2
 801c87a:	b2db      	uxtb	r3, r3
 801c87c:	461a      	mov	r2, r3
 801c87e:	8a7b      	ldrh	r3, [r7, #18]
 801c880:	fa42 f303 	asr.w	r3, r2, r3
 801c884:	2b00      	cmp	r3, #0
 801c886:	d101      	bne.n	801c88c <_Z13WS2812_SETLEDhhhh+0xfc>
 801c888:	205a      	movs	r0, #90	; 0x5a
 801c88a:	e000      	b.n	801c88e <_Z13WS2812_SETLEDhhhh+0xfe>
 801c88c:	2000      	movs	r0, #0
 801c88e:	79fa      	ldrb	r2, [r7, #7]
 801c890:	4613      	mov	r3, r2
 801c892:	005b      	lsls	r3, r3, #1
 801c894:	4413      	add	r3, r2
 801c896:	00db      	lsls	r3, r3, #3
 801c898:	f103 020f 	add.w	r2, r3, #15
 801c89c:	8a7b      	ldrh	r3, [r7, #18]
 801c89e:	1ad3      	subs	r3, r2, r3
 801c8a0:	005b      	lsls	r3, r3, #1
 801c8a2:	697a      	ldr	r2, [r7, #20]
 801c8a4:	4413      	add	r3, r2
 801c8a6:	1842      	adds	r2, r0, r1
 801c8a8:	b292      	uxth	r2, r2
 801c8aa:	801a      	strh	r2, [r3, #0]
		drawBuffer[index*WS2812_NUMCOLORCHANNELS*WS2812_DMA_BYTES_PER_CHAN + WS2812_DMA_BYTES_PER_CHAN*2 + 7-i] = ((b & mask) >> i)*WS2812_HIGHVAL + (!((b & mask) >> i))*WS2812_LOWVAL;
 801c8ac:	793a      	ldrb	r2, [r7, #4]
 801c8ae:	7bfb      	ldrb	r3, [r7, #15]
 801c8b0:	4013      	ands	r3, r2
 801c8b2:	b2db      	uxtb	r3, r3
 801c8b4:	461a      	mov	r2, r3
 801c8b6:	8a7b      	ldrh	r3, [r7, #18]
 801c8b8:	fa42 f303 	asr.w	r3, r2, r3
 801c8bc:	b29b      	uxth	r3, r3
 801c8be:	461a      	mov	r2, r3
 801c8c0:	0112      	lsls	r2, r2, #4
 801c8c2:	1ad3      	subs	r3, r2, r3
 801c8c4:	011b      	lsls	r3, r3, #4
 801c8c6:	b299      	uxth	r1, r3
 801c8c8:	793a      	ldrb	r2, [r7, #4]
 801c8ca:	7bfb      	ldrb	r3, [r7, #15]
 801c8cc:	4013      	ands	r3, r2
 801c8ce:	b2db      	uxtb	r3, r3
 801c8d0:	461a      	mov	r2, r3
 801c8d2:	8a7b      	ldrh	r3, [r7, #18]
 801c8d4:	fa42 f303 	asr.w	r3, r2, r3
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d101      	bne.n	801c8e0 <_Z13WS2812_SETLEDhhhh+0x150>
 801c8dc:	205a      	movs	r0, #90	; 0x5a
 801c8de:	e000      	b.n	801c8e2 <_Z13WS2812_SETLEDhhhh+0x152>
 801c8e0:	2000      	movs	r0, #0
 801c8e2:	79fa      	ldrb	r2, [r7, #7]
 801c8e4:	4613      	mov	r3, r2
 801c8e6:	005b      	lsls	r3, r3, #1
 801c8e8:	4413      	add	r3, r2
 801c8ea:	00db      	lsls	r3, r3, #3
 801c8ec:	f103 0217 	add.w	r2, r3, #23
 801c8f0:	8a7b      	ldrh	r3, [r7, #18]
 801c8f2:	1ad3      	subs	r3, r2, r3
 801c8f4:	005b      	lsls	r3, r3, #1
 801c8f6:	697a      	ldr	r2, [r7, #20]
 801c8f8:	4413      	add	r3, r2
 801c8fa:	1842      	adds	r2, r0, r1
 801c8fc:	b292      	uxth	r2, r2
 801c8fe:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i < 8; i++)
 801c900:	8a7b      	ldrh	r3, [r7, #18]
 801c902:	3301      	adds	r3, #1
 801c904:	827b      	strh	r3, [r7, #18]
 801c906:	8a7b      	ldrh	r3, [r7, #18]
 801c908:	2b07      	cmp	r3, #7
 801c90a:	f67f af77 	bls.w	801c7fc <_Z13WS2812_SETLEDhhhh+0x6c>
	}

}
 801c90e:	bf00      	nop
 801c910:	bf00      	nop
 801c912:	3718      	adds	r7, #24
 801c914:	46bd      	mov	sp, r7
 801c916:	bc90      	pop	{r4, r7}
 801c918:	4770      	bx	lr
 801c91a:	bf00      	nop
 801c91c:	240019f4 	.word	0x240019f4
 801c920:	24000010 	.word	0x24000010
 801c924:	24001b14 	.word	0x24001b14
 801c928:	24002f6c 	.word	0x24002f6c

0801c92c <_Z16WS2812_SETALLLEDhhh>:
	*b_out = WS2812_LEDSTATE[stateLookup+2];
}


void WS2812_SETALLLED(uint8_t r, uint8_t g, uint8_t b)
{
 801c92c:	b580      	push	{r7, lr}
 801c92e:	b084      	sub	sp, #16
 801c930:	af00      	add	r7, sp, #0
 801c932:	4603      	mov	r3, r0
 801c934:	71fb      	strb	r3, [r7, #7]
 801c936:	460b      	mov	r3, r1
 801c938:	71bb      	strb	r3, [r7, #6]
 801c93a:	4613      	mov	r3, r2
 801c93c:	717b      	strb	r3, [r7, #5]
	for(uint8_t i = 0; i < WS2812_NUMLEDS; i++)
 801c93e:	2300      	movs	r3, #0
 801c940:	73fb      	strb	r3, [r7, #15]
 801c942:	e008      	b.n	801c956 <_Z16WS2812_SETALLLEDhhh+0x2a>
	{
		WS2812_SETLED(i, r,g,b);
 801c944:	797b      	ldrb	r3, [r7, #5]
 801c946:	79ba      	ldrb	r2, [r7, #6]
 801c948:	79f9      	ldrb	r1, [r7, #7]
 801c94a:	7bf8      	ldrb	r0, [r7, #15]
 801c94c:	f7ff ff20 	bl	801c790 <_Z13WS2812_SETLEDhhhh>
	for(uint8_t i = 0; i < WS2812_NUMLEDS; i++)
 801c950:	7bfb      	ldrb	r3, [r7, #15]
 801c952:	3301      	adds	r3, #1
 801c954:	73fb      	strb	r3, [r7, #15]
 801c956:	7bfb      	ldrb	r3, [r7, #15]
 801c958:	2b5f      	cmp	r3, #95	; 0x5f
 801c95a:	d9f3      	bls.n	801c944 <_Z16WS2812_SETALLLEDhhh+0x18>
	}
}
 801c95c:	bf00      	nop
 801c95e:	bf00      	nop
 801c960:	3710      	adds	r7, #16
 801c962:	46bd      	mov	sp, r7
 801c964:	bd80      	pop	{r7, pc}
	...

0801c968 <_ZN15LEDPanelManagerC1Ev>:
 *      Author: casht
 */

#include <LEDPanelManager.h>

LEDPanelManager::LEDPanelManager() {
 801c968:	b580      	push	{r7, lr}
 801c96a:	b084      	sub	sp, #16
 801c96c:	af00      	add	r7, sp, #0
 801c96e:	6078      	str	r0, [r7, #4]
 801c970:	4a15      	ldr	r2, [pc, #84]	; (801c9c8 <_ZN15LEDPanelManagerC1Ev+0x60>)
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	601a      	str	r2, [r3, #0]
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	2200      	movs	r2, #0
 801c97a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144


	//fill the lookup arrays.
	for(int i = 0; i < LED_NUM_LEDS_PER_RING; i++)
 801c97e:	2300      	movs	r3, #0
 801c980:	60fb      	str	r3, [r7, #12]
 801c982:	e019      	b.n	801c9b8 <_ZN15LEDPanelManagerC1Ev+0x50>
	{
		ringInnerClockToLEDIdx[i] = ClockIndexToLEDIndex(RINGIDENTIFIER_INNER, i);
 801c984:	68fa      	ldr	r2, [r7, #12]
 801c986:	2100      	movs	r1, #0
 801c988:	6878      	ldr	r0, [r7, #4]
 801c98a:	f7e3 fe92 	bl	80006b2 <_ZN15LEDPanelManager20ClockIndexToLEDIndexENS_14RINGIDENTIFIEREi>
 801c98e:	4601      	mov	r1, r0
 801c990:	687a      	ldr	r2, [r7, #4]
 801c992:	68fb      	ldr	r3, [r7, #12]
 801c994:	009b      	lsls	r3, r3, #2
 801c996:	4413      	add	r3, r2
 801c998:	6059      	str	r1, [r3, #4]
		ringOuterClockToLEDIdx[i] = ClockIndexToLEDIndex(RINGIDENTIFIER_OUTER, i);
 801c99a:	68fa      	ldr	r2, [r7, #12]
 801c99c:	2101      	movs	r1, #1
 801c99e:	6878      	ldr	r0, [r7, #4]
 801c9a0:	f7e3 fe87 	bl	80006b2 <_ZN15LEDPanelManager20ClockIndexToLEDIndexENS_14RINGIDENTIFIEREi>
 801c9a4:	4601      	mov	r1, r0
 801c9a6:	687a      	ldr	r2, [r7, #4]
 801c9a8:	68fb      	ldr	r3, [r7, #12]
 801c9aa:	3328      	adds	r3, #40	; 0x28
 801c9ac:	009b      	lsls	r3, r3, #2
 801c9ae:	4413      	add	r3, r2
 801c9b0:	6059      	str	r1, [r3, #4]
	for(int i = 0; i < LED_NUM_LEDS_PER_RING; i++)
 801c9b2:	68fb      	ldr	r3, [r7, #12]
 801c9b4:	3301      	adds	r3, #1
 801c9b6:	60fb      	str	r3, [r7, #12]
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	2b27      	cmp	r3, #39	; 0x27
 801c9bc:	dde2      	ble.n	801c984 <_ZN15LEDPanelManagerC1Ev+0x1c>
	}
}
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	4618      	mov	r0, r3
 801c9c2:	3710      	adds	r7, #16
 801c9c4:	46bd      	mov	sp, r7
 801c9c6:	bd80      	pop	{r7, pc}
 801c9c8:	0801e4fc 	.word	0x0801e4fc

0801c9cc <_ZN15LEDPanelManagerD1Ev>:

LEDPanelManager::~LEDPanelManager() {
 801c9cc:	b480      	push	{r7}
 801c9ce:	b083      	sub	sp, #12
 801c9d0:	af00      	add	r7, sp, #0
 801c9d2:	6078      	str	r0, [r7, #4]
 801c9d4:	4a04      	ldr	r2, [pc, #16]	; (801c9e8 <_ZN15LEDPanelManagerD1Ev+0x1c>)
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	4618      	mov	r0, r3
 801c9de:	370c      	adds	r7, #12
 801c9e0:	46bd      	mov	sp, r7
 801c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9e6:	4770      	bx	lr
 801c9e8:	0801e4fc 	.word	0x0801e4fc

0801c9ec <_ZN15LEDPanelManagerD0Ev>:
LEDPanelManager::~LEDPanelManager() {
 801c9ec:	b580      	push	{r7, lr}
 801c9ee:	b082      	sub	sp, #8
 801c9f0:	af00      	add	r7, sp, #0
 801c9f2:	6078      	str	r0, [r7, #4]
}
 801c9f4:	6878      	ldr	r0, [r7, #4]
 801c9f6:	f7ff ffe9 	bl	801c9cc <_ZN15LEDPanelManagerD1Ev>
 801c9fa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 801c9fe:	6878      	ldr	r0, [r7, #4]
 801ca00:	f000 f805 	bl	801ca0e <_ZdlPvj>
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	4618      	mov	r0, r3
 801ca08:	3708      	adds	r7, #8
 801ca0a:	46bd      	mov	sp, r7
 801ca0c:	bd80      	pop	{r7, pc}

0801ca0e <_ZdlPvj>:
 801ca0e:	f000 b800 	b.w	801ca12 <_ZdlPv>

0801ca12 <_ZdlPv>:
 801ca12:	f000 b801 	b.w	801ca18 <free>
	...

0801ca18 <free>:
 801ca18:	4b02      	ldr	r3, [pc, #8]	; (801ca24 <free+0xc>)
 801ca1a:	4601      	mov	r1, r0
 801ca1c:	6818      	ldr	r0, [r3, #0]
 801ca1e:	f000 bb43 	b.w	801d0a8 <_free_r>
 801ca22:	bf00      	nop
 801ca24:	2400006c 	.word	0x2400006c

0801ca28 <sbrk_aligned>:
 801ca28:	b570      	push	{r4, r5, r6, lr}
 801ca2a:	4e0e      	ldr	r6, [pc, #56]	; (801ca64 <sbrk_aligned+0x3c>)
 801ca2c:	460c      	mov	r4, r1
 801ca2e:	6831      	ldr	r1, [r6, #0]
 801ca30:	4605      	mov	r5, r0
 801ca32:	b911      	cbnz	r1, 801ca3a <sbrk_aligned+0x12>
 801ca34:	f000 fae8 	bl	801d008 <_sbrk_r>
 801ca38:	6030      	str	r0, [r6, #0]
 801ca3a:	4621      	mov	r1, r4
 801ca3c:	4628      	mov	r0, r5
 801ca3e:	f000 fae3 	bl	801d008 <_sbrk_r>
 801ca42:	1c43      	adds	r3, r0, #1
 801ca44:	d00a      	beq.n	801ca5c <sbrk_aligned+0x34>
 801ca46:	1cc4      	adds	r4, r0, #3
 801ca48:	f024 0403 	bic.w	r4, r4, #3
 801ca4c:	42a0      	cmp	r0, r4
 801ca4e:	d007      	beq.n	801ca60 <sbrk_aligned+0x38>
 801ca50:	1a21      	subs	r1, r4, r0
 801ca52:	4628      	mov	r0, r5
 801ca54:	f000 fad8 	bl	801d008 <_sbrk_r>
 801ca58:	3001      	adds	r0, #1
 801ca5a:	d101      	bne.n	801ca60 <sbrk_aligned+0x38>
 801ca5c:	f04f 34ff 	mov.w	r4, #4294967295
 801ca60:	4620      	mov	r0, r4
 801ca62:	bd70      	pop	{r4, r5, r6, pc}
 801ca64:	240043c8 	.word	0x240043c8

0801ca68 <_malloc_r>:
 801ca68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ca6c:	1ccd      	adds	r5, r1, #3
 801ca6e:	f025 0503 	bic.w	r5, r5, #3
 801ca72:	3508      	adds	r5, #8
 801ca74:	2d0c      	cmp	r5, #12
 801ca76:	bf38      	it	cc
 801ca78:	250c      	movcc	r5, #12
 801ca7a:	2d00      	cmp	r5, #0
 801ca7c:	4607      	mov	r7, r0
 801ca7e:	db01      	blt.n	801ca84 <_malloc_r+0x1c>
 801ca80:	42a9      	cmp	r1, r5
 801ca82:	d905      	bls.n	801ca90 <_malloc_r+0x28>
 801ca84:	230c      	movs	r3, #12
 801ca86:	603b      	str	r3, [r7, #0]
 801ca88:	2600      	movs	r6, #0
 801ca8a:	4630      	mov	r0, r6
 801ca8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801cb64 <_malloc_r+0xfc>
 801ca94:	f000 f868 	bl	801cb68 <__malloc_lock>
 801ca98:	f8d8 3000 	ldr.w	r3, [r8]
 801ca9c:	461c      	mov	r4, r3
 801ca9e:	bb5c      	cbnz	r4, 801caf8 <_malloc_r+0x90>
 801caa0:	4629      	mov	r1, r5
 801caa2:	4638      	mov	r0, r7
 801caa4:	f7ff ffc0 	bl	801ca28 <sbrk_aligned>
 801caa8:	1c43      	adds	r3, r0, #1
 801caaa:	4604      	mov	r4, r0
 801caac:	d155      	bne.n	801cb5a <_malloc_r+0xf2>
 801caae:	f8d8 4000 	ldr.w	r4, [r8]
 801cab2:	4626      	mov	r6, r4
 801cab4:	2e00      	cmp	r6, #0
 801cab6:	d145      	bne.n	801cb44 <_malloc_r+0xdc>
 801cab8:	2c00      	cmp	r4, #0
 801caba:	d048      	beq.n	801cb4e <_malloc_r+0xe6>
 801cabc:	6823      	ldr	r3, [r4, #0]
 801cabe:	4631      	mov	r1, r6
 801cac0:	4638      	mov	r0, r7
 801cac2:	eb04 0903 	add.w	r9, r4, r3
 801cac6:	f000 fa9f 	bl	801d008 <_sbrk_r>
 801caca:	4581      	cmp	r9, r0
 801cacc:	d13f      	bne.n	801cb4e <_malloc_r+0xe6>
 801cace:	6821      	ldr	r1, [r4, #0]
 801cad0:	1a6d      	subs	r5, r5, r1
 801cad2:	4629      	mov	r1, r5
 801cad4:	4638      	mov	r0, r7
 801cad6:	f7ff ffa7 	bl	801ca28 <sbrk_aligned>
 801cada:	3001      	adds	r0, #1
 801cadc:	d037      	beq.n	801cb4e <_malloc_r+0xe6>
 801cade:	6823      	ldr	r3, [r4, #0]
 801cae0:	442b      	add	r3, r5
 801cae2:	6023      	str	r3, [r4, #0]
 801cae4:	f8d8 3000 	ldr.w	r3, [r8]
 801cae8:	2b00      	cmp	r3, #0
 801caea:	d038      	beq.n	801cb5e <_malloc_r+0xf6>
 801caec:	685a      	ldr	r2, [r3, #4]
 801caee:	42a2      	cmp	r2, r4
 801caf0:	d12b      	bne.n	801cb4a <_malloc_r+0xe2>
 801caf2:	2200      	movs	r2, #0
 801caf4:	605a      	str	r2, [r3, #4]
 801caf6:	e00f      	b.n	801cb18 <_malloc_r+0xb0>
 801caf8:	6822      	ldr	r2, [r4, #0]
 801cafa:	1b52      	subs	r2, r2, r5
 801cafc:	d41f      	bmi.n	801cb3e <_malloc_r+0xd6>
 801cafe:	2a0b      	cmp	r2, #11
 801cb00:	d917      	bls.n	801cb32 <_malloc_r+0xca>
 801cb02:	1961      	adds	r1, r4, r5
 801cb04:	42a3      	cmp	r3, r4
 801cb06:	6025      	str	r5, [r4, #0]
 801cb08:	bf18      	it	ne
 801cb0a:	6059      	strne	r1, [r3, #4]
 801cb0c:	6863      	ldr	r3, [r4, #4]
 801cb0e:	bf08      	it	eq
 801cb10:	f8c8 1000 	streq.w	r1, [r8]
 801cb14:	5162      	str	r2, [r4, r5]
 801cb16:	604b      	str	r3, [r1, #4]
 801cb18:	4638      	mov	r0, r7
 801cb1a:	f104 060b 	add.w	r6, r4, #11
 801cb1e:	f000 f829 	bl	801cb74 <__malloc_unlock>
 801cb22:	f026 0607 	bic.w	r6, r6, #7
 801cb26:	1d23      	adds	r3, r4, #4
 801cb28:	1af2      	subs	r2, r6, r3
 801cb2a:	d0ae      	beq.n	801ca8a <_malloc_r+0x22>
 801cb2c:	1b9b      	subs	r3, r3, r6
 801cb2e:	50a3      	str	r3, [r4, r2]
 801cb30:	e7ab      	b.n	801ca8a <_malloc_r+0x22>
 801cb32:	42a3      	cmp	r3, r4
 801cb34:	6862      	ldr	r2, [r4, #4]
 801cb36:	d1dd      	bne.n	801caf4 <_malloc_r+0x8c>
 801cb38:	f8c8 2000 	str.w	r2, [r8]
 801cb3c:	e7ec      	b.n	801cb18 <_malloc_r+0xb0>
 801cb3e:	4623      	mov	r3, r4
 801cb40:	6864      	ldr	r4, [r4, #4]
 801cb42:	e7ac      	b.n	801ca9e <_malloc_r+0x36>
 801cb44:	4634      	mov	r4, r6
 801cb46:	6876      	ldr	r6, [r6, #4]
 801cb48:	e7b4      	b.n	801cab4 <_malloc_r+0x4c>
 801cb4a:	4613      	mov	r3, r2
 801cb4c:	e7cc      	b.n	801cae8 <_malloc_r+0x80>
 801cb4e:	230c      	movs	r3, #12
 801cb50:	603b      	str	r3, [r7, #0]
 801cb52:	4638      	mov	r0, r7
 801cb54:	f000 f80e 	bl	801cb74 <__malloc_unlock>
 801cb58:	e797      	b.n	801ca8a <_malloc_r+0x22>
 801cb5a:	6025      	str	r5, [r4, #0]
 801cb5c:	e7dc      	b.n	801cb18 <_malloc_r+0xb0>
 801cb5e:	605b      	str	r3, [r3, #4]
 801cb60:	deff      	udf	#255	; 0xff
 801cb62:	bf00      	nop
 801cb64:	240043c4 	.word	0x240043c4

0801cb68 <__malloc_lock>:
 801cb68:	4801      	ldr	r0, [pc, #4]	; (801cb70 <__malloc_lock+0x8>)
 801cb6a:	f000 ba9a 	b.w	801d0a2 <__retarget_lock_acquire_recursive>
 801cb6e:	bf00      	nop
 801cb70:	2400450c 	.word	0x2400450c

0801cb74 <__malloc_unlock>:
 801cb74:	4801      	ldr	r0, [pc, #4]	; (801cb7c <__malloc_unlock+0x8>)
 801cb76:	f000 ba95 	b.w	801d0a4 <__retarget_lock_release_recursive>
 801cb7a:	bf00      	nop
 801cb7c:	2400450c 	.word	0x2400450c

0801cb80 <std>:
 801cb80:	2300      	movs	r3, #0
 801cb82:	b510      	push	{r4, lr}
 801cb84:	4604      	mov	r4, r0
 801cb86:	e9c0 3300 	strd	r3, r3, [r0]
 801cb8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cb8e:	6083      	str	r3, [r0, #8]
 801cb90:	8181      	strh	r1, [r0, #12]
 801cb92:	6643      	str	r3, [r0, #100]	; 0x64
 801cb94:	81c2      	strh	r2, [r0, #14]
 801cb96:	6183      	str	r3, [r0, #24]
 801cb98:	4619      	mov	r1, r3
 801cb9a:	2208      	movs	r2, #8
 801cb9c:	305c      	adds	r0, #92	; 0x5c
 801cb9e:	f000 f9f7 	bl	801cf90 <memset>
 801cba2:	4b0d      	ldr	r3, [pc, #52]	; (801cbd8 <std+0x58>)
 801cba4:	6263      	str	r3, [r4, #36]	; 0x24
 801cba6:	4b0d      	ldr	r3, [pc, #52]	; (801cbdc <std+0x5c>)
 801cba8:	62a3      	str	r3, [r4, #40]	; 0x28
 801cbaa:	4b0d      	ldr	r3, [pc, #52]	; (801cbe0 <std+0x60>)
 801cbac:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cbae:	4b0d      	ldr	r3, [pc, #52]	; (801cbe4 <std+0x64>)
 801cbb0:	6323      	str	r3, [r4, #48]	; 0x30
 801cbb2:	4b0d      	ldr	r3, [pc, #52]	; (801cbe8 <std+0x68>)
 801cbb4:	6224      	str	r4, [r4, #32]
 801cbb6:	429c      	cmp	r4, r3
 801cbb8:	d006      	beq.n	801cbc8 <std+0x48>
 801cbba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801cbbe:	4294      	cmp	r4, r2
 801cbc0:	d002      	beq.n	801cbc8 <std+0x48>
 801cbc2:	33d0      	adds	r3, #208	; 0xd0
 801cbc4:	429c      	cmp	r4, r3
 801cbc6:	d105      	bne.n	801cbd4 <std+0x54>
 801cbc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cbcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbd0:	f000 ba66 	b.w	801d0a0 <__retarget_lock_init_recursive>
 801cbd4:	bd10      	pop	{r4, pc}
 801cbd6:	bf00      	nop
 801cbd8:	0801cde1 	.word	0x0801cde1
 801cbdc:	0801ce03 	.word	0x0801ce03
 801cbe0:	0801ce3b 	.word	0x0801ce3b
 801cbe4:	0801ce5f 	.word	0x0801ce5f
 801cbe8:	240043cc 	.word	0x240043cc

0801cbec <stdio_exit_handler>:
 801cbec:	4a02      	ldr	r2, [pc, #8]	; (801cbf8 <stdio_exit_handler+0xc>)
 801cbee:	4903      	ldr	r1, [pc, #12]	; (801cbfc <stdio_exit_handler+0x10>)
 801cbf0:	4803      	ldr	r0, [pc, #12]	; (801cc00 <stdio_exit_handler+0x14>)
 801cbf2:	f000 b869 	b.w	801ccc8 <_fwalk_sglue>
 801cbf6:	bf00      	nop
 801cbf8:	24000014 	.word	0x24000014
 801cbfc:	0801d7f5 	.word	0x0801d7f5
 801cc00:	24000020 	.word	0x24000020

0801cc04 <cleanup_stdio>:
 801cc04:	6841      	ldr	r1, [r0, #4]
 801cc06:	4b0c      	ldr	r3, [pc, #48]	; (801cc38 <cleanup_stdio+0x34>)
 801cc08:	4299      	cmp	r1, r3
 801cc0a:	b510      	push	{r4, lr}
 801cc0c:	4604      	mov	r4, r0
 801cc0e:	d001      	beq.n	801cc14 <cleanup_stdio+0x10>
 801cc10:	f000 fdf0 	bl	801d7f4 <_fflush_r>
 801cc14:	68a1      	ldr	r1, [r4, #8]
 801cc16:	4b09      	ldr	r3, [pc, #36]	; (801cc3c <cleanup_stdio+0x38>)
 801cc18:	4299      	cmp	r1, r3
 801cc1a:	d002      	beq.n	801cc22 <cleanup_stdio+0x1e>
 801cc1c:	4620      	mov	r0, r4
 801cc1e:	f000 fde9 	bl	801d7f4 <_fflush_r>
 801cc22:	68e1      	ldr	r1, [r4, #12]
 801cc24:	4b06      	ldr	r3, [pc, #24]	; (801cc40 <cleanup_stdio+0x3c>)
 801cc26:	4299      	cmp	r1, r3
 801cc28:	d004      	beq.n	801cc34 <cleanup_stdio+0x30>
 801cc2a:	4620      	mov	r0, r4
 801cc2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc30:	f000 bde0 	b.w	801d7f4 <_fflush_r>
 801cc34:	bd10      	pop	{r4, pc}
 801cc36:	bf00      	nop
 801cc38:	240043cc 	.word	0x240043cc
 801cc3c:	24004434 	.word	0x24004434
 801cc40:	2400449c 	.word	0x2400449c

0801cc44 <global_stdio_init.part.0>:
 801cc44:	b510      	push	{r4, lr}
 801cc46:	4b0b      	ldr	r3, [pc, #44]	; (801cc74 <global_stdio_init.part.0+0x30>)
 801cc48:	4c0b      	ldr	r4, [pc, #44]	; (801cc78 <global_stdio_init.part.0+0x34>)
 801cc4a:	4a0c      	ldr	r2, [pc, #48]	; (801cc7c <global_stdio_init.part.0+0x38>)
 801cc4c:	601a      	str	r2, [r3, #0]
 801cc4e:	4620      	mov	r0, r4
 801cc50:	2200      	movs	r2, #0
 801cc52:	2104      	movs	r1, #4
 801cc54:	f7ff ff94 	bl	801cb80 <std>
 801cc58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801cc5c:	2201      	movs	r2, #1
 801cc5e:	2109      	movs	r1, #9
 801cc60:	f7ff ff8e 	bl	801cb80 <std>
 801cc64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801cc68:	2202      	movs	r2, #2
 801cc6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc6e:	2112      	movs	r1, #18
 801cc70:	f7ff bf86 	b.w	801cb80 <std>
 801cc74:	24004504 	.word	0x24004504
 801cc78:	240043cc 	.word	0x240043cc
 801cc7c:	0801cbed 	.word	0x0801cbed

0801cc80 <__sfp_lock_acquire>:
 801cc80:	4801      	ldr	r0, [pc, #4]	; (801cc88 <__sfp_lock_acquire+0x8>)
 801cc82:	f000 ba0e 	b.w	801d0a2 <__retarget_lock_acquire_recursive>
 801cc86:	bf00      	nop
 801cc88:	2400450d 	.word	0x2400450d

0801cc8c <__sfp_lock_release>:
 801cc8c:	4801      	ldr	r0, [pc, #4]	; (801cc94 <__sfp_lock_release+0x8>)
 801cc8e:	f000 ba09 	b.w	801d0a4 <__retarget_lock_release_recursive>
 801cc92:	bf00      	nop
 801cc94:	2400450d 	.word	0x2400450d

0801cc98 <__sinit>:
 801cc98:	b510      	push	{r4, lr}
 801cc9a:	4604      	mov	r4, r0
 801cc9c:	f7ff fff0 	bl	801cc80 <__sfp_lock_acquire>
 801cca0:	6a23      	ldr	r3, [r4, #32]
 801cca2:	b11b      	cbz	r3, 801ccac <__sinit+0x14>
 801cca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cca8:	f7ff bff0 	b.w	801cc8c <__sfp_lock_release>
 801ccac:	4b04      	ldr	r3, [pc, #16]	; (801ccc0 <__sinit+0x28>)
 801ccae:	6223      	str	r3, [r4, #32]
 801ccb0:	4b04      	ldr	r3, [pc, #16]	; (801ccc4 <__sinit+0x2c>)
 801ccb2:	681b      	ldr	r3, [r3, #0]
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d1f5      	bne.n	801cca4 <__sinit+0xc>
 801ccb8:	f7ff ffc4 	bl	801cc44 <global_stdio_init.part.0>
 801ccbc:	e7f2      	b.n	801cca4 <__sinit+0xc>
 801ccbe:	bf00      	nop
 801ccc0:	0801cc05 	.word	0x0801cc05
 801ccc4:	24004504 	.word	0x24004504

0801ccc8 <_fwalk_sglue>:
 801ccc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cccc:	4607      	mov	r7, r0
 801ccce:	4688      	mov	r8, r1
 801ccd0:	4614      	mov	r4, r2
 801ccd2:	2600      	movs	r6, #0
 801ccd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ccd8:	f1b9 0901 	subs.w	r9, r9, #1
 801ccdc:	d505      	bpl.n	801ccea <_fwalk_sglue+0x22>
 801ccde:	6824      	ldr	r4, [r4, #0]
 801cce0:	2c00      	cmp	r4, #0
 801cce2:	d1f7      	bne.n	801ccd4 <_fwalk_sglue+0xc>
 801cce4:	4630      	mov	r0, r6
 801cce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ccea:	89ab      	ldrh	r3, [r5, #12]
 801ccec:	2b01      	cmp	r3, #1
 801ccee:	d907      	bls.n	801cd00 <_fwalk_sglue+0x38>
 801ccf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ccf4:	3301      	adds	r3, #1
 801ccf6:	d003      	beq.n	801cd00 <_fwalk_sglue+0x38>
 801ccf8:	4629      	mov	r1, r5
 801ccfa:	4638      	mov	r0, r7
 801ccfc:	47c0      	blx	r8
 801ccfe:	4306      	orrs	r6, r0
 801cd00:	3568      	adds	r5, #104	; 0x68
 801cd02:	e7e9      	b.n	801ccd8 <_fwalk_sglue+0x10>

0801cd04 <iprintf>:
 801cd04:	b40f      	push	{r0, r1, r2, r3}
 801cd06:	b507      	push	{r0, r1, r2, lr}
 801cd08:	4906      	ldr	r1, [pc, #24]	; (801cd24 <iprintf+0x20>)
 801cd0a:	ab04      	add	r3, sp, #16
 801cd0c:	6808      	ldr	r0, [r1, #0]
 801cd0e:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd12:	6881      	ldr	r1, [r0, #8]
 801cd14:	9301      	str	r3, [sp, #4]
 801cd16:	f000 fa3d 	bl	801d194 <_vfiprintf_r>
 801cd1a:	b003      	add	sp, #12
 801cd1c:	f85d eb04 	ldr.w	lr, [sp], #4
 801cd20:	b004      	add	sp, #16
 801cd22:	4770      	bx	lr
 801cd24:	2400006c 	.word	0x2400006c

0801cd28 <_puts_r>:
 801cd28:	6a03      	ldr	r3, [r0, #32]
 801cd2a:	b570      	push	{r4, r5, r6, lr}
 801cd2c:	6884      	ldr	r4, [r0, #8]
 801cd2e:	4605      	mov	r5, r0
 801cd30:	460e      	mov	r6, r1
 801cd32:	b90b      	cbnz	r3, 801cd38 <_puts_r+0x10>
 801cd34:	f7ff ffb0 	bl	801cc98 <__sinit>
 801cd38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cd3a:	07db      	lsls	r3, r3, #31
 801cd3c:	d405      	bmi.n	801cd4a <_puts_r+0x22>
 801cd3e:	89a3      	ldrh	r3, [r4, #12]
 801cd40:	0598      	lsls	r0, r3, #22
 801cd42:	d402      	bmi.n	801cd4a <_puts_r+0x22>
 801cd44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cd46:	f000 f9ac 	bl	801d0a2 <__retarget_lock_acquire_recursive>
 801cd4a:	89a3      	ldrh	r3, [r4, #12]
 801cd4c:	0719      	lsls	r1, r3, #28
 801cd4e:	d513      	bpl.n	801cd78 <_puts_r+0x50>
 801cd50:	6923      	ldr	r3, [r4, #16]
 801cd52:	b18b      	cbz	r3, 801cd78 <_puts_r+0x50>
 801cd54:	3e01      	subs	r6, #1
 801cd56:	68a3      	ldr	r3, [r4, #8]
 801cd58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801cd5c:	3b01      	subs	r3, #1
 801cd5e:	60a3      	str	r3, [r4, #8]
 801cd60:	b9e9      	cbnz	r1, 801cd9e <_puts_r+0x76>
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	da2e      	bge.n	801cdc4 <_puts_r+0x9c>
 801cd66:	4622      	mov	r2, r4
 801cd68:	210a      	movs	r1, #10
 801cd6a:	4628      	mov	r0, r5
 801cd6c:	f000 f87b 	bl	801ce66 <__swbuf_r>
 801cd70:	3001      	adds	r0, #1
 801cd72:	d007      	beq.n	801cd84 <_puts_r+0x5c>
 801cd74:	250a      	movs	r5, #10
 801cd76:	e007      	b.n	801cd88 <_puts_r+0x60>
 801cd78:	4621      	mov	r1, r4
 801cd7a:	4628      	mov	r0, r5
 801cd7c:	f000 f8b0 	bl	801cee0 <__swsetup_r>
 801cd80:	2800      	cmp	r0, #0
 801cd82:	d0e7      	beq.n	801cd54 <_puts_r+0x2c>
 801cd84:	f04f 35ff 	mov.w	r5, #4294967295
 801cd88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cd8a:	07da      	lsls	r2, r3, #31
 801cd8c:	d405      	bmi.n	801cd9a <_puts_r+0x72>
 801cd8e:	89a3      	ldrh	r3, [r4, #12]
 801cd90:	059b      	lsls	r3, r3, #22
 801cd92:	d402      	bmi.n	801cd9a <_puts_r+0x72>
 801cd94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cd96:	f000 f985 	bl	801d0a4 <__retarget_lock_release_recursive>
 801cd9a:	4628      	mov	r0, r5
 801cd9c:	bd70      	pop	{r4, r5, r6, pc}
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	da04      	bge.n	801cdac <_puts_r+0x84>
 801cda2:	69a2      	ldr	r2, [r4, #24]
 801cda4:	429a      	cmp	r2, r3
 801cda6:	dc06      	bgt.n	801cdb6 <_puts_r+0x8e>
 801cda8:	290a      	cmp	r1, #10
 801cdaa:	d004      	beq.n	801cdb6 <_puts_r+0x8e>
 801cdac:	6823      	ldr	r3, [r4, #0]
 801cdae:	1c5a      	adds	r2, r3, #1
 801cdb0:	6022      	str	r2, [r4, #0]
 801cdb2:	7019      	strb	r1, [r3, #0]
 801cdb4:	e7cf      	b.n	801cd56 <_puts_r+0x2e>
 801cdb6:	4622      	mov	r2, r4
 801cdb8:	4628      	mov	r0, r5
 801cdba:	f000 f854 	bl	801ce66 <__swbuf_r>
 801cdbe:	3001      	adds	r0, #1
 801cdc0:	d1c9      	bne.n	801cd56 <_puts_r+0x2e>
 801cdc2:	e7df      	b.n	801cd84 <_puts_r+0x5c>
 801cdc4:	6823      	ldr	r3, [r4, #0]
 801cdc6:	250a      	movs	r5, #10
 801cdc8:	1c5a      	adds	r2, r3, #1
 801cdca:	6022      	str	r2, [r4, #0]
 801cdcc:	701d      	strb	r5, [r3, #0]
 801cdce:	e7db      	b.n	801cd88 <_puts_r+0x60>

0801cdd0 <puts>:
 801cdd0:	4b02      	ldr	r3, [pc, #8]	; (801cddc <puts+0xc>)
 801cdd2:	4601      	mov	r1, r0
 801cdd4:	6818      	ldr	r0, [r3, #0]
 801cdd6:	f7ff bfa7 	b.w	801cd28 <_puts_r>
 801cdda:	bf00      	nop
 801cddc:	2400006c 	.word	0x2400006c

0801cde0 <__sread>:
 801cde0:	b510      	push	{r4, lr}
 801cde2:	460c      	mov	r4, r1
 801cde4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cde8:	f000 f8fc 	bl	801cfe4 <_read_r>
 801cdec:	2800      	cmp	r0, #0
 801cdee:	bfab      	itete	ge
 801cdf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cdf2:	89a3      	ldrhlt	r3, [r4, #12]
 801cdf4:	181b      	addge	r3, r3, r0
 801cdf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cdfa:	bfac      	ite	ge
 801cdfc:	6563      	strge	r3, [r4, #84]	; 0x54
 801cdfe:	81a3      	strhlt	r3, [r4, #12]
 801ce00:	bd10      	pop	{r4, pc}

0801ce02 <__swrite>:
 801ce02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce06:	461f      	mov	r7, r3
 801ce08:	898b      	ldrh	r3, [r1, #12]
 801ce0a:	05db      	lsls	r3, r3, #23
 801ce0c:	4605      	mov	r5, r0
 801ce0e:	460c      	mov	r4, r1
 801ce10:	4616      	mov	r6, r2
 801ce12:	d505      	bpl.n	801ce20 <__swrite+0x1e>
 801ce14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce18:	2302      	movs	r3, #2
 801ce1a:	2200      	movs	r2, #0
 801ce1c:	f000 f8d0 	bl	801cfc0 <_lseek_r>
 801ce20:	89a3      	ldrh	r3, [r4, #12]
 801ce22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ce26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ce2a:	81a3      	strh	r3, [r4, #12]
 801ce2c:	4632      	mov	r2, r6
 801ce2e:	463b      	mov	r3, r7
 801ce30:	4628      	mov	r0, r5
 801ce32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ce36:	f000 b8f7 	b.w	801d028 <_write_r>

0801ce3a <__sseek>:
 801ce3a:	b510      	push	{r4, lr}
 801ce3c:	460c      	mov	r4, r1
 801ce3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce42:	f000 f8bd 	bl	801cfc0 <_lseek_r>
 801ce46:	1c43      	adds	r3, r0, #1
 801ce48:	89a3      	ldrh	r3, [r4, #12]
 801ce4a:	bf15      	itete	ne
 801ce4c:	6560      	strne	r0, [r4, #84]	; 0x54
 801ce4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ce52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ce56:	81a3      	strheq	r3, [r4, #12]
 801ce58:	bf18      	it	ne
 801ce5a:	81a3      	strhne	r3, [r4, #12]
 801ce5c:	bd10      	pop	{r4, pc}

0801ce5e <__sclose>:
 801ce5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce62:	f000 b89d 	b.w	801cfa0 <_close_r>

0801ce66 <__swbuf_r>:
 801ce66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce68:	460e      	mov	r6, r1
 801ce6a:	4614      	mov	r4, r2
 801ce6c:	4605      	mov	r5, r0
 801ce6e:	b118      	cbz	r0, 801ce78 <__swbuf_r+0x12>
 801ce70:	6a03      	ldr	r3, [r0, #32]
 801ce72:	b90b      	cbnz	r3, 801ce78 <__swbuf_r+0x12>
 801ce74:	f7ff ff10 	bl	801cc98 <__sinit>
 801ce78:	69a3      	ldr	r3, [r4, #24]
 801ce7a:	60a3      	str	r3, [r4, #8]
 801ce7c:	89a3      	ldrh	r3, [r4, #12]
 801ce7e:	071a      	lsls	r2, r3, #28
 801ce80:	d525      	bpl.n	801cece <__swbuf_r+0x68>
 801ce82:	6923      	ldr	r3, [r4, #16]
 801ce84:	b31b      	cbz	r3, 801cece <__swbuf_r+0x68>
 801ce86:	6823      	ldr	r3, [r4, #0]
 801ce88:	6922      	ldr	r2, [r4, #16]
 801ce8a:	1a98      	subs	r0, r3, r2
 801ce8c:	6963      	ldr	r3, [r4, #20]
 801ce8e:	b2f6      	uxtb	r6, r6
 801ce90:	4283      	cmp	r3, r0
 801ce92:	4637      	mov	r7, r6
 801ce94:	dc04      	bgt.n	801cea0 <__swbuf_r+0x3a>
 801ce96:	4621      	mov	r1, r4
 801ce98:	4628      	mov	r0, r5
 801ce9a:	f000 fcab 	bl	801d7f4 <_fflush_r>
 801ce9e:	b9e0      	cbnz	r0, 801ceda <__swbuf_r+0x74>
 801cea0:	68a3      	ldr	r3, [r4, #8]
 801cea2:	3b01      	subs	r3, #1
 801cea4:	60a3      	str	r3, [r4, #8]
 801cea6:	6823      	ldr	r3, [r4, #0]
 801cea8:	1c5a      	adds	r2, r3, #1
 801ceaa:	6022      	str	r2, [r4, #0]
 801ceac:	701e      	strb	r6, [r3, #0]
 801ceae:	6962      	ldr	r2, [r4, #20]
 801ceb0:	1c43      	adds	r3, r0, #1
 801ceb2:	429a      	cmp	r2, r3
 801ceb4:	d004      	beq.n	801cec0 <__swbuf_r+0x5a>
 801ceb6:	89a3      	ldrh	r3, [r4, #12]
 801ceb8:	07db      	lsls	r3, r3, #31
 801ceba:	d506      	bpl.n	801ceca <__swbuf_r+0x64>
 801cebc:	2e0a      	cmp	r6, #10
 801cebe:	d104      	bne.n	801ceca <__swbuf_r+0x64>
 801cec0:	4621      	mov	r1, r4
 801cec2:	4628      	mov	r0, r5
 801cec4:	f000 fc96 	bl	801d7f4 <_fflush_r>
 801cec8:	b938      	cbnz	r0, 801ceda <__swbuf_r+0x74>
 801ceca:	4638      	mov	r0, r7
 801cecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cece:	4621      	mov	r1, r4
 801ced0:	4628      	mov	r0, r5
 801ced2:	f000 f805 	bl	801cee0 <__swsetup_r>
 801ced6:	2800      	cmp	r0, #0
 801ced8:	d0d5      	beq.n	801ce86 <__swbuf_r+0x20>
 801ceda:	f04f 37ff 	mov.w	r7, #4294967295
 801cede:	e7f4      	b.n	801ceca <__swbuf_r+0x64>

0801cee0 <__swsetup_r>:
 801cee0:	b538      	push	{r3, r4, r5, lr}
 801cee2:	4b2a      	ldr	r3, [pc, #168]	; (801cf8c <__swsetup_r+0xac>)
 801cee4:	4605      	mov	r5, r0
 801cee6:	6818      	ldr	r0, [r3, #0]
 801cee8:	460c      	mov	r4, r1
 801ceea:	b118      	cbz	r0, 801cef4 <__swsetup_r+0x14>
 801ceec:	6a03      	ldr	r3, [r0, #32]
 801ceee:	b90b      	cbnz	r3, 801cef4 <__swsetup_r+0x14>
 801cef0:	f7ff fed2 	bl	801cc98 <__sinit>
 801cef4:	89a3      	ldrh	r3, [r4, #12]
 801cef6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cefa:	0718      	lsls	r0, r3, #28
 801cefc:	d422      	bmi.n	801cf44 <__swsetup_r+0x64>
 801cefe:	06d9      	lsls	r1, r3, #27
 801cf00:	d407      	bmi.n	801cf12 <__swsetup_r+0x32>
 801cf02:	2309      	movs	r3, #9
 801cf04:	602b      	str	r3, [r5, #0]
 801cf06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801cf0a:	81a3      	strh	r3, [r4, #12]
 801cf0c:	f04f 30ff 	mov.w	r0, #4294967295
 801cf10:	e034      	b.n	801cf7c <__swsetup_r+0x9c>
 801cf12:	0758      	lsls	r0, r3, #29
 801cf14:	d512      	bpl.n	801cf3c <__swsetup_r+0x5c>
 801cf16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cf18:	b141      	cbz	r1, 801cf2c <__swsetup_r+0x4c>
 801cf1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cf1e:	4299      	cmp	r1, r3
 801cf20:	d002      	beq.n	801cf28 <__swsetup_r+0x48>
 801cf22:	4628      	mov	r0, r5
 801cf24:	f000 f8c0 	bl	801d0a8 <_free_r>
 801cf28:	2300      	movs	r3, #0
 801cf2a:	6363      	str	r3, [r4, #52]	; 0x34
 801cf2c:	89a3      	ldrh	r3, [r4, #12]
 801cf2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801cf32:	81a3      	strh	r3, [r4, #12]
 801cf34:	2300      	movs	r3, #0
 801cf36:	6063      	str	r3, [r4, #4]
 801cf38:	6923      	ldr	r3, [r4, #16]
 801cf3a:	6023      	str	r3, [r4, #0]
 801cf3c:	89a3      	ldrh	r3, [r4, #12]
 801cf3e:	f043 0308 	orr.w	r3, r3, #8
 801cf42:	81a3      	strh	r3, [r4, #12]
 801cf44:	6923      	ldr	r3, [r4, #16]
 801cf46:	b94b      	cbnz	r3, 801cf5c <__swsetup_r+0x7c>
 801cf48:	89a3      	ldrh	r3, [r4, #12]
 801cf4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801cf4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cf52:	d003      	beq.n	801cf5c <__swsetup_r+0x7c>
 801cf54:	4621      	mov	r1, r4
 801cf56:	4628      	mov	r0, r5
 801cf58:	f000 fc9a 	bl	801d890 <__smakebuf_r>
 801cf5c:	89a0      	ldrh	r0, [r4, #12]
 801cf5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cf62:	f010 0301 	ands.w	r3, r0, #1
 801cf66:	d00a      	beq.n	801cf7e <__swsetup_r+0x9e>
 801cf68:	2300      	movs	r3, #0
 801cf6a:	60a3      	str	r3, [r4, #8]
 801cf6c:	6963      	ldr	r3, [r4, #20]
 801cf6e:	425b      	negs	r3, r3
 801cf70:	61a3      	str	r3, [r4, #24]
 801cf72:	6923      	ldr	r3, [r4, #16]
 801cf74:	b943      	cbnz	r3, 801cf88 <__swsetup_r+0xa8>
 801cf76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801cf7a:	d1c4      	bne.n	801cf06 <__swsetup_r+0x26>
 801cf7c:	bd38      	pop	{r3, r4, r5, pc}
 801cf7e:	0781      	lsls	r1, r0, #30
 801cf80:	bf58      	it	pl
 801cf82:	6963      	ldrpl	r3, [r4, #20]
 801cf84:	60a3      	str	r3, [r4, #8]
 801cf86:	e7f4      	b.n	801cf72 <__swsetup_r+0x92>
 801cf88:	2000      	movs	r0, #0
 801cf8a:	e7f7      	b.n	801cf7c <__swsetup_r+0x9c>
 801cf8c:	2400006c 	.word	0x2400006c

0801cf90 <memset>:
 801cf90:	4402      	add	r2, r0
 801cf92:	4603      	mov	r3, r0
 801cf94:	4293      	cmp	r3, r2
 801cf96:	d100      	bne.n	801cf9a <memset+0xa>
 801cf98:	4770      	bx	lr
 801cf9a:	f803 1b01 	strb.w	r1, [r3], #1
 801cf9e:	e7f9      	b.n	801cf94 <memset+0x4>

0801cfa0 <_close_r>:
 801cfa0:	b538      	push	{r3, r4, r5, lr}
 801cfa2:	4d06      	ldr	r5, [pc, #24]	; (801cfbc <_close_r+0x1c>)
 801cfa4:	2300      	movs	r3, #0
 801cfa6:	4604      	mov	r4, r0
 801cfa8:	4608      	mov	r0, r1
 801cfaa:	602b      	str	r3, [r5, #0]
 801cfac:	f7e5 fc85 	bl	80028ba <_close>
 801cfb0:	1c43      	adds	r3, r0, #1
 801cfb2:	d102      	bne.n	801cfba <_close_r+0x1a>
 801cfb4:	682b      	ldr	r3, [r5, #0]
 801cfb6:	b103      	cbz	r3, 801cfba <_close_r+0x1a>
 801cfb8:	6023      	str	r3, [r4, #0]
 801cfba:	bd38      	pop	{r3, r4, r5, pc}
 801cfbc:	24004508 	.word	0x24004508

0801cfc0 <_lseek_r>:
 801cfc0:	b538      	push	{r3, r4, r5, lr}
 801cfc2:	4d07      	ldr	r5, [pc, #28]	; (801cfe0 <_lseek_r+0x20>)
 801cfc4:	4604      	mov	r4, r0
 801cfc6:	4608      	mov	r0, r1
 801cfc8:	4611      	mov	r1, r2
 801cfca:	2200      	movs	r2, #0
 801cfcc:	602a      	str	r2, [r5, #0]
 801cfce:	461a      	mov	r2, r3
 801cfd0:	f7e5 fc9a 	bl	8002908 <_lseek>
 801cfd4:	1c43      	adds	r3, r0, #1
 801cfd6:	d102      	bne.n	801cfde <_lseek_r+0x1e>
 801cfd8:	682b      	ldr	r3, [r5, #0]
 801cfda:	b103      	cbz	r3, 801cfde <_lseek_r+0x1e>
 801cfdc:	6023      	str	r3, [r4, #0]
 801cfde:	bd38      	pop	{r3, r4, r5, pc}
 801cfe0:	24004508 	.word	0x24004508

0801cfe4 <_read_r>:
 801cfe4:	b538      	push	{r3, r4, r5, lr}
 801cfe6:	4d07      	ldr	r5, [pc, #28]	; (801d004 <_read_r+0x20>)
 801cfe8:	4604      	mov	r4, r0
 801cfea:	4608      	mov	r0, r1
 801cfec:	4611      	mov	r1, r2
 801cfee:	2200      	movs	r2, #0
 801cff0:	602a      	str	r2, [r5, #0]
 801cff2:	461a      	mov	r2, r3
 801cff4:	f7e5 fc28 	bl	8002848 <_read>
 801cff8:	1c43      	adds	r3, r0, #1
 801cffa:	d102      	bne.n	801d002 <_read_r+0x1e>
 801cffc:	682b      	ldr	r3, [r5, #0]
 801cffe:	b103      	cbz	r3, 801d002 <_read_r+0x1e>
 801d000:	6023      	str	r3, [r4, #0]
 801d002:	bd38      	pop	{r3, r4, r5, pc}
 801d004:	24004508 	.word	0x24004508

0801d008 <_sbrk_r>:
 801d008:	b538      	push	{r3, r4, r5, lr}
 801d00a:	4d06      	ldr	r5, [pc, #24]	; (801d024 <_sbrk_r+0x1c>)
 801d00c:	2300      	movs	r3, #0
 801d00e:	4604      	mov	r4, r0
 801d010:	4608      	mov	r0, r1
 801d012:	602b      	str	r3, [r5, #0]
 801d014:	f7e5 fc86 	bl	8002924 <_sbrk>
 801d018:	1c43      	adds	r3, r0, #1
 801d01a:	d102      	bne.n	801d022 <_sbrk_r+0x1a>
 801d01c:	682b      	ldr	r3, [r5, #0]
 801d01e:	b103      	cbz	r3, 801d022 <_sbrk_r+0x1a>
 801d020:	6023      	str	r3, [r4, #0]
 801d022:	bd38      	pop	{r3, r4, r5, pc}
 801d024:	24004508 	.word	0x24004508

0801d028 <_write_r>:
 801d028:	b538      	push	{r3, r4, r5, lr}
 801d02a:	4d07      	ldr	r5, [pc, #28]	; (801d048 <_write_r+0x20>)
 801d02c:	4604      	mov	r4, r0
 801d02e:	4608      	mov	r0, r1
 801d030:	4611      	mov	r1, r2
 801d032:	2200      	movs	r2, #0
 801d034:	602a      	str	r2, [r5, #0]
 801d036:	461a      	mov	r2, r3
 801d038:	f7e5 fc23 	bl	8002882 <_write>
 801d03c:	1c43      	adds	r3, r0, #1
 801d03e:	d102      	bne.n	801d046 <_write_r+0x1e>
 801d040:	682b      	ldr	r3, [r5, #0]
 801d042:	b103      	cbz	r3, 801d046 <_write_r+0x1e>
 801d044:	6023      	str	r3, [r4, #0]
 801d046:	bd38      	pop	{r3, r4, r5, pc}
 801d048:	24004508 	.word	0x24004508

0801d04c <__errno>:
 801d04c:	4b01      	ldr	r3, [pc, #4]	; (801d054 <__errno+0x8>)
 801d04e:	6818      	ldr	r0, [r3, #0]
 801d050:	4770      	bx	lr
 801d052:	bf00      	nop
 801d054:	2400006c 	.word	0x2400006c

0801d058 <__libc_init_array>:
 801d058:	b570      	push	{r4, r5, r6, lr}
 801d05a:	4d0d      	ldr	r5, [pc, #52]	; (801d090 <__libc_init_array+0x38>)
 801d05c:	4c0d      	ldr	r4, [pc, #52]	; (801d094 <__libc_init_array+0x3c>)
 801d05e:	1b64      	subs	r4, r4, r5
 801d060:	10a4      	asrs	r4, r4, #2
 801d062:	2600      	movs	r6, #0
 801d064:	42a6      	cmp	r6, r4
 801d066:	d109      	bne.n	801d07c <__libc_init_array+0x24>
 801d068:	4d0b      	ldr	r5, [pc, #44]	; (801d098 <__libc_init_array+0x40>)
 801d06a:	4c0c      	ldr	r4, [pc, #48]	; (801d09c <__libc_init_array+0x44>)
 801d06c:	f000 fc6e 	bl	801d94c <_init>
 801d070:	1b64      	subs	r4, r4, r5
 801d072:	10a4      	asrs	r4, r4, #2
 801d074:	2600      	movs	r6, #0
 801d076:	42a6      	cmp	r6, r4
 801d078:	d105      	bne.n	801d086 <__libc_init_array+0x2e>
 801d07a:	bd70      	pop	{r4, r5, r6, pc}
 801d07c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d080:	4798      	blx	r3
 801d082:	3601      	adds	r6, #1
 801d084:	e7ee      	b.n	801d064 <__libc_init_array+0xc>
 801d086:	f855 3b04 	ldr.w	r3, [r5], #4
 801d08a:	4798      	blx	r3
 801d08c:	3601      	adds	r6, #1
 801d08e:	e7f2      	b.n	801d076 <__libc_init_array+0x1e>
 801d090:	0801e540 	.word	0x0801e540
 801d094:	0801e540 	.word	0x0801e540
 801d098:	0801e540 	.word	0x0801e540
 801d09c:	0801e558 	.word	0x0801e558

0801d0a0 <__retarget_lock_init_recursive>:
 801d0a0:	4770      	bx	lr

0801d0a2 <__retarget_lock_acquire_recursive>:
 801d0a2:	4770      	bx	lr

0801d0a4 <__retarget_lock_release_recursive>:
 801d0a4:	4770      	bx	lr
	...

0801d0a8 <_free_r>:
 801d0a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d0aa:	2900      	cmp	r1, #0
 801d0ac:	d044      	beq.n	801d138 <_free_r+0x90>
 801d0ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d0b2:	9001      	str	r0, [sp, #4]
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	f1a1 0404 	sub.w	r4, r1, #4
 801d0ba:	bfb8      	it	lt
 801d0bc:	18e4      	addlt	r4, r4, r3
 801d0be:	f7ff fd53 	bl	801cb68 <__malloc_lock>
 801d0c2:	4a1e      	ldr	r2, [pc, #120]	; (801d13c <_free_r+0x94>)
 801d0c4:	9801      	ldr	r0, [sp, #4]
 801d0c6:	6813      	ldr	r3, [r2, #0]
 801d0c8:	b933      	cbnz	r3, 801d0d8 <_free_r+0x30>
 801d0ca:	6063      	str	r3, [r4, #4]
 801d0cc:	6014      	str	r4, [r2, #0]
 801d0ce:	b003      	add	sp, #12
 801d0d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d0d4:	f7ff bd4e 	b.w	801cb74 <__malloc_unlock>
 801d0d8:	42a3      	cmp	r3, r4
 801d0da:	d908      	bls.n	801d0ee <_free_r+0x46>
 801d0dc:	6825      	ldr	r5, [r4, #0]
 801d0de:	1961      	adds	r1, r4, r5
 801d0e0:	428b      	cmp	r3, r1
 801d0e2:	bf01      	itttt	eq
 801d0e4:	6819      	ldreq	r1, [r3, #0]
 801d0e6:	685b      	ldreq	r3, [r3, #4]
 801d0e8:	1949      	addeq	r1, r1, r5
 801d0ea:	6021      	streq	r1, [r4, #0]
 801d0ec:	e7ed      	b.n	801d0ca <_free_r+0x22>
 801d0ee:	461a      	mov	r2, r3
 801d0f0:	685b      	ldr	r3, [r3, #4]
 801d0f2:	b10b      	cbz	r3, 801d0f8 <_free_r+0x50>
 801d0f4:	42a3      	cmp	r3, r4
 801d0f6:	d9fa      	bls.n	801d0ee <_free_r+0x46>
 801d0f8:	6811      	ldr	r1, [r2, #0]
 801d0fa:	1855      	adds	r5, r2, r1
 801d0fc:	42a5      	cmp	r5, r4
 801d0fe:	d10b      	bne.n	801d118 <_free_r+0x70>
 801d100:	6824      	ldr	r4, [r4, #0]
 801d102:	4421      	add	r1, r4
 801d104:	1854      	adds	r4, r2, r1
 801d106:	42a3      	cmp	r3, r4
 801d108:	6011      	str	r1, [r2, #0]
 801d10a:	d1e0      	bne.n	801d0ce <_free_r+0x26>
 801d10c:	681c      	ldr	r4, [r3, #0]
 801d10e:	685b      	ldr	r3, [r3, #4]
 801d110:	6053      	str	r3, [r2, #4]
 801d112:	440c      	add	r4, r1
 801d114:	6014      	str	r4, [r2, #0]
 801d116:	e7da      	b.n	801d0ce <_free_r+0x26>
 801d118:	d902      	bls.n	801d120 <_free_r+0x78>
 801d11a:	230c      	movs	r3, #12
 801d11c:	6003      	str	r3, [r0, #0]
 801d11e:	e7d6      	b.n	801d0ce <_free_r+0x26>
 801d120:	6825      	ldr	r5, [r4, #0]
 801d122:	1961      	adds	r1, r4, r5
 801d124:	428b      	cmp	r3, r1
 801d126:	bf04      	itt	eq
 801d128:	6819      	ldreq	r1, [r3, #0]
 801d12a:	685b      	ldreq	r3, [r3, #4]
 801d12c:	6063      	str	r3, [r4, #4]
 801d12e:	bf04      	itt	eq
 801d130:	1949      	addeq	r1, r1, r5
 801d132:	6021      	streq	r1, [r4, #0]
 801d134:	6054      	str	r4, [r2, #4]
 801d136:	e7ca      	b.n	801d0ce <_free_r+0x26>
 801d138:	b003      	add	sp, #12
 801d13a:	bd30      	pop	{r4, r5, pc}
 801d13c:	240043c4 	.word	0x240043c4

0801d140 <__sfputc_r>:
 801d140:	6893      	ldr	r3, [r2, #8]
 801d142:	3b01      	subs	r3, #1
 801d144:	2b00      	cmp	r3, #0
 801d146:	b410      	push	{r4}
 801d148:	6093      	str	r3, [r2, #8]
 801d14a:	da08      	bge.n	801d15e <__sfputc_r+0x1e>
 801d14c:	6994      	ldr	r4, [r2, #24]
 801d14e:	42a3      	cmp	r3, r4
 801d150:	db01      	blt.n	801d156 <__sfputc_r+0x16>
 801d152:	290a      	cmp	r1, #10
 801d154:	d103      	bne.n	801d15e <__sfputc_r+0x1e>
 801d156:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d15a:	f7ff be84 	b.w	801ce66 <__swbuf_r>
 801d15e:	6813      	ldr	r3, [r2, #0]
 801d160:	1c58      	adds	r0, r3, #1
 801d162:	6010      	str	r0, [r2, #0]
 801d164:	7019      	strb	r1, [r3, #0]
 801d166:	4608      	mov	r0, r1
 801d168:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d16c:	4770      	bx	lr

0801d16e <__sfputs_r>:
 801d16e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d170:	4606      	mov	r6, r0
 801d172:	460f      	mov	r7, r1
 801d174:	4614      	mov	r4, r2
 801d176:	18d5      	adds	r5, r2, r3
 801d178:	42ac      	cmp	r4, r5
 801d17a:	d101      	bne.n	801d180 <__sfputs_r+0x12>
 801d17c:	2000      	movs	r0, #0
 801d17e:	e007      	b.n	801d190 <__sfputs_r+0x22>
 801d180:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d184:	463a      	mov	r2, r7
 801d186:	4630      	mov	r0, r6
 801d188:	f7ff ffda 	bl	801d140 <__sfputc_r>
 801d18c:	1c43      	adds	r3, r0, #1
 801d18e:	d1f3      	bne.n	801d178 <__sfputs_r+0xa>
 801d190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d194 <_vfiprintf_r>:
 801d194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d198:	460d      	mov	r5, r1
 801d19a:	b09d      	sub	sp, #116	; 0x74
 801d19c:	4614      	mov	r4, r2
 801d19e:	4698      	mov	r8, r3
 801d1a0:	4606      	mov	r6, r0
 801d1a2:	b118      	cbz	r0, 801d1ac <_vfiprintf_r+0x18>
 801d1a4:	6a03      	ldr	r3, [r0, #32]
 801d1a6:	b90b      	cbnz	r3, 801d1ac <_vfiprintf_r+0x18>
 801d1a8:	f7ff fd76 	bl	801cc98 <__sinit>
 801d1ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d1ae:	07d9      	lsls	r1, r3, #31
 801d1b0:	d405      	bmi.n	801d1be <_vfiprintf_r+0x2a>
 801d1b2:	89ab      	ldrh	r3, [r5, #12]
 801d1b4:	059a      	lsls	r2, r3, #22
 801d1b6:	d402      	bmi.n	801d1be <_vfiprintf_r+0x2a>
 801d1b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d1ba:	f7ff ff72 	bl	801d0a2 <__retarget_lock_acquire_recursive>
 801d1be:	89ab      	ldrh	r3, [r5, #12]
 801d1c0:	071b      	lsls	r3, r3, #28
 801d1c2:	d501      	bpl.n	801d1c8 <_vfiprintf_r+0x34>
 801d1c4:	692b      	ldr	r3, [r5, #16]
 801d1c6:	b99b      	cbnz	r3, 801d1f0 <_vfiprintf_r+0x5c>
 801d1c8:	4629      	mov	r1, r5
 801d1ca:	4630      	mov	r0, r6
 801d1cc:	f7ff fe88 	bl	801cee0 <__swsetup_r>
 801d1d0:	b170      	cbz	r0, 801d1f0 <_vfiprintf_r+0x5c>
 801d1d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d1d4:	07dc      	lsls	r4, r3, #31
 801d1d6:	d504      	bpl.n	801d1e2 <_vfiprintf_r+0x4e>
 801d1d8:	f04f 30ff 	mov.w	r0, #4294967295
 801d1dc:	b01d      	add	sp, #116	; 0x74
 801d1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1e2:	89ab      	ldrh	r3, [r5, #12]
 801d1e4:	0598      	lsls	r0, r3, #22
 801d1e6:	d4f7      	bmi.n	801d1d8 <_vfiprintf_r+0x44>
 801d1e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d1ea:	f7ff ff5b 	bl	801d0a4 <__retarget_lock_release_recursive>
 801d1ee:	e7f3      	b.n	801d1d8 <_vfiprintf_r+0x44>
 801d1f0:	2300      	movs	r3, #0
 801d1f2:	9309      	str	r3, [sp, #36]	; 0x24
 801d1f4:	2320      	movs	r3, #32
 801d1f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d1fa:	f8cd 800c 	str.w	r8, [sp, #12]
 801d1fe:	2330      	movs	r3, #48	; 0x30
 801d200:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801d3b4 <_vfiprintf_r+0x220>
 801d204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d208:	f04f 0901 	mov.w	r9, #1
 801d20c:	4623      	mov	r3, r4
 801d20e:	469a      	mov	sl, r3
 801d210:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d214:	b10a      	cbz	r2, 801d21a <_vfiprintf_r+0x86>
 801d216:	2a25      	cmp	r2, #37	; 0x25
 801d218:	d1f9      	bne.n	801d20e <_vfiprintf_r+0x7a>
 801d21a:	ebba 0b04 	subs.w	fp, sl, r4
 801d21e:	d00b      	beq.n	801d238 <_vfiprintf_r+0xa4>
 801d220:	465b      	mov	r3, fp
 801d222:	4622      	mov	r2, r4
 801d224:	4629      	mov	r1, r5
 801d226:	4630      	mov	r0, r6
 801d228:	f7ff ffa1 	bl	801d16e <__sfputs_r>
 801d22c:	3001      	adds	r0, #1
 801d22e:	f000 80a9 	beq.w	801d384 <_vfiprintf_r+0x1f0>
 801d232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d234:	445a      	add	r2, fp
 801d236:	9209      	str	r2, [sp, #36]	; 0x24
 801d238:	f89a 3000 	ldrb.w	r3, [sl]
 801d23c:	2b00      	cmp	r3, #0
 801d23e:	f000 80a1 	beq.w	801d384 <_vfiprintf_r+0x1f0>
 801d242:	2300      	movs	r3, #0
 801d244:	f04f 32ff 	mov.w	r2, #4294967295
 801d248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d24c:	f10a 0a01 	add.w	sl, sl, #1
 801d250:	9304      	str	r3, [sp, #16]
 801d252:	9307      	str	r3, [sp, #28]
 801d254:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d258:	931a      	str	r3, [sp, #104]	; 0x68
 801d25a:	4654      	mov	r4, sl
 801d25c:	2205      	movs	r2, #5
 801d25e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d262:	4854      	ldr	r0, [pc, #336]	; (801d3b4 <_vfiprintf_r+0x220>)
 801d264:	f7e3 f83c 	bl	80002e0 <memchr>
 801d268:	9a04      	ldr	r2, [sp, #16]
 801d26a:	b9d8      	cbnz	r0, 801d2a4 <_vfiprintf_r+0x110>
 801d26c:	06d1      	lsls	r1, r2, #27
 801d26e:	bf44      	itt	mi
 801d270:	2320      	movmi	r3, #32
 801d272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d276:	0713      	lsls	r3, r2, #28
 801d278:	bf44      	itt	mi
 801d27a:	232b      	movmi	r3, #43	; 0x2b
 801d27c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d280:	f89a 3000 	ldrb.w	r3, [sl]
 801d284:	2b2a      	cmp	r3, #42	; 0x2a
 801d286:	d015      	beq.n	801d2b4 <_vfiprintf_r+0x120>
 801d288:	9a07      	ldr	r2, [sp, #28]
 801d28a:	4654      	mov	r4, sl
 801d28c:	2000      	movs	r0, #0
 801d28e:	f04f 0c0a 	mov.w	ip, #10
 801d292:	4621      	mov	r1, r4
 801d294:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d298:	3b30      	subs	r3, #48	; 0x30
 801d29a:	2b09      	cmp	r3, #9
 801d29c:	d94d      	bls.n	801d33a <_vfiprintf_r+0x1a6>
 801d29e:	b1b0      	cbz	r0, 801d2ce <_vfiprintf_r+0x13a>
 801d2a0:	9207      	str	r2, [sp, #28]
 801d2a2:	e014      	b.n	801d2ce <_vfiprintf_r+0x13a>
 801d2a4:	eba0 0308 	sub.w	r3, r0, r8
 801d2a8:	fa09 f303 	lsl.w	r3, r9, r3
 801d2ac:	4313      	orrs	r3, r2
 801d2ae:	9304      	str	r3, [sp, #16]
 801d2b0:	46a2      	mov	sl, r4
 801d2b2:	e7d2      	b.n	801d25a <_vfiprintf_r+0xc6>
 801d2b4:	9b03      	ldr	r3, [sp, #12]
 801d2b6:	1d19      	adds	r1, r3, #4
 801d2b8:	681b      	ldr	r3, [r3, #0]
 801d2ba:	9103      	str	r1, [sp, #12]
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	bfbb      	ittet	lt
 801d2c0:	425b      	neglt	r3, r3
 801d2c2:	f042 0202 	orrlt.w	r2, r2, #2
 801d2c6:	9307      	strge	r3, [sp, #28]
 801d2c8:	9307      	strlt	r3, [sp, #28]
 801d2ca:	bfb8      	it	lt
 801d2cc:	9204      	strlt	r2, [sp, #16]
 801d2ce:	7823      	ldrb	r3, [r4, #0]
 801d2d0:	2b2e      	cmp	r3, #46	; 0x2e
 801d2d2:	d10c      	bne.n	801d2ee <_vfiprintf_r+0x15a>
 801d2d4:	7863      	ldrb	r3, [r4, #1]
 801d2d6:	2b2a      	cmp	r3, #42	; 0x2a
 801d2d8:	d134      	bne.n	801d344 <_vfiprintf_r+0x1b0>
 801d2da:	9b03      	ldr	r3, [sp, #12]
 801d2dc:	1d1a      	adds	r2, r3, #4
 801d2de:	681b      	ldr	r3, [r3, #0]
 801d2e0:	9203      	str	r2, [sp, #12]
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	bfb8      	it	lt
 801d2e6:	f04f 33ff 	movlt.w	r3, #4294967295
 801d2ea:	3402      	adds	r4, #2
 801d2ec:	9305      	str	r3, [sp, #20]
 801d2ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801d3c4 <_vfiprintf_r+0x230>
 801d2f2:	7821      	ldrb	r1, [r4, #0]
 801d2f4:	2203      	movs	r2, #3
 801d2f6:	4650      	mov	r0, sl
 801d2f8:	f7e2 fff2 	bl	80002e0 <memchr>
 801d2fc:	b138      	cbz	r0, 801d30e <_vfiprintf_r+0x17a>
 801d2fe:	9b04      	ldr	r3, [sp, #16]
 801d300:	eba0 000a 	sub.w	r0, r0, sl
 801d304:	2240      	movs	r2, #64	; 0x40
 801d306:	4082      	lsls	r2, r0
 801d308:	4313      	orrs	r3, r2
 801d30a:	3401      	adds	r4, #1
 801d30c:	9304      	str	r3, [sp, #16]
 801d30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d312:	4829      	ldr	r0, [pc, #164]	; (801d3b8 <_vfiprintf_r+0x224>)
 801d314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d318:	2206      	movs	r2, #6
 801d31a:	f7e2 ffe1 	bl	80002e0 <memchr>
 801d31e:	2800      	cmp	r0, #0
 801d320:	d03f      	beq.n	801d3a2 <_vfiprintf_r+0x20e>
 801d322:	4b26      	ldr	r3, [pc, #152]	; (801d3bc <_vfiprintf_r+0x228>)
 801d324:	bb1b      	cbnz	r3, 801d36e <_vfiprintf_r+0x1da>
 801d326:	9b03      	ldr	r3, [sp, #12]
 801d328:	3307      	adds	r3, #7
 801d32a:	f023 0307 	bic.w	r3, r3, #7
 801d32e:	3308      	adds	r3, #8
 801d330:	9303      	str	r3, [sp, #12]
 801d332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d334:	443b      	add	r3, r7
 801d336:	9309      	str	r3, [sp, #36]	; 0x24
 801d338:	e768      	b.n	801d20c <_vfiprintf_r+0x78>
 801d33a:	fb0c 3202 	mla	r2, ip, r2, r3
 801d33e:	460c      	mov	r4, r1
 801d340:	2001      	movs	r0, #1
 801d342:	e7a6      	b.n	801d292 <_vfiprintf_r+0xfe>
 801d344:	2300      	movs	r3, #0
 801d346:	3401      	adds	r4, #1
 801d348:	9305      	str	r3, [sp, #20]
 801d34a:	4619      	mov	r1, r3
 801d34c:	f04f 0c0a 	mov.w	ip, #10
 801d350:	4620      	mov	r0, r4
 801d352:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d356:	3a30      	subs	r2, #48	; 0x30
 801d358:	2a09      	cmp	r2, #9
 801d35a:	d903      	bls.n	801d364 <_vfiprintf_r+0x1d0>
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	d0c6      	beq.n	801d2ee <_vfiprintf_r+0x15a>
 801d360:	9105      	str	r1, [sp, #20]
 801d362:	e7c4      	b.n	801d2ee <_vfiprintf_r+0x15a>
 801d364:	fb0c 2101 	mla	r1, ip, r1, r2
 801d368:	4604      	mov	r4, r0
 801d36a:	2301      	movs	r3, #1
 801d36c:	e7f0      	b.n	801d350 <_vfiprintf_r+0x1bc>
 801d36e:	ab03      	add	r3, sp, #12
 801d370:	9300      	str	r3, [sp, #0]
 801d372:	462a      	mov	r2, r5
 801d374:	4b12      	ldr	r3, [pc, #72]	; (801d3c0 <_vfiprintf_r+0x22c>)
 801d376:	a904      	add	r1, sp, #16
 801d378:	4630      	mov	r0, r6
 801d37a:	f3af 8000 	nop.w
 801d37e:	4607      	mov	r7, r0
 801d380:	1c78      	adds	r0, r7, #1
 801d382:	d1d6      	bne.n	801d332 <_vfiprintf_r+0x19e>
 801d384:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d386:	07d9      	lsls	r1, r3, #31
 801d388:	d405      	bmi.n	801d396 <_vfiprintf_r+0x202>
 801d38a:	89ab      	ldrh	r3, [r5, #12]
 801d38c:	059a      	lsls	r2, r3, #22
 801d38e:	d402      	bmi.n	801d396 <_vfiprintf_r+0x202>
 801d390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d392:	f7ff fe87 	bl	801d0a4 <__retarget_lock_release_recursive>
 801d396:	89ab      	ldrh	r3, [r5, #12]
 801d398:	065b      	lsls	r3, r3, #25
 801d39a:	f53f af1d 	bmi.w	801d1d8 <_vfiprintf_r+0x44>
 801d39e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d3a0:	e71c      	b.n	801d1dc <_vfiprintf_r+0x48>
 801d3a2:	ab03      	add	r3, sp, #12
 801d3a4:	9300      	str	r3, [sp, #0]
 801d3a6:	462a      	mov	r2, r5
 801d3a8:	4b05      	ldr	r3, [pc, #20]	; (801d3c0 <_vfiprintf_r+0x22c>)
 801d3aa:	a904      	add	r1, sp, #16
 801d3ac:	4630      	mov	r0, r6
 801d3ae:	f000 f879 	bl	801d4a4 <_printf_i>
 801d3b2:	e7e4      	b.n	801d37e <_vfiprintf_r+0x1ea>
 801d3b4:	0801e504 	.word	0x0801e504
 801d3b8:	0801e50e 	.word	0x0801e50e
 801d3bc:	00000000 	.word	0x00000000
 801d3c0:	0801d16f 	.word	0x0801d16f
 801d3c4:	0801e50a 	.word	0x0801e50a

0801d3c8 <_printf_common>:
 801d3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d3cc:	4616      	mov	r6, r2
 801d3ce:	4699      	mov	r9, r3
 801d3d0:	688a      	ldr	r2, [r1, #8]
 801d3d2:	690b      	ldr	r3, [r1, #16]
 801d3d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d3d8:	4293      	cmp	r3, r2
 801d3da:	bfb8      	it	lt
 801d3dc:	4613      	movlt	r3, r2
 801d3de:	6033      	str	r3, [r6, #0]
 801d3e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d3e4:	4607      	mov	r7, r0
 801d3e6:	460c      	mov	r4, r1
 801d3e8:	b10a      	cbz	r2, 801d3ee <_printf_common+0x26>
 801d3ea:	3301      	adds	r3, #1
 801d3ec:	6033      	str	r3, [r6, #0]
 801d3ee:	6823      	ldr	r3, [r4, #0]
 801d3f0:	0699      	lsls	r1, r3, #26
 801d3f2:	bf42      	ittt	mi
 801d3f4:	6833      	ldrmi	r3, [r6, #0]
 801d3f6:	3302      	addmi	r3, #2
 801d3f8:	6033      	strmi	r3, [r6, #0]
 801d3fa:	6825      	ldr	r5, [r4, #0]
 801d3fc:	f015 0506 	ands.w	r5, r5, #6
 801d400:	d106      	bne.n	801d410 <_printf_common+0x48>
 801d402:	f104 0a19 	add.w	sl, r4, #25
 801d406:	68e3      	ldr	r3, [r4, #12]
 801d408:	6832      	ldr	r2, [r6, #0]
 801d40a:	1a9b      	subs	r3, r3, r2
 801d40c:	42ab      	cmp	r3, r5
 801d40e:	dc26      	bgt.n	801d45e <_printf_common+0x96>
 801d410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d414:	1e13      	subs	r3, r2, #0
 801d416:	6822      	ldr	r2, [r4, #0]
 801d418:	bf18      	it	ne
 801d41a:	2301      	movne	r3, #1
 801d41c:	0692      	lsls	r2, r2, #26
 801d41e:	d42b      	bmi.n	801d478 <_printf_common+0xb0>
 801d420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d424:	4649      	mov	r1, r9
 801d426:	4638      	mov	r0, r7
 801d428:	47c0      	blx	r8
 801d42a:	3001      	adds	r0, #1
 801d42c:	d01e      	beq.n	801d46c <_printf_common+0xa4>
 801d42e:	6823      	ldr	r3, [r4, #0]
 801d430:	6922      	ldr	r2, [r4, #16]
 801d432:	f003 0306 	and.w	r3, r3, #6
 801d436:	2b04      	cmp	r3, #4
 801d438:	bf02      	ittt	eq
 801d43a:	68e5      	ldreq	r5, [r4, #12]
 801d43c:	6833      	ldreq	r3, [r6, #0]
 801d43e:	1aed      	subeq	r5, r5, r3
 801d440:	68a3      	ldr	r3, [r4, #8]
 801d442:	bf0c      	ite	eq
 801d444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d448:	2500      	movne	r5, #0
 801d44a:	4293      	cmp	r3, r2
 801d44c:	bfc4      	itt	gt
 801d44e:	1a9b      	subgt	r3, r3, r2
 801d450:	18ed      	addgt	r5, r5, r3
 801d452:	2600      	movs	r6, #0
 801d454:	341a      	adds	r4, #26
 801d456:	42b5      	cmp	r5, r6
 801d458:	d11a      	bne.n	801d490 <_printf_common+0xc8>
 801d45a:	2000      	movs	r0, #0
 801d45c:	e008      	b.n	801d470 <_printf_common+0xa8>
 801d45e:	2301      	movs	r3, #1
 801d460:	4652      	mov	r2, sl
 801d462:	4649      	mov	r1, r9
 801d464:	4638      	mov	r0, r7
 801d466:	47c0      	blx	r8
 801d468:	3001      	adds	r0, #1
 801d46a:	d103      	bne.n	801d474 <_printf_common+0xac>
 801d46c:	f04f 30ff 	mov.w	r0, #4294967295
 801d470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d474:	3501      	adds	r5, #1
 801d476:	e7c6      	b.n	801d406 <_printf_common+0x3e>
 801d478:	18e1      	adds	r1, r4, r3
 801d47a:	1c5a      	adds	r2, r3, #1
 801d47c:	2030      	movs	r0, #48	; 0x30
 801d47e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d482:	4422      	add	r2, r4
 801d484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d48c:	3302      	adds	r3, #2
 801d48e:	e7c7      	b.n	801d420 <_printf_common+0x58>
 801d490:	2301      	movs	r3, #1
 801d492:	4622      	mov	r2, r4
 801d494:	4649      	mov	r1, r9
 801d496:	4638      	mov	r0, r7
 801d498:	47c0      	blx	r8
 801d49a:	3001      	adds	r0, #1
 801d49c:	d0e6      	beq.n	801d46c <_printf_common+0xa4>
 801d49e:	3601      	adds	r6, #1
 801d4a0:	e7d9      	b.n	801d456 <_printf_common+0x8e>
	...

0801d4a4 <_printf_i>:
 801d4a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d4a8:	7e0f      	ldrb	r7, [r1, #24]
 801d4aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d4ac:	2f78      	cmp	r7, #120	; 0x78
 801d4ae:	4691      	mov	r9, r2
 801d4b0:	4680      	mov	r8, r0
 801d4b2:	460c      	mov	r4, r1
 801d4b4:	469a      	mov	sl, r3
 801d4b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d4ba:	d807      	bhi.n	801d4cc <_printf_i+0x28>
 801d4bc:	2f62      	cmp	r7, #98	; 0x62
 801d4be:	d80a      	bhi.n	801d4d6 <_printf_i+0x32>
 801d4c0:	2f00      	cmp	r7, #0
 801d4c2:	f000 80d4 	beq.w	801d66e <_printf_i+0x1ca>
 801d4c6:	2f58      	cmp	r7, #88	; 0x58
 801d4c8:	f000 80c0 	beq.w	801d64c <_printf_i+0x1a8>
 801d4cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d4d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d4d4:	e03a      	b.n	801d54c <_printf_i+0xa8>
 801d4d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d4da:	2b15      	cmp	r3, #21
 801d4dc:	d8f6      	bhi.n	801d4cc <_printf_i+0x28>
 801d4de:	a101      	add	r1, pc, #4	; (adr r1, 801d4e4 <_printf_i+0x40>)
 801d4e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d4e4:	0801d53d 	.word	0x0801d53d
 801d4e8:	0801d551 	.word	0x0801d551
 801d4ec:	0801d4cd 	.word	0x0801d4cd
 801d4f0:	0801d4cd 	.word	0x0801d4cd
 801d4f4:	0801d4cd 	.word	0x0801d4cd
 801d4f8:	0801d4cd 	.word	0x0801d4cd
 801d4fc:	0801d551 	.word	0x0801d551
 801d500:	0801d4cd 	.word	0x0801d4cd
 801d504:	0801d4cd 	.word	0x0801d4cd
 801d508:	0801d4cd 	.word	0x0801d4cd
 801d50c:	0801d4cd 	.word	0x0801d4cd
 801d510:	0801d655 	.word	0x0801d655
 801d514:	0801d57d 	.word	0x0801d57d
 801d518:	0801d60f 	.word	0x0801d60f
 801d51c:	0801d4cd 	.word	0x0801d4cd
 801d520:	0801d4cd 	.word	0x0801d4cd
 801d524:	0801d677 	.word	0x0801d677
 801d528:	0801d4cd 	.word	0x0801d4cd
 801d52c:	0801d57d 	.word	0x0801d57d
 801d530:	0801d4cd 	.word	0x0801d4cd
 801d534:	0801d4cd 	.word	0x0801d4cd
 801d538:	0801d617 	.word	0x0801d617
 801d53c:	682b      	ldr	r3, [r5, #0]
 801d53e:	1d1a      	adds	r2, r3, #4
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	602a      	str	r2, [r5, #0]
 801d544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d54c:	2301      	movs	r3, #1
 801d54e:	e09f      	b.n	801d690 <_printf_i+0x1ec>
 801d550:	6820      	ldr	r0, [r4, #0]
 801d552:	682b      	ldr	r3, [r5, #0]
 801d554:	0607      	lsls	r7, r0, #24
 801d556:	f103 0104 	add.w	r1, r3, #4
 801d55a:	6029      	str	r1, [r5, #0]
 801d55c:	d501      	bpl.n	801d562 <_printf_i+0xbe>
 801d55e:	681e      	ldr	r6, [r3, #0]
 801d560:	e003      	b.n	801d56a <_printf_i+0xc6>
 801d562:	0646      	lsls	r6, r0, #25
 801d564:	d5fb      	bpl.n	801d55e <_printf_i+0xba>
 801d566:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d56a:	2e00      	cmp	r6, #0
 801d56c:	da03      	bge.n	801d576 <_printf_i+0xd2>
 801d56e:	232d      	movs	r3, #45	; 0x2d
 801d570:	4276      	negs	r6, r6
 801d572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d576:	485a      	ldr	r0, [pc, #360]	; (801d6e0 <_printf_i+0x23c>)
 801d578:	230a      	movs	r3, #10
 801d57a:	e012      	b.n	801d5a2 <_printf_i+0xfe>
 801d57c:	682b      	ldr	r3, [r5, #0]
 801d57e:	6820      	ldr	r0, [r4, #0]
 801d580:	1d19      	adds	r1, r3, #4
 801d582:	6029      	str	r1, [r5, #0]
 801d584:	0605      	lsls	r5, r0, #24
 801d586:	d501      	bpl.n	801d58c <_printf_i+0xe8>
 801d588:	681e      	ldr	r6, [r3, #0]
 801d58a:	e002      	b.n	801d592 <_printf_i+0xee>
 801d58c:	0641      	lsls	r1, r0, #25
 801d58e:	d5fb      	bpl.n	801d588 <_printf_i+0xe4>
 801d590:	881e      	ldrh	r6, [r3, #0]
 801d592:	4853      	ldr	r0, [pc, #332]	; (801d6e0 <_printf_i+0x23c>)
 801d594:	2f6f      	cmp	r7, #111	; 0x6f
 801d596:	bf0c      	ite	eq
 801d598:	2308      	moveq	r3, #8
 801d59a:	230a      	movne	r3, #10
 801d59c:	2100      	movs	r1, #0
 801d59e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d5a2:	6865      	ldr	r5, [r4, #4]
 801d5a4:	60a5      	str	r5, [r4, #8]
 801d5a6:	2d00      	cmp	r5, #0
 801d5a8:	bfa2      	ittt	ge
 801d5aa:	6821      	ldrge	r1, [r4, #0]
 801d5ac:	f021 0104 	bicge.w	r1, r1, #4
 801d5b0:	6021      	strge	r1, [r4, #0]
 801d5b2:	b90e      	cbnz	r6, 801d5b8 <_printf_i+0x114>
 801d5b4:	2d00      	cmp	r5, #0
 801d5b6:	d04b      	beq.n	801d650 <_printf_i+0x1ac>
 801d5b8:	4615      	mov	r5, r2
 801d5ba:	fbb6 f1f3 	udiv	r1, r6, r3
 801d5be:	fb03 6711 	mls	r7, r3, r1, r6
 801d5c2:	5dc7      	ldrb	r7, [r0, r7]
 801d5c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d5c8:	4637      	mov	r7, r6
 801d5ca:	42bb      	cmp	r3, r7
 801d5cc:	460e      	mov	r6, r1
 801d5ce:	d9f4      	bls.n	801d5ba <_printf_i+0x116>
 801d5d0:	2b08      	cmp	r3, #8
 801d5d2:	d10b      	bne.n	801d5ec <_printf_i+0x148>
 801d5d4:	6823      	ldr	r3, [r4, #0]
 801d5d6:	07de      	lsls	r6, r3, #31
 801d5d8:	d508      	bpl.n	801d5ec <_printf_i+0x148>
 801d5da:	6923      	ldr	r3, [r4, #16]
 801d5dc:	6861      	ldr	r1, [r4, #4]
 801d5de:	4299      	cmp	r1, r3
 801d5e0:	bfde      	ittt	le
 801d5e2:	2330      	movle	r3, #48	; 0x30
 801d5e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d5e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d5ec:	1b52      	subs	r2, r2, r5
 801d5ee:	6122      	str	r2, [r4, #16]
 801d5f0:	f8cd a000 	str.w	sl, [sp]
 801d5f4:	464b      	mov	r3, r9
 801d5f6:	aa03      	add	r2, sp, #12
 801d5f8:	4621      	mov	r1, r4
 801d5fa:	4640      	mov	r0, r8
 801d5fc:	f7ff fee4 	bl	801d3c8 <_printf_common>
 801d600:	3001      	adds	r0, #1
 801d602:	d14a      	bne.n	801d69a <_printf_i+0x1f6>
 801d604:	f04f 30ff 	mov.w	r0, #4294967295
 801d608:	b004      	add	sp, #16
 801d60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d60e:	6823      	ldr	r3, [r4, #0]
 801d610:	f043 0320 	orr.w	r3, r3, #32
 801d614:	6023      	str	r3, [r4, #0]
 801d616:	4833      	ldr	r0, [pc, #204]	; (801d6e4 <_printf_i+0x240>)
 801d618:	2778      	movs	r7, #120	; 0x78
 801d61a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d61e:	6823      	ldr	r3, [r4, #0]
 801d620:	6829      	ldr	r1, [r5, #0]
 801d622:	061f      	lsls	r7, r3, #24
 801d624:	f851 6b04 	ldr.w	r6, [r1], #4
 801d628:	d402      	bmi.n	801d630 <_printf_i+0x18c>
 801d62a:	065f      	lsls	r7, r3, #25
 801d62c:	bf48      	it	mi
 801d62e:	b2b6      	uxthmi	r6, r6
 801d630:	07df      	lsls	r7, r3, #31
 801d632:	bf48      	it	mi
 801d634:	f043 0320 	orrmi.w	r3, r3, #32
 801d638:	6029      	str	r1, [r5, #0]
 801d63a:	bf48      	it	mi
 801d63c:	6023      	strmi	r3, [r4, #0]
 801d63e:	b91e      	cbnz	r6, 801d648 <_printf_i+0x1a4>
 801d640:	6823      	ldr	r3, [r4, #0]
 801d642:	f023 0320 	bic.w	r3, r3, #32
 801d646:	6023      	str	r3, [r4, #0]
 801d648:	2310      	movs	r3, #16
 801d64a:	e7a7      	b.n	801d59c <_printf_i+0xf8>
 801d64c:	4824      	ldr	r0, [pc, #144]	; (801d6e0 <_printf_i+0x23c>)
 801d64e:	e7e4      	b.n	801d61a <_printf_i+0x176>
 801d650:	4615      	mov	r5, r2
 801d652:	e7bd      	b.n	801d5d0 <_printf_i+0x12c>
 801d654:	682b      	ldr	r3, [r5, #0]
 801d656:	6826      	ldr	r6, [r4, #0]
 801d658:	6961      	ldr	r1, [r4, #20]
 801d65a:	1d18      	adds	r0, r3, #4
 801d65c:	6028      	str	r0, [r5, #0]
 801d65e:	0635      	lsls	r5, r6, #24
 801d660:	681b      	ldr	r3, [r3, #0]
 801d662:	d501      	bpl.n	801d668 <_printf_i+0x1c4>
 801d664:	6019      	str	r1, [r3, #0]
 801d666:	e002      	b.n	801d66e <_printf_i+0x1ca>
 801d668:	0670      	lsls	r0, r6, #25
 801d66a:	d5fb      	bpl.n	801d664 <_printf_i+0x1c0>
 801d66c:	8019      	strh	r1, [r3, #0]
 801d66e:	2300      	movs	r3, #0
 801d670:	6123      	str	r3, [r4, #16]
 801d672:	4615      	mov	r5, r2
 801d674:	e7bc      	b.n	801d5f0 <_printf_i+0x14c>
 801d676:	682b      	ldr	r3, [r5, #0]
 801d678:	1d1a      	adds	r2, r3, #4
 801d67a:	602a      	str	r2, [r5, #0]
 801d67c:	681d      	ldr	r5, [r3, #0]
 801d67e:	6862      	ldr	r2, [r4, #4]
 801d680:	2100      	movs	r1, #0
 801d682:	4628      	mov	r0, r5
 801d684:	f7e2 fe2c 	bl	80002e0 <memchr>
 801d688:	b108      	cbz	r0, 801d68e <_printf_i+0x1ea>
 801d68a:	1b40      	subs	r0, r0, r5
 801d68c:	6060      	str	r0, [r4, #4]
 801d68e:	6863      	ldr	r3, [r4, #4]
 801d690:	6123      	str	r3, [r4, #16]
 801d692:	2300      	movs	r3, #0
 801d694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d698:	e7aa      	b.n	801d5f0 <_printf_i+0x14c>
 801d69a:	6923      	ldr	r3, [r4, #16]
 801d69c:	462a      	mov	r2, r5
 801d69e:	4649      	mov	r1, r9
 801d6a0:	4640      	mov	r0, r8
 801d6a2:	47d0      	blx	sl
 801d6a4:	3001      	adds	r0, #1
 801d6a6:	d0ad      	beq.n	801d604 <_printf_i+0x160>
 801d6a8:	6823      	ldr	r3, [r4, #0]
 801d6aa:	079b      	lsls	r3, r3, #30
 801d6ac:	d413      	bmi.n	801d6d6 <_printf_i+0x232>
 801d6ae:	68e0      	ldr	r0, [r4, #12]
 801d6b0:	9b03      	ldr	r3, [sp, #12]
 801d6b2:	4298      	cmp	r0, r3
 801d6b4:	bfb8      	it	lt
 801d6b6:	4618      	movlt	r0, r3
 801d6b8:	e7a6      	b.n	801d608 <_printf_i+0x164>
 801d6ba:	2301      	movs	r3, #1
 801d6bc:	4632      	mov	r2, r6
 801d6be:	4649      	mov	r1, r9
 801d6c0:	4640      	mov	r0, r8
 801d6c2:	47d0      	blx	sl
 801d6c4:	3001      	adds	r0, #1
 801d6c6:	d09d      	beq.n	801d604 <_printf_i+0x160>
 801d6c8:	3501      	adds	r5, #1
 801d6ca:	68e3      	ldr	r3, [r4, #12]
 801d6cc:	9903      	ldr	r1, [sp, #12]
 801d6ce:	1a5b      	subs	r3, r3, r1
 801d6d0:	42ab      	cmp	r3, r5
 801d6d2:	dcf2      	bgt.n	801d6ba <_printf_i+0x216>
 801d6d4:	e7eb      	b.n	801d6ae <_printf_i+0x20a>
 801d6d6:	2500      	movs	r5, #0
 801d6d8:	f104 0619 	add.w	r6, r4, #25
 801d6dc:	e7f5      	b.n	801d6ca <_printf_i+0x226>
 801d6de:	bf00      	nop
 801d6e0:	0801e515 	.word	0x0801e515
 801d6e4:	0801e526 	.word	0x0801e526

0801d6e8 <__sflush_r>:
 801d6e8:	898a      	ldrh	r2, [r1, #12]
 801d6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6ee:	4605      	mov	r5, r0
 801d6f0:	0710      	lsls	r0, r2, #28
 801d6f2:	460c      	mov	r4, r1
 801d6f4:	d458      	bmi.n	801d7a8 <__sflush_r+0xc0>
 801d6f6:	684b      	ldr	r3, [r1, #4]
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	dc05      	bgt.n	801d708 <__sflush_r+0x20>
 801d6fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d6fe:	2b00      	cmp	r3, #0
 801d700:	dc02      	bgt.n	801d708 <__sflush_r+0x20>
 801d702:	2000      	movs	r0, #0
 801d704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d70a:	2e00      	cmp	r6, #0
 801d70c:	d0f9      	beq.n	801d702 <__sflush_r+0x1a>
 801d70e:	2300      	movs	r3, #0
 801d710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d714:	682f      	ldr	r7, [r5, #0]
 801d716:	6a21      	ldr	r1, [r4, #32]
 801d718:	602b      	str	r3, [r5, #0]
 801d71a:	d032      	beq.n	801d782 <__sflush_r+0x9a>
 801d71c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d71e:	89a3      	ldrh	r3, [r4, #12]
 801d720:	075a      	lsls	r2, r3, #29
 801d722:	d505      	bpl.n	801d730 <__sflush_r+0x48>
 801d724:	6863      	ldr	r3, [r4, #4]
 801d726:	1ac0      	subs	r0, r0, r3
 801d728:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d72a:	b10b      	cbz	r3, 801d730 <__sflush_r+0x48>
 801d72c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d72e:	1ac0      	subs	r0, r0, r3
 801d730:	2300      	movs	r3, #0
 801d732:	4602      	mov	r2, r0
 801d734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d736:	6a21      	ldr	r1, [r4, #32]
 801d738:	4628      	mov	r0, r5
 801d73a:	47b0      	blx	r6
 801d73c:	1c43      	adds	r3, r0, #1
 801d73e:	89a3      	ldrh	r3, [r4, #12]
 801d740:	d106      	bne.n	801d750 <__sflush_r+0x68>
 801d742:	6829      	ldr	r1, [r5, #0]
 801d744:	291d      	cmp	r1, #29
 801d746:	d82b      	bhi.n	801d7a0 <__sflush_r+0xb8>
 801d748:	4a29      	ldr	r2, [pc, #164]	; (801d7f0 <__sflush_r+0x108>)
 801d74a:	410a      	asrs	r2, r1
 801d74c:	07d6      	lsls	r6, r2, #31
 801d74e:	d427      	bmi.n	801d7a0 <__sflush_r+0xb8>
 801d750:	2200      	movs	r2, #0
 801d752:	6062      	str	r2, [r4, #4]
 801d754:	04d9      	lsls	r1, r3, #19
 801d756:	6922      	ldr	r2, [r4, #16]
 801d758:	6022      	str	r2, [r4, #0]
 801d75a:	d504      	bpl.n	801d766 <__sflush_r+0x7e>
 801d75c:	1c42      	adds	r2, r0, #1
 801d75e:	d101      	bne.n	801d764 <__sflush_r+0x7c>
 801d760:	682b      	ldr	r3, [r5, #0]
 801d762:	b903      	cbnz	r3, 801d766 <__sflush_r+0x7e>
 801d764:	6560      	str	r0, [r4, #84]	; 0x54
 801d766:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d768:	602f      	str	r7, [r5, #0]
 801d76a:	2900      	cmp	r1, #0
 801d76c:	d0c9      	beq.n	801d702 <__sflush_r+0x1a>
 801d76e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d772:	4299      	cmp	r1, r3
 801d774:	d002      	beq.n	801d77c <__sflush_r+0x94>
 801d776:	4628      	mov	r0, r5
 801d778:	f7ff fc96 	bl	801d0a8 <_free_r>
 801d77c:	2000      	movs	r0, #0
 801d77e:	6360      	str	r0, [r4, #52]	; 0x34
 801d780:	e7c0      	b.n	801d704 <__sflush_r+0x1c>
 801d782:	2301      	movs	r3, #1
 801d784:	4628      	mov	r0, r5
 801d786:	47b0      	blx	r6
 801d788:	1c41      	adds	r1, r0, #1
 801d78a:	d1c8      	bne.n	801d71e <__sflush_r+0x36>
 801d78c:	682b      	ldr	r3, [r5, #0]
 801d78e:	2b00      	cmp	r3, #0
 801d790:	d0c5      	beq.n	801d71e <__sflush_r+0x36>
 801d792:	2b1d      	cmp	r3, #29
 801d794:	d001      	beq.n	801d79a <__sflush_r+0xb2>
 801d796:	2b16      	cmp	r3, #22
 801d798:	d101      	bne.n	801d79e <__sflush_r+0xb6>
 801d79a:	602f      	str	r7, [r5, #0]
 801d79c:	e7b1      	b.n	801d702 <__sflush_r+0x1a>
 801d79e:	89a3      	ldrh	r3, [r4, #12]
 801d7a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d7a4:	81a3      	strh	r3, [r4, #12]
 801d7a6:	e7ad      	b.n	801d704 <__sflush_r+0x1c>
 801d7a8:	690f      	ldr	r7, [r1, #16]
 801d7aa:	2f00      	cmp	r7, #0
 801d7ac:	d0a9      	beq.n	801d702 <__sflush_r+0x1a>
 801d7ae:	0793      	lsls	r3, r2, #30
 801d7b0:	680e      	ldr	r6, [r1, #0]
 801d7b2:	bf08      	it	eq
 801d7b4:	694b      	ldreq	r3, [r1, #20]
 801d7b6:	600f      	str	r7, [r1, #0]
 801d7b8:	bf18      	it	ne
 801d7ba:	2300      	movne	r3, #0
 801d7bc:	eba6 0807 	sub.w	r8, r6, r7
 801d7c0:	608b      	str	r3, [r1, #8]
 801d7c2:	f1b8 0f00 	cmp.w	r8, #0
 801d7c6:	dd9c      	ble.n	801d702 <__sflush_r+0x1a>
 801d7c8:	6a21      	ldr	r1, [r4, #32]
 801d7ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d7cc:	4643      	mov	r3, r8
 801d7ce:	463a      	mov	r2, r7
 801d7d0:	4628      	mov	r0, r5
 801d7d2:	47b0      	blx	r6
 801d7d4:	2800      	cmp	r0, #0
 801d7d6:	dc06      	bgt.n	801d7e6 <__sflush_r+0xfe>
 801d7d8:	89a3      	ldrh	r3, [r4, #12]
 801d7da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d7de:	81a3      	strh	r3, [r4, #12]
 801d7e0:	f04f 30ff 	mov.w	r0, #4294967295
 801d7e4:	e78e      	b.n	801d704 <__sflush_r+0x1c>
 801d7e6:	4407      	add	r7, r0
 801d7e8:	eba8 0800 	sub.w	r8, r8, r0
 801d7ec:	e7e9      	b.n	801d7c2 <__sflush_r+0xda>
 801d7ee:	bf00      	nop
 801d7f0:	dfbffffe 	.word	0xdfbffffe

0801d7f4 <_fflush_r>:
 801d7f4:	b538      	push	{r3, r4, r5, lr}
 801d7f6:	690b      	ldr	r3, [r1, #16]
 801d7f8:	4605      	mov	r5, r0
 801d7fa:	460c      	mov	r4, r1
 801d7fc:	b913      	cbnz	r3, 801d804 <_fflush_r+0x10>
 801d7fe:	2500      	movs	r5, #0
 801d800:	4628      	mov	r0, r5
 801d802:	bd38      	pop	{r3, r4, r5, pc}
 801d804:	b118      	cbz	r0, 801d80e <_fflush_r+0x1a>
 801d806:	6a03      	ldr	r3, [r0, #32]
 801d808:	b90b      	cbnz	r3, 801d80e <_fflush_r+0x1a>
 801d80a:	f7ff fa45 	bl	801cc98 <__sinit>
 801d80e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d812:	2b00      	cmp	r3, #0
 801d814:	d0f3      	beq.n	801d7fe <_fflush_r+0xa>
 801d816:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d818:	07d0      	lsls	r0, r2, #31
 801d81a:	d404      	bmi.n	801d826 <_fflush_r+0x32>
 801d81c:	0599      	lsls	r1, r3, #22
 801d81e:	d402      	bmi.n	801d826 <_fflush_r+0x32>
 801d820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d822:	f7ff fc3e 	bl	801d0a2 <__retarget_lock_acquire_recursive>
 801d826:	4628      	mov	r0, r5
 801d828:	4621      	mov	r1, r4
 801d82a:	f7ff ff5d 	bl	801d6e8 <__sflush_r>
 801d82e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d830:	07da      	lsls	r2, r3, #31
 801d832:	4605      	mov	r5, r0
 801d834:	d4e4      	bmi.n	801d800 <_fflush_r+0xc>
 801d836:	89a3      	ldrh	r3, [r4, #12]
 801d838:	059b      	lsls	r3, r3, #22
 801d83a:	d4e1      	bmi.n	801d800 <_fflush_r+0xc>
 801d83c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d83e:	f7ff fc31 	bl	801d0a4 <__retarget_lock_release_recursive>
 801d842:	e7dd      	b.n	801d800 <_fflush_r+0xc>

0801d844 <__swhatbuf_r>:
 801d844:	b570      	push	{r4, r5, r6, lr}
 801d846:	460c      	mov	r4, r1
 801d848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d84c:	2900      	cmp	r1, #0
 801d84e:	b096      	sub	sp, #88	; 0x58
 801d850:	4615      	mov	r5, r2
 801d852:	461e      	mov	r6, r3
 801d854:	da0d      	bge.n	801d872 <__swhatbuf_r+0x2e>
 801d856:	89a3      	ldrh	r3, [r4, #12]
 801d858:	f013 0f80 	tst.w	r3, #128	; 0x80
 801d85c:	f04f 0100 	mov.w	r1, #0
 801d860:	bf0c      	ite	eq
 801d862:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801d866:	2340      	movne	r3, #64	; 0x40
 801d868:	2000      	movs	r0, #0
 801d86a:	6031      	str	r1, [r6, #0]
 801d86c:	602b      	str	r3, [r5, #0]
 801d86e:	b016      	add	sp, #88	; 0x58
 801d870:	bd70      	pop	{r4, r5, r6, pc}
 801d872:	466a      	mov	r2, sp
 801d874:	f000 f848 	bl	801d908 <_fstat_r>
 801d878:	2800      	cmp	r0, #0
 801d87a:	dbec      	blt.n	801d856 <__swhatbuf_r+0x12>
 801d87c:	9901      	ldr	r1, [sp, #4]
 801d87e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801d882:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801d886:	4259      	negs	r1, r3
 801d888:	4159      	adcs	r1, r3
 801d88a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d88e:	e7eb      	b.n	801d868 <__swhatbuf_r+0x24>

0801d890 <__smakebuf_r>:
 801d890:	898b      	ldrh	r3, [r1, #12]
 801d892:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d894:	079d      	lsls	r5, r3, #30
 801d896:	4606      	mov	r6, r0
 801d898:	460c      	mov	r4, r1
 801d89a:	d507      	bpl.n	801d8ac <__smakebuf_r+0x1c>
 801d89c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d8a0:	6023      	str	r3, [r4, #0]
 801d8a2:	6123      	str	r3, [r4, #16]
 801d8a4:	2301      	movs	r3, #1
 801d8a6:	6163      	str	r3, [r4, #20]
 801d8a8:	b002      	add	sp, #8
 801d8aa:	bd70      	pop	{r4, r5, r6, pc}
 801d8ac:	ab01      	add	r3, sp, #4
 801d8ae:	466a      	mov	r2, sp
 801d8b0:	f7ff ffc8 	bl	801d844 <__swhatbuf_r>
 801d8b4:	9900      	ldr	r1, [sp, #0]
 801d8b6:	4605      	mov	r5, r0
 801d8b8:	4630      	mov	r0, r6
 801d8ba:	f7ff f8d5 	bl	801ca68 <_malloc_r>
 801d8be:	b948      	cbnz	r0, 801d8d4 <__smakebuf_r+0x44>
 801d8c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d8c4:	059a      	lsls	r2, r3, #22
 801d8c6:	d4ef      	bmi.n	801d8a8 <__smakebuf_r+0x18>
 801d8c8:	f023 0303 	bic.w	r3, r3, #3
 801d8cc:	f043 0302 	orr.w	r3, r3, #2
 801d8d0:	81a3      	strh	r3, [r4, #12]
 801d8d2:	e7e3      	b.n	801d89c <__smakebuf_r+0xc>
 801d8d4:	89a3      	ldrh	r3, [r4, #12]
 801d8d6:	6020      	str	r0, [r4, #0]
 801d8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d8dc:	81a3      	strh	r3, [r4, #12]
 801d8de:	9b00      	ldr	r3, [sp, #0]
 801d8e0:	6163      	str	r3, [r4, #20]
 801d8e2:	9b01      	ldr	r3, [sp, #4]
 801d8e4:	6120      	str	r0, [r4, #16]
 801d8e6:	b15b      	cbz	r3, 801d900 <__smakebuf_r+0x70>
 801d8e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d8ec:	4630      	mov	r0, r6
 801d8ee:	f000 f81d 	bl	801d92c <_isatty_r>
 801d8f2:	b128      	cbz	r0, 801d900 <__smakebuf_r+0x70>
 801d8f4:	89a3      	ldrh	r3, [r4, #12]
 801d8f6:	f023 0303 	bic.w	r3, r3, #3
 801d8fa:	f043 0301 	orr.w	r3, r3, #1
 801d8fe:	81a3      	strh	r3, [r4, #12]
 801d900:	89a3      	ldrh	r3, [r4, #12]
 801d902:	431d      	orrs	r5, r3
 801d904:	81a5      	strh	r5, [r4, #12]
 801d906:	e7cf      	b.n	801d8a8 <__smakebuf_r+0x18>

0801d908 <_fstat_r>:
 801d908:	b538      	push	{r3, r4, r5, lr}
 801d90a:	4d07      	ldr	r5, [pc, #28]	; (801d928 <_fstat_r+0x20>)
 801d90c:	2300      	movs	r3, #0
 801d90e:	4604      	mov	r4, r0
 801d910:	4608      	mov	r0, r1
 801d912:	4611      	mov	r1, r2
 801d914:	602b      	str	r3, [r5, #0]
 801d916:	f7e4 ffdc 	bl	80028d2 <_fstat>
 801d91a:	1c43      	adds	r3, r0, #1
 801d91c:	d102      	bne.n	801d924 <_fstat_r+0x1c>
 801d91e:	682b      	ldr	r3, [r5, #0]
 801d920:	b103      	cbz	r3, 801d924 <_fstat_r+0x1c>
 801d922:	6023      	str	r3, [r4, #0]
 801d924:	bd38      	pop	{r3, r4, r5, pc}
 801d926:	bf00      	nop
 801d928:	24004508 	.word	0x24004508

0801d92c <_isatty_r>:
 801d92c:	b538      	push	{r3, r4, r5, lr}
 801d92e:	4d06      	ldr	r5, [pc, #24]	; (801d948 <_isatty_r+0x1c>)
 801d930:	2300      	movs	r3, #0
 801d932:	4604      	mov	r4, r0
 801d934:	4608      	mov	r0, r1
 801d936:	602b      	str	r3, [r5, #0]
 801d938:	f7e4 ffdb 	bl	80028f2 <_isatty>
 801d93c:	1c43      	adds	r3, r0, #1
 801d93e:	d102      	bne.n	801d946 <_isatty_r+0x1a>
 801d940:	682b      	ldr	r3, [r5, #0]
 801d942:	b103      	cbz	r3, 801d946 <_isatty_r+0x1a>
 801d944:	6023      	str	r3, [r4, #0]
 801d946:	bd38      	pop	{r3, r4, r5, pc}
 801d948:	24004508 	.word	0x24004508

0801d94c <_init>:
 801d94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d94e:	bf00      	nop
 801d950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d952:	bc08      	pop	{r3}
 801d954:	469e      	mov	lr, r3
 801d956:	4770      	bx	lr

0801d958 <_fini>:
 801d958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d95a:	bf00      	nop
 801d95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d95e:	bc08      	pop	{r3}
 801d960:	469e      	mov	lr, r3
 801d962:	4770      	bx	lr
