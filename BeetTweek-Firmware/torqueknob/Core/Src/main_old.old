/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "math.h"
#include "MotorControl.h"
#include "AS5048.h"
#include "RollingFloatBuffer.h"
#include "ProbeTools.h"
#include "PIDControl.h"
#include "us_delay.h"
#include "CircularBuffer.h"
#include "SerialCommands.h"
#include <cstring>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define FLASH_USER_START_ADDR   ADDR_FLASH_PAGE_16   /* Start @ of user Flash area */
#define FLASH_USER_END_ADDR     ADDR_FLASH_PAGE_255 + FLASH_PAGE_SIZE   /* End @ of user Flash area */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
DAC_HandleTypeDef hdac;

SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
#define UART3_RX_BuffSize 32
static CircularBuffer<uint8_t> UART3_RX_Buffer(UART3_RX_BuffSize);


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI2_Init(void);
static void MX_TIM3_Init(void);
static void MX_SPI3_Init(void);
static void MX_DAC_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM8_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

extern "C" {
	void HandleUART3RXInterupt();
}
HAL_StatusTypeDef WaitReadUART3RXByte(uint8_t* data, int size, int timeout);
HAL_StatusTypeDef HandleSerialAPI(UART_HandleTypeDef* huart);



/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int msecTime = 0;
float motorAngle = 0.0f;


RollingFloatBuffer angleBuffer;

RollingFloatBuffer current1Buffer;
RollingFloatBuffer current2Buffer;
RollingFloatBuffer current3Buffer;

typedef enum ControlScheme {
	ControlScheme_Free = 0,
	ControlScheme_PhysicallyModelled_Direct,//simulate drivestrength(Torque) as a direct computation of parameters.
	ControlScheme_SpeedTarget,    //use speed as target. controls drive strength as function of speed error
	ControlScheme_AngleTarget,        //use angle as target - controls speed loop to get there
	ControlScheme_AngleTarget_Direct, //use angle as target. controls drive strength as function of angle error
	ControlScheme_AngleTarget_Phase,   //use angle as target. controls drive phase as function of angle error
	ControlScheme_AngleTarget_PhaseDirectHybrid,//control phase to get angle target - but use drivestrength to get rotation in correct multiple of rotor fluxangle.
	ControlScheme_AngleTarget_PhaseIncremental  //control phase to get angle target - adjust phase by constant amount (no pid)
} ControlScheme;

FloatViewWindow speedFltViewWindow;

PIDState speedToDrivePID;
PIDState angleToSpeedPID;
PIDState angleToDrivePID;
PIDState angleToPhaseAnglePID;
PIDState angleFollowPID;


PIDState speedInputFilterPID;


AS5048_Device motorEncoderDev;
MotorDevice motorDevA;
MotorDevice motorDevB;


volatile uint32_t timerPeriodCount = 0;
volatile uint32_t timerPeriodLastCCR = 0;
volatile float rotationSpeedFiltered = 0.0f;
volatile float rotationAccelFiltered = 0.0f;
volatile float speedTarget = 0.01f;
volatile float angleTarget = 0.0f;
volatile float angleError = 0.0f;
volatile float angleDecrementor = 1.0f;
volatile float driveStrength = 0.0f;//related to torque
volatile float driveAngle = 0.0f;
volatile ControlScheme curControlScheme = ControlScheme_PhysicallyModelled_Direct;
volatile float flywheelRotationalSpeed = 0.0f;
volatile float flywheelAngle = 0.0f;
volatile int enableAntiCogg = 1;

//metrics
volatile float smallestAngleErrorPosDir = 999.0f;
volatile float smallestAngleErrorNegDir = 999.0f;
volatile float smallestAngleError = 999.0f;
volatile float bestPositiveDrStr = -1.0f;
volatile float bestNegativeDrStr = 1.0f;



volatile float coggAccelLookup[720];
volatile int coggAccelLookupSampleCount[720];






void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

	if(htim == &htim2)
	{

		//use for oscope debugging
		//HAL_GPIO_WritePin(SAMPLING_SYNC_GPIO_Port, SAMPLING_SYNC_Pin, GPIO_PIN_SET);

		//HAL_GPIO_WritePin(TIMING_TEST_GPIO_Port, TIMING_TEST_Pin, GPIO_PIN_SET);
		//capture the current time from global counter
		uint32_t periodCCRS = DWT->CYCCNT - timerPeriodLastCCR;
		timerPeriodLastCCR = DWT->CYCCNT;

		//capture motor angle to rolling buffer
		float motorAngle = AS5048_SPI_ReadAnglef(&motorEncoderDev);
		MotorAngleStateUpdate( &motorDevA.angleState, motorAngle);



		//Determine Rotor Flux Angle
		float rotorFluxAngle = motorAngle*12*M_TWOPI;
		rotorFluxAngle = fmod(rotorFluxAngle, M_TWOPI) - 0.000787f;


		if(curControlScheme != ControlScheme_AngleTarget_PhaseIncremental)
			driveAngle = rotorFluxAngle;


		//compute derivatives if needed
		if(curControlScheme == ControlScheme_AngleTarget || curControlScheme == ControlScheme_SpeedTarget || curControlScheme == ControlScheme_PhysicallyModelled_Direct)
		{
			float lastSpeed = rotationSpeedFiltered;
			rotationSpeedFiltered += PIControl(MotorAngleStateGetAngleDeltaf(&motorDevA.angleState), rotationSpeedFiltered, &speedInputFilterPID);
			rotationAccelFiltered += PIControl(rotationSpeedFiltered - lastSpeed, rotationAccelFiltered, &speedInputFilterPID);
		}
		angleError = angleTarget - MotorAngleStateGetCurrentAccumulatedAnglef(&motorDevA.angleState);





		//update PI(D) control based on ControlScheme
		//angleTarget += PIControl(MotorAngleStateGetCurrentAccumulatedAnglef(&motorAngleState), angleTarget, &angleFollowPID);


		if(curControlScheme == ControlScheme_PhysicallyModelled_Direct)
		{
			float inertia = 10000.0f;
			float springConstant = 2.0f;
			float flywheelEngagefrictionFactor = 0.001f;

			driveStrength = -inertia*(rotationSpeedFiltered - flywheelRotationalSpeed) - springConstant*(MotorAngleStateGetCurrentAccumulatedAnglef(&motorDevA.angleState) - flywheelAngle);


			flywheelRotationalSpeed += (rotationSpeedFiltered - flywheelRotationalSpeed)*flywheelEngagefrictionFactor;

			flywheelAngle += flywheelRotationalSpeed;
		}

		if(curControlScheme == ControlScheme_AngleTarget)
		{
			speedTarget = PIControl(angleTarget, MotorAngleStateGetCurrentAccumulatedAnglef(&motorDevA.angleState), &angleToSpeedPID);
		}

		if(curControlScheme == ControlScheme_AngleTarget || curControlScheme == ControlScheme_SpeedTarget)
			driveStrength = PIControl(speedTarget, rotationSpeedFiltered, &speedToDrivePID);
		else if(curControlScheme == ControlScheme_AngleTarget_Direct || curControlScheme == ControlScheme_AngleTarget_PhaseDirectHybrid)
			driveStrength = PIControl(angleTarget, MotorAngleStateGetCurrentAccumulatedAnglef(&motorDevA.angleState), &angleToDrivePID);
		else if(curControlScheme == ControlScheme_AngleTarget_Phase || curControlScheme == ControlScheme_AngleTarget_PhaseDirectHybrid || curControlScheme == ControlScheme_AngleTarget_PhaseIncremental)
		{
			//switch to phase control

			if(curControlScheme == ControlScheme_AngleTarget_PhaseDirectHybrid)
			{
				if((fabs(angleError)) < 1.0f/(7*M_TWOPI) || curControlScheme == ControlScheme_AngleTarget_Phase)
				{
	//				driveAngle = PIControl(angleTarget,
	//						MotorAngleStateGetCurrentAccumulatedAnglef(&motorAngleState),
	//						&angleToPhaseAnglePID);

					if(angleError < 0.0f)
					{
						driveAngle += 0.1f;
					}
					else
					{
						driveAngle -= 0.1f;
					}


					driveStrength = 1.0;
				}
			}
			else if(curControlScheme == ControlScheme_AngleTarget_PhaseIncremental)
			{

				if(angleError < 0.02)
					angleDecrementor *= 0.999f;
				else
					angleDecrementor = 1.0f;

				if(angleError < 0.0f)
				{
					driveAngle -= 0.003f*angleDecrementor;
				}
				else
				{
					driveAngle += 0.003f*angleDecrementor;
				}
				driveStrength = 1.0;
			}
		}


		if(fabs(rotationSpeedFiltered) < 0.00001f )
		{
			if(fabs(angleError) < smallestAngleErrorPosDir || fabs(angleError) < smallestAngleErrorNegDir)
			{

				if(driveStrength > 0.0f){
					bestPositiveDrStr = driveStrength;
					smallestAngleErrorPosDir = fabs(angleError);
				}
				else
				{
					bestNegativeDrStr = driveStrength;
					smallestAngleErrorNegDir = fabs(angleError);
				}




				if(smallestAngleErrorPosDir < smallestAngleError)
					smallestAngleError = smallestAngleErrorPosDir;

				if(smallestAngleErrorNegDir < smallestAngleError)
					smallestAngleError = smallestAngleErrorNegDir;

			}
		}






		//also write pulse
		//if(motorAngle < 0.01f)
		//	HAL_GPIO_WritePin(TIMING_TEST_GPIO_Port, TIMING_TEST_Pin, GPIO_PIN_SET);
		//else
		//	HAL_GPIO_WritePin(TIMING_TEST_GPIO_Port, TIMING_TEST_Pin, GPIO_PIN_RESET);


		//HAL_ADC_Start(&hadc4);
		//HAL_ADC_PollForConversion(&hadc4, 1);
		//float potread = HAL_ADC_GetValue(&hadc4)/4095.0f;
		//speedTarget = 0.05f*potread;

		const float offset = M_PI_2;

		float coggTorque = 0.0f;

		if(enableAntiCogg)
			coggTorque = AntiCoggLevel(motorAngle)*0.25f;


		//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (FloatViewWindowUpdate(coggTorque, &speedFltViewWindow)*4095.0f));
	    //HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);


		float totalStrength = driveStrength + coggTorque;



		if(curControlScheme != ControlScheme_AngleTarget_PhaseIncremental)
		{
			if(totalStrength > 0.0f)
			{
				SetMotorPWMDrives(&motorDevA, totalStrength, driveAngle + M_PI_2 + offset);
				//SetMotorPWMDrives(&motorDevB, totalStrength, driveAngle + M_PI_2 + offset + .1309);
			}
			else
			{
				SetMotorPWMDrives(&motorDevA,fabs(totalStrength), driveAngle - M_PI_2 + offset);
				//SetMotorPWMDrives(&motorDevB, totalStrength, driveAngle + M_PI_2 + offset + .1309);
			}
		}
		else
		{
			if(totalStrength > 0.0f)
				SetMotorPWMDrives(&motorDevA, totalStrength, driveAngle );
			else
				SetMotorPWMDrives(&motorDevA, fabs(totalStrength), driveAngle);

		}


		//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, potread*4095.0f);
		//HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);




		//HAL_GPIO_WritePin(TIMING_TEST_GPIO_Port, TIMING_TEST_Pin, GPIO_PIN_RESET);

		timerPeriodCount++;
		//HAL_GPIO_WritePin(SAMPLING_SYNC_GPIO_Port, SAMPLING_SYNC_Pin, GPIO_PIN_RESET);

	}
}


/*
void PositionTorqueSampleRoutine()
{

for(int dir = 0; dir < 2; dir++)
{
	  if(dir == 0){
		  printf("Performing Forward Position AntiCogg:\n\r");
	  }
	  else
	  {
		  printf("Performing Backwards Position AntiCogg:\n\r");
	  }

	  printf("angleTarget,bestPositiveDrStr, bestNegativeDrStr, smallestAngleErrorPosDir, smallestAngleErrorNegDir, smallestAngleError\n\r");


	  float angleTargetStart;
	  float angleTargetStop;
	  float angleTargetInc;
	  float angleTargetIncMag = 0.5/360.0f;
	  if(dir == 0)
	  {
		  angleTargetStart = 0.0f;
		  angleTargetStop = 1.0f;
		  angleTargetInc = angleTargetIncMag;
	  }
	  else
	  {
		  angleTargetStart = 1.0f;
		  angleTargetStop = 0.0f;
		  angleTargetInc = -angleTargetIncMag;
	  }

	  for(float angleTargetL = angleTargetStart; angleTargetL <= angleTargetStop; angleTargetL+=angleTargetInc)
	  {
		  //go to angle before the target to ensure the motor spins in the right direction initially.

		  if(dir == 0)
			  angleTarget = angleTargetL - 0.01f;
		  else
			  angleTarget = angleTargetL + 0.01f;

		  //wait a little bit.
		  HAL_Delay(100);


		  //reset interupt metrics
		  smallestAngleError = 999.0f;
		  smallestAngleErrorNegDir = 999.0f;
		  smallestAngleErrorPosDir = 999.0f;
		  bestNegativeDrStr = 1.0f;
		  bestPositiveDrStr = -1.0f;

		  //command motor to actual target
		  angleTarget = angleTargetL;


		  //wait for dynamics to occur (collect bestPositiveDrStr and bestNegativeDrStr)
		  for(int i = 0; i < 1000; i++)
		  {
			  //printf("Angle Error: %f\n\r", angleError);
			  HAL_Delay(10);
		  }

		  //take the reading.
		  if(dir == 0 && bestPositiveDrStr > 0.0f || dir == 1 && bestNegativeDrStr < 0.0f)
		  {
			  printf("%e, %e, %e, %e, %e, %e\n\r", angleTarget,
					  bestPositiveDrStr,
					  bestNegativeDrStr,
					  smallestAngleErrorPosDir,
					  smallestAngleErrorNegDir,
					  smallestAngleError);
		  }


	  }

}


}
*/


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */


  MotorDeviceInit(&motorDevA, DRV8313_EN1_GPIO_Port, DRV8313_EN1_Pin,
		  DRV8313_EN2_GPIO_Port,   DRV8313_EN2_Pin,
		  DRV8313_EN3_GPIO_Port,   DRV8313_EN3_Pin,
		  DRV8313_A_IN1_GPIO_Port, DRV8313_A_IN1_Pin,
		  DRV8313_A_IN2_GPIO_Port, DRV8313_A_IN2_Pin,
		  DRV8313_A_IN3_GPIO_Port, DRV8313_A_IN3_Pin,
		  &htim3,
		  DRV8313_A_nReset_GPIO_Port, DRV8313_A_nReset_Pin,
		  100,
		  DRV8313_A_nFault_GPIO_Port, DRV8313_A_nFault_Pin);



  MotorAngleStateInit(&motorDevA.angleState);



  MotorDeviceInit(&motorDevB, DRV8313_EN1_GPIO_Port, DRV8313_EN1_Pin,
		  DRV8313_EN2_GPIO_Port,   DRV8313_EN2_Pin,
		  DRV8313_EN3_GPIO_Port,   DRV8313_EN3_Pin,
		  DRV8313_B_IN1_GPIO_Port, DRV8313_B_IN1_Pin,
		  DRV8313_B_IN2_GPIO_Port, DRV8313_B_IN2_Pin,
		  DRV8313_B_IN3_GPIO_Port, DRV8313_B_IN3_Pin,
		  &htim4,
		  DRV8313_B_nReset_GPIO_Port, DRV8313_B_nReset_Pin,
		  100,
		  DRV8313_B_nFault_GPIO_Port, DRV8313_B_nFault_Pin);



  MotorAngleStateInit(&motorDevB.angleState);




  AS5048DeviceInit(&motorEncoderDev, &hspi2, AS5048_CS_GPIO_Port, AS5048_CS_Pin);



  RollingFloatBufferInit(&angleBuffer);
  RollingFloatBufferInit(&current1Buffer);
  RollingFloatBufferInit(&current2Buffer);
  RollingFloatBufferInit(&current3Buffer);

//
  RollingFloatBuffer* buffsToPrint[4];
  buffsToPrint[0] = &angleBuffer;
  buffsToPrint[1] = &current1Buffer;
  buffsToPrint[2] = &current2Buffer;
  buffsToPrint[3] = &current3Buffer;



  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI2_Init();
  MX_TIM3_Init();
  MX_SPI3_Init();
  MX_DAC_Init();
  MX_TIM4_Init();
  MX_TIM5_Init();
  MX_TIM8_Init();
  MX_USART3_UART_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  InitUSDelay();



  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(TIM2_IRQn);



  ResetMotorChip(&motorDevA);
  ResetMotorChip(&motorDevB);


  SetMotorEnable(&motorDevA, 1, GPIO_PIN_SET);
  SetMotorEnable(&motorDevA, 2, GPIO_PIN_SET);
  SetMotorEnable(&motorDevA, 3, GPIO_PIN_SET);

  SetMotorEnable(&motorDevB, 1, GPIO_PIN_SET);
  SetMotorEnable(&motorDevB, 2, GPIO_PIN_SET);
  SetMotorEnable(&motorDevB, 3, GPIO_PIN_SET);



  FloatViewWindowInit(&speedFltViewWindow);

  PIDStateInit(&speedToDrivePID);
  PIDStateInit(&angleToDrivePID);
  PIDStateInit(&angleToSpeedPID);
  PIDStateInit(&speedInputFilterPID);
  PIDStateInit(&angleToPhaseAnglePID);
  PIDStateInit(&angleFollowPID);


  speedInputFilterPID.IGain = 0.0001f;
  speedInputFilterPID.PGain = 0.1f;

  speedToDrivePID.PGain = 0.1f;
  speedToDrivePID.IGain = 0.0f;
  speedToDrivePID.IClampHigh = 10;
  speedToDrivePID.IClampLow = 10;
  speedToDrivePID.IClampHighLevel = 1000.0f;
  speedToDrivePID.IClampLowLevel = -1000.0f;


  angleToSpeedPID.PGain = 0.01f;
  angleToSpeedPID.IGain = 0.0f;

  angleToDrivePID.PGain = 10.0f;
  angleToDrivePID.IGain = 0.002f;
  //angleToDrivePID.errorPadding = 0.005f;

  angleToPhaseAnglePID.PGain = 100.0f;
  angleToPhaseAnglePID.IGain = 0.01f;

  angleFollowPID.PGain = 0.01f;
  angleFollowPID.IGain = 0.0f;


  float speed = 0.0f;
  uint64_t loopCnt = 0;


  int entryDir = 1;
  int samplesPerEntry = 10;
  int sampleIdx = samplesPerEntry - 1;



  float thetaTest = 0.0f;

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  //float motorAngle = AS5048_SPI_ReadAnglef(&motorEncoderDev);
	  //printf("Angle: %f\n\r", motorAngle);


	  MotorErrorState chipStateA = ReadMotorErrorState(&motorDevA);
	  MotorErrorState chipStateB = ReadMotorErrorState(&motorDevB);
	  if(chipStateA == MotorErrorState_Fault || chipStateB == MotorErrorState_Fault)
	  {
		  //printf("chip in fault state!");
//		  SetMotorEnable(&motorDevA, 1, 0);
//		  SetMotorEnable(&motorDevA, 2, 0);
//		  SetMotorEnable(&motorDevA, 3, 0);
//
//		  SetMotorEnable(&motorDevB, 1, 0);
//		  SetMotorEnable(&motorDevB, 2, 0);
//		  SetMotorEnable(&motorDevB, 3, 0);

		  //HAL_Delay(100);

		  //ResetMotorChip(&motorDevA);
		  //ResetMotorChip(&motorDevB);
	  }



	  thetaTest += 0.0001f;
	  if(thetaTest > 100.0f)
		  thetaTest = 0.0f;

	  //SetMotorPWMDrives(&motorDevA, 1.0f, thetaTest);
	  //SetMotorPWMDrives(&motorDevB, 1.0f, thetaTest + 1.0472f); // 1/6 of 360 phase offset. A---A'  B   B'  C   C'  A


	  //HAL_GPIO_TogglePin(Board_Status_LED_GPIO_Port, Board_Status_LED_Pin);
	  //HAL_Delay(1000);


	  HAL_GPIO_TogglePin(Debug_Output1_GPIO_Port, Debug_Output1_Pin);
	  HAL_Delay(1);



	  //uint16_t count = __HAL_TIM_GET_COUNTER(&htim1);
	  //printf("Count: %d\n\r", count);


	  //HAL_Delay(100);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
  if (HAL_DAC_Init(&hdac) != HAL_OK)
  {
    Error_Handler();
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
  hspi3.Init.Mode = SPI_MODE_SLAVE;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 32;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1600;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */


 if( HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 {
	 Error_Handler();
 }

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 4096;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /*##-3- Start PWM signals generation #######################################*/
  /* Start channel 1 */
  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
  {
	/* PWM Generation Error */
	Error_Handler();
  }
  /* Start channel 2 */
  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
  {
	/* PWM Generation Error */
	Error_Handler();
  }
  /* Start channel 3 */
  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
  {
	/* PWM generation Error */
	Error_Handler();
  }
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 4096;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /*##-3- Start PWM signals generation #######################################*/
    /* Start channel 1 */
    if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
    {
  	/* PWM Generation Error */
  	Error_Handler();
    }
    /* Start channel 2 */
    if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) != HAL_OK)
    {
  	/* PWM Generation Error */
  	Error_Handler();
    }
    /* Start channel 3 */
    if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3) != HAL_OK)
    {
  	/* PWM generation Error */
  	Error_Handler();
    }
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);

}

/**
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 0;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 0;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}

/**
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
  htim8.Init.Prescaler = 0;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim8.Init.Period = 0;
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim8.Init.RepetitionCounter = 0;
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAP_SENSE_CHARGE_Pin|DRV8313_A_nReset_Pin|DRV8313_B_nReset_Pin|Board_Status_LED_Pin 
                          |Debug_Output1_Pin|DRV8313_EN1_Pin|DRV8313_EN2_Pin|DRV8313_EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV8313_B_nSleep_GPIO_Port, DRV8313_B_nSleep_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV8313_A_nSleep_GPIO_Port, DRV8313_A_nSleep_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AS5048_CS_GPIO_Port, AS5048_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CAP_SENSE_CHARGE_Pin DRV8313_A_nReset_Pin DRV8313_B_nReset_Pin Board_Status_LED_Pin 
                           Debug_Output1_Pin DRV8313_EN1_Pin DRV8313_EN2_Pin DRV8313_EN3_Pin */
  GPIO_InitStruct.Pin = CAP_SENSE_CHARGE_Pin|DRV8313_A_nReset_Pin|DRV8313_B_nReset_Pin|Board_Status_LED_Pin 
                          |Debug_Output1_Pin|DRV8313_EN1_Pin|DRV8313_EN2_Pin|DRV8313_EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : CAP_SENSE_TRIG_Pin DRV8313_A_nFault_Pin */
  GPIO_InitStruct.Pin = CAP_SENSE_TRIG_Pin|DRV8313_A_nFault_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : DRV8313_B_nFault_Pin */
  GPIO_InitStruct.Pin = DRV8313_B_nFault_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DRV8313_B_nFault_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : DRV8313_B_nSleep_Pin */
  GPIO_InitStruct.Pin = DRV8313_B_nSleep_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DRV8313_B_nSleep_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : DRV8313_A_nSleep_Pin */
  GPIO_InitStruct.Pin = DRV8313_A_nSleep_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DRV8313_A_nSleep_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : AS5048_CS_Pin */
  GPIO_InitStruct.Pin = AS5048_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(AS5048_CS_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

void HandleUART3RXInterupt()
{

	//read the byte into the buffer
	UART3_RX_Buffer.AddNewData((uint8_t)(huart3.Instance->DR & 0x000000FF));

}




HAL_StatusTypeDef WaitReadUART3RXByte(uint8_t* data, int size, int timeout)
{
	int tickStart = HAL_GetTick();

	while((HAL_GetTick() < (tickStart + timeout)) && UART3_RX_Buffer.HeadLeadAmount() < size)
	{
		//wait
	}

	if(UART3_RX_Buffer.HeadLeadAmount() < size)
		return HAL_TIMEOUT;

	//now there should be size bytes in the rx buffer.  copy into data now and zero out again.
	for( int i = 0; i < size; i++)
	{
		UART3_RX_Buffer.ReadOne(&data[i]);
	}

	return HAL_OK;
}


HAL_StatusTypeDef HandleSerialAPI(UART_HandleTypeDef* huart)
{
	  const int maxCommandLength = 10;

	  int byteIndex = 0;
	  int moreToRead = 0;
	  const int defaultTimeoutMS = 10000;
	  HAL_StatusTypeDef status;
	  uint8_t byte;


	  while(UART3_RX_Buffer.HeadLeadAmount())
	  {


		  HAL_StatusTypeDef status = WaitReadUART3RXByte(&byte, 1, defaultTimeoutMS);
		  if(status == HAL_TIMEOUT)
			  return HAL_TIMEOUT;




		  uint8_t commandTypeCode = byte;
		  if(commandTypeCode == CommandTypeCode_Action)
		  {
			  //its a command to do something.
			  uint8_t messageId = byte;
			  byte = CommandAction_NONE;
			  status = WaitReadUART3RXByte(&byte, 1, defaultTimeoutMS);
			  if(status == HAL_TIMEOUT)
				  return HAL_TIMEOUT;

			  uint8_t actionCode = byte;
			  if(actionCode == CommandAction_ToggleStatusLed)
			  {
				  //toggle led
				  HAL_GPIO_TogglePin(Board_Status_LED_GPIO_Port, Board_Status_LED_Pin);
			  }
		  }
		  else if (commandTypeCode == CommandTypeCode_Request)
		  {
			  //its a request
			  uint8_t messageId = byte;
			  byte = CommandRequest_NONE;
			  status = WaitReadUART3RXByte(&byte, 1, defaultTimeoutMS);
			  if(status == HAL_TIMEOUT)
				  return HAL_TIMEOUT;

			  uint8_t requestCode = byte;
			  if(requestCode == CommandRequest_ModelString)
			  {
				  const char* modelString = "MotorBoard";
				  uint8_t responseSize = strlen(modelString);

				  status = HAL_UART_Transmit(huart, &responseSize, 1, defaultTimeoutMS);
				  if(status == HAL_TIMEOUT)
					  return HAL_TIMEOUT;
				  status = HAL_UART_Transmit(huart, (uint8_t*) modelString, responseSize, defaultTimeoutMS);
				  if(status == HAL_TIMEOUT)
					  return HAL_TIMEOUT;
			  }
			  else if(requestCode == CommandRequest_InitialConnectionCode)
			  {
				  uint8_t responseSize = strlen(INITIAL_CONNECTION_CODE);

				  status = HAL_UART_Transmit(huart, &responseSize, 1, defaultTimeoutMS);
				  if(status == HAL_TIMEOUT)
					  return HAL_TIMEOUT;
				  status = HAL_UART_Transmit(huart, (uint8_t*) INITIAL_CONNECTION_CODE, responseSize, defaultTimeoutMS);
				  if(status == HAL_TIMEOUT)
					  return HAL_TIMEOUT;
			  }
		  }

	  }
	  return HAL_OK;
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
